
Project_7508_LwIP_LCD_EM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015654  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000444ac  08015824  08015824  00025824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08059cd0  08059cd0  000700ac  2**0
                  CONTENTS
  4 .ARM          00000008  08059cd0  08059cd0  00069cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08059cd8  08059cd8  000700ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08059cd8  08059cd8  00069cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08059cdc  08059cdc  00069cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08059ce0  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007550  200000ac  08059d8c  000700ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200075fc  08059d8c  000775fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000700ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e8e8  00000000  00000000  000700dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007880  00000000  00000000  000ae9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002058  00000000  00000000  000b6248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f40  00000000  00000000  000b82a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037117  00000000  00000000  000ba1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000386bb  00000000  00000000  000f12f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111fc3  00000000  00000000  001299b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0023b975  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f74  00000000  00000000  0023b9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801580c 	.word	0x0801580c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b0 	.word	0x200000b0
 800020c:	0801580c 	.word	0x0801580c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <echo_close>:
#include <tcp.h>

char tcp_buffer[1024];

static void echo_close (struct tcp_pcb *pcb )
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    tcp_arg(pcb, NULL);
 80005c0:	2100      	movs	r1, #0
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f00c f96c 	bl	800c8a0 <tcp_arg>
    tcp_sent(pcb, NULL);
 80005c8:	2100      	movs	r1, #0
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f00c f99c 	bl	800c908 <tcp_sent>
    tcp_recv(pcb, NULL);
 80005d0:	2100      	movs	r1, #0
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f00c f976 	bl	800c8c4 <tcp_recv>
    tcp_close(pcb);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f00a fea7 	bl	800b32c <tcp_close>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <echo_recv>:

static err_t echo_recv( void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
 80005f4:	70fb      	strb	r3, [r7, #3]
    int i;
    int len;
    char *pc;

    if ( err == ERR_OK && p != NULL )
 80005f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d142      	bne.n	8000684 <echo_recv+0x9c>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d03f      	beq.n	8000684 <echo_recv+0x9c>
    {
        tcp_recved( pcb, p->tot_len );  //mogelijke fout
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	891b      	ldrh	r3, [r3, #8]
 8000608:	4619      	mov	r1, r3
 800060a:	68b8      	ldr	r0, [r7, #8]
 800060c:	f00b f952 	bl	800b8b4 <tcp_recved>
        pc = (char *)p->payload;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	617b      	str	r3, [r7, #20]
        len =p->tot_len;				//mogelijke fout
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	891b      	ldrh	r3, [r3, #8]
 800061a:	61bb      	str	r3, [r7, #24]

        for( i=0; i<len; i++ )
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]
 8000620:	e00b      	b.n	800063a <echo_recv+0x52>
        {
            tcp_buffer[i] = pc[i];
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	697a      	ldr	r2, [r7, #20]
 8000626:	4413      	add	r3, r2
 8000628:	7819      	ldrb	r1, [r3, #0]
 800062a:	4a1f      	ldr	r2, [pc, #124]	; (80006a8 <echo_recv+0xc0>)
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	4413      	add	r3, r2
 8000630:	460a      	mov	r2, r1
 8000632:	701a      	strb	r2, [r3, #0]
        for( i=0; i<len; i++ )
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	3301      	adds	r3, #1
 8000638:	61fb      	str	r3, [r7, #28]
 800063a:	69fa      	ldr	r2, [r7, #28]
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	429a      	cmp	r2, r3
 8000640:	dbef      	blt.n	8000622 <echo_recv+0x3a>
        }

        if( tcp_buffer[0] == 'X' )
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <echo_recv+0xc0>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b58      	cmp	r3, #88	; 0x58
 8000648:	d102      	bne.n	8000650 <echo_recv+0x68>
            echo_close( pcb );
 800064a:	68b8      	ldr	r0, [r7, #8]
 800064c:	f7ff ffb4 	bl	80005b8 <echo_close>

        pbuf_free( p );
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f00a f863 	bl	800a71c <pbuf_free>

        if( len > tcp_sndbuf( pcb ) )
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800065c:	461a      	mov	r2, r3
 800065e:	69bb      	ldr	r3, [r7, #24]
 8000660:	4293      	cmp	r3, r2
 8000662:	dd03      	ble.n	800066c <echo_recv+0x84>
            len= tcp_sndbuf( pcb );
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800066a:	61bb      	str	r3, [r7, #24]

        tcp_write( pcb, tcp_buffer, len, 0 );
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	b29a      	uxth	r2, r3
 8000670:	2300      	movs	r3, #0
 8000672:	490d      	ldr	r1, [pc, #52]	; (80006a8 <echo_recv+0xc0>)
 8000674:	68b8      	ldr	r0, [r7, #8]
 8000676:	f00f f851 	bl	800f71c <tcp_write>
        tcp_sent( pcb, NULL );
 800067a:	2100      	movs	r1, #0
 800067c:	68b8      	ldr	r0, [r7, #8]
 800067e:	f00c f943 	bl	800c908 <tcp_sent>
 8000682:	e002      	b.n	800068a <echo_recv+0xa2>
    }
    else
    {
        pbuf_free( p );
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f00a f849 	bl	800a71c <pbuf_free>
    }

    if( err == ERR_OK && p == NULL )
 800068a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d105      	bne.n	800069e <echo_recv+0xb6>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d102      	bne.n	800069e <echo_recv+0xb6>
    {
        echo_close( pcb );
 8000698:	68b8      	ldr	r0, [r7, #8]
 800069a:	f7ff ff8d 	bl	80005b8 <echo_close>
    }

    return ERR_OK;
 800069e:	2300      	movs	r3, #0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200008c8 	.word	0x200008c8

080006ac <echo_accept>:

static err_t echo_accept(void *arg, struct tcp_pcb *pcb, err_t err )
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	4613      	mov	r3, r2
 80006b8:	71fb      	strb	r3, [r7, #7]
    LWIP_UNUSED_ARG( arg );
    LWIP_UNUSED_ARG( err );
    tcp_setprio( pcb, TCP_PRIO_MIN );
 80006ba:	2101      	movs	r1, #1
 80006bc:	68b8      	ldr	r0, [r7, #8]
 80006be:	f00b fef5 	bl	800c4ac <tcp_setprio>
    tcp_recv( pcb, echo_recv );
 80006c2:	490e      	ldr	r1, [pc, #56]	; (80006fc <echo_accept+0x50>)
 80006c4:	68b8      	ldr	r0, [r7, #8]
 80006c6:	f00c f8fd 	bl	800c8c4 <tcp_recv>
    tcp_err( pcb, NULL );
 80006ca:	2100      	movs	r1, #0
 80006cc:	68b8      	ldr	r0, [r7, #8]
 80006ce:	f00c f93d 	bl	800c94c <tcp_err>
    tcp_poll( pcb, NULL, 4 );
 80006d2:	2204      	movs	r2, #4
 80006d4:	2100      	movs	r1, #0
 80006d6:	68b8      	ldr	r0, [r7, #8]
 80006d8:	f00c f972 	bl	800c9c0 <tcp_poll>
    tcp_write( pcb, "    Welcom bij de echo server demo\r\n"
 80006dc:	2300      	movs	r3, #0
 80006de:	2276      	movs	r2, #118	; 0x76
 80006e0:	4907      	ldr	r1, [pc, #28]	; (8000700 <echo_accept+0x54>)
 80006e2:	68b8      	ldr	r0, [r7, #8]
 80006e4:	f00f f81a 	bl	800f71c <tcp_write>
"(Ik stuur alles terug! X om te sluiten)\r\n"
"=======================================\r\n", 118, 0 );
    tcp_sent( pcb, NULL );
 80006e8:	2100      	movs	r1, #0
 80006ea:	68b8      	ldr	r0, [r7, #8]
 80006ec:	f00c f90c 	bl	800c908 <tcp_sent>
    return ERR_OK;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	080005e9 	.word	0x080005e9
 8000700:	08015824 	.word	0x08015824

08000704 <echo_init>:

void echo_init( void )
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
    struct tcp_pcb *tcp_pcb;
    tcp_pcb = tcp_new();
 800070a:	f00c f8c1 	bl	800c890 <tcp_new>
 800070e:	6078      	str	r0, [r7, #4]
    tcp_bind(tcp_pcb, IP_ADDR_ANY, 23);
 8000710:	2217      	movs	r2, #23
 8000712:	4908      	ldr	r1, [pc, #32]	; (8000734 <echo_init+0x30>)
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f00a feff 	bl	800b518 <tcp_bind>

    tcp_pcb = tcp_listen( tcp_pcb );
 800071a:	21ff      	movs	r1, #255	; 0xff
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f00a ffb3 	bl	800b688 <tcp_listen_with_backlog>
 8000722:	6078      	str	r0, [r7, #4]
    tcp_accept( tcp_pcb, echo_accept );
 8000724:	4904      	ldr	r1, [pc, #16]	; (8000738 <echo_init+0x34>)
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f00c f932 	bl	800c990 <tcp_accept>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	08059b70 	.word	0x08059b70
 8000738:	080006ad 	.word	0x080006ad

0800073c <_write>:
#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>

int _write(int file, char *ptr, int len) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef xStatus;
	switch (file) {
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d003      	beq.n	8000756 <_write+0x1a>
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2b02      	cmp	r3, #2
 8000752:	d013      	beq.n	800077c <_write+0x40>
 8000754:	e025      	b.n	80007a2 <_write+0x66>
	case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	b29a      	uxth	r2, r3
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	68b9      	ldr	r1, [r7, #8]
 8000760:	4817      	ldr	r0, [pc, #92]	; (80007c0 <_write+0x84>)
 8000762:	f007 f83a 	bl	80077da <HAL_UART_Transmit>
 8000766:	4603      	mov	r3, r0
 8000768:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 800076a:	7dfb      	ldrb	r3, [r7, #23]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d01e      	beq.n	80007ae <_write+0x72>
			errno = EIO;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <_write+0x88>)
 8000772:	2205      	movs	r2, #5
 8000774:	601a      	str	r2, [r3, #0]
			return -1;
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	e01c      	b.n	80007b6 <_write+0x7a>
		}
		break;
	case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	b29a      	uxth	r2, r3
 8000780:	f04f 33ff 	mov.w	r3, #4294967295
 8000784:	68b9      	ldr	r1, [r7, #8]
 8000786:	480e      	ldr	r0, [pc, #56]	; (80007c0 <_write+0x84>)
 8000788:	f007 f827 	bl	80077da <HAL_UART_Transmit>
 800078c:	4603      	mov	r3, r0
 800078e:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000790:	7dfb      	ldrb	r3, [r7, #23]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00d      	beq.n	80007b2 <_write+0x76>
			errno = EIO;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <_write+0x88>)
 8000798:	2205      	movs	r2, #5
 800079a:	601a      	str	r2, [r3, #0]
			return -1;
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	e009      	b.n	80007b6 <_write+0x7a>
		}
		break;
	default:
		errno = EBADF;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <_write+0x88>)
 80007a4:	2209      	movs	r2, #9
 80007a6:	601a      	str	r2, [r3, #0]
		return -1;
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	e003      	b.n	80007b6 <_write+0x7a>
		break;
 80007ae:	bf00      	nop
 80007b0:	e000      	b.n	80007b4 <_write+0x78>
		break;
 80007b2:	bf00      	nop
	}
	return len;
 80007b4:	687b      	ldr	r3, [r7, #4]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000d70 	.word	0x20000d70
 80007c4:	200075ec 	.word	0x200075ec

080007c8 <recv>:

err_t recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	70fb      	strb	r3, [r7, #3]

	//is er iets om een ACK voor te sturen
	//zo niet sluit de verbinding na de server
	if(p != NULL){
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d009      	beq.n	80007f0 <recv+0x28>
		tcp_recved(tpcb, p->len);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	895b      	ldrh	r3, [r3, #10]
 80007e0:	4619      	mov	r1, r3
 80007e2:	68b8      	ldr	r0, [r7, #8]
 80007e4:	f00b f866 	bl	800b8b4 <tcp_recved>

		//payload laten zien
		//printf(strcat(p->payload, "\0\r\n"));

		//buffer clearen anders vol => fouten op runtime
		pbuf_free(p);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f009 ff97 	bl	800a71c <pbuf_free>
 80007ee:	e002      	b.n	80007f6 <recv+0x2e>
	}
	else{
		//verbinding niet open
		tcp_close(tpcb);
 80007f0:	68b8      	ldr	r0, [r7, #8]
 80007f2:	f00a fd9b 	bl	800b32c <tcp_close>
	}

	return ERR_OK;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <connected>:

err_t connected(void *arg, struct tcp_pcb *tpcb, err_t err){
 8000800:	b5b0      	push	{r4, r5, r7, lr}
 8000802:	b0a6      	sub	sp, #152	; 0x98
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	4613      	mov	r3, r2
 800080c:	71fb      	strb	r3, [r7, #7]

	static uint8_t ucCookieAmount = 0;

	//strings
	const char cAppId[] = "69";
 800080e:	4a4c      	ldr	r2, [pc, #304]	; (8000940 <connected+0x140>)
 8000810:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000814:	6812      	ldr	r2, [r2, #0]
 8000816:	4611      	mov	r1, r2
 8000818:	8019      	strh	r1, [r3, #0]
 800081a:	3302      	adds	r3, #2
 800081c:	0c12      	lsrs	r2, r2, #16
 800081e:	701a      	strb	r2, [r3, #0]
	char cQ[50] = "";
 8000820:	2300      	movs	r3, #0
 8000822:	663b      	str	r3, [r7, #96]	; 0x60
 8000824:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000828:	222e      	movs	r2, #46	; 0x2e
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f013 fdab 	bl	8014388 <memset>
	const char cHttpHeaderTemplate1[] = "GET /labos/Embedded/Cookies.php?q=";
 8000832:	4b44      	ldr	r3, [pc, #272]	; (8000944 <connected+0x144>)
 8000834:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000838:	461d      	mov	r5, r3
 800083a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800083c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000842:	682b      	ldr	r3, [r5, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	8022      	strh	r2, [r4, #0]
 8000848:	3402      	adds	r4, #2
 800084a:	0c1b      	lsrs	r3, r3, #16
 800084c:	7023      	strb	r3, [r4, #0]
	const char cHttpHeaderTemplate2[] = "&appid=";
 800084e:	4a3e      	ldr	r2, [pc, #248]	; (8000948 <connected+0x148>)
 8000850:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000854:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000858:	e883 0003 	stmia.w	r3, {r0, r1}
	const char cHttpHeaderTemplate3[] = " HTTP/1.0\r\nHost: 127.0.0.1\r\n\r\n";
 800085c:	4b3b      	ldr	r3, [pc, #236]	; (800094c <connected+0x14c>)
 800085e:	f107 0414 	add.w	r4, r7, #20
 8000862:	461d      	mov	r5, r3
 8000864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000868:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800086c:	c407      	stmia	r4!, {r0, r1, r2}
 800086e:	8023      	strh	r3, [r4, #0]
 8000870:	3402      	adds	r4, #2
 8000872:	0c1b      	lsrs	r3, r3, #16
 8000874:	7023      	strb	r3, [r4, #0]

	//TCP recv
	tcp_recv(tpcb, recv);
 8000876:	4936      	ldr	r1, [pc, #216]	; (8000950 <connected+0x150>)
 8000878:	68b8      	ldr	r0, [r7, #8]
 800087a:	f00c f823 	bl	800c8c4 <tcp_recv>

	//convert int to string
	sprintf(cQ, "%d", ucCookieAmount);
 800087e:	4b35      	ldr	r3, [pc, #212]	; (8000954 <connected+0x154>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000888:	4933      	ldr	r1, [pc, #204]	; (8000958 <connected+0x158>)
 800088a:	4618      	mov	r0, r3
 800088c:	f013 fe52 	bl	8014534 <siprintf>

	//test Printf
	printf("cookies = %d | str = %s\r\n", ucCookieAmount, cQ);
 8000890:	4b30      	ldr	r3, [pc, #192]	; (8000954 <connected+0x154>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800089a:	461a      	mov	r2, r3
 800089c:	482f      	ldr	r0, [pc, #188]	; (800095c <connected+0x15c>)
 800089e:	f013 fd7b 	bl	8014398 <iprintf>

	//assemble strings
	tcp_write(tpcb, cHttpHeaderTemplate1, strlen(cHttpHeaderTemplate1), TCP_WRITE_FLAG_MORE|TCP_WRITE_FLAG_COPY);
 80008a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fcb2 	bl	8000210 <strlen>
 80008ac:	4603      	mov	r3, r0
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80008b4:	2303      	movs	r3, #3
 80008b6:	68b8      	ldr	r0, [r7, #8]
 80008b8:	f00e ff30 	bl	800f71c <tcp_write>
	tcp_write(tpcb, cQ, strlen(cQ), TCP_WRITE_FLAG_MORE|TCP_WRITE_FLAG_COPY);
 80008bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fca5 	bl	8000210 <strlen>
 80008c6:	4603      	mov	r3, r0
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80008ce:	2303      	movs	r3, #3
 80008d0:	68b8      	ldr	r0, [r7, #8]
 80008d2:	f00e ff23 	bl	800f71c <tcp_write>
	tcp_write(tpcb, cHttpHeaderTemplate2, strlen(cHttpHeaderTemplate2), TCP_WRITE_FLAG_MORE|TCP_WRITE_FLAG_COPY);
 80008d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fc98 	bl	8000210 <strlen>
 80008e0:	4603      	mov	r3, r0
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80008e8:	2303      	movs	r3, #3
 80008ea:	68b8      	ldr	r0, [r7, #8]
 80008ec:	f00e ff16 	bl	800f71c <tcp_write>
	tcp_write(tpcb, cAppId, strlen(cAppId), TCP_WRITE_FLAG_MORE|TCP_WRITE_FLAG_COPY);
 80008f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fc8b 	bl	8000210 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8000902:	2303      	movs	r3, #3
 8000904:	68b8      	ldr	r0, [r7, #8]
 8000906:	f00e ff09 	bl	800f71c <tcp_write>
	tcp_write(tpcb, cHttpHeaderTemplate3, strlen(cHttpHeaderTemplate3), TCP_WRITE_FLAG_COPY);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fc7e 	bl	8000210 <strlen>
 8000914:	4603      	mov	r3, r0
 8000916:	b29a      	uxth	r2, r3
 8000918:	f107 0114 	add.w	r1, r7, #20
 800091c:	2301      	movs	r3, #1
 800091e:	68b8      	ldr	r0, [r7, #8]
 8000920:	f00e fefc 	bl	800f71c <tcp_write>

	tcp_output(tpcb);
 8000924:	68b8      	ldr	r0, [r7, #8]
 8000926:	f00f fce3 	bl	80102f0 <tcp_output>

	ucCookieAmount++;
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <connected+0x154>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	3301      	adds	r3, #1
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <connected+0x154>)
 8000934:	701a      	strb	r2, [r3, #0]

	return ERR_OK;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3798      	adds	r7, #152	; 0x98
 800093c:	46bd      	mov	sp, r7
 800093e:	bdb0      	pop	{r4, r5, r7, pc}
 8000940:	080158bc 	.word	0x080158bc
 8000944:	080158c0 	.word	0x080158c0
 8000948:	080158e4 	.word	0x080158e4
 800094c:	080158ec 	.word	0x080158ec
 8000950:	080007c9 	.word	0x080007c9
 8000954:	200000c8 	.word	0x200000c8
 8000958:	0801589c 	.word	0x0801589c
 800095c:	080158a0 	.word	0x080158a0

08000960 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	; 0x38
 8000964:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	ip_addr_t serverIP;
	IP4_ADDR(&serverIP, 192, 168, 69, 11);
 8000966:	4b3a      	ldr	r3, [pc, #232]	; (8000a50 <main+0xf0>)
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800096a:	f002 fd15 	bl	8003398 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800096e:	f000 f87b 	bl	8000a68 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000972:	f000 fa79 	bl	8000e68 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000976:	f000 f9f9 	bl	8000d6c <MX_USART1_UART_Init>
	MX_LWIP_Init();
 800097a:	f007 fc9f 	bl	80082bc <MX_LWIP_Init>
	MX_LTDC_Init();
 800097e:	f000 f943 	bl	8000c08 <MX_LTDC_Init>
	MX_FMC_Init();
 8000982:	f000 fa23 	bl	8000dcc <MX_FMC_Init>
	MX_DMA2D_Init();
 8000986:	f000 f90d 	bl	8000ba4 <MX_DMA2D_Init>
	/* USER CODE BEGIN 2 */
	printf("Running LwIP & LCD start project...\r\n");
 800098a:	4832      	ldr	r0, [pc, #200]	; (8000a54 <main+0xf4>)
 800098c:	f013 fd8a 	bl	80144a4 <puts>
	BSP_LCD_Init();
 8000990:	f001 fe0a 	bl	80025a8 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 8000994:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000998:	2001      	movs	r0, #1
 800099a:	f001 fe9d 	bl	80026d8 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS+(480*272*4));
 800099e:	492e      	ldr	r1, [pc, #184]	; (8000a58 <main+0xf8>)
 80009a0:	2000      	movs	r0, #0
 80009a2:	f001 fe99 	bl	80026d8 <BSP_LCD_LayerDefaultInit>
	/* Enable the LCD */
	BSP_LCD_DisplayOn();
 80009a6:	f001 ff49 	bl	800283c <BSP_LCD_DisplayOn>
	/* Select the LCD Background Layer  */
	BSP_LCD_SelectLayer(0);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f001 fef4 	bl	8002798 <BSP_LCD_SelectLayer>
	/* Clear the Background Layer */
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80009b0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80009b4:	f001 ff1a 	bl	80027ec <BSP_LCD_Clear>
	BSP_LCD_SelectLayer(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f001 feed 	bl	8002798 <BSP_LCD_SelectLayer>
	/* Clear the foreground Layer */
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80009be:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80009c2:	f001 ff13 	bl	80027ec <BSP_LCD_Clear>

	//LWIP
	echo_init();
 80009c6:	f7ff fe9d 	bl	8000704 <echo_init>
	struct tcp_pcb *tcp_pcb;

	/*LCD init*/
	My_LTDC_Init();
 80009ca:	f000 fdd1 	bl	8001570 <My_LTDC_Init>
	/* Backlight */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port,LCD_BL_CTRL_Pin,GPIO_PIN_SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	2108      	movs	r1, #8
 80009d2:	4822      	ldr	r0, [pc, #136]	; (8000a5c <main+0xfc>)
 80009d4:	f004 fd6e 	bl	80054b4 <HAL_GPIO_WritePin>
	/* Assert display enable LCD_DISP pin */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009de:	4820      	ldr	r0, [pc, #128]	; (8000a60 <main+0x100>)
 80009e0:	f004 fd68 	bl	80054b4 <HAL_GPIO_WritePin>

	/* Init touch screen */
	BSP_TS_Init(480,272);
 80009e4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80009e8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80009ec:	f002 fa3c 	bl	8002e68 <BSP_TS_Init>
	TS_StateTypeDef TS_State;

	/*variables*/
	uint8_t ucAmountOfFingers = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t ucAmountOfFingersPrev = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while (1)
	{
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		//LWIP
		MX_LWIP_Process();
 80009fc:	f007 fd90 	bl	8008520 <MX_LWIP_Process>

		//LCD
		BSP_TS_GetState(&TS_State);
 8000a00:	463b      	mov	r3, r7
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 fa70 	bl	8002ee8 <BSP_TS_GetState>
		ucAmountOfFingers = TS_State.touchDetected;
 8000a08:	783b      	ldrb	r3, [r7, #0]
 8000a0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		if(ucAmountOfFingersPrev != ucAmountOfFingers){
 8000a0e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000a12:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d012      	beq.n	8000a40 <main+0xe0>
			if(ucAmountOfFingersPrev < ucAmountOfFingers){
 8000a1a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000a1e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d20c      	bcs.n	8000a40 <main+0xe0>
				//Nieuwe press
				tcp_pcb = tcp_new();
 8000a26:	f00b ff33 	bl	800c890 <tcp_new>
 8000a2a:	6338      	str	r0, [r7, #48]	; 0x30
				tcp_connect(tcp_pcb, &serverIP, 80, connected);	//connect to  server
 8000a2c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <main+0x104>)
 8000a32:	2250      	movs	r2, #80	; 0x50
 8000a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a36:	f00a ffd3 	bl	800b9e0 <tcp_connect>
				HAL_Delay(250);
 8000a3a:	20fa      	movs	r0, #250	; 0xfa
 8000a3c:	f002 fd0a 	bl	8003454 <HAL_Delay>
			}
		}
		ucAmountOfFingersPrev = ucAmountOfFingers;
 8000a40:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		HAL_Delay(100);
 8000a48:	2064      	movs	r0, #100	; 0x64
 8000a4a:	f002 fd03 	bl	8003454 <HAL_Delay>
		MX_LWIP_Process();
 8000a4e:	e7d5      	b.n	80009fc <main+0x9c>
 8000a50:	0b45a8c0 	.word	0x0b45a8c0
 8000a54:	0801590c 	.word	0x0801590c
 8000a58:	c007f800 	.word	0xc007f800
 8000a5c:	40022800 	.word	0x40022800
 8000a60:	40022000 	.word	0x40022000
 8000a64:	08000801 	.word	0x08000801

08000a68 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b0b4      	sub	sp, #208	; 0xd0
 8000a6c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a72:	2230      	movs	r2, #48	; 0x30
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f013 fc86 	bl	8014388 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	2284      	movs	r2, #132	; 0x84
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f013 fc77 	bl	8014388 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000a9a:	f005 fd07 	bl	80064ac <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b3f      	ldr	r3, [pc, #252]	; (8000b9c <SystemClock_Config+0x134>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a3e      	ldr	r2, [pc, #248]	; (8000b9c <SystemClock_Config+0x134>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <SystemClock_Config+0x134>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab6:	4b3a      	ldr	r3, [pc, #232]	; (8000ba0 <SystemClock_Config+0x138>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a39      	ldr	r2, [pc, #228]	; (8000ba0 <SystemClock_Config+0x138>)
 8000abc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac0:	6013      	str	r3, [r2, #0]
 8000ac2:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <SystemClock_Config+0x138>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ada:	2310      	movs	r3, #16
 8000adc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000aec:	2308      	movs	r3, #8
 8000aee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 200;
 8000af2:	23c8      	movs	r3, #200	; 0xc8
 8000af4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b04:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f005 fd2f 	bl	800656c <HAL_RCC_OscConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 8000b14:	f000 fde8 	bl	80016e8 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b18:	f005 fcd8 	bl	80064cc <HAL_PWREx_EnableOverDrive>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xbe>
	{
		Error_Handler();
 8000b22:	f000 fde1 	bl	80016e8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b26:	230f      	movs	r3, #15
 8000b28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b48:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b4c:	2106      	movs	r1, #6
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f005 ffb0 	bl	8006ab4 <HAL_RCC_ClockConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0xf6>
	{
		Error_Handler();
 8000b5a:	f000 fdc5 	bl	80016e8 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1;
 8000b5e:	2348      	movs	r3, #72	; 0x48
 8000b60:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b62:	23c0      	movs	r3, #192	; 0xc0
 8000b64:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000b66:	2302      	movs	r3, #2
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000b76:	2300      	movs	r3, #0
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4618      	mov	r0, r3
 8000b84:	f006 f96c 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x12a>
	{
		Error_Handler();
 8000b8e:	f000 fdab 	bl	80016e8 <Error_Handler>
	}
}
 8000b92:	bf00      	nop
 8000b94:	37d0      	adds	r7, #208	; 0xd0
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40007000 	.word	0x40007000

08000ba4 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_DMA2D_Init+0x5c>)
 8000baa:	4a16      	ldr	r2, [pc, #88]	; (8000c04 <MX_DMA2D_Init+0x60>)
 8000bac:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_DMA2D_Init+0x5c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_DMA2D_Init+0x5c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_DMA2D_Init+0x5c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_DMA2D_Init+0x5c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_DMA2D_Init+0x5c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_DMA2D_Init+0x5c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_DMA2D_Init+0x5c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <MX_DMA2D_Init+0x5c>)
 8000bda:	f002 ff2f 	bl	8003a3c <HAL_DMA2D_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 8000be4:	f000 fd80 	bl	80016e8 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000be8:	2101      	movs	r1, #1
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_DMA2D_Init+0x5c>)
 8000bec:	f003 f884 	bl	8003cf8 <HAL_DMA2D_ConfigLayer>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 8000bf6:	f000 fd77 	bl	80016e8 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000df4 	.word	0x20000df4
 8000c04:	4002b000 	.word	0x4002b000

08000c08 <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b09a      	sub	sp, #104	; 0x68
 8000c0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c12:	2234      	movs	r2, #52	; 0x34
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f013 fbb6 	bl	8014388 <memset>
	LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2234      	movs	r2, #52	; 0x34
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f013 fbb0 	bl	8014388 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8000c28:	4b4e      	ldr	r3, [pc, #312]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000c2a:	4a4f      	ldr	r2, [pc, #316]	; (8000d68 <MX_LTDC_Init+0x160>)
 8000c2c:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c2e:	4b4d      	ldr	r3, [pc, #308]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c34:	4b4b      	ldr	r3, [pc, #300]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c3a:	4b4a      	ldr	r3, [pc, #296]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c40:	4b48      	ldr	r3, [pc, #288]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 7;
 8000c46:	4b47      	ldr	r3, [pc, #284]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000c48:	2207      	movs	r2, #7
 8000c4a:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 3;
 8000c4c:	4b45      	ldr	r3, [pc, #276]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000c4e:	2203      	movs	r2, #3
 8000c50:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 14;
 8000c52:	4b44      	ldr	r3, [pc, #272]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000c54:	220e      	movs	r2, #14
 8000c56:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 5;
 8000c58:	4b42      	ldr	r3, [pc, #264]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000c5a:	2205      	movs	r2, #5
 8000c5c:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 654;
 8000c5e:	4b41      	ldr	r3, [pc, #260]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000c60:	f240 228e 	movw	r2, #654	; 0x28e
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 485;
 8000c66:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000c68:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000c6c:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 660;
 8000c6e:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000c70:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 487;
 8000c76:	4b3b      	ldr	r3, [pc, #236]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000c78:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000c7c:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8000c7e:	4b39      	ldr	r3, [pc, #228]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000c86:	4b37      	ldr	r3, [pc, #220]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8000c8e:	4b35      	ldr	r3, [pc, #212]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c96:	4833      	ldr	r0, [pc, #204]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000c98:	f005 f952 	bl	8005f40 <HAL_LTDC_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_LTDC_Init+0x9e>
	{
		Error_Handler();
 8000ca2:	f000 fd21 	bl	80016e8 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.WindowX1 = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.WindowY0 = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
	pLayerCfg.WindowY1 = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	643b      	str	r3, [r7, #64]	; 0x40
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	647b      	str	r3, [r7, #68]	; 0x44
	pLayerCfg.Alpha = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	64bb      	str	r3, [r7, #72]	; 0x48
	pLayerCfg.Alpha0 = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc6:	653b      	str	r3, [r7, #80]	; 0x50
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cc8:	2305      	movs	r3, #5
 8000cca:	657b      	str	r3, [r7, #84]	; 0x54
	pLayerCfg.FBStartAdress = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	65bb      	str	r3, [r7, #88]	; 0x58
	pLayerCfg.ImageWidth = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
	pLayerCfg.ImageHeight = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	663b      	str	r3, [r7, #96]	; 0x60
	pLayerCfg.Backcolor.Blue = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	pLayerCfg.Backcolor.Green = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	pLayerCfg.Backcolor.Red = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	481c      	ldr	r0, [pc, #112]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000cf4:	f005 f9f4 	bl	80060e0 <HAL_LTDC_ConfigLayer>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_LTDC_Init+0xfa>
	{
		Error_Handler();
 8000cfe:	f000 fcf3 	bl	80016e8 <Error_Handler>
	}
	pLayerCfg1.WindowX0 = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
	pLayerCfg1.WindowX1 = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
	pLayerCfg1.WindowY0 = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
	pLayerCfg1.WindowY1 = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
	pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
	pLayerCfg1.Alpha = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
	pLayerCfg1.Alpha0 = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
	pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d22:	61fb      	str	r3, [r7, #28]
	pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d24:	2305      	movs	r3, #5
 8000d26:	623b      	str	r3, [r7, #32]
	pLayerCfg1.FBStartAdress = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg1.ImageWidth = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg1.ImageHeight = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg1.Backcolor.Blue = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	pLayerCfg1.Backcolor.Green = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	pLayerCfg1.Backcolor.Red = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000d46:	463b      	mov	r3, r7
 8000d48:	2201      	movs	r2, #1
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_LTDC_Init+0x15c>)
 8000d4e:	f005 f9c7 	bl	80060e0 <HAL_LTDC_ConfigLayer>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_LTDC_Init+0x154>
	{
		Error_Handler();
 8000d58:	f000 fcc6 	bl	80016e8 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	3768      	adds	r7, #104	; 0x68
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000cc8 	.word	0x20000cc8
 8000d68:	40016800 	.word	0x40016800

08000d6c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d72:	4a15      	ldr	r2, [pc, #84]	; (8000dc8 <MX_USART1_UART_Init+0x5c>)
 8000d74:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d7c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000db0:	f006 fcc5 	bl	800773e <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8000dba:	f000 fc95 	bl	80016e8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000d70 	.word	0x20000d70
 8000dc8:	40011000 	.word	0x40011000

08000dcc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	615a      	str	r2, [r3, #20]
 8000de2:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <MX_FMC_Init+0x94>)
 8000de6:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <MX_FMC_Init+0x98>)
 8000de8:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_FMC_Init+0x94>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <MX_FMC_Init+0x94>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_FMC_Init+0x94>)
 8000df8:	2204      	movs	r2, #4
 8000dfa:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <MX_FMC_Init+0x94>)
 8000dfe:	2210      	movs	r2, #16
 8000e00:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_FMC_Init+0x94>)
 8000e04:	2240      	movs	r2, #64	; 0x40
 8000e06:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_FMC_Init+0x94>)
 8000e0a:	2280      	movs	r2, #128	; 0x80
 8000e0c:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_FMC_Init+0x94>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_FMC_Init+0x94>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_FMC_Init+0x94>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_FMC_Init+0x94>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 16;
 8000e26:	2310      	movs	r3, #16
 8000e28:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 16;
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 16;
 8000e2e:	2310      	movs	r3, #16
 8000e30:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 16;
 8000e32:	2310      	movs	r3, #16
 8000e34:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 16;
 8000e36:	2310      	movs	r3, #16
 8000e38:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 16;
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 16;
 8000e3e:	2310      	movs	r3, #16
 8000e40:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4619      	mov	r1, r3
 8000e46:	4806      	ldr	r0, [pc, #24]	; (8000e60 <MX_FMC_Init+0x94>)
 8000e48:	f006 fbfa 	bl	8007640 <HAL_SDRAM_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_FMC_Init+0x8a>
	{
		Error_Handler( );
 8000e52:	f000 fc49 	bl	80016e8 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8000e56:	bf00      	nop
 8000e58:	3720      	adds	r7, #32
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000e34 	.word	0x20000e34
 8000e64:	a0000140 	.word	0xa0000140

08000e68 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b090      	sub	sp, #64	; 0x40
 8000e6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7e:	4bae      	ldr	r3, [pc, #696]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4aad      	ldr	r2, [pc, #692]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000e84:	f043 0310 	orr.w	r3, r3, #16
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4bab      	ldr	r3, [pc, #684]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0310 	and.w	r3, r3, #16
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000e96:	4ba8      	ldr	r3, [pc, #672]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4aa7      	ldr	r2, [pc, #668]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4ba5      	ldr	r3, [pc, #660]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	4ba2      	ldr	r3, [pc, #648]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4aa1      	ldr	r2, [pc, #644]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b9f      	ldr	r3, [pc, #636]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	623b      	str	r3, [r7, #32]
 8000ec4:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec6:	4b9c      	ldr	r3, [pc, #624]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a9b      	ldr	r2, [pc, #620]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b99      	ldr	r3, [pc, #612]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	4b96      	ldr	r3, [pc, #600]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a95      	ldr	r2, [pc, #596]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b93      	ldr	r3, [pc, #588]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	61bb      	str	r3, [r7, #24]
 8000ef4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4b90      	ldr	r3, [pc, #576]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a8f      	ldr	r2, [pc, #572]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b8d      	ldr	r3, [pc, #564]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f0e:	4b8a      	ldr	r3, [pc, #552]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a89      	ldr	r2, [pc, #548]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000f14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b87      	ldr	r3, [pc, #540]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8000f26:	4b84      	ldr	r3, [pc, #528]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a83      	ldr	r2, [pc, #524]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b81      	ldr	r3, [pc, #516]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8000f3e:	4b7e      	ldr	r3, [pc, #504]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a7d      	ldr	r2, [pc, #500]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000f44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b7b      	ldr	r3, [pc, #492]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000f56:	4b78      	ldr	r3, [pc, #480]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a77      	ldr	r2, [pc, #476]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000f5c:	f043 0320 	orr.w	r3, r3, #32
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b75      	ldr	r3, [pc, #468]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0320 	and.w	r3, r3, #32
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6e:	4b72      	ldr	r3, [pc, #456]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a71      	ldr	r2, [pc, #452]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b6f      	ldr	r3, [pc, #444]	; (8001138 <MX_GPIO_Init+0x2d0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2120      	movs	r1, #32
 8000f8a:	486c      	ldr	r0, [pc, #432]	; (800113c <MX_GPIO_Init+0x2d4>)
 8000f8c:	f004 fa92 	bl	80054b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f241 010e 	movw	r1, #4110	; 0x100e
 8000f96:	486a      	ldr	r0, [pc, #424]	; (8001140 <MX_GPIO_Init+0x2d8>)
 8000f98:	f004 fa8c 	bl	80054b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	4868      	ldr	r0, [pc, #416]	; (8001144 <MX_GPIO_Init+0x2dc>)
 8000fa2:	f004 fa87 	bl	80054b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fac:	4866      	ldr	r0, [pc, #408]	; (8001148 <MX_GPIO_Init+0x2e0>)
 8000fae:	f004 fa81 	bl	80054b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	21c8      	movs	r1, #200	; 0xc8
 8000fb6:	4865      	ldr	r0, [pc, #404]	; (800114c <MX_GPIO_Init+0x2e4>)
 8000fb8:	f004 fa7c 	bl	80054b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4860      	ldr	r0, [pc, #384]	; (8001150 <MX_GPIO_Init+0x2e8>)
 8000fd0:	f004 f8c4 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fe4:	2309      	movs	r3, #9
 8000fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fec:	4619      	mov	r1, r3
 8000fee:	4858      	ldr	r0, [pc, #352]	; (8001150 <MX_GPIO_Init+0x2e8>)
 8000ff0:	f004 f8b4 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000ff4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ffa:	2312      	movs	r3, #18
 8000ffc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001006:	2304      	movs	r3, #4
 8001008:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100e:	4619      	mov	r1, r3
 8001010:	4850      	ldr	r0, [pc, #320]	; (8001154 <MX_GPIO_Init+0x2ec>)
 8001012:	f004 f8a3 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001016:	f643 4323 	movw	r3, #15395	; 0x3c23
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001028:	230a      	movs	r3, #10
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001030:	4619      	mov	r1, r3
 8001032:	4848      	ldr	r0, [pc, #288]	; (8001154 <MX_GPIO_Init+0x2ec>)
 8001034:	f004 f892 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001038:	2310      	movs	r3, #16
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001048:	2302      	movs	r3, #2
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001050:	4619      	mov	r1, r3
 8001052:	4840      	ldr	r0, [pc, #256]	; (8001154 <MX_GPIO_Init+0x2ec>)
 8001054:	f004 f882 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001068:	2308      	movs	r3, #8
 800106a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001070:	4619      	mov	r1, r3
 8001072:	4832      	ldr	r0, [pc, #200]	; (800113c <MX_GPIO_Init+0x2d4>)
 8001074:	f004 f872 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
	GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001078:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
			|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800108a:	230c      	movs	r3, #12
 800108c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001092:	4619      	mov	r1, r3
 8001094:	4830      	ldr	r0, [pc, #192]	; (8001158 <MX_GPIO_Init+0x2f0>)
 8001096:	f004 f861 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800109a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010ac:	2301      	movs	r3, #1
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b4:	4619      	mov	r1, r3
 80010b6:	4829      	ldr	r0, [pc, #164]	; (800115c <MX_GPIO_Init+0x2f4>)
 80010b8:	f004 f850 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
	GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80010bc:	2360      	movs	r3, #96	; 0x60
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010cc:	230d      	movs	r3, #13
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d4:	4619      	mov	r1, r3
 80010d6:	481e      	ldr	r0, [pc, #120]	; (8001150 <MX_GPIO_Init+0x2e8>)
 80010d8:	f004 f840 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80010dc:	2340      	movs	r3, #64	; 0x40
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010ec:	230a      	movs	r3, #10
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f4:	4619      	mov	r1, r3
 80010f6:	4817      	ldr	r0, [pc, #92]	; (8001154 <MX_GPIO_Init+0x2ec>)
 80010f8:	f004 f830 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80010fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001102:	2300      	movs	r3, #0
 8001104:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110e:	4619      	mov	r1, r3
 8001110:	4813      	ldr	r0, [pc, #76]	; (8001160 <MX_GPIO_Init+0x2f8>)
 8001112:	f004 f823 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001116:	2340      	movs	r3, #64	; 0x40
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_GPIO_Init+0x2fc>)
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001126:	4619      	mov	r1, r3
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_GPIO_Init+0x2d4>)
 800112a:	f004 f817 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800112e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001134:	e018      	b.n	8001168 <MX_GPIO_Init+0x300>
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40020c00 	.word	0x40020c00
 8001140:	40022000 	.word	0x40022000
 8001144:	40022800 	.word	0x40022800
 8001148:	40021c00 	.word	0x40021c00
 800114c:	40021800 	.word	0x40021800
 8001150:	40021000 	.word	0x40021000
 8001154:	40020400 	.word	0x40020400
 8001158:	40020800 	.word	0x40020800
 800115c:	40020000 	.word	0x40020000
 8001160:	40022400 	.word	0x40022400
 8001164:	10120000 	.word	0x10120000
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001174:	230a      	movs	r3, #10
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117c:	4619      	mov	r1, r3
 800117e:	48bb      	ldr	r0, [pc, #748]	; (800146c <MX_GPIO_Init+0x604>)
 8001180:	f003 ffec 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
	GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001184:	23f0      	movs	r3, #240	; 0xf0
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001194:	230a      	movs	r3, #10
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800119c:	4619      	mov	r1, r3
 800119e:	48b4      	ldr	r0, [pc, #720]	; (8001470 <MX_GPIO_Init+0x608>)
 80011a0:	f003 ffdc 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : SAI2_SDB_Pin */
	GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80011a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80011b6:	230a      	movs	r3, #10
 80011b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011be:	4619      	mov	r1, r3
 80011c0:	48ac      	ldr	r0, [pc, #688]	; (8001474 <MX_GPIO_Init+0x60c>)
 80011c2:	f003 ffcb 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80011c6:	2320      	movs	r3, #32
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011da:	4619      	mov	r1, r3
 80011dc:	48a6      	ldr	r0, [pc, #664]	; (8001478 <MX_GPIO_Init+0x610>)
 80011de:	f003 ffbd 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_D5_Pin */
	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80011e2:	2308      	movs	r3, #8
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011f2:	230d      	movs	r3, #13
 80011f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fa:	4619      	mov	r1, r3
 80011fc:	489e      	ldr	r0, [pc, #632]	; (8001478 <MX_GPIO_Init+0x610>)
 80011fe:	f003 ffad 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LED_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 8001202:	f241 030e 	movw	r3, #4110	; 0x100e
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001214:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001218:	4619      	mov	r1, r3
 800121a:	4895      	ldr	r0, [pc, #596]	; (8001470 <MX_GPIO_Init+0x608>)
 800121c:	f003 ff9e 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001226:	2300      	movs	r3, #0
 8001228:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001232:	4619      	mov	r1, r3
 8001234:	4891      	ldr	r0, [pc, #580]	; (800147c <MX_GPIO_Init+0x614>)
 8001236:	f003 ff91 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800123a:	2308      	movs	r3, #8
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124e:	4619      	mov	r1, r3
 8001250:	488b      	ldr	r0, [pc, #556]	; (8001480 <MX_GPIO_Init+0x618>)
 8001252:	f003 ff83 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_VSYNC_Pin */
	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001268:	230d      	movs	r3, #13
 800126a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001270:	4619      	mov	r1, r3
 8001272:	4880      	ldr	r0, [pc, #512]	; (8001474 <MX_GPIO_Init+0x60c>)
 8001274:	f003 ff72 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001278:	2310      	movs	r3, #16
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127c:	2300      	movs	r3, #0
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001288:	4619      	mov	r1, r3
 800128a:	487b      	ldr	r0, [pc, #492]	; (8001478 <MX_GPIO_Init+0x610>)
 800128c:	f003 ff66 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : SDMMC_D0_Pin */
	GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001290:	2304      	movs	r3, #4
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012a0:	230c      	movs	r3, #12
 80012a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a8:	4619      	mov	r1, r3
 80012aa:	4873      	ldr	r0, [pc, #460]	; (8001478 <MX_GPIO_Init+0x610>)
 80012ac:	f003 ff56 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80012b0:	f248 0304 	movw	r3, #32772	; 0x8004
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b6:	2300      	movs	r3, #0
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c2:	4619      	mov	r1, r3
 80012c4:	486f      	ldr	r0, [pc, #444]	; (8001484 <MX_GPIO_Init+0x61c>)
 80012c6:	f003 ff49 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80012ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e0:	4619      	mov	r1, r3
 80012e2:	4868      	ldr	r0, [pc, #416]	; (8001484 <MX_GPIO_Init+0x61c>)
 80012e4:	f003 ff3a 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
	GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80012e8:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
			|DCMI_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012fa:	230d      	movs	r3, #13
 80012fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001302:	4619      	mov	r1, r3
 8001304:	485f      	ldr	r0, [pc, #380]	; (8001484 <MX_GPIO_Init+0x61c>)
 8001306:	f003 ff29 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800130a:	2301      	movs	r3, #1
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800131a:	2302      	movs	r3, #2
 800131c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001322:	4619      	mov	r1, r3
 8001324:	4852      	ldr	r0, [pc, #328]	; (8001470 <MX_GPIO_Init+0x608>)
 8001326:	f003 ff19 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_Pin */
	GPIO_InitStruct.Pin = BUTTON_Pin;
 800132a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001330:	2300      	movs	r3, #0
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800133c:	4619      	mov	r1, r3
 800133e:	484c      	ldr	r0, [pc, #304]	; (8001470 <MX_GPIO_Init+0x608>)
 8001340:	f003 ff0c 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001356:	2301      	movs	r3, #1
 8001358:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800135e:	4619      	mov	r1, r3
 8001360:	4842      	ldr	r0, [pc, #264]	; (800146c <MX_GPIO_Init+0x604>)
 8001362:	f003 fefb 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800136c:	4b46      	ldr	r3, [pc, #280]	; (8001488 <MX_GPIO_Init+0x620>)
 800136e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001378:	4619      	mov	r1, r3
 800137a:	483d      	ldr	r0, [pc, #244]	; (8001470 <MX_GPIO_Init+0x608>)
 800137c:	f003 feee 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001380:	23c0      	movs	r3, #192	; 0xc0
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001390:	2308      	movs	r3, #8
 8001392:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001398:	4619      	mov	r1, r3
 800139a:	4838      	ldr	r0, [pc, #224]	; (800147c <MX_GPIO_Init+0x614>)
 800139c:	f003 fede 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80013a0:	2310      	movs	r3, #16
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80013b0:	230a      	movs	r3, #10
 80013b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b8:	4619      	mov	r1, r3
 80013ba:	4832      	ldr	r0, [pc, #200]	; (8001484 <MX_GPIO_Init+0x61c>)
 80013bc:	f003 fece 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80013c0:	23c8      	movs	r3, #200	; 0xc8
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d4:	4619      	mov	r1, r3
 80013d6:	4827      	ldr	r0, [pc, #156]	; (8001474 <MX_GPIO_Init+0x60c>)
 80013d8:	f003 fec0 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80013dc:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e2:	2303      	movs	r3, #3
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ee:	4619      	mov	r1, r3
 80013f0:	4826      	ldr	r0, [pc, #152]	; (800148c <MX_GPIO_Init+0x624>)
 80013f2:	f003 feb3 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80013f6:	2305      	movs	r3, #5
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001406:	230a      	movs	r3, #10
 8001408:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800140e:	4619      	mov	r1, r3
 8001410:	481a      	ldr	r0, [pc, #104]	; (800147c <MX_GPIO_Init+0x614>)
 8001412:	f003 fea3 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001416:	2304      	movs	r3, #4
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001426:	2309      	movs	r3, #9
 8001428:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800142e:	4619      	mov	r1, r3
 8001430:	4817      	ldr	r0, [pc, #92]	; (8001490 <MX_GPIO_Init+0x628>)
 8001432:	f003 fe93 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001436:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001448:	2309      	movs	r3, #9
 800144a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001450:	4619      	mov	r1, r3
 8001452:	4809      	ldr	r0, [pc, #36]	; (8001478 <MX_GPIO_Init+0x610>)
 8001454:	f003 fe82 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001458:	2304      	movs	r3, #4
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145c:	2300      	movs	r3, #0
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001468:	4619      	mov	r1, r3
 800146a:	e013      	b.n	8001494 <MX_GPIO_Init+0x62c>
 800146c:	40020000 	.word	0x40020000
 8001470:	40022000 	.word	0x40022000
 8001474:	40021800 	.word	0x40021800
 8001478:	40020c00 	.word	0x40020c00
 800147c:	40020800 	.word	0x40020800
 8001480:	40022800 	.word	0x40022800
 8001484:	40021c00 	.word	0x40021c00
 8001488:	10120000 	.word	0x10120000
 800148c:	40021400 	.word	0x40021400
 8001490:	40020400 	.word	0x40020400
 8001494:	4832      	ldr	r0, [pc, #200]	; (8001560 <MX_GPIO_Init+0x6f8>)
 8001496:	f003 fe61 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_A0_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800149a:	2301      	movs	r3, #1
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149e:	2303      	movs	r3, #3
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014aa:	4619      	mov	r1, r3
 80014ac:	482d      	ldr	r0, [pc, #180]	; (8001564 <MX_GPIO_Init+0x6fc>)
 80014ae:	f003 fe55 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80014b2:	2350      	movs	r3, #80	; 0x50
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80014c2:	230d      	movs	r3, #13
 80014c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ca:	4619      	mov	r1, r3
 80014cc:	4825      	ldr	r0, [pc, #148]	; (8001564 <MX_GPIO_Init+0x6fc>)
 80014ce:	f003 fe45 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
	GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80014d2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d8:	2312      	movs	r3, #18
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014e4:	2304      	movs	r3, #4
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ec:	4619      	mov	r1, r3
 80014ee:	481e      	ldr	r0, [pc, #120]	; (8001568 <MX_GPIO_Init+0x700>)
 80014f0:	f003 fe34 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80014f4:	2328      	movs	r3, #40	; 0x28
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001504:	230a      	movs	r3, #10
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800150c:	4619      	mov	r1, r3
 800150e:	4815      	ldr	r0, [pc, #84]	; (8001564 <MX_GPIO_Init+0x6fc>)
 8001510:	f003 fe24 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001514:	2340      	movs	r3, #64	; 0x40
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001524:	2309      	movs	r3, #9
 8001526:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800152c:	4619      	mov	r1, r3
 800152e:	480e      	ldr	r0, [pc, #56]	; (8001568 <MX_GPIO_Init+0x700>)
 8001530:	f003 fe14 	bl	800515c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001534:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001546:	2305      	movs	r3, #5
 8001548:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154e:	4619      	mov	r1, r3
 8001550:	4806      	ldr	r0, [pc, #24]	; (800156c <MX_GPIO_Init+0x704>)
 8001552:	f003 fe03 	bl	800515c <HAL_GPIO_Init>

}
 8001556:	bf00      	nop
 8001558:	3740      	adds	r7, #64	; 0x40
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40021800 	.word	0x40021800
 8001564:	40020000 	.word	0x40020000
 8001568:	40021c00 	.word	0x40021c00
 800156c:	40020400 	.word	0x40020400

08001570 <My_LTDC_Init>:

/* USER CODE BEGIN 4 */

static void My_LTDC_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b09a      	sub	sp, #104	; 0x68
 8001574:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001576:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800157a:	2234      	movs	r2, #52	; 0x34
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f012 ff02 	bl	8014388 <memset>
	LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2234      	movs	r2, #52	; 0x34
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f012 fefc 	bl	8014388 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8001590:	4b52      	ldr	r3, [pc, #328]	; (80016dc <My_LTDC_Init+0x16c>)
 8001592:	4a53      	ldr	r2, [pc, #332]	; (80016e0 <My_LTDC_Init+0x170>)
 8001594:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001596:	4b51      	ldr	r3, [pc, #324]	; (80016dc <My_LTDC_Init+0x16c>)
 8001598:	2200      	movs	r2, #0
 800159a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800159c:	4b4f      	ldr	r3, [pc, #316]	; (80016dc <My_LTDC_Init+0x16c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015a2:	4b4e      	ldr	r3, [pc, #312]	; (80016dc <My_LTDC_Init+0x16c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015a8:	4b4c      	ldr	r3, [pc, #304]	; (80016dc <My_LTDC_Init+0x16c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 80015ae:	4b4b      	ldr	r3, [pc, #300]	; (80016dc <My_LTDC_Init+0x16c>)
 80015b0:	2228      	movs	r2, #40	; 0x28
 80015b2:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 80015b4:	4b49      	ldr	r3, [pc, #292]	; (80016dc <My_LTDC_Init+0x16c>)
 80015b6:	2209      	movs	r2, #9
 80015b8:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 80015ba:	4b48      	ldr	r3, [pc, #288]	; (80016dc <My_LTDC_Init+0x16c>)
 80015bc:	2235      	movs	r2, #53	; 0x35
 80015be:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 80015c0:	4b46      	ldr	r3, [pc, #280]	; (80016dc <My_LTDC_Init+0x16c>)
 80015c2:	220b      	movs	r2, #11
 80015c4:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 80015c6:	4b45      	ldr	r3, [pc, #276]	; (80016dc <My_LTDC_Init+0x16c>)
 80015c8:	f240 2215 	movw	r2, #533	; 0x215
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 80015ce:	4b43      	ldr	r3, [pc, #268]	; (80016dc <My_LTDC_Init+0x16c>)
 80015d0:	f240 121b 	movw	r2, #283	; 0x11b
 80015d4:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 80015d6:	4b41      	ldr	r3, [pc, #260]	; (80016dc <My_LTDC_Init+0x16c>)
 80015d8:	f240 2235 	movw	r2, #565	; 0x235
 80015dc:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 80015de:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <My_LTDC_Init+0x16c>)
 80015e0:	f240 121d 	movw	r2, #285	; 0x11d
 80015e4:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 80015e6:	4b3d      	ldr	r3, [pc, #244]	; (80016dc <My_LTDC_Init+0x16c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 80015ee:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <My_LTDC_Init+0x16c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 80015f6:	4b39      	ldr	r3, [pc, #228]	; (80016dc <My_LTDC_Init+0x16c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80015fe:	4837      	ldr	r0, [pc, #220]	; (80016dc <My_LTDC_Init+0x16c>)
 8001600:	f004 fc9e 	bl	8005f40 <HAL_LTDC_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <My_LTDC_Init+0x9e>
	{
		Error_Handler();
 800160a:	f000 f86d 	bl	80016e8 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.WindowX1 = 480;
 8001612:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001616:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.WindowY0 = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	63fb      	str	r3, [r7, #60]	; 0x3c
	pLayerCfg.WindowY1 = 272;
 800161c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001620:	643b      	str	r3, [r7, #64]	; 0x40
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB1555;
 8001622:	2303      	movs	r3, #3
 8001624:	647b      	str	r3, [r7, #68]	; 0x44
	pLayerCfg.Alpha = 255;
 8001626:	23ff      	movs	r3, #255	; 0xff
 8001628:	64bb      	str	r3, [r7, #72]	; 0x48
	pLayerCfg.Alpha0 = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	64fb      	str	r3, [r7, #76]	; 0x4c
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800162e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001632:	653b      	str	r3, [r7, #80]	; 0x50
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001634:	2307      	movs	r3, #7
 8001636:	657b      	str	r3, [r7, #84]	; 0x54
	pLayerCfg.FBStartAdress = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	65bb      	str	r3, [r7, #88]	; 0x58
	pLayerCfg.ImageWidth = 480;
 800163c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001640:	65fb      	str	r3, [r7, #92]	; 0x5c
	pLayerCfg.ImageHeight = 272;
 8001642:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001646:	663b      	str	r3, [r7, #96]	; 0x60
	pLayerCfg.Backcolor.Blue = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	pLayerCfg.Backcolor.Green = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	pLayerCfg.Backcolor.Red = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800165a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800165e:	2200      	movs	r2, #0
 8001660:	4619      	mov	r1, r3
 8001662:	481e      	ldr	r0, [pc, #120]	; (80016dc <My_LTDC_Init+0x16c>)
 8001664:	f004 fd3c 	bl	80060e0 <HAL_LTDC_ConfigLayer>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <My_LTDC_Init+0x102>
	{
		Error_Handler();
 800166e:	f000 f83b 	bl	80016e8 <Error_Handler>
	}
	pLayerCfg1.WindowX0 = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	603b      	str	r3, [r7, #0]
	pLayerCfg1.WindowX1 = COOKIE_DATA_X_PIXEL;
 8001676:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800167a:	607b      	str	r3, [r7, #4]
	pLayerCfg1.WindowY0 = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
	pLayerCfg1.WindowY1 = COOKIE_DATA_Y_PIXEL;
 8001680:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001684:	60fb      	str	r3, [r7, #12]
	pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB1555;
 8001686:	2303      	movs	r3, #3
 8001688:	613b      	str	r3, [r7, #16]
	pLayerCfg1.Alpha = 255;
 800168a:	23ff      	movs	r3, #255	; 0xff
 800168c:	617b      	str	r3, [r7, #20]
	pLayerCfg1.Alpha0 = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
	pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001692:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001696:	61fb      	str	r3, [r7, #28]
	pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001698:	2307      	movs	r3, #7
 800169a:	623b      	str	r3, [r7, #32]
	pLayerCfg1.FBStartAdress = (uint32_t) COOKIE_DATA;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <My_LTDC_Init+0x174>)
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg1.ImageWidth = COOKIE_DATA_X_PIXEL;
 80016a0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg1.ImageHeight = COOKIE_DATA_Y_PIXEL;
 80016a6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg1.Backcolor.Blue = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	pLayerCfg1.Backcolor.Green = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	pLayerCfg1.Backcolor.Red = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80016be:	463b      	mov	r3, r7
 80016c0:	2201      	movs	r2, #1
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <My_LTDC_Init+0x16c>)
 80016c6:	f004 fd0b 	bl	80060e0 <HAL_LTDC_ConfigLayer>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <My_LTDC_Init+0x164>
	{
		Error_Handler();
 80016d0:	f000 f80a 	bl	80016e8 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	3768      	adds	r7, #104	; 0x68
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000cc8 	.word	0x20000cc8
 80016e0:	40016800 	.word	0x40016800
 80016e4:	080183c0 	.word	0x080183c0

080016e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016f0:	e7fe      	b.n	80016f0 <Error_Handler+0x8>
	...

080016f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_MspInit+0x44>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <HAL_MspInit+0x44>)
 8001700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <HAL_MspInit+0x44>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_MspInit+0x44>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	4a08      	ldr	r2, [pc, #32]	; (8001738 <HAL_MspInit+0x44>)
 8001718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171c:	6453      	str	r3, [r2, #68]	; 0x44
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_MspInit+0x44>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_DMA2D_MspInit+0x38>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d10b      	bne.n	8001766 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_DMA2D_MspInit+0x3c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a09      	ldr	r2, [pc, #36]	; (8001778 <HAL_DMA2D_MspInit+0x3c>)
 8001754:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <HAL_DMA2D_MspInit+0x3c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	4002b000 	.word	0x4002b000
 8001778:	40023800 	.word	0x40023800

0800177c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a51      	ldr	r2, [pc, #324]	; (80018e0 <HAL_LTDC_MspInit+0x164>)
 800179a:	4293      	cmp	r3, r2
 800179c:	f040 809b 	bne.w	80018d6 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80017a0:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 80017a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a4:	4a4f      	ldr	r2, [pc, #316]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 80017a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017aa:	6453      	str	r3, [r2, #68]	; 0x44
 80017ac:	4b4d      	ldr	r3, [pc, #308]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 80017ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017b4:	623b      	str	r3, [r7, #32]
 80017b6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017b8:	4b4a      	ldr	r3, [pc, #296]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	4a49      	ldr	r2, [pc, #292]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 80017be:	f043 0310 	orr.w	r3, r3, #16
 80017c2:	6313      	str	r3, [r2, #48]	; 0x30
 80017c4:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017d0:	4b44      	ldr	r3, [pc, #272]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	4a43      	ldr	r2, [pc, #268]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 80017d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017da:	6313      	str	r3, [r2, #48]	; 0x30
 80017dc:	4b41      	ldr	r3, [pc, #260]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 80017de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e4:	61bb      	str	r3, [r7, #24]
 80017e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80017e8:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a3d      	ldr	r2, [pc, #244]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 80017ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f2:	6313      	str	r3, [r2, #48]	; 0x30
 80017f4:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001800:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	4a37      	ldr	r2, [pc, #220]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 8001806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800180a:	6313      	str	r3, [r2, #48]	; 0x30
 800180c:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001818:	4b32      	ldr	r3, [pc, #200]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	4a31      	ldr	r2, [pc, #196]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 800181e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001822:	6313      	str	r3, [r2, #48]	; 0x30
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <HAL_LTDC_MspInit+0x168>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001830:	2310      	movs	r3, #16
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001840:	230e      	movs	r3, #14
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001848:	4619      	mov	r1, r3
 800184a:	4827      	ldr	r0, [pc, #156]	; (80018e8 <HAL_LTDC_MspInit+0x16c>)
 800184c:	f003 fc86 	bl	800515c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001850:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001862:	230e      	movs	r3, #14
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186a:	4619      	mov	r1, r3
 800186c:	481f      	ldr	r0, [pc, #124]	; (80018ec <HAL_LTDC_MspInit+0x170>)
 800186e:	f003 fc75 	bl	800515c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001872:	23f7      	movs	r3, #247	; 0xf7
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001882:	230e      	movs	r3, #14
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188a:	4619      	mov	r1, r3
 800188c:	4818      	ldr	r0, [pc, #96]	; (80018f0 <HAL_LTDC_MspInit+0x174>)
 800188e:	f003 fc65 	bl	800515c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80018a4:	2309      	movs	r3, #9
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ac:	4619      	mov	r1, r3
 80018ae:	4811      	ldr	r0, [pc, #68]	; (80018f4 <HAL_LTDC_MspInit+0x178>)
 80018b0:	f003 fc54 	bl	800515c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80018b4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018c6:	230e      	movs	r3, #14
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ce:	4619      	mov	r1, r3
 80018d0:	4809      	ldr	r0, [pc, #36]	; (80018f8 <HAL_LTDC_MspInit+0x17c>)
 80018d2:	f003 fc43 	bl	800515c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80018d6:	bf00      	nop
 80018d8:	3738      	adds	r7, #56	; 0x38
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40016800 	.word	0x40016800
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40022400 	.word	0x40022400
 80018f0:	40022800 	.word	0x40022800
 80018f4:	40021800 	.word	0x40021800
 80018f8:	40022000 	.word	0x40022000

080018fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a25      	ldr	r2, [pc, #148]	; (80019b0 <HAL_UART_MspInit+0xb4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d144      	bne.n	80019a8 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800191e:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <HAL_UART_MspInit+0xb8>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a24      	ldr	r2, [pc, #144]	; (80019b4 <HAL_UART_MspInit+0xb8>)
 8001924:	f043 0310 	orr.w	r3, r3, #16
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <HAL_UART_MspInit+0xb8>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <HAL_UART_MspInit+0xb8>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a1e      	ldr	r2, [pc, #120]	; (80019b4 <HAL_UART_MspInit+0xb8>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <HAL_UART_MspInit+0xb8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_UART_MspInit+0xb8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a18      	ldr	r2, [pc, #96]	; (80019b4 <HAL_UART_MspInit+0xb8>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <HAL_UART_MspInit+0xb8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001976:	2307      	movs	r3, #7
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	480d      	ldr	r0, [pc, #52]	; (80019b8 <HAL_UART_MspInit+0xbc>)
 8001982:	f003 fbeb 	bl	800515c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800198a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001998:	2307      	movs	r3, #7
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	4806      	ldr	r0, [pc, #24]	; (80019bc <HAL_UART_MspInit+0xc0>)
 80019a4:	f003 fbda 	bl	800515c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40011000 	.word	0x40011000
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020400 	.word	0x40020400
 80019bc:	40020000 	.word	0x40020000

080019c0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80019d4:	4b3a      	ldr	r3, [pc, #232]	; (8001ac0 <HAL_FMC_MspInit+0x100>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d16d      	bne.n	8001ab8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80019dc:	4b38      	ldr	r3, [pc, #224]	; (8001ac0 <HAL_FMC_MspInit+0x100>)
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80019e2:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <HAL_FMC_MspInit+0x104>)
 80019e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e6:	4a37      	ldr	r2, [pc, #220]	; (8001ac4 <HAL_FMC_MspInit+0x104>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6393      	str	r3, [r2, #56]	; 0x38
 80019ee:	4b35      	ldr	r3, [pc, #212]	; (8001ac4 <HAL_FMC_MspInit+0x104>)
 80019f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80019fa:	f64f 7383 	movw	r3, #65411	; 0xff83
 80019fe:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	4619      	mov	r1, r3
 8001a14:	482c      	ldr	r0, [pc, #176]	; (8001ac8 <HAL_FMC_MspInit+0x108>)
 8001a16:	f003 fba1 	bl	800515c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001a1a:	f248 1333 	movw	r3, #33075	; 0x8133
 8001a1e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a2c:	230c      	movs	r3, #12
 8001a2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	4619      	mov	r1, r3
 8001a34:	4825      	ldr	r0, [pc, #148]	; (8001acc <HAL_FMC_MspInit+0x10c>)
 8001a36:	f003 fb91 	bl	800515c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001a3a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001a3e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	4619      	mov	r1, r3
 8001a54:	481e      	ldr	r0, [pc, #120]	; (8001ad0 <HAL_FMC_MspInit+0x110>)
 8001a56:	f003 fb81 	bl	800515c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001a5a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001a5e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4817      	ldr	r0, [pc, #92]	; (8001ad4 <HAL_FMC_MspInit+0x114>)
 8001a76:	f003 fb71 	bl	800515c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001a7a:	2328      	movs	r3, #40	; 0x28
 8001a7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a86:	2303      	movs	r3, #3
 8001a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a8a:	230c      	movs	r3, #12
 8001a8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4811      	ldr	r0, [pc, #68]	; (8001ad8 <HAL_FMC_MspInit+0x118>)
 8001a94:	f003 fb62 	bl	800515c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001a98:	2308      	movs	r3, #8
 8001a9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001aa8:	230c      	movs	r3, #12
 8001aaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480a      	ldr	r0, [pc, #40]	; (8001adc <HAL_FMC_MspInit+0x11c>)
 8001ab2:	f003 fb53 	bl	800515c <HAL_GPIO_Init>
 8001ab6:	e000      	b.n	8001aba <HAL_FMC_MspInit+0xfa>
    return;
 8001ab8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200000cc 	.word	0x200000cc
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40021800 	.word	0x40021800
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40021400 	.word	0x40021400
 8001ad8:	40021c00 	.word	0x40021c00
 8001adc:	40020800 	.word	0x40020800

08001ae0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001ae8:	f7ff ff6a 	bl	80019c0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b40:	f001 fc68 	bl	8003414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
	return 1;
 8001b4c:	2301      	movs	r3, #1
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_kill>:

int _kill(int pid, int sig)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b62:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <_kill+0x20>)
 8001b64:	2216      	movs	r2, #22
 8001b66:	601a      	str	r2, [r3, #0]
	return -1;
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	200075ec 	.word	0x200075ec

08001b7c <_exit>:

void _exit (int status)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ffe5 	bl	8001b58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b8e:	e7fe      	b.n	8001b8e <_exit+0x12>

08001b90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	e00a      	b.n	8001bb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ba2:	f3af 8000 	nop.w
 8001ba6:	4601      	mov	r1, r0
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	60ba      	str	r2, [r7, #8]
 8001bae:	b2ca      	uxtb	r2, r1
 8001bb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dbf0      	blt.n	8001ba2 <_read+0x12>
	}

return len;
 8001bc0:	687b      	ldr	r3, [r7, #4]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <_close>:
	}
	return len;
}

int _close(int file)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
	return -1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf2:	605a      	str	r2, [r3, #4]
	return 0;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_isatty>:

int _isatty(int file)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
	return 1;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
	return 0;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b087      	sub	sp, #28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c3c:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <_sbrk+0x5c>)
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <_sbrk+0x60>)
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <_sbrk+0x64>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <_sbrk+0x68>)
 8001c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d205      	bcs.n	8001c70 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <_sbrk+0x6c>)
 8001c66:	220c      	movs	r2, #12
 8001c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	e009      	b.n	8001c84 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <_sbrk+0x64>)
 8001c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	371c      	adds	r7, #28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	20050000 	.word	0x20050000
 8001c94:	00000400 	.word	0x00000400
 8001c98:	200000d0 	.word	0x200000d0
 8001c9c:	20007600 	.word	0x20007600
 8001ca0:	200075ec 	.word	0x200075ec

08001ca4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <SystemInit+0x20>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cae:	4a05      	ldr	r2, [pc, #20]	; (8001cc4 <SystemInit+0x20>)
 8001cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ccc:	480d      	ldr	r0, [pc, #52]	; (8001d04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cce:	490e      	ldr	r1, [pc, #56]	; (8001d08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cd0:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd4:	e002      	b.n	8001cdc <LoopCopyDataInit>

08001cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cda:	3304      	adds	r3, #4

08001cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce0:	d3f9      	bcc.n	8001cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce2:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ce4:	4c0b      	ldr	r4, [pc, #44]	; (8001d14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce8:	e001      	b.n	8001cee <LoopFillZerobss>

08001cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cec:	3204      	adds	r2, #4

08001cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf0:	d3fb      	bcc.n	8001cea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cf2:	f7ff ffd7 	bl	8001ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf6:	f012 faed 	bl	80142d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfa:	f7fe fe31 	bl	8000960 <main>
  bx  lr    
 8001cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d00:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d08:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001d0c:	08059ce0 	.word	0x08059ce0
  ldr r2, =_sbss
 8001d10:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001d14:	200075fc 	.word	0x200075fc

08001d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC_IRQHandler>

08001d1a <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8001d24:	20c8      	movs	r0, #200	; 0xc8
 8001d26:	f000 fc33 	bl	8002590 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001d2a:	f000 fa7b 	bl	8002224 <ft5336_I2C_InitializeIfRequired>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8001d5e:	2300      	movs	r3, #0
 8001d60:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001d62:	f000 fa5f 	bl	8002224 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	e010      	b.n	8001d8e <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	21a8      	movs	r1, #168	; 0xa8
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 fbee 	bl	8002554 <TS_IO_Read>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8001d7c:	7b7b      	ldrb	r3, [r7, #13]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b51      	cmp	r3, #81	; 0x51
 8001d82:	d101      	bne.n	8001d88 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d802      	bhi.n	8001d9a <ft5336_ReadID+0x4e>
 8001d94:	7bbb      	ldrb	r3, [r7, #14]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0e8      	beq.n	8001d6c <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8001d9a:	7b7b      	ldrb	r3, [r7, #13]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	b29b      	uxth	r3, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fa45 	bl	8002244 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 f933 	bl	8002028 <ft5336_TS_DisableIT>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2102      	movs	r1, #2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fbb7 	bl	8002554 <TS_IO_Read>
 8001de6:	4603      	mov	r3, r0
 8001de8:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b05      	cmp	r3, #5
 8001dfc:	d901      	bls.n	8001e02 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <ft5336_TS_DetectTouch+0x50>)
 8001e08:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <ft5336_TS_DetectTouch+0x50>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	b2db      	uxtb	r3, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200000d4 	.word	0x200000d4

08001e20 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001e42:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <ft5336_TS_GetXY+0x1d8>)
 8001e44:	789a      	ldrb	r2, [r3, #2]
 8001e46:	4b6c      	ldr	r3, [pc, #432]	; (8001ff8 <ft5336_TS_GetXY+0x1d8>)
 8001e48:	785b      	ldrb	r3, [r3, #1]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	f080 80cf 	bcs.w	8001fee <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8001e50:	4b69      	ldr	r3, [pc, #420]	; (8001ff8 <ft5336_TS_GetXY+0x1d8>)
 8001e52:	789b      	ldrb	r3, [r3, #2]
 8001e54:	2b09      	cmp	r3, #9
 8001e56:	d871      	bhi.n	8001f3c <ft5336_TS_GetXY+0x11c>
 8001e58:	a201      	add	r2, pc, #4	; (adr r2, 8001e60 <ft5336_TS_GetXY+0x40>)
 8001e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5e:	bf00      	nop
 8001e60:	08001e89 	.word	0x08001e89
 8001e64:	08001e9b 	.word	0x08001e9b
 8001e68:	08001ead 	.word	0x08001ead
 8001e6c:	08001ebf 	.word	0x08001ebf
 8001e70:	08001ed1 	.word	0x08001ed1
 8001e74:	08001ee3 	.word	0x08001ee3
 8001e78:	08001ef5 	.word	0x08001ef5
 8001e7c:	08001f07 	.word	0x08001f07
 8001e80:	08001f19 	.word	0x08001f19
 8001e84:	08001f2b 	.word	0x08001f2b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8001e88:	2304      	movs	r3, #4
 8001e8a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8001e90:	2306      	movs	r3, #6
 8001e92:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8001e94:	2305      	movs	r3, #5
 8001e96:	753b      	strb	r3, [r7, #20]
      break;
 8001e98:	e051      	b.n	8001f3e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8001e9a:	230a      	movs	r3, #10
 8001e9c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8001e9e:	2309      	movs	r3, #9
 8001ea0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8001ea6:	230b      	movs	r3, #11
 8001ea8:	753b      	strb	r3, [r7, #20]
      break;
 8001eaa:	e048      	b.n	8001f3e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001eac:	2310      	movs	r3, #16
 8001eae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001eb0:	230f      	movs	r3, #15
 8001eb2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001eb4:	2312      	movs	r3, #18
 8001eb6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8001eb8:	2311      	movs	r3, #17
 8001eba:	753b      	strb	r3, [r7, #20]
      break;
 8001ebc:	e03f      	b.n	8001f3e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8001ebe:	2316      	movs	r3, #22
 8001ec0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001ec2:	2315      	movs	r3, #21
 8001ec4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8001ec6:	2318      	movs	r3, #24
 8001ec8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8001eca:	2317      	movs	r3, #23
 8001ecc:	753b      	strb	r3, [r7, #20]
      break;
 8001ece:	e036      	b.n	8001f3e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001ed0:	231c      	movs	r3, #28
 8001ed2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8001ed4:	231b      	movs	r3, #27
 8001ed6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8001ed8:	231e      	movs	r3, #30
 8001eda:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8001edc:	231d      	movs	r3, #29
 8001ede:	753b      	strb	r3, [r7, #20]
      break;
 8001ee0:	e02d      	b.n	8001f3e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8001ee2:	2322      	movs	r3, #34	; 0x22
 8001ee4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8001ee6:	2321      	movs	r3, #33	; 0x21
 8001ee8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8001eea:	2324      	movs	r3, #36	; 0x24
 8001eec:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8001eee:	2323      	movs	r3, #35	; 0x23
 8001ef0:	753b      	strb	r3, [r7, #20]
      break;
 8001ef2:	e024      	b.n	8001f3e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8001ef4:	2328      	movs	r3, #40	; 0x28
 8001ef6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8001ef8:	2327      	movs	r3, #39	; 0x27
 8001efa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8001efc:	232a      	movs	r3, #42	; 0x2a
 8001efe:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001f00:	2329      	movs	r3, #41	; 0x29
 8001f02:	753b      	strb	r3, [r7, #20]
      break;
 8001f04:	e01b      	b.n	8001f3e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8001f06:	232e      	movs	r3, #46	; 0x2e
 8001f08:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8001f0a:	232d      	movs	r3, #45	; 0x2d
 8001f0c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8001f0e:	2330      	movs	r3, #48	; 0x30
 8001f10:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8001f12:	232f      	movs	r3, #47	; 0x2f
 8001f14:	753b      	strb	r3, [r7, #20]
      break;
 8001f16:	e012      	b.n	8001f3e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8001f18:	2334      	movs	r3, #52	; 0x34
 8001f1a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8001f1c:	2333      	movs	r3, #51	; 0x33
 8001f1e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8001f20:	2336      	movs	r3, #54	; 0x36
 8001f22:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8001f24:	2335      	movs	r3, #53	; 0x35
 8001f26:	753b      	strb	r3, [r7, #20]
      break;
 8001f28:	e009      	b.n	8001f3e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8001f2a:	233a      	movs	r3, #58	; 0x3a
 8001f2c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8001f2e:	2339      	movs	r3, #57	; 0x39
 8001f30:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8001f32:	233c      	movs	r3, #60	; 0x3c
 8001f34:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8001f36:	233b      	movs	r3, #59	; 0x3b
 8001f38:	753b      	strb	r3, [r7, #20]
      break;
 8001f3a:	e000      	b.n	8001f3e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8001f3c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8001f3e:	89fb      	ldrh	r3, [r7, #14]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	7dfa      	ldrb	r2, [r7, #23]
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fb04 	bl	8002554 <TS_IO_Read>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001f50:	7cfb      	ldrb	r3, [r7, #19]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <ft5336_TS_GetXY+0x1dc>)
 8001f58:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001f5a:	89fb      	ldrh	r3, [r7, #14]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	7dba      	ldrb	r2, [r7, #22]
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 faf6 	bl	8002554 <TS_IO_Read>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001f76:	b21a      	sxth	r2, r3
 8001f78:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <ft5336_TS_GetXY+0x1dc>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	b21b      	sxth	r3, r3
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	b21b      	sxth	r3, r3
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <ft5336_TS_GetXY+0x1dc>)
 8001f86:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001f88:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <ft5336_TS_GetXY+0x1dc>)
 8001f8a:	881a      	ldrh	r2, [r3, #0]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001f90:	89fb      	ldrh	r3, [r7, #14]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	7d7a      	ldrb	r2, [r7, #21]
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fadb 	bl	8002554 <TS_IO_Read>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001fa2:	7cfb      	ldrb	r3, [r7, #19]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <ft5336_TS_GetXY+0x1dc>)
 8001faa:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001fac:	89fb      	ldrh	r3, [r7, #14]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	7d3a      	ldrb	r2, [r7, #20]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 facd 	bl	8002554 <TS_IO_Read>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <ft5336_TS_GetXY+0x1dc>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <ft5336_TS_GetXY+0x1dc>)
 8001fd8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <ft5336_TS_GetXY+0x1dc>)
 8001fdc:	881a      	ldrh	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <ft5336_TS_GetXY+0x1d8>)
 8001fe4:	789b      	ldrb	r3, [r3, #2]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <ft5336_TS_GetXY+0x1d8>)
 8001fec:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200000d4 	.word	0x200000d4
 8001ffc:	200000d8 	.word	0x200000d8

08002000 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800200e:	2301      	movs	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	21a4      	movs	r1, #164	; 0xa4
 800201a:	4618      	mov	r0, r3
 800201c:	f000 fa80 	bl	8002520 <TS_IO_Write>
}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8002036:	2300      	movs	r3, #0
 8002038:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	21a4      	movs	r1, #164	; 0xa4
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fa6c 	bl	8002520 <TS_IO_Write>
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	6039      	str	r1, [r7, #0]
 8002088:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2101      	movs	r1, #1
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fa5d 	bl	8002554 <TS_IO_Read>
 800209a:	4603      	mov	r3, r0
 800209c:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	601a      	str	r2, [r3, #0]
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	4603      	mov	r3, r0
 80020be:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80020d0:	4b4d      	ldr	r3, [pc, #308]	; (8002208 <ft5336_TS_GetTouchInfo+0x158>)
 80020d2:	785b      	ldrb	r3, [r3, #1]
 80020d4:	461a      	mov	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	4293      	cmp	r3, r2
 80020da:	f080 8090 	bcs.w	80021fe <ft5336_TS_GetTouchInfo+0x14e>
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b09      	cmp	r3, #9
 80020e2:	d85d      	bhi.n	80021a0 <ft5336_TS_GetTouchInfo+0xf0>
 80020e4:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <ft5336_TS_GetTouchInfo+0x3c>)
 80020e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ea:	bf00      	nop
 80020ec:	08002115 	.word	0x08002115
 80020f0:	08002123 	.word	0x08002123
 80020f4:	08002131 	.word	0x08002131
 80020f8:	0800213f 	.word	0x0800213f
 80020fc:	0800214d 	.word	0x0800214d
 8002100:	0800215b 	.word	0x0800215b
 8002104:	08002169 	.word	0x08002169
 8002108:	08002177 	.word	0x08002177
 800210c:	08002185 	.word	0x08002185
 8002110:	08002193 	.word	0x08002193
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8002114:	2303      	movs	r3, #3
 8002116:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8002118:	2307      	movs	r3, #7
 800211a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 800211c:	2308      	movs	r3, #8
 800211e:	757b      	strb	r3, [r7, #21]
      break;
 8002120:	e03f      	b.n	80021a2 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8002122:	2309      	movs	r3, #9
 8002124:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8002126:	230d      	movs	r3, #13
 8002128:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800212a:	230e      	movs	r3, #14
 800212c:	757b      	strb	r3, [r7, #21]
      break;
 800212e:	e038      	b.n	80021a2 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8002130:	230f      	movs	r3, #15
 8002132:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8002134:	2313      	movs	r3, #19
 8002136:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8002138:	2314      	movs	r3, #20
 800213a:	757b      	strb	r3, [r7, #21]
      break;
 800213c:	e031      	b.n	80021a2 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800213e:	2315      	movs	r3, #21
 8002140:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8002142:	2319      	movs	r3, #25
 8002144:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8002146:	231a      	movs	r3, #26
 8002148:	757b      	strb	r3, [r7, #21]
      break;
 800214a:	e02a      	b.n	80021a2 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 800214c:	231b      	movs	r3, #27
 800214e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8002150:	231f      	movs	r3, #31
 8002152:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8002154:	2320      	movs	r3, #32
 8002156:	757b      	strb	r3, [r7, #21]
      break;
 8002158:	e023      	b.n	80021a2 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800215a:	2321      	movs	r3, #33	; 0x21
 800215c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800215e:	2325      	movs	r3, #37	; 0x25
 8002160:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8002162:	2326      	movs	r3, #38	; 0x26
 8002164:	757b      	strb	r3, [r7, #21]
      break;
 8002166:	e01c      	b.n	80021a2 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8002168:	2327      	movs	r3, #39	; 0x27
 800216a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 800216c:	232b      	movs	r3, #43	; 0x2b
 800216e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8002170:	232c      	movs	r3, #44	; 0x2c
 8002172:	757b      	strb	r3, [r7, #21]
      break;
 8002174:	e015      	b.n	80021a2 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8002176:	232d      	movs	r3, #45	; 0x2d
 8002178:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800217a:	2331      	movs	r3, #49	; 0x31
 800217c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800217e:	2332      	movs	r3, #50	; 0x32
 8002180:	757b      	strb	r3, [r7, #21]
      break;
 8002182:	e00e      	b.n	80021a2 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8002184:	2333      	movs	r3, #51	; 0x33
 8002186:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8002188:	2337      	movs	r3, #55	; 0x37
 800218a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 800218c:	2338      	movs	r3, #56	; 0x38
 800218e:	757b      	strb	r3, [r7, #21]
      break;
 8002190:	e007      	b.n	80021a2 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8002192:	2339      	movs	r3, #57	; 0x39
 8002194:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8002196:	233d      	movs	r3, #61	; 0x3d
 8002198:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800219a:	233e      	movs	r3, #62	; 0x3e
 800219c:	757b      	strb	r3, [r7, #21]
      break;
 800219e:	e000      	b.n	80021a2 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 80021a0:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80021a2:	89fb      	ldrh	r3, [r7, #14]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	7dfa      	ldrb	r2, [r7, #23]
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 f9d2 	bl	8002554 <TS_IO_Read>
 80021b0:	4603      	mov	r3, r0
 80021b2:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80021b4:	7d3b      	ldrb	r3, [r7, #20]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	119b      	asrs	r3, r3, #6
 80021ba:	f003 0203 	and.w	r2, r3, #3
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80021c2:	89fb      	ldrh	r3, [r7, #14]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	7dba      	ldrb	r2, [r7, #22]
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f9c2 	bl	8002554 <TS_IO_Read>
 80021d0:	4603      	mov	r3, r0
 80021d2:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80021d4:	7d3b      	ldrb	r3, [r7, #20]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80021de:	89fb      	ldrh	r3, [r7, #14]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	7d7a      	ldrb	r2, [r7, #21]
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f9b4 	bl	8002554 <TS_IO_Read>
 80021ec:	4603      	mov	r3, r0
 80021ee:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80021f0:	7d3b      	ldrb	r3, [r7, #20]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	111b      	asrs	r3, r3, #4
 80021f6:	f003 0204 	and.w	r2, r3, #4
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200000d4 	.word	0x200000d4

0800220c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8002212:	781b      	ldrb	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	200000d4 	.word	0x200000d4

08002224 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8002228:	f7ff fff0 	bl	800220c <ft5336_Get_I2C_InitializedStatus>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d104      	bne.n	800223c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8002232:	f000 f96b 	bl	800250c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8002236:	4b02      	ldr	r3, [pc, #8]	; (8002240 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
  }
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200000d4 	.word	0x200000d4

08002244 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8002252:	68fb      	ldr	r3, [r7, #12]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08c      	sub	sp, #48	; 0x30
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a51      	ldr	r2, [pc, #324]	; (80023b0 <I2Cx_MspInit+0x150>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d14d      	bne.n	800230c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002270:	4b50      	ldr	r3, [pc, #320]	; (80023b4 <I2Cx_MspInit+0x154>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	4a4f      	ldr	r2, [pc, #316]	; (80023b4 <I2Cx_MspInit+0x154>)
 8002276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800227a:	6313      	str	r3, [r2, #48]	; 0x30
 800227c:	4b4d      	ldr	r3, [pc, #308]	; (80023b4 <I2Cx_MspInit+0x154>)
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800228c:	2312      	movs	r3, #18
 800228e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002294:	2302      	movs	r3, #2
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002298:	2304      	movs	r3, #4
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	4619      	mov	r1, r3
 80022a2:	4845      	ldr	r0, [pc, #276]	; (80023b8 <I2Cx_MspInit+0x158>)
 80022a4:	f002 ff5a 	bl	800515c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80022a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80022ae:	f107 031c 	add.w	r3, r7, #28
 80022b2:	4619      	mov	r1, r3
 80022b4:	4840      	ldr	r0, [pc, #256]	; (80023b8 <I2Cx_MspInit+0x158>)
 80022b6:	f002 ff51 	bl	800515c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80022ba:	4b3e      	ldr	r3, [pc, #248]	; (80023b4 <I2Cx_MspInit+0x154>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a3d      	ldr	r2, [pc, #244]	; (80023b4 <I2Cx_MspInit+0x154>)
 80022c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
 80022c6:	4b3b      	ldr	r3, [pc, #236]	; (80023b4 <I2Cx_MspInit+0x154>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80022d2:	4b38      	ldr	r3, [pc, #224]	; (80023b4 <I2Cx_MspInit+0x154>)
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	4a37      	ldr	r2, [pc, #220]	; (80023b4 <I2Cx_MspInit+0x154>)
 80022d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022dc:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80022de:	4b35      	ldr	r3, [pc, #212]	; (80023b4 <I2Cx_MspInit+0x154>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4a34      	ldr	r2, [pc, #208]	; (80023b4 <I2Cx_MspInit+0x154>)
 80022e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022e8:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	210f      	movs	r1, #15
 80022ee:	2048      	movs	r0, #72	; 0x48
 80022f0:	f001 f9af 	bl	8003652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80022f4:	2048      	movs	r0, #72	; 0x48
 80022f6:	f001 f9c8 	bl	800368a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	210f      	movs	r1, #15
 80022fe:	2049      	movs	r0, #73	; 0x49
 8002300:	f001 f9a7 	bl	8003652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002304:	2049      	movs	r0, #73	; 0x49
 8002306:	f001 f9c0 	bl	800368a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800230a:	e04d      	b.n	80023a8 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800230c:	4b29      	ldr	r3, [pc, #164]	; (80023b4 <I2Cx_MspInit+0x154>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	4a28      	ldr	r2, [pc, #160]	; (80023b4 <I2Cx_MspInit+0x154>)
 8002312:	f043 0302 	orr.w	r3, r3, #2
 8002316:	6313      	str	r3, [r2, #48]	; 0x30
 8002318:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <I2Cx_MspInit+0x154>)
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002328:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800232a:	2312      	movs	r3, #18
 800232c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002332:	2302      	movs	r3, #2
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002336:	2304      	movs	r3, #4
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800233a:	f107 031c 	add.w	r3, r7, #28
 800233e:	4619      	mov	r1, r3
 8002340:	481e      	ldr	r0, [pc, #120]	; (80023bc <I2Cx_MspInit+0x15c>)
 8002342:	f002 ff0b 	bl	800515c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800234a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800234c:	f107 031c 	add.w	r3, r7, #28
 8002350:	4619      	mov	r1, r3
 8002352:	481a      	ldr	r0, [pc, #104]	; (80023bc <I2Cx_MspInit+0x15c>)
 8002354:	f002 ff02 	bl	800515c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002358:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <I2Cx_MspInit+0x154>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <I2Cx_MspInit+0x154>)
 800235e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002362:	6413      	str	r3, [r2, #64]	; 0x40
 8002364:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <I2Cx_MspInit+0x154>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002370:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <I2Cx_MspInit+0x154>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4a0f      	ldr	r2, [pc, #60]	; (80023b4 <I2Cx_MspInit+0x154>)
 8002376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800237a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800237c:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <I2Cx_MspInit+0x154>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4a0c      	ldr	r2, [pc, #48]	; (80023b4 <I2Cx_MspInit+0x154>)
 8002382:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002386:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002388:	2200      	movs	r2, #0
 800238a:	210f      	movs	r1, #15
 800238c:	201f      	movs	r0, #31
 800238e:	f001 f960 	bl	8003652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002392:	201f      	movs	r0, #31
 8002394:	f001 f979 	bl	800368a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	210f      	movs	r1, #15
 800239c:	2020      	movs	r0, #32
 800239e:	f001 f958 	bl	8003652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80023a2:	2020      	movs	r0, #32
 80023a4:	f001 f971 	bl	800368a <HAL_NVIC_EnableIRQ>
}
 80023a8:	bf00      	nop
 80023aa:	3730      	adds	r7, #48	; 0x30
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	200000dc 	.word	0x200000dc
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40021c00 	.word	0x40021c00
 80023bc:	40020400 	.word	0x40020400

080023c0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f003 fb8f 	bl	8005aec <HAL_I2C_GetState>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d125      	bne.n	8002420 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a14      	ldr	r2, [pc, #80]	; (8002428 <I2Cx_Init+0x68>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d103      	bne.n	80023e4 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a13      	ldr	r2, [pc, #76]	; (800242c <I2Cx_Init+0x6c>)
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e002      	b.n	80023ea <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a12      	ldr	r2, [pc, #72]	; (8002430 <I2Cx_Init+0x70>)
 80023e8:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a11      	ldr	r2, [pc, #68]	; (8002434 <I2Cx_Init+0x74>)
 80023ee:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff23 	bl	8002260 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f003 f864 	bl	80054e8 <HAL_I2C_Init>
  }
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200000dc 	.word	0x200000dc
 800242c:	40005c00 	.word	0x40005c00
 8002430:	40005400 	.word	0x40005400
 8002434:	40912732 	.word	0x40912732

08002438 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af04      	add	r7, sp, #16
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	4608      	mov	r0, r1
 8002442:	4611      	mov	r1, r2
 8002444:	461a      	mov	r2, r3
 8002446:	4603      	mov	r3, r0
 8002448:	72fb      	strb	r3, [r7, #11]
 800244a:	460b      	mov	r3, r1
 800244c:	813b      	strh	r3, [r7, #8]
 800244e:	4613      	mov	r3, r2
 8002450:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002456:	7afb      	ldrb	r3, [r7, #11]
 8002458:	b299      	uxth	r1, r3
 800245a:	88f8      	ldrh	r0, [r7, #6]
 800245c:	893a      	ldrh	r2, [r7, #8]
 800245e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002462:	9302      	str	r3, [sp, #8]
 8002464:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	4603      	mov	r3, r0
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f003 fa22 	bl	80058b8 <HAL_I2C_Mem_Read>
 8002474:	4603      	mov	r3, r0
 8002476:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d004      	beq.n	8002488 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800247e:	7afb      	ldrb	r3, [r7, #11]
 8002480:	4619      	mov	r1, r3
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f832 	bl	80024ec <I2Cx_Error>
  }
  return status;    
 8002488:	7dfb      	ldrb	r3, [r7, #23]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b08a      	sub	sp, #40	; 0x28
 8002496:	af04      	add	r7, sp, #16
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	4608      	mov	r0, r1
 800249c:	4611      	mov	r1, r2
 800249e:	461a      	mov	r2, r3
 80024a0:	4603      	mov	r3, r0
 80024a2:	72fb      	strb	r3, [r7, #11]
 80024a4:	460b      	mov	r3, r1
 80024a6:	813b      	strh	r3, [r7, #8]
 80024a8:	4613      	mov	r3, r2
 80024aa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80024b0:	7afb      	ldrb	r3, [r7, #11]
 80024b2:	b299      	uxth	r1, r3
 80024b4:	88f8      	ldrh	r0, [r7, #6]
 80024b6:	893a      	ldrh	r2, [r7, #8]
 80024b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	4603      	mov	r3, r0
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f003 f8e1 	bl	8005690 <HAL_I2C_Mem_Write>
 80024ce:	4603      	mov	r3, r0
 80024d0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d004      	beq.n	80024e2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80024d8:	7afb      	ldrb	r3, [r7, #11]
 80024da:	4619      	mov	r1, r3
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f805 	bl	80024ec <I2Cx_Error>
  }
  return status;
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f003 f885 	bl	8005608 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ff5e 	bl	80023c0 <I2Cx_Init>
}
 8002504:	bf00      	nop
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <TS_IO_Init+0x10>)
 8002512:	f7ff ff55 	bl	80023c0 <I2Cx_Init>
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200000dc 	.word	0x200000dc

08002520 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af02      	add	r7, sp, #8
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
 800252a:	460b      	mov	r3, r1
 800252c:	71bb      	strb	r3, [r7, #6]
 800252e:	4613      	mov	r3, r2
 8002530:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002532:	79bb      	ldrb	r3, [r7, #6]
 8002534:	b29a      	uxth	r2, r3
 8002536:	79f9      	ldrb	r1, [r7, #7]
 8002538:	2301      	movs	r3, #1
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	1d7b      	adds	r3, r7, #5
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2301      	movs	r3, #1
 8002542:	4803      	ldr	r0, [pc, #12]	; (8002550 <TS_IO_Write+0x30>)
 8002544:	f7ff ffa5 	bl	8002492 <I2Cx_WriteMultiple>
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200000dc 	.word	0x200000dc

08002554 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af02      	add	r7, sp, #8
 800255a:	4603      	mov	r3, r0
 800255c:	460a      	mov	r2, r1
 800255e:	71fb      	strb	r3, [r7, #7]
 8002560:	4613      	mov	r3, r2
 8002562:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002568:	79bb      	ldrb	r3, [r7, #6]
 800256a:	b29a      	uxth	r2, r3
 800256c:	79f9      	ldrb	r1, [r7, #7]
 800256e:	2301      	movs	r3, #1
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	f107 030f 	add.w	r3, r7, #15
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	2301      	movs	r3, #1
 800257a:	4804      	ldr	r0, [pc, #16]	; (800258c <TS_IO_Read+0x38>)
 800257c:	f7ff ff5c 	bl	8002438 <I2Cx_ReadMultiple>

  return read_value;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200000dc 	.word	0x200000dc

08002590 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 ff5b 	bl	8003454 <HAL_Delay>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80025ac:	4b31      	ldr	r3, [pc, #196]	; (8002674 <BSP_LCD_Init+0xcc>)
 80025ae:	2228      	movs	r2, #40	; 0x28
 80025b0:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80025b2:	4b30      	ldr	r3, [pc, #192]	; (8002674 <BSP_LCD_Init+0xcc>)
 80025b4:	2209      	movs	r2, #9
 80025b6:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80025b8:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <BSP_LCD_Init+0xcc>)
 80025ba:	2235      	movs	r2, #53	; 0x35
 80025bc:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80025be:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <BSP_LCD_Init+0xcc>)
 80025c0:	220b      	movs	r2, #11
 80025c2:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80025c4:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <BSP_LCD_Init+0xcc>)
 80025c6:	f240 121b 	movw	r2, #283	; 0x11b
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80025cc:	4b29      	ldr	r3, [pc, #164]	; (8002674 <BSP_LCD_Init+0xcc>)
 80025ce:	f240 2215 	movw	r2, #533	; 0x215
 80025d2:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <BSP_LCD_Init+0xcc>)
 80025d6:	f240 121d 	movw	r2, #285	; 0x11d
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <BSP_LCD_Init+0xcc>)
 80025de:	f240 2235 	movw	r2, #565	; 0x235
 80025e2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80025e4:	2100      	movs	r1, #0
 80025e6:	4823      	ldr	r0, [pc, #140]	; (8002674 <BSP_LCD_Init+0xcc>)
 80025e8:	f000 fa20 	bl	8002a2c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80025ec:	4b21      	ldr	r3, [pc, #132]	; (8002674 <BSP_LCD_Init+0xcc>)
 80025ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80025f2:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80025f4:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <BSP_LCD_Init+0xcc>)
 80025f6:	f44f 7288 	mov.w	r2, #272	; 0x110
 80025fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80025fc:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <BSP_LCD_Init+0xcc>)
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <BSP_LCD_Init+0xcc>)
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <BSP_LCD_Init+0xcc>)
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002614:	4b17      	ldr	r3, [pc, #92]	; (8002674 <BSP_LCD_Init+0xcc>)
 8002616:	2200      	movs	r2, #0
 8002618:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800261a:	4b16      	ldr	r3, [pc, #88]	; (8002674 <BSP_LCD_Init+0xcc>)
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002620:	4b14      	ldr	r3, [pc, #80]	; (8002674 <BSP_LCD_Init+0xcc>)
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <BSP_LCD_Init+0xcc>)
 8002628:	2200      	movs	r2, #0
 800262a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <BSP_LCD_Init+0xcc>)
 800262e:	4a12      	ldr	r2, [pc, #72]	; (8002678 <BSP_LCD_Init+0xd0>)
 8002630:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002632:	4810      	ldr	r0, [pc, #64]	; (8002674 <BSP_LCD_Init+0xcc>)
 8002634:	f003 fd92 	bl	800615c <HAL_LTDC_GetState>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d103      	bne.n	8002646 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800263e:	2100      	movs	r1, #0
 8002640:	480c      	ldr	r0, [pc, #48]	; (8002674 <BSP_LCD_Init+0xcc>)
 8002642:	f000 f919 	bl	8002878 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002646:	480b      	ldr	r0, [pc, #44]	; (8002674 <BSP_LCD_Init+0xcc>)
 8002648:	f003 fc7a 	bl	8005f40 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800264c:	2201      	movs	r2, #1
 800264e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002652:	480a      	ldr	r0, [pc, #40]	; (800267c <BSP_LCD_Init+0xd4>)
 8002654:	f002 ff2e 	bl	80054b4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002658:	2201      	movs	r2, #1
 800265a:	2108      	movs	r1, #8
 800265c:	4808      	ldr	r0, [pc, #32]	; (8002680 <BSP_LCD_Init+0xd8>)
 800265e:	f002 ff29 	bl	80054b4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002662:	f000 fa4b 	bl	8002afc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002666:	4807      	ldr	r0, [pc, #28]	; (8002684 <BSP_LCD_Init+0xdc>)
 8002668:	f000 f8a6 	bl	80027b8 <BSP_LCD_SetFont>
  
  return LCD_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000e68 	.word	0x20000e68
 8002678:	40016800 	.word	0x40016800
 800267c:	40022000 	.word	0x40022000
 8002680:	40022800 	.word	0x40022800
 8002684:	2000002c 	.word	0x2000002c

08002688 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <BSP_LCD_GetXSize+0x20>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a06      	ldr	r2, [pc, #24]	; (80026ac <BSP_LCD_GetXSize+0x24>)
 8002692:	2134      	movs	r1, #52	; 0x34
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	4413      	add	r3, r2
 800269a:	3360      	adds	r3, #96	; 0x60
 800269c:	681b      	ldr	r3, [r3, #0]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	20000168 	.word	0x20000168
 80026ac:	20000e68 	.word	0x20000e68

080026b0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <BSP_LCD_GetYSize+0x20>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a06      	ldr	r2, [pc, #24]	; (80026d4 <BSP_LCD_GetYSize+0x24>)
 80026ba:	2134      	movs	r1, #52	; 0x34
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	3364      	adds	r3, #100	; 0x64
 80026c4:	681b      	ldr	r3, [r3, #0]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	20000168 	.word	0x20000168
 80026d4:	20000e68 	.word	0x20000e68

080026d8 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80026d8:	b580      	push	{r7, lr}
 80026da:	b090      	sub	sp, #64	; 0x40
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80026e8:	f7ff ffce 	bl	8002688 <BSP_LCD_GetXSize>
 80026ec:	4603      	mov	r3, r0
 80026ee:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80026f4:	f7ff ffdc 	bl	80026b0 <BSP_LCD_GetYSize>
 80026f8:	4603      	mov	r3, r0
 80026fa:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002704:	23ff      	movs	r3, #255	; 0xff
 8002706:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800271e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002724:	2307      	movs	r3, #7
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002728:	f7ff ffae 	bl	8002688 <BSP_LCD_GetXSize>
 800272c:	4603      	mov	r3, r0
 800272e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002730:	f7ff ffbe 	bl	80026b0 <BSP_LCD_GetYSize>
 8002734:	4603      	mov	r3, r0
 8002736:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002738:	88fa      	ldrh	r2, [r7, #6]
 800273a:	f107 030c 	add.w	r3, r7, #12
 800273e:	4619      	mov	r1, r3
 8002740:	4812      	ldr	r0, [pc, #72]	; (800278c <BSP_LCD_LayerDefaultInit+0xb4>)
 8002742:	f003 fccd 	bl	80060e0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	4911      	ldr	r1, [pc, #68]	; (8002790 <BSP_LCD_LayerDefaultInit+0xb8>)
 800274a:	4613      	mov	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	3304      	adds	r3, #4
 8002756:	f04f 32ff 	mov.w	r2, #4294967295
 800275a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800275c:	88fa      	ldrh	r2, [r7, #6]
 800275e:	490c      	ldr	r1, [pc, #48]	; (8002790 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3308      	adds	r3, #8
 800276c:	4a09      	ldr	r2, [pc, #36]	; (8002794 <BSP_LCD_LayerDefaultInit+0xbc>)
 800276e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002770:	88fa      	ldrh	r2, [r7, #6]
 8002772:	4907      	ldr	r1, [pc, #28]	; (8002790 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002782:	601a      	str	r2, [r3, #0]
}
 8002784:	bf00      	nop
 8002786:	3740      	adds	r7, #64	; 0x40
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000e68 	.word	0x20000e68
 8002790:	2000016c 	.word	0x2000016c
 8002794:	2000002c 	.word	0x2000002c

08002798 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <BSP_LCD_SelectLayer+0x1c>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6013      	str	r3, [r2, #0]
} 
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000168 	.word	0x20000168

080027b8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <BSP_LCD_SetFont+0x2c>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4908      	ldr	r1, [pc, #32]	; (80027e8 <BSP_LCD_SetFont+0x30>)
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	3308      	adds	r3, #8
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	601a      	str	r2, [r3, #0]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000168 	.word	0x20000168
 80027e8:	2000016c 	.word	0x2000016c

080027ec <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80027ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <BSP_LCD_Clear+0x48>)
 80027f6:	681c      	ldr	r4, [r3, #0]
 80027f8:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <BSP_LCD_Clear+0x48>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <BSP_LCD_Clear+0x4c>)
 80027fe:	2134      	movs	r1, #52	; 0x34
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	4413      	add	r3, r2
 8002806:	335c      	adds	r3, #92	; 0x5c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	461e      	mov	r6, r3
 800280c:	f7ff ff3c 	bl	8002688 <BSP_LCD_GetXSize>
 8002810:	4605      	mov	r5, r0
 8002812:	f7ff ff4d 	bl	80026b0 <BSP_LCD_GetYSize>
 8002816:	4602      	mov	r2, r0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	2300      	movs	r3, #0
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	4613      	mov	r3, r2
 8002822:	462a      	mov	r2, r5
 8002824:	4631      	mov	r1, r6
 8002826:	4620      	mov	r0, r4
 8002828:	f000 f91c 	bl	8002a64 <LL_FillBuffer>
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002834:	20000168 	.word	0x20000168
 8002838:	20000e68 	.word	0x20000e68

0800283c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002840:	4b0a      	ldr	r3, [pc, #40]	; (800286c <BSP_LCD_DisplayOn+0x30>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <BSP_LCD_DisplayOn+0x30>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002850:	2201      	movs	r2, #1
 8002852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002856:	4806      	ldr	r0, [pc, #24]	; (8002870 <BSP_LCD_DisplayOn+0x34>)
 8002858:	f002 fe2c 	bl	80054b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800285c:	2201      	movs	r2, #1
 800285e:	2108      	movs	r1, #8
 8002860:	4804      	ldr	r0, [pc, #16]	; (8002874 <BSP_LCD_DisplayOn+0x38>)
 8002862:	f002 fe27 	bl	80054b4 <HAL_GPIO_WritePin>
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000e68 	.word	0x20000e68
 8002870:	40022000 	.word	0x40022000
 8002874:	40022800 	.word	0x40022800

08002878 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b090      	sub	sp, #64	; 0x40
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002882:	4b64      	ldr	r3, [pc, #400]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	4a63      	ldr	r2, [pc, #396]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 8002888:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800288c:	6453      	str	r3, [r2, #68]	; 0x44
 800288e:	4b61      	ldr	r3, [pc, #388]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28
 8002898:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800289a:	4b5e      	ldr	r3, [pc, #376]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4a5d      	ldr	r2, [pc, #372]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 80028a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028a4:	6313      	str	r3, [r2, #48]	; 0x30
 80028a6:	4b5b      	ldr	r3, [pc, #364]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028b2:	4b58      	ldr	r3, [pc, #352]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a57      	ldr	r2, [pc, #348]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 80028b8:	f043 0310 	orr.w	r3, r3, #16
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b55      	ldr	r3, [pc, #340]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	623b      	str	r3, [r7, #32]
 80028c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028ca:	4b52      	ldr	r3, [pc, #328]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a51      	ldr	r2, [pc, #324]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 80028d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b4f      	ldr	r3, [pc, #316]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028de:	61fb      	str	r3, [r7, #28]
 80028e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80028e2:	4b4c      	ldr	r3, [pc, #304]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a4b      	ldr	r2, [pc, #300]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 80028e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b49      	ldr	r3, [pc, #292]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80028fa:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a45      	ldr	r2, [pc, #276]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 8002900:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b43      	ldr	r3, [pc, #268]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002912:	4b40      	ldr	r3, [pc, #256]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a3f      	ldr	r2, [pc, #252]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 8002918:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b3d      	ldr	r3, [pc, #244]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800292a:	4b3a      	ldr	r3, [pc, #232]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a39      	ldr	r2, [pc, #228]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 8002930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002942:	4b34      	ldr	r3, [pc, #208]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a33      	ldr	r2, [pc, #204]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 8002948:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <BSP_LCD_MspInit+0x19c>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800295a:	2310      	movs	r3, #16
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002966:	2302      	movs	r3, #2
 8002968:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800296a:	230e      	movs	r3, #14
 800296c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800296e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002972:	4619      	mov	r1, r3
 8002974:	4828      	ldr	r0, [pc, #160]	; (8002a18 <BSP_LCD_MspInit+0x1a0>)
 8002976:	f002 fbf1 	bl	800515c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800297a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002984:	2309      	movs	r3, #9
 8002986:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800298c:	4619      	mov	r1, r3
 800298e:	4823      	ldr	r0, [pc, #140]	; (8002a1c <BSP_LCD_MspInit+0x1a4>)
 8002990:	f002 fbe4 	bl	800515c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002994:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800299e:	230e      	movs	r3, #14
 80029a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80029a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029a6:	4619      	mov	r1, r3
 80029a8:	481d      	ldr	r0, [pc, #116]	; (8002a20 <BSP_LCD_MspInit+0x1a8>)
 80029aa:	f002 fbd7 	bl	800515c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80029ae:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80029b8:	230e      	movs	r3, #14
 80029ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80029bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029c0:	4619      	mov	r1, r3
 80029c2:	4818      	ldr	r0, [pc, #96]	; (8002a24 <BSP_LCD_MspInit+0x1ac>)
 80029c4:	f002 fbca 	bl	800515c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80029c8:	23f7      	movs	r3, #247	; 0xf7
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80029d0:	230e      	movs	r3, #14
 80029d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80029d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d8:	4619      	mov	r1, r3
 80029da:	4813      	ldr	r0, [pc, #76]	; (8002a28 <BSP_LCD_MspInit+0x1b0>)
 80029dc:	f002 fbbe 	bl	800515c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80029e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80029e6:	2301      	movs	r3, #1
 80029e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80029ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ee:	4619      	mov	r1, r3
 80029f0:	480b      	ldr	r0, [pc, #44]	; (8002a20 <BSP_LCD_MspInit+0x1a8>)
 80029f2:	f002 fbb3 	bl	800515c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80029f6:	2308      	movs	r3, #8
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80029fa:	2301      	movs	r3, #1
 80029fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80029fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a02:	4619      	mov	r1, r3
 8002a04:	4808      	ldr	r0, [pc, #32]	; (8002a28 <BSP_LCD_MspInit+0x1b0>)
 8002a06:	f002 fba9 	bl	800515c <HAL_GPIO_Init>
}
 8002a0a:	bf00      	nop
 8002a0c:	3740      	adds	r7, #64	; 0x40
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40021800 	.word	0x40021800
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40022400 	.word	0x40022400
 8002a28:	40022800 	.word	0x40022800

08002a2c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a36:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <BSP_LCD_ClockConfig+0x34>)
 8002a38:	2208      	movs	r2, #8
 8002a3a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <BSP_LCD_ClockConfig+0x34>)
 8002a3e:	22c0      	movs	r2, #192	; 0xc0
 8002a40:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <BSP_LCD_ClockConfig+0x34>)
 8002a44:	2205      	movs	r2, #5
 8002a46:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <BSP_LCD_ClockConfig+0x34>)
 8002a4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002a50:	4803      	ldr	r0, [pc, #12]	; (8002a60 <BSP_LCD_ClockConfig+0x34>)
 8002a52:	f004 fa05 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000184 	.word	0x20000184

08002a64 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002a72:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <LL_FillBuffer+0x88>)
 8002a74:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a78:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <LL_FillBuffer+0x8c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <LL_FillBuffer+0x90>)
 8002a80:	2134      	movs	r1, #52	; 0x34
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3348      	adds	r3, #72	; 0x48
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d103      	bne.n	8002a98 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002a90:	4b16      	ldr	r3, [pc, #88]	; (8002aec <LL_FillBuffer+0x88>)
 8002a92:	2202      	movs	r2, #2
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	e002      	b.n	8002a9e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002a98:	4b14      	ldr	r3, [pc, #80]	; (8002aec <LL_FillBuffer+0x88>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002a9e:	4a13      	ldr	r2, [pc, #76]	; (8002aec <LL_FillBuffer+0x88>)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8002aa4:	4b11      	ldr	r3, [pc, #68]	; (8002aec <LL_FillBuffer+0x88>)
 8002aa6:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <LL_FillBuffer+0x94>)
 8002aa8:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002aaa:	4810      	ldr	r0, [pc, #64]	; (8002aec <LL_FillBuffer+0x88>)
 8002aac:	f000 ffc6 	bl	8003a3c <HAL_DMA2D_Init>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d115      	bne.n	8002ae2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8002ab6:	68f9      	ldr	r1, [r7, #12]
 8002ab8:	480c      	ldr	r0, [pc, #48]	; (8002aec <LL_FillBuffer+0x88>)
 8002aba:	f001 f91d 	bl	8003cf8 <HAL_DMA2D_ConfigLayer>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10e      	bne.n	8002ae2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69f9      	ldr	r1, [r7, #28]
 8002ace:	4807      	ldr	r0, [pc, #28]	; (8002aec <LL_FillBuffer+0x88>)
 8002ad0:	f000 fffe 	bl	8003ad0 <HAL_DMA2D_Start>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d103      	bne.n	8002ae2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002ada:	210a      	movs	r1, #10
 8002adc:	4803      	ldr	r0, [pc, #12]	; (8002aec <LL_FillBuffer+0x88>)
 8002ade:	f001 f822 	bl	8003b26 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000128 	.word	0x20000128
 8002af0:	20000168 	.word	0x20000168
 8002af4:	20000e68 	.word	0x20000e68
 8002af8:	4002b000 	.word	0x4002b000

08002afc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002b00:	4b29      	ldr	r3, [pc, #164]	; (8002ba8 <BSP_SDRAM_Init+0xac>)
 8002b02:	4a2a      	ldr	r2, [pc, #168]	; (8002bac <BSP_SDRAM_Init+0xb0>)
 8002b04:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002b06:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <BSP_SDRAM_Init+0xb4>)
 8002b08:	2202      	movs	r2, #2
 8002b0a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002b0c:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <BSP_SDRAM_Init+0xb4>)
 8002b0e:	2207      	movs	r2, #7
 8002b10:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002b12:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <BSP_SDRAM_Init+0xb4>)
 8002b14:	2204      	movs	r2, #4
 8002b16:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002b18:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <BSP_SDRAM_Init+0xb4>)
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002b1e:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <BSP_SDRAM_Init+0xb4>)
 8002b20:	2202      	movs	r2, #2
 8002b22:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002b24:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <BSP_SDRAM_Init+0xb4>)
 8002b26:	2202      	movs	r2, #2
 8002b28:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002b2a:	4b21      	ldr	r3, [pc, #132]	; (8002bb0 <BSP_SDRAM_Init+0xb4>)
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002b30:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <BSP_SDRAM_Init+0xac>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002b36:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <BSP_SDRAM_Init+0xac>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <BSP_SDRAM_Init+0xac>)
 8002b3e:	2204      	movs	r2, #4
 8002b40:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <BSP_SDRAM_Init+0xac>)
 8002b44:	2210      	movs	r2, #16
 8002b46:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002b48:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <BSP_SDRAM_Init+0xac>)
 8002b4a:	2240      	movs	r2, #64	; 0x40
 8002b4c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002b4e:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <BSP_SDRAM_Init+0xac>)
 8002b50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b54:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <BSP_SDRAM_Init+0xac>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <BSP_SDRAM_Init+0xac>)
 8002b5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b62:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002b64:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <BSP_SDRAM_Init+0xac>)
 8002b66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <BSP_SDRAM_Init+0xac>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002b72:	2100      	movs	r1, #0
 8002b74:	480c      	ldr	r0, [pc, #48]	; (8002ba8 <BSP_SDRAM_Init+0xac>)
 8002b76:	f000 f87f 	bl	8002c78 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002b7a:	490d      	ldr	r1, [pc, #52]	; (8002bb0 <BSP_SDRAM_Init+0xb4>)
 8002b7c:	480a      	ldr	r0, [pc, #40]	; (8002ba8 <BSP_SDRAM_Init+0xac>)
 8002b7e:	f004 fd5f 	bl	8007640 <HAL_SDRAM_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002b88:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <BSP_SDRAM_Init+0xb8>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e002      	b.n	8002b96 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <BSP_SDRAM_Init+0xb8>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002b96:	f240 6003 	movw	r0, #1539	; 0x603
 8002b9a:	f000 f80d 	bl	8002bb8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <BSP_SDRAM_Init+0xb8>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000f10 	.word	0x20000f10
 8002bac:	a0000140 	.word	0xa0000140
 8002bb0:	20000208 	.word	0x20000208
 8002bb4:	20000034 	.word	0x20000034

08002bb8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002bca:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bcc:	2210      	movs	r2, #16
 8002bce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002bd0:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002bd6:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002bdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002be0:	4923      	ldr	r1, [pc, #140]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002be2:	4824      	ldr	r0, [pc, #144]	; (8002c74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002be4:	f004 fd60 	bl	80076a8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002be8:	2001      	movs	r0, #1
 8002bea:	f000 fc33 	bl	8003454 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002bee:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002bf4:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c0a:	4919      	ldr	r1, [pc, #100]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c0c:	4819      	ldr	r0, [pc, #100]	; (8002c74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c0e:	f004 fd4b 	bl	80076a8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002c12:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c14:	2203      	movs	r2, #3
 8002c16:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c18:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c1a:	2210      	movs	r2, #16
 8002c1c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002c1e:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c20:	2208      	movs	r2, #8
 8002c22:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c2e:	4910      	ldr	r1, [pc, #64]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c30:	4810      	ldr	r0, [pc, #64]	; (8002c74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c32:	f004 fd39 	bl	80076a8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002c36:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002c3a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c3e:	2204      	movs	r2, #4
 8002c40:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c44:	2210      	movs	r2, #16
 8002c46:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002c48:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a07      	ldr	r2, [pc, #28]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c52:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c58:	4905      	ldr	r1, [pc, #20]	; (8002c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c5a:	4806      	ldr	r0, [pc, #24]	; (8002c74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c5c:	f004 fd24 	bl	80076a8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4804      	ldr	r0, [pc, #16]	; (8002c74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c64:	f004 fd4b 	bl	80076fe <HAL_SDRAM_ProgramRefreshRate>
}
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000224 	.word	0x20000224
 8002c74:	20000f10 	.word	0x20000f10

08002c78 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b090      	sub	sp, #64	; 0x40
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c82:	4b70      	ldr	r3, [pc, #448]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	4a6f      	ldr	r2, [pc, #444]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6393      	str	r3, [r2, #56]	; 0x38
 8002c8e:	4b6d      	ldr	r3, [pc, #436]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002c9a:	4b6a      	ldr	r3, [pc, #424]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4a69      	ldr	r2, [pc, #420]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002ca0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca6:	4b67      	ldr	r3, [pc, #412]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb2:	4b64      	ldr	r3, [pc, #400]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a63      	ldr	r2, [pc, #396]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002cb8:	f043 0304 	orr.w	r3, r3, #4
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b61      	ldr	r3, [pc, #388]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	623b      	str	r3, [r7, #32]
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cca:	4b5e      	ldr	r3, [pc, #376]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a5d      	ldr	r2, [pc, #372]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002cd0:	f043 0308 	orr.w	r3, r3, #8
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b5b      	ldr	r3, [pc, #364]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ce2:	4b58      	ldr	r3, [pc, #352]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a57      	ldr	r2, [pc, #348]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002ce8:	f043 0310 	orr.w	r3, r3, #16
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b55      	ldr	r3, [pc, #340]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cfa:	4b52      	ldr	r3, [pc, #328]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4a51      	ldr	r2, [pc, #324]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002d00:	f043 0320 	orr.w	r3, r3, #32
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	4b4f      	ldr	r3, [pc, #316]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d12:	4b4c      	ldr	r3, [pc, #304]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4a4b      	ldr	r2, [pc, #300]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1e:	4b49      	ldr	r3, [pc, #292]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d2a:	4b46      	ldr	r3, [pc, #280]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4a45      	ldr	r2, [pc, #276]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d34:	6313      	str	r3, [r2, #48]	; 0x30
 8002d36:	4b43      	ldr	r3, [pc, #268]	; (8002e44 <BSP_SDRAM_MspInit+0x1cc>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d42:	2302      	movs	r3, #2
 8002d44:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002d46:	2301      	movs	r3, #1
 8002d48:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002d4e:	230c      	movs	r3, #12
 8002d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002d52:	2308      	movs	r3, #8
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	483a      	ldr	r0, [pc, #232]	; (8002e48 <BSP_SDRAM_MspInit+0x1d0>)
 8002d5e:	f002 f9fd 	bl	800515c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002d62:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002d66:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4837      	ldr	r0, [pc, #220]	; (8002e4c <BSP_SDRAM_MspInit+0x1d4>)
 8002d70:	f002 f9f4 	bl	800515c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002d74:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4833      	ldr	r0, [pc, #204]	; (8002e50 <BSP_SDRAM_MspInit+0x1d8>)
 8002d82:	f002 f9eb 	bl	800515c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002d86:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d90:	4619      	mov	r1, r3
 8002d92:	4830      	ldr	r0, [pc, #192]	; (8002e54 <BSP_SDRAM_MspInit+0x1dc>)
 8002d94:	f002 f9e2 	bl	800515c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002d98:	f248 1333 	movw	r3, #33075	; 0x8133
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002d9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002da2:	4619      	mov	r1, r3
 8002da4:	482c      	ldr	r0, [pc, #176]	; (8002e58 <BSP_SDRAM_MspInit+0x1e0>)
 8002da6:	f002 f9d9 	bl	800515c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002daa:	2328      	movs	r3, #40	; 0x28
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002db2:	4619      	mov	r1, r3
 8002db4:	4829      	ldr	r0, [pc, #164]	; (8002e5c <BSP_SDRAM_MspInit+0x1e4>)
 8002db6:	f002 f9d1 	bl	800515c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002dba:	4b29      	ldr	r3, [pc, #164]	; (8002e60 <BSP_SDRAM_MspInit+0x1e8>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002dc0:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <BSP_SDRAM_MspInit+0x1e8>)
 8002dc2:	2280      	movs	r2, #128	; 0x80
 8002dc4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002dc6:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <BSP_SDRAM_MspInit+0x1e8>)
 8002dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dcc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002dce:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <BSP_SDRAM_MspInit+0x1e8>)
 8002dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dd4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002dd6:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <BSP_SDRAM_MspInit+0x1e8>)
 8002dd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ddc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002dde:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <BSP_SDRAM_MspInit+0x1e8>)
 8002de0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002de4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002de6:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <BSP_SDRAM_MspInit+0x1e8>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002dec:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <BSP_SDRAM_MspInit+0x1e8>)
 8002dee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002df2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002df4:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <BSP_SDRAM_MspInit+0x1e8>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002dfa:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <BSP_SDRAM_MspInit+0x1e8>)
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002e00:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <BSP_SDRAM_MspInit+0x1e8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002e06:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <BSP_SDRAM_MspInit+0x1e8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002e0c:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <BSP_SDRAM_MspInit+0x1e8>)
 8002e0e:	4a15      	ldr	r2, [pc, #84]	; (8002e64 <BSP_SDRAM_MspInit+0x1ec>)
 8002e10:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <BSP_SDRAM_MspInit+0x1e8>)
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
 8002e18:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <BSP_SDRAM_MspInit+0x1e8>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002e1e:	4810      	ldr	r0, [pc, #64]	; (8002e60 <BSP_SDRAM_MspInit+0x1e8>)
 8002e20:	f000 fcfc 	bl	800381c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002e24:	480e      	ldr	r0, [pc, #56]	; (8002e60 <BSP_SDRAM_MspInit+0x1e8>)
 8002e26:	f000 fc4b 	bl	80036c0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	210f      	movs	r1, #15
 8002e2e:	2038      	movs	r0, #56	; 0x38
 8002e30:	f000 fc0f 	bl	8003652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002e34:	2038      	movs	r0, #56	; 0x38
 8002e36:	f000 fc28 	bl	800368a <HAL_NVIC_EnableIRQ>
}
 8002e3a:	bf00      	nop
 8002e3c:	3740      	adds	r7, #64	; 0x40
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40020800 	.word	0x40020800
 8002e4c:	40020c00 	.word	0x40020c00
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40021400 	.word	0x40021400
 8002e58:	40021800 	.word	0x40021800
 8002e5c:	40021c00 	.word	0x40021c00
 8002e60:	20000234 	.word	0x20000234
 8002e64:	40026410 	.word	0x40026410

08002e68 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	460a      	mov	r2, r1
 8002e72:	80fb      	strh	r3, [r7, #6]
 8002e74:	4613      	mov	r3, r2
 8002e76:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8002e7c:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <BSP_TS_Init+0x68>)
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8002e82:	4a14      	ldr	r2, [pc, #80]	; (8002ed4 <BSP_TS_Init+0x6c>)
 8002e84:	88bb      	ldrh	r3, [r7, #4]
 8002e86:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8002e88:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <BSP_TS_Init+0x70>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2070      	movs	r0, #112	; 0x70
 8002e8e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <BSP_TS_Init+0x70>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2070      	movs	r0, #112	; 0x70
 8002e96:	4798      	blx	r3
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b51      	cmp	r3, #81	; 0x51
 8002e9c:	d111      	bne.n	8002ec2 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <BSP_TS_Init+0x74>)
 8002ea0:	4a0d      	ldr	r2, [pc, #52]	; (8002ed8 <BSP_TS_Init+0x70>)
 8002ea2:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8002ea4:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <BSP_TS_Init+0x78>)
 8002ea6:	2270      	movs	r2, #112	; 0x70
 8002ea8:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8002eaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <BSP_TS_Init+0x7c>)
 8002eac:	2208      	movs	r2, #8
 8002eae:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <BSP_TS_Init+0x74>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <BSP_TS_Init+0x78>)
 8002eb8:	7812      	ldrb	r2, [r2, #0]
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4798      	blx	r3
 8002ec0:	e001      	b.n	8002ec6 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20000298 	.word	0x20000298
 8002ed4:	2000029a 	.word	0x2000029a
 8002ed8:	20000004 	.word	0x20000004
 8002edc:	20000294 	.word	0x20000294
 8002ee0:	2000029d 	.word	0x2000029d
 8002ee4:	2000029c 	.word	0x2000029c

08002ee8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8002ee8:	b590      	push	{r4, r7, lr}
 8002eea:	b097      	sub	sp, #92	; 0x5c
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8002f02:	4b97      	ldr	r3, [pc, #604]	; (8003160 <BSP_TS_GetState+0x278>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	4a96      	ldr	r2, [pc, #600]	; (8003164 <BSP_TS_GetState+0x27c>)
 8002f0a:	7812      	ldrb	r2, [r2, #0]
 8002f0c:	b292      	uxth	r2, r2
 8002f0e:	4610      	mov	r0, r2
 8002f10:	4798      	blx	r3
 8002f12:	4603      	mov	r3, r0
 8002f14:	461a      	mov	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 81a8 	beq.w	8003274 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8002f24:	2300      	movs	r3, #0
 8002f26:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f28:	e197      	b.n	800325a <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8002f2a:	4b8d      	ldr	r3, [pc, #564]	; (8003160 <BSP_TS_GetState+0x278>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	4a8c      	ldr	r2, [pc, #560]	; (8003164 <BSP_TS_GetState+0x27c>)
 8002f32:	7812      	ldrb	r2, [r2, #0]
 8002f34:	b290      	uxth	r0, r2
 8002f36:	f107 0120 	add.w	r1, r7, #32
 8002f3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f3c:	0052      	lsls	r2, r2, #1
 8002f3e:	188c      	adds	r4, r1, r2
 8002f40:	f107 0114 	add.w	r1, r7, #20
 8002f44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f46:	0052      	lsls	r2, r2, #1
 8002f48:	440a      	add	r2, r1
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8002f4e:	4b86      	ldr	r3, [pc, #536]	; (8003168 <BSP_TS_GetState+0x280>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d11b      	bne.n	8002f8e <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8002f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002f5e:	4413      	add	r3, r2
 8002f60:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8002f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002f6c:	440b      	add	r3, r1
 8002f6e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8002f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8002f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002f88:	440b      	add	r3, r1
 8002f8a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8002f8e:	4b76      	ldr	r3, [pc, #472]	; (8003168 <BSP_TS_GetState+0x280>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d010      	beq.n	8002fbc <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8002f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8002fa8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8002fbc:	4b6a      	ldr	r3, [pc, #424]	; (8003168 <BSP_TS_GetState+0x280>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d010      	beq.n	8002fea <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8002fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8002fd6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002fe4:	440b      	add	r3, r1
 8002fe6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8002fea:	4b5f      	ldr	r3, [pc, #380]	; (8003168 <BSP_TS_GetState+0x280>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d01b      	beq.n	800302e <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8002ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002ffe:	4413      	add	r3, r2
 8003000:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800300c:	440b      	add	r3, r1
 800300e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8003012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800301a:	4413      	add	r3, r2
 800301c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003028:	440b      	add	r3, r1
 800302a:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800302e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003036:	4413      	add	r3, r2
 8003038:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800303c:	4619      	mov	r1, r3
 800303e:	4a4b      	ldr	r2, [pc, #300]	; (800316c <BSP_TS_GetState+0x284>)
 8003040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003046:	4299      	cmp	r1, r3
 8003048:	d90e      	bls.n	8003068 <BSP_TS_GetState+0x180>
 800304a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003052:	4413      	add	r3, r2
 8003054:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003058:	4944      	ldr	r1, [pc, #272]	; (800316c <BSP_TS_GetState+0x284>)
 800305a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800305c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003060:	b29b      	uxth	r3, r3
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	b29b      	uxth	r3, r3
 8003066:	e00d      	b.n	8003084 <BSP_TS_GetState+0x19c>
 8003068:	4a40      	ldr	r2, [pc, #256]	; (800316c <BSP_TS_GetState+0x284>)
 800306a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800306c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003070:	b29a      	uxth	r2, r3
 8003072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800307a:	440b      	add	r3, r1
 800307c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	b29b      	uxth	r3, r3
 8003084:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003090:	4413      	add	r3, r2
 8003092:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003096:	4619      	mov	r1, r3
 8003098:	4a35      	ldr	r2, [pc, #212]	; (8003170 <BSP_TS_GetState+0x288>)
 800309a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800309c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a0:	4299      	cmp	r1, r3
 80030a2:	d90e      	bls.n	80030c2 <BSP_TS_GetState+0x1da>
 80030a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80030ac:	4413      	add	r3, r2
 80030ae:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80030b2:	492f      	ldr	r1, [pc, #188]	; (8003170 <BSP_TS_GetState+0x288>)
 80030b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	b29b      	uxth	r3, r3
 80030c0:	e00d      	b.n	80030de <BSP_TS_GetState+0x1f6>
 80030c2:	4a2b      	ldr	r2, [pc, #172]	; (8003170 <BSP_TS_GetState+0x288>)
 80030c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80030d4:	440b      	add	r3, r1
 80030d6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	b29b      	uxth	r3, r3
 80030de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 80030e2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80030e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80030ea:	4413      	add	r3, r2
 80030ec:	2b05      	cmp	r3, #5
 80030ee:	dd17      	ble.n	8003120 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 80030f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80030f8:	4413      	add	r3, r2
 80030fa:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80030fe:	4619      	mov	r1, r3
 8003100:	4a1a      	ldr	r2, [pc, #104]	; (800316c <BSP_TS_GetState+0x284>)
 8003102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003104:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8003108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003110:	4413      	add	r3, r2
 8003112:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003116:	4619      	mov	r1, r3
 8003118:	4a15      	ldr	r2, [pc, #84]	; (8003170 <BSP_TS_GetState+0x288>)
 800311a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800311c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003120:	4b10      	ldr	r3, [pc, #64]	; (8003164 <BSP_TS_GetState+0x27c>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b70      	cmp	r3, #112	; 0x70
 8003126:	d125      	bne.n	8003174 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8003128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003130:	4413      	add	r3, r2
 8003132:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4413      	add	r3, r2
 800313e:	460a      	mov	r2, r1
 8003140:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8003142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800314a:	4413      	add	r3, r2
 800314c:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003154:	3304      	adds	r3, #4
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4413      	add	r3, r2
 800315a:	460a      	mov	r2, r1
 800315c:	809a      	strh	r2, [r3, #4]
 800315e:	e02c      	b.n	80031ba <BSP_TS_GetState+0x2d2>
 8003160:	20000294 	.word	0x20000294
 8003164:	2000029d 	.word	0x2000029d
 8003168:	2000029c 	.word	0x2000029c
 800316c:	200002a0 	.word	0x200002a0
 8003170:	200002b4 	.word	0x200002b4
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003174:	4b42      	ldr	r3, [pc, #264]	; (8003280 <BSP_TS_GetState+0x398>)
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	4619      	mov	r1, r3
 800317a:	4a42      	ldr	r2, [pc, #264]	; (8003284 <BSP_TS_GetState+0x39c>)
 800317c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800317e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003182:	fb03 f301 	mul.w	r3, r3, r1
 8003186:	0b1b      	lsrs	r3, r3, #12
 8003188:	b299      	uxth	r1, r3
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	460a      	mov	r2, r1
 8003194:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003196:	4b3c      	ldr	r3, [pc, #240]	; (8003288 <BSP_TS_GetState+0x3a0>)
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	4619      	mov	r1, r3
 800319c:	4a3b      	ldr	r2, [pc, #236]	; (800328c <BSP_TS_GetState+0x3a4>)
 800319e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a4:	fb03 f301 	mul.w	r3, r3, r1
 80031a8:	0b1b      	lsrs	r3, r3, #12
 80031aa:	b299      	uxth	r1, r3
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b0:	3304      	adds	r3, #4
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4413      	add	r3, r2
 80031b6:	460a      	mov	r2, r1
 80031b8:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80031ba:	4b35      	ldr	r3, [pc, #212]	; (8003290 <BSP_TS_GetState+0x3a8>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	b298      	uxth	r0, r3
 80031c0:	f107 010c 	add.w	r1, r7, #12
 80031c4:	f107 0210 	add.w	r2, r7, #16
 80031c8:	f107 0308 	add.w	r3, r7, #8
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	460b      	mov	r3, r1
 80031d0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80031d2:	f7fe ff6d 	bl	80020b0 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	b2d9      	uxtb	r1, r3
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031de:	4413      	add	r3, r2
 80031e0:	3316      	adds	r3, #22
 80031e2:	460a      	mov	r2, r1
 80031e4:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	b2d9      	uxtb	r1, r3
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ee:	4413      	add	r3, r2
 80031f0:	3320      	adds	r3, #32
 80031f2:	460a      	mov	r2, r1
 80031f4:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d827      	bhi.n	800324c <BSP_TS_GetState+0x364>
 80031fc:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <BSP_TS_GetState+0x31c>)
 80031fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003202:	bf00      	nop
 8003204:	08003215 	.word	0x08003215
 8003208:	08003223 	.word	0x08003223
 800320c:	08003231 	.word	0x08003231
 8003210:	0800323f 	.word	0x0800323f
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003218:	4413      	add	r3, r2
 800321a:	331b      	adds	r3, #27
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
          break;
 8003220:	e018      	b.n	8003254 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003226:	4413      	add	r3, r2
 8003228:	331b      	adds	r3, #27
 800322a:	2202      	movs	r2, #2
 800322c:	701a      	strb	r2, [r3, #0]
          break;
 800322e:	e011      	b.n	8003254 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003234:	4413      	add	r3, r2
 8003236:	331b      	adds	r3, #27
 8003238:	2203      	movs	r2, #3
 800323a:	701a      	strb	r2, [r3, #0]
          break;
 800323c:	e00a      	b.n	8003254 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003242:	4413      	add	r3, r2
 8003244:	331b      	adds	r3, #27
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
          break;
 800324a:	e003      	b.n	8003254 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8003252:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8003254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003256:	3301      	adds	r3, #1
 8003258:	64bb      	str	r3, [r7, #72]	; 0x48
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003262:	4293      	cmp	r3, r2
 8003264:	f4ff ae61 	bcc.w	8002f2a <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f813 	bl	8003294 <BSP_TS_Get_GestureId>
 800326e:	4603      	mov	r3, r0
 8003270:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8003274:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003278:	4618      	mov	r0, r3
 800327a:	3754      	adds	r7, #84	; 0x54
 800327c:	46bd      	mov	sp, r7
 800327e:	bd90      	pop	{r4, r7, pc}
 8003280:	20000298 	.word	0x20000298
 8003284:	200002a0 	.word	0x200002a0
 8003288:	2000029a 	.word	0x2000029a
 800328c:	200002b4 	.word	0x200002b4
 8003290:	2000029d 	.word	0x2000029d

08003294 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80032a4:	4b3b      	ldr	r3, [pc, #236]	; (8003394 <BSP_TS_Get_GestureId+0x100>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	f107 0208 	add.w	r2, r7, #8
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe fee4 	bl	800207e <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b49      	cmp	r3, #73	; 0x49
 80032ba:	d05e      	beq.n	800337a <BSP_TS_Get_GestureId+0xe6>
 80032bc:	2b49      	cmp	r3, #73	; 0x49
 80032be:	d860      	bhi.n	8003382 <BSP_TS_Get_GestureId+0xee>
 80032c0:	2b1c      	cmp	r3, #28
 80032c2:	d83f      	bhi.n	8003344 <BSP_TS_Get_GestureId+0xb0>
 80032c4:	2b1c      	cmp	r3, #28
 80032c6:	d85c      	bhi.n	8003382 <BSP_TS_Get_GestureId+0xee>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <BSP_TS_Get_GestureId+0x3c>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	0800334b 	.word	0x0800334b
 80032d4:	08003383 	.word	0x08003383
 80032d8:	08003383 	.word	0x08003383
 80032dc:	08003383 	.word	0x08003383
 80032e0:	08003383 	.word	0x08003383
 80032e4:	08003383 	.word	0x08003383
 80032e8:	08003383 	.word	0x08003383
 80032ec:	08003383 	.word	0x08003383
 80032f0:	08003383 	.word	0x08003383
 80032f4:	08003383 	.word	0x08003383
 80032f8:	08003383 	.word	0x08003383
 80032fc:	08003383 	.word	0x08003383
 8003300:	08003383 	.word	0x08003383
 8003304:	08003383 	.word	0x08003383
 8003308:	08003383 	.word	0x08003383
 800330c:	08003383 	.word	0x08003383
 8003310:	08003353 	.word	0x08003353
 8003314:	08003383 	.word	0x08003383
 8003318:	08003383 	.word	0x08003383
 800331c:	08003383 	.word	0x08003383
 8003320:	0800335b 	.word	0x0800335b
 8003324:	08003383 	.word	0x08003383
 8003328:	08003383 	.word	0x08003383
 800332c:	08003383 	.word	0x08003383
 8003330:	08003363 	.word	0x08003363
 8003334:	08003383 	.word	0x08003383
 8003338:	08003383 	.word	0x08003383
 800333c:	08003383 	.word	0x08003383
 8003340:	0800336b 	.word	0x0800336b
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d014      	beq.n	8003372 <BSP_TS_Get_GestureId+0xde>
 8003348:	e01b      	b.n	8003382 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003350:	e01a      	b.n	8003388 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003358:	e016      	b.n	8003388 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003360:	e012      	b.n	8003388 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2203      	movs	r2, #3
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003368:	e00e      	b.n	8003388 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2204      	movs	r2, #4
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003370:	e00a      	b.n	8003388 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2205      	movs	r2, #5
 8003376:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003378:	e006      	b.n	8003388 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2206      	movs	r2, #6
 800337e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003380:	e002      	b.n	8003388 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
      break;
 8003386:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8003388:	7bfb      	ldrb	r3, [r7, #15]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	2000029d 	.word	0x2000029d

08003398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800339c:	2003      	movs	r0, #3
 800339e:	f000 f94d 	bl	800363c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033a2:	2000      	movs	r0, #0
 80033a4:	f000 f806 	bl	80033b4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80033a8:	f7fe f9a4 	bl	80016f4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033bc:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_InitTick+0x54>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b12      	ldr	r3, [pc, #72]	; (800340c <HAL_InitTick+0x58>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	4619      	mov	r1, r3
 80033c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 f967 	bl	80036a6 <HAL_SYSTICK_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e00e      	b.n	8003400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b0f      	cmp	r3, #15
 80033e6:	d80a      	bhi.n	80033fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033e8:	2200      	movs	r2, #0
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295
 80033f0:	f000 f92f 	bl	8003652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033f4:	4a06      	ldr	r2, [pc, #24]	; (8003410 <HAL_InitTick+0x5c>)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e000      	b.n	8003400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20000000 	.word	0x20000000
 800340c:	2000003c 	.word	0x2000003c
 8003410:	20000038 	.word	0x20000038

08003414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003418:	4b06      	ldr	r3, [pc, #24]	; (8003434 <HAL_IncTick+0x20>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_IncTick+0x24>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4413      	add	r3, r2
 8003424:	4a04      	ldr	r2, [pc, #16]	; (8003438 <HAL_IncTick+0x24>)
 8003426:	6013      	str	r3, [r2, #0]
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	2000003c 	.word	0x2000003c
 8003438:	20000f44 	.word	0x20000f44

0800343c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return uwTick;
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <HAL_GetTick+0x14>)
 8003442:	681b      	ldr	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	20000f44 	.word	0x20000f44

08003454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800345c:	f7ff ffee 	bl	800343c <HAL_GetTick>
 8003460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d005      	beq.n	800347a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <HAL_Delay+0x44>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4413      	add	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800347a:	bf00      	nop
 800347c:	f7ff ffde 	bl	800343c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	429a      	cmp	r2, r3
 800348a:	d8f7      	bhi.n	800347c <HAL_Delay+0x28>
  {
  }
}
 800348c:	bf00      	nop
 800348e:	bf00      	nop
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	2000003c 	.word	0x2000003c

0800349c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <__NVIC_SetPriorityGrouping+0x40>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034b8:	4013      	ands	r3, r2
 80034ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <__NVIC_SetPriorityGrouping+0x44>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ca:	4a04      	ldr	r2, [pc, #16]	; (80034dc <__NVIC_SetPriorityGrouping+0x40>)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	60d3      	str	r3, [r2, #12]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000ed00 	.word	0xe000ed00
 80034e0:	05fa0000 	.word	0x05fa0000

080034e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <__NVIC_GetPriorityGrouping+0x18>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	0a1b      	lsrs	r3, r3, #8
 80034ee:	f003 0307 	and.w	r3, r3, #7
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	2b00      	cmp	r3, #0
 8003510:	db0b      	blt.n	800352a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	f003 021f 	and.w	r2, r3, #31
 8003518:	4907      	ldr	r1, [pc, #28]	; (8003538 <__NVIC_EnableIRQ+0x38>)
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	2001      	movs	r0, #1
 8003522:	fa00 f202 	lsl.w	r2, r0, r2
 8003526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	e000e100 	.word	0xe000e100

0800353c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	6039      	str	r1, [r7, #0]
 8003546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354c:	2b00      	cmp	r3, #0
 800354e:	db0a      	blt.n	8003566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	b2da      	uxtb	r2, r3
 8003554:	490c      	ldr	r1, [pc, #48]	; (8003588 <__NVIC_SetPriority+0x4c>)
 8003556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355a:	0112      	lsls	r2, r2, #4
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	440b      	add	r3, r1
 8003560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003564:	e00a      	b.n	800357c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	4908      	ldr	r1, [pc, #32]	; (800358c <__NVIC_SetPriority+0x50>)
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	3b04      	subs	r3, #4
 8003574:	0112      	lsls	r2, r2, #4
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	440b      	add	r3, r1
 800357a:	761a      	strb	r2, [r3, #24]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000e100 	.word	0xe000e100
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003590:	b480      	push	{r7}
 8003592:	b089      	sub	sp, #36	; 0x24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f1c3 0307 	rsb	r3, r3, #7
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	bf28      	it	cs
 80035ae:	2304      	movcs	r3, #4
 80035b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3304      	adds	r3, #4
 80035b6:	2b06      	cmp	r3, #6
 80035b8:	d902      	bls.n	80035c0 <NVIC_EncodePriority+0x30>
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3b03      	subs	r3, #3
 80035be:	e000      	b.n	80035c2 <NVIC_EncodePriority+0x32>
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c4:	f04f 32ff 	mov.w	r2, #4294967295
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43da      	mvns	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	401a      	ands	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d8:	f04f 31ff 	mov.w	r1, #4294967295
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	43d9      	mvns	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e8:	4313      	orrs	r3, r2
         );
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3724      	adds	r7, #36	; 0x24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3b01      	subs	r3, #1
 8003604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003608:	d301      	bcc.n	800360e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800360a:	2301      	movs	r3, #1
 800360c:	e00f      	b.n	800362e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800360e:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <SysTick_Config+0x40>)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3b01      	subs	r3, #1
 8003614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003616:	210f      	movs	r1, #15
 8003618:	f04f 30ff 	mov.w	r0, #4294967295
 800361c:	f7ff ff8e 	bl	800353c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <SysTick_Config+0x40>)
 8003622:	2200      	movs	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003626:	4b04      	ldr	r3, [pc, #16]	; (8003638 <SysTick_Config+0x40>)
 8003628:	2207      	movs	r2, #7
 800362a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	e000e010 	.word	0xe000e010

0800363c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff ff29 	bl	800349c <__NVIC_SetPriorityGrouping>
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003652:	b580      	push	{r7, lr}
 8003654:	b086      	sub	sp, #24
 8003656:	af00      	add	r7, sp, #0
 8003658:	4603      	mov	r3, r0
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003664:	f7ff ff3e 	bl	80034e4 <__NVIC_GetPriorityGrouping>
 8003668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	6978      	ldr	r0, [r7, #20]
 8003670:	f7ff ff8e 	bl	8003590 <NVIC_EncodePriority>
 8003674:	4602      	mov	r2, r0
 8003676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800367a:	4611      	mov	r1, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff5d 	bl	800353c <__NVIC_SetPriority>
}
 8003682:	bf00      	nop
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	4603      	mov	r3, r0
 8003692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff31 	bl	8003500 <__NVIC_EnableIRQ>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff ffa2 	bl	80035f8 <SysTick_Config>
 80036b4:	4603      	mov	r3, r0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036cc:	f7ff feb6 	bl	800343c <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e099      	b.n	8003810 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036fc:	e00f      	b.n	800371e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036fe:	f7ff fe9d 	bl	800343c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b05      	cmp	r3, #5
 800370a:	d908      	bls.n	800371e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2203      	movs	r2, #3
 8003716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e078      	b.n	8003810 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e8      	bne.n	80036fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4b38      	ldr	r3, [pc, #224]	; (8003818 <HAL_DMA_Init+0x158>)
 8003738:	4013      	ands	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800374a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003756:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003762:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	2b04      	cmp	r3, #4
 8003776:	d107      	bne.n	8003788 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	4313      	orrs	r3, r2
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f023 0307 	bic.w	r3, r3, #7
 800379e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d117      	bne.n	80037e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00e      	beq.n	80037e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f8bd 	bl	8003944 <DMA_CheckFifoParam>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2240      	movs	r2, #64	; 0x40
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037de:	2301      	movs	r3, #1
 80037e0:	e016      	b.n	8003810 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f874 	bl	80038d8 <DMA_CalcBaseAndBitshift>
 80037f0:	4603      	mov	r3, r0
 80037f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	223f      	movs	r2, #63	; 0x3f
 80037fa:	409a      	lsls	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	f010803f 	.word	0xf010803f

0800381c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e050      	b.n	80038d0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d101      	bne.n	800383e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
 800383c:	e048      	b.n	80038d0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2200      	movs	r2, #0
 800385c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2200      	movs	r2, #0
 8003864:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2200      	movs	r2, #0
 800386c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2200      	movs	r2, #0
 8003874:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2221      	movs	r2, #33	; 0x21
 800387c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f82a 	bl	80038d8 <DMA_CalcBaseAndBitshift>
 8003884:	4603      	mov	r3, r0
 8003886:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388c:	223f      	movs	r2, #63	; 0x3f
 800388e:	409a      	lsls	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	3b10      	subs	r3, #16
 80038e8:	4a13      	ldr	r2, [pc, #76]	; (8003938 <DMA_CalcBaseAndBitshift+0x60>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	091b      	lsrs	r3, r3, #4
 80038f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038f2:	4a12      	ldr	r2, [pc, #72]	; (800393c <DMA_CalcBaseAndBitshift+0x64>)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4413      	add	r3, r2
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d908      	bls.n	8003918 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <DMA_CalcBaseAndBitshift+0x68>)
 800390e:	4013      	ands	r3, r2
 8003910:	1d1a      	adds	r2, r3, #4
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	659a      	str	r2, [r3, #88]	; 0x58
 8003916:	e006      	b.n	8003926 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	4b08      	ldr	r3, [pc, #32]	; (8003940 <DMA_CalcBaseAndBitshift+0x68>)
 8003920:	4013      	ands	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	aaaaaaab 	.word	0xaaaaaaab
 800393c:	08059a90 	.word	0x08059a90
 8003940:	fffffc00 	.word	0xfffffc00

08003944 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d11f      	bne.n	800399e <DMA_CheckFifoParam+0x5a>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b03      	cmp	r3, #3
 8003962:	d856      	bhi.n	8003a12 <DMA_CheckFifoParam+0xce>
 8003964:	a201      	add	r2, pc, #4	; (adr r2, 800396c <DMA_CheckFifoParam+0x28>)
 8003966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396a:	bf00      	nop
 800396c:	0800397d 	.word	0x0800397d
 8003970:	0800398f 	.word	0x0800398f
 8003974:	0800397d 	.word	0x0800397d
 8003978:	08003a13 	.word	0x08003a13
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d046      	beq.n	8003a16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800398c:	e043      	b.n	8003a16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003996:	d140      	bne.n	8003a1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800399c:	e03d      	b.n	8003a1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a6:	d121      	bne.n	80039ec <DMA_CheckFifoParam+0xa8>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d837      	bhi.n	8003a1e <DMA_CheckFifoParam+0xda>
 80039ae:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <DMA_CheckFifoParam+0x70>)
 80039b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b4:	080039c5 	.word	0x080039c5
 80039b8:	080039cb 	.word	0x080039cb
 80039bc:	080039c5 	.word	0x080039c5
 80039c0:	080039dd 	.word	0x080039dd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	73fb      	strb	r3, [r7, #15]
      break;
 80039c8:	e030      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d025      	beq.n	8003a22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039da:	e022      	b.n	8003a22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039e4:	d11f      	bne.n	8003a26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039ea:	e01c      	b.n	8003a26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d903      	bls.n	80039fa <DMA_CheckFifoParam+0xb6>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d003      	beq.n	8003a00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039f8:	e018      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
      break;
 80039fe:	e015      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00e      	beq.n	8003a2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a10:	e00b      	b.n	8003a2a <DMA_CheckFifoParam+0xe6>
      break;
 8003a12:	bf00      	nop
 8003a14:	e00a      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;
 8003a16:	bf00      	nop
 8003a18:	e008      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;
 8003a1a:	bf00      	nop
 8003a1c:	e006      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;
 8003a1e:	bf00      	nop
 8003a20:	e004      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;
 8003a22:	bf00      	nop
 8003a24:	e002      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;   
 8003a26:	bf00      	nop
 8003a28:	e000      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;
 8003a2a:	bf00      	nop
    }
  } 
  
  return status; 
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop

08003a3c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e039      	b.n	8003ac2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d106      	bne.n	8003a68 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fd fe6a 	bl	800173c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	f023 0107 	bic.w	r1, r3, #7
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa2:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <HAL_DMA2D_Init+0x90>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68d1      	ldr	r1, [r2, #12]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6812      	ldr	r2, [r2, #0]
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	ffffc000 	.word	0xffffc000

08003ad0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_DMA2D_Start+0x1c>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e018      	b.n	8003b1e <HAL_DMA2D_Start+0x4e>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f988 	bl	8003e1c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b086      	sub	sp, #24
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d056      	beq.n	8003bf0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b42:	f7ff fc7b 	bl	800343c <HAL_GetTick>
 8003b46:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003b48:	e04b      	b.n	8003be2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d023      	beq.n	8003ba4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6a:	f043 0202 	orr.w	r2, r3, #2
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b80:	f043 0201 	orr.w	r2, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2221      	movs	r2, #33	; 0x21
 8003b8e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2204      	movs	r2, #4
 8003b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0a5      	b.n	8003cf0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003baa:	d01a      	beq.n	8003be2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bac:	f7ff fc46 	bl	800343c <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d302      	bcc.n	8003bc2 <HAL_DMA2D_PollForTransfer+0x9c>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10f      	bne.n	8003be2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc6:	f043 0220 	orr.w	r2, r3, #32
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e086      	b.n	8003cf0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0ac      	beq.n	8003b4a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d061      	beq.n	8003cd6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c12:	f7ff fc13 	bl	800343c <HAL_GetTick>
 8003c16:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003c18:	e056      	b.n	8003cc8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d02e      	beq.n	8003c8a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3a:	f043 0204 	orr.w	r2, r3, #4
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c50:	f043 0202 	orr.w	r2, r3, #2
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c66:	f043 0201 	orr.w	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2229      	movs	r2, #41	; 0x29
 8003c74:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2204      	movs	r2, #4
 8003c7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e032      	b.n	8003cf0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d01a      	beq.n	8003cc8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c92:	f7ff fbd3 	bl	800343c <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <HAL_DMA2D_PollForTransfer+0x182>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10f      	bne.n	8003cc8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cac:	f043 0220 	orr.w	r2, r3, #32
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2203      	movs	r2, #3
 8003cb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e013      	b.n	8003cf0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0a1      	beq.n	8003c1a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2212      	movs	r2, #18
 8003cdc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_DMA2D_ConfigLayer+0x20>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e079      	b.n	8003e0c <HAL_DMA2D_ConfigLayer+0x114>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	3318      	adds	r3, #24
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	4413      	add	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	041b      	lsls	r3, r3, #16
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003d42:	4b35      	ldr	r3, [pc, #212]	; (8003e18 <HAL_DMA2D_ConfigLayer+0x120>)
 8003d44:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b0a      	cmp	r3, #10
 8003d4c:	d003      	beq.n	8003d56 <HAL_DMA2D_ConfigLayer+0x5e>
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b09      	cmp	r3, #9
 8003d54:	d107      	bne.n	8003d66 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e005      	b.n	8003d72 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	061b      	lsls	r3, r3, #24
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d120      	bne.n	8003dba <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	ea02 0103 	and.w	r1, r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b0a      	cmp	r3, #10
 8003da0:	d003      	beq.n	8003daa <HAL_DMA2D_ConfigLayer+0xb2>
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b09      	cmp	r3, #9
 8003da8:	d127      	bne.n	8003dfa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003db6:	629a      	str	r2, [r3, #40]	; 0x28
 8003db8:	e01f      	b.n	8003dfa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	ea02 0103 	and.w	r1, r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b0a      	cmp	r3, #10
 8003de2:	d003      	beq.n	8003dec <HAL_DMA2D_ConfigLayer+0xf4>
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b09      	cmp	r3, #9
 8003dea:	d106      	bne.n	8003dfa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003df8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	ff03000f 	.word	0xff03000f

08003e1c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b08b      	sub	sp, #44	; 0x2c
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e30:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	041a      	lsls	r2, r3, #16
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e54:	d174      	bne.n	8003f40 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003e5c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e64:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e6c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d108      	bne.n	8003e8e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	431a      	orrs	r2, r3
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8c:	e053      	b.n	8003f36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d106      	bne.n	8003ea4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	e048      	b.n	8003f36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d111      	bne.n	8003ed0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	0cdb      	lsrs	r3, r3, #19
 8003eb0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	0a9b      	lsrs	r3, r3, #10
 8003eb6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	08db      	lsrs	r3, r3, #3
 8003ebc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	02db      	lsls	r3, r3, #11
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ece:	e032      	b.n	8003f36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d117      	bne.n	8003f08 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	0fdb      	lsrs	r3, r3, #31
 8003edc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	0cdb      	lsrs	r3, r3, #19
 8003ee2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	0adb      	lsrs	r3, r3, #11
 8003ee8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	08db      	lsrs	r3, r3, #3
 8003eee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	029b      	lsls	r3, r3, #10
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	03db      	lsls	r3, r3, #15
 8003efe:	4313      	orrs	r3, r2
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
 8003f06:	e016      	b.n	8003f36 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	0f1b      	lsrs	r3, r3, #28
 8003f0c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	0d1b      	lsrs	r3, r3, #20
 8003f12:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	0b1b      	lsrs	r3, r3, #12
 8003f18:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	011a      	lsls	r2, r3, #4
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	031b      	lsls	r3, r3, #12
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003f3e:	e003      	b.n	8003f48 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	60da      	str	r2, [r3, #12]
}
 8003f48:	bf00      	nop
 8003f4a:	372c      	adds	r7, #44	; 0x2c
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61fb      	str	r3, [r7, #28]
 8003f60:	2300      	movs	r3, #0
 8003f62:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8003f64:	4ba9      	ldr	r3, [pc, #676]	; (800420c <HAL_ETH_Init+0x2b8>)
 8003f66:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e181      	b.n	800427e <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f004 fad2 	bl	8008538 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f94:	4b9e      	ldr	r3, [pc, #632]	; (8004210 <HAL_ETH_Init+0x2bc>)
 8003f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f98:	4a9d      	ldr	r2, [pc, #628]	; (8004210 <HAL_ETH_Init+0x2bc>)
 8003f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f9e:	6453      	str	r3, [r2, #68]	; 0x44
 8003fa0:	4b9b      	ldr	r3, [pc, #620]	; (8004210 <HAL_ETH_Init+0x2bc>)
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003fac:	4b99      	ldr	r3, [pc, #612]	; (8004214 <HAL_ETH_Init+0x2c0>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4a98      	ldr	r2, [pc, #608]	; (8004214 <HAL_ETH_Init+0x2c0>)
 8003fb2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003fb6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003fb8:	4b96      	ldr	r3, [pc, #600]	; (8004214 <HAL_ETH_Init+0x2c0>)
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	4994      	ldr	r1, [pc, #592]	; (8004214 <HAL_ETH_Init+0x2c0>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0201 	orr.w	r2, r2, #1
 8003fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fdc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003fde:	f7ff fa2d 	bl	800343c <HAL_GetTick>
 8003fe2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003fe4:	e011      	b.n	800400a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003fe6:	f7ff fa29 	bl	800343c <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ff4:	d909      	bls.n	800400a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e139      	b.n	800427e <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e4      	bne.n	8003fe6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f023 031c 	bic.w	r3, r3, #28
 800402a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800402c:	f002 fee4 	bl	8006df8 <HAL_RCC_GetHCLKFreq>
 8004030:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	4a78      	ldr	r2, [pc, #480]	; (8004218 <HAL_ETH_Init+0x2c4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d908      	bls.n	800404c <HAL_ETH_Init+0xf8>
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	4a77      	ldr	r2, [pc, #476]	; (800421c <HAL_ETH_Init+0x2c8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d804      	bhi.n	800404c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f043 0308 	orr.w	r3, r3, #8
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	e027      	b.n	800409c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	4a73      	ldr	r2, [pc, #460]	; (800421c <HAL_ETH_Init+0x2c8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d908      	bls.n	8004066 <HAL_ETH_Init+0x112>
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	4a6d      	ldr	r2, [pc, #436]	; (800420c <HAL_ETH_Init+0x2b8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d204      	bcs.n	8004066 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f043 030c 	orr.w	r3, r3, #12
 8004062:	61fb      	str	r3, [r7, #28]
 8004064:	e01a      	b.n	800409c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	4a68      	ldr	r2, [pc, #416]	; (800420c <HAL_ETH_Init+0x2b8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d303      	bcc.n	8004076 <HAL_ETH_Init+0x122>
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	4a6b      	ldr	r2, [pc, #428]	; (8004220 <HAL_ETH_Init+0x2cc>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d911      	bls.n	800409a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	4a69      	ldr	r2, [pc, #420]	; (8004220 <HAL_ETH_Init+0x2cc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d908      	bls.n	8004090 <HAL_ETH_Init+0x13c>
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	4a68      	ldr	r2, [pc, #416]	; (8004224 <HAL_ETH_Init+0x2d0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d804      	bhi.n	8004090 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f043 0304 	orr.w	r3, r3, #4
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	e005      	b.n	800409c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f043 0310 	orr.w	r3, r3, #16
 8004096:	61fb      	str	r3, [r7, #28]
 8004098:	e000      	b.n	800409c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800409a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80040a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80040a8:	2100      	movs	r1, #0
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fb98 	bl	80047e0 <HAL_ETH_WritePHYRegister>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80040ba:	6939      	ldr	r1, [r7, #16]
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fd4d 	bl	8004b5c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e0d7      	b.n	800427e <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80040ce:	20ff      	movs	r0, #255	; 0xff
 80040d0:	f7ff f9c0 	bl	8003454 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 80a5 	beq.w	8004228 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80040de:	f7ff f9ad 	bl	800343c <HAL_GetTick>
 80040e2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80040e4:	f107 030c 	add.w	r3, r7, #12
 80040e8:	461a      	mov	r2, r3
 80040ea:	2101      	movs	r1, #1
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fb0f 	bl	8004710 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80040f2:	f7ff f9a3 	bl	800343c <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004100:	4293      	cmp	r3, r2
 8004102:	d90f      	bls.n	8004124 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004108:	6939      	ldr	r1, [r7, #16]
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fd26 	bl	8004b5c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e0ac      	b.n	800427e <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0da      	beq.n	80040e4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800412e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004132:	2100      	movs	r1, #0
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fb53 	bl	80047e0 <HAL_ETH_WritePHYRegister>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00b      	beq.n	8004158 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004144:	6939      	ldr	r1, [r7, #16]
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fd08 	bl	8004b5c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004154:	2301      	movs	r3, #1
 8004156:	e092      	b.n	800427e <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004158:	f7ff f970 	bl	800343c <HAL_GetTick>
 800415c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800415e:	f107 030c 	add.w	r3, r7, #12
 8004162:	461a      	mov	r2, r3
 8004164:	2101      	movs	r1, #1
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fad2 	bl	8004710 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800416c:	f7ff f966 	bl	800343c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d90f      	bls.n	800419e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004182:	6939      	ldr	r1, [r7, #16]
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 fce9 	bl	8004b5c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e06f      	b.n	800427e <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0da      	beq.n	800415e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80041a8:	f107 030c 	add.w	r3, r7, #12
 80041ac:	461a      	mov	r2, r3
 80041ae:	2110      	movs	r1, #16
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 faad 	bl	8004710 <HAL_ETH_ReadPHYRegister>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00b      	beq.n	80041d4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80041c0:	6939      	ldr	r1, [r7, #16]
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fcca 	bl	8004b5c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80041d0:	2301      	movs	r3, #1
 80041d2:	e054      	b.n	800427e <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d004      	beq.n	80041e8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041e4:	60da      	str	r2, [r3, #12]
 80041e6:	e002      	b.n	80041ee <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	609a      	str	r2, [r3, #8]
 80041fe:	e035      	b.n	800426c <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004206:	609a      	str	r2, [r3, #8]
 8004208:	e030      	b.n	800426c <HAL_ETH_Init+0x318>
 800420a:	bf00      	nop
 800420c:	03938700 	.word	0x03938700
 8004210:	40023800 	.word	0x40023800
 8004214:	40013800 	.word	0x40013800
 8004218:	01312cff 	.word	0x01312cff
 800421c:	02160ebf 	.word	0x02160ebf
 8004220:	05f5e0ff 	.word	0x05f5e0ff
 8004224:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	08db      	lsrs	r3, r3, #3
 800422e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004238:	4313      	orrs	r3, r2
 800423a:	b29b      	uxth	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	2100      	movs	r1, #0
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 facd 	bl	80047e0 <HAL_ETH_WritePHYRegister>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004250:	6939      	ldr	r1, [r7, #16]
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fc82 	bl	8004b5c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e00c      	b.n	800427e <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004264:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004268:	f7ff f8f4 	bl	8003454 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800426c:	6939      	ldr	r1, [r7, #16]
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fc74 	bl	8004b5c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3720      	adds	r7, #32
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop

08004288 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_ETH_DMATxDescListInit+0x20>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e052      	b.n	800434e <HAL_ETH_DMATxDescListInit+0xc6>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e030      	b.n	8004326 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	015b      	lsls	r3, r3, #5
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	4413      	add	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80042d4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80042dc:	fb02 f303 	mul.w	r3, r2, r3
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	4413      	add	r3, r2
 80042e4:	461a      	mov	r2, r3
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d105      	bne.n	80042fe <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	3b01      	subs	r3, #1
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	429a      	cmp	r2, r3
 8004306:	d208      	bcs.n	800431a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	3301      	adds	r3, #1
 800430c:	015b      	lsls	r3, r3, #5
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	4413      	add	r3, r2
 8004312:	461a      	mov	r2, r3
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	60da      	str	r2, [r3, #12]
 8004318:	e002      	b.n	8004320 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	3301      	adds	r3, #1
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d3ca      	bcc.n	80042c4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6819      	ldr	r1, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	f241 0310 	movw	r3, #4112	; 0x1010
 8004338:	440b      	add	r3, r1
 800433a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	371c      	adds	r7, #28
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800435a:	b480      	push	{r7}
 800435c:	b087      	sub	sp, #28
 800435e:	af00      	add	r7, sp, #0
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004372:	2b01      	cmp	r3, #1
 8004374:	d101      	bne.n	800437a <HAL_ETH_DMARxDescListInit+0x20>
 8004376:	2302      	movs	r3, #2
 8004378:	e056      	b.n	8004428 <HAL_ETH_DMARxDescListInit+0xce>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2202      	movs	r2, #2
 8004386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e034      	b.n	8004400 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	015b      	lsls	r3, r3, #5
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	4413      	add	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043a6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80043ae:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	4413      	add	r3, r2
 80043be:	461a      	mov	r2, r3
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d105      	bne.n	80043d8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	3b01      	subs	r3, #1
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d208      	bcs.n	80043f4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	3301      	adds	r3, #1
 80043e6:	015b      	lsls	r3, r3, #5
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	4413      	add	r3, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	e002      	b.n	80043fa <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	3301      	adds	r3, #1
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d3c6      	bcc.n	8004396 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6819      	ldr	r1, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	f241 030c 	movw	r3, #4108	; 0x100c
 8004412:	440b      	add	r3, r1
 8004414:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_ETH_TransmitFrame+0x24>
 8004454:	2302      	movs	r3, #2
 8004456:	e0cd      	b.n	80045f4 <HAL_ETH_TransmitFrame+0x1c0>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800447e:	2301      	movs	r3, #1
 8004480:	e0b8      	b.n	80045f4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	da09      	bge.n	80044a0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2212      	movs	r2, #18
 8004490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e0a9      	b.n	80045f4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d915      	bls.n	80044d6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	4a54      	ldr	r2, [pc, #336]	; (8004600 <HAL_ETH_TransmitFrame+0x1cc>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	0a9b      	lsrs	r3, r3, #10
 80044b4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	4b51      	ldr	r3, [pc, #324]	; (8004600 <HAL_ETH_TransmitFrame+0x1cc>)
 80044ba:	fba3 1302 	umull	r1, r3, r3, r2
 80044be:	0a9b      	lsrs	r3, r3, #10
 80044c0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	3301      	adds	r3, #1
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e001      	b.n	80044da <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80044d6:	2301      	movs	r3, #1
 80044d8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d11c      	bne.n	800451a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80044ee:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80044fa:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800450a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	461a      	mov	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	62da      	str	r2, [r3, #44]	; 0x2c
 8004518:	e04b      	b.n	80045b2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800451a:	2300      	movs	r3, #0
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	e044      	b.n	80045aa <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800452e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d107      	bne.n	8004546 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004544:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800454e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	3b01      	subs	r3, #1
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	429a      	cmp	r2, r3
 8004558:	d116      	bne.n	8004588 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004568:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	4a25      	ldr	r2, [pc, #148]	; (8004604 <HAL_ETH_TransmitFrame+0x1d0>)
 800456e:	fb02 f203 	mul.w	r2, r2, r3
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	4413      	add	r3, r2
 8004576:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800457a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004586:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004596:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	461a      	mov	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	3301      	adds	r3, #1
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d3b6      	bcc.n	8004520 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	f241 0314 	movw	r3, #4116	; 0x1014
 80045ba:	4413      	add	r3, r2
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00d      	beq.n	80045e2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	f241 0314 	movw	r3, #4116	; 0x1014
 80045ce:	4413      	add	r3, r2
 80045d0:	2204      	movs	r2, #4
 80045d2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	f241 0304 	movw	r3, #4100	; 0x1004
 80045dc:	4413      	add	r3, r2
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	ac02b00b 	.word	0xac02b00b
 8004604:	fffffa0c 	.word	0xfffffa0c

08004608 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_ETH_GetReceivedFrame+0x1a>
 800461e:	2302      	movs	r3, #2
 8004620:	e070      	b.n	8004704 <HAL_ETH_GetReceivedFrame+0xfc>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2202      	movs	r2, #2
 800462e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	db5a      	blt.n	80046f2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d030      	beq.n	80046ac <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	2b01      	cmp	r3, #1
 800465a:	d103      	bne.n	8004664 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	0c1b      	lsrs	r3, r3, #16
 8004674:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004678:	3b04      	subs	r3, #4
 800467a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	461a      	mov	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e02b      	b.n	8004704 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d010      	beq.n	80046dc <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	461a      	mov	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	629a      	str	r2, [r3, #40]	; 0x28
 80046da:	e00a      	b.n	80046f2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	461a      	mov	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	460b      	mov	r3, r1
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b82      	cmp	r3, #130	; 0x82
 8004730:	d101      	bne.n	8004736 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004732:	2302      	movs	r3, #2
 8004734:	e050      	b.n	80047d8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2282      	movs	r2, #130	; 0x82
 800473a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f003 031c 	and.w	r3, r3, #28
 800474c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8a1b      	ldrh	r3, [r3, #16]
 8004752:	02db      	lsls	r3, r3, #11
 8004754:	b29b      	uxth	r3, r3
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4313      	orrs	r3, r2
 800475a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800475c:	897b      	ldrh	r3, [r7, #10]
 800475e:	019b      	lsls	r3, r3, #6
 8004760:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f023 0302 	bic.w	r3, r3, #2
 8004770:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004782:	f7fe fe5b 	bl	800343c <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004788:	e015      	b.n	80047b6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800478a:	f7fe fe57 	bl	800343c <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004798:	d309      	bcc.n	80047ae <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e014      	b.n	80047d8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e4      	bne.n	800478a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	460b      	mov	r3, r1
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b42      	cmp	r3, #66	; 0x42
 8004800:	d101      	bne.n	8004806 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004802:	2302      	movs	r3, #2
 8004804:	e04e      	b.n	80048a4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2242      	movs	r2, #66	; 0x42
 800480a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 031c 	and.w	r3, r3, #28
 800481c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8a1b      	ldrh	r3, [r3, #16]
 8004822:	02db      	lsls	r3, r3, #11
 8004824:	b29b      	uxth	r3, r3
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4313      	orrs	r3, r2
 800482a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800482c:	897b      	ldrh	r3, [r7, #10]
 800482e:	019b      	lsls	r3, r3, #6
 8004830:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f043 0302 	orr.w	r3, r3, #2
 8004840:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800485c:	f7fe fdee 	bl	800343c <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004862:	e015      	b.n	8004890 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004864:	f7fe fdea 	bl	800343c <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004872:	d309      	bcc.n	8004888 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e00d      	b.n	80048a4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e4      	bne.n	8004864 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_ETH_Start+0x16>
 80048be:	2302      	movs	r3, #2
 80048c0:	e01f      	b.n	8004902 <HAL_ETH_Start+0x56>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fb44 	bl	8004f60 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fb7b 	bl	8004fd4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fc12 	bl	8005108 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fbaf 	bl	8005048 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fbdc 	bl	80050a8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800490a:	b580      	push	{r7, lr}
 800490c:	b082      	sub	sp, #8
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_ETH_Stop+0x16>
 800491c:	2302      	movs	r3, #2
 800491e:	e01f      	b.n	8004960 <HAL_ETH_Stop+0x56>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fba1 	bl	8005078 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fbce 	bl	80050d8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fb66 	bl	800500e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fbe0 	bl	8005108 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fb26 	bl	8004f9a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_ETH_ConfigMAC+0x1c>
 8004980:	2302      	movs	r3, #2
 8004982:	e0e4      	b.n	8004b4e <HAL_ETH_ConfigMAC+0x1e6>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 80b1 	beq.w	8004afe <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4b6c      	ldr	r3, [pc, #432]	; (8004b58 <HAL_ETH_ConfigMAC+0x1f0>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80049b4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80049ba:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80049c0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80049c6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80049cc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80049d2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80049d8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80049de:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80049e4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80049ea:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80049f0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80049f6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a0e:	2001      	movs	r0, #1
 8004a10:	f7fe fd20 	bl	8003454 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004a24:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8004a2a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004a30:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8004a36:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004a3c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8004a42:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8004a4e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004a50:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a5a:	2001      	movs	r0, #1
 8004a5c:	f7fe fcfa 	bl	8003454 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004a70:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a7a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a92:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8004a98:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8004a9e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8004aa4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8004aaa:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8004ab0:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ac8:	2001      	movs	r0, #1
 8004aca:	f7fe fcc3 	bl	8003454 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8004aee:	2001      	movs	r0, #1
 8004af0:	f7fe fcb0 	bl	8003454 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	61da      	str	r2, [r3, #28]
 8004afc:	e01e      	b.n	8004b3c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004b0c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b2e:	2001      	movs	r0, #1
 8004b30:	f7fe fc90 	bl	8003454 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	ff20810f 	.word	0xff20810f

08004b5c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b0b0      	sub	sp, #192	; 0xc0
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d007      	beq.n	8004b82 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b78:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b80:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004b86:	2300      	movs	r3, #0
 8004b88:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d103      	bne.n	8004baa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ba6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ba8:	e001      	b.n	8004bae <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bb2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004bc8:	2340      	movs	r3, #64	; 0x40
 8004bca:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004bde:	2300      	movs	r3, #0
 8004be0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004be4:	2300      	movs	r3, #0
 8004be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004bfc:	2380      	movs	r3, #128	; 0x80
 8004bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004c02:	2300      	movs	r3, #0
 8004c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004c30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c34:	4bab      	ldr	r3, [pc, #684]	; (8004ee4 <ETH_MACDMAConfig+0x388>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004c40:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004c44:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004c48:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004c4e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004c50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004c52:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004c56:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004c5c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004c60:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004c62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004c64:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004c66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004c68:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004c6c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004c70:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004c72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c84:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c90:	2001      	movs	r0, #1
 8004c92:	f7fe fbdf 	bl	8003454 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c9e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004ca0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004ca4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004ca6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004ca8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004caa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004cae:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004cb4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004cb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004cba:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004cc0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004cc4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004ccc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004cce:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004cda:	2001      	movs	r0, #1
 8004cdc:	f7fe fbba 	bl	8003454 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ce8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cf2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004cfc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004d08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d0c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004d10:	4013      	ands	r3, r2
 8004d12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004d16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d1a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004d1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004d20:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004d22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004d26:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004d28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004d2c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004d2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004d32:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004d34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004d38:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004d3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d4c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d58:	2001      	movs	r0, #1
 8004d5a:	f7fe fb7b 	bl	8003454 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d66:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004d68:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004d6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d82:	2001      	movs	r0, #1
 8004d84:	f7fe fb66 	bl	8003454 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d90:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d9a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004da0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004da4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004daa:	2300      	movs	r3, #0
 8004dac:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004db2:	2300      	movs	r3, #0
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004db6:	2304      	movs	r3, #4
 8004db8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004dba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004dc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dc4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004dc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004dca:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dd0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004dd2:	2380      	movs	r3, #128	; 0x80
 8004dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	f241 0318 	movw	r3, #4120	; 0x1018
 8004de6:	4413      	add	r3, r2
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8004dee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004df2:	4b3d      	ldr	r3, [pc, #244]	; (8004ee8 <ETH_MACDMAConfig+0x38c>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004dfa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004dfc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004dfe:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004e00:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004e02:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004e04:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004e06:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004e08:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004e0a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004e0c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004e0e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004e10:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004e12:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004e16:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004e1a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004e1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	f241 0318 	movw	r3, #4120	; 0x1018
 8004e2e:	4413      	add	r3, r2
 8004e30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e34:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	f241 0318 	movw	r3, #4120	; 0x1018
 8004e3e:	4413      	add	r3, r2
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e46:	2001      	movs	r0, #1
 8004e48:	f7fe fb04 	bl	8003454 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	f241 0318 	movw	r3, #4120	; 0x1018
 8004e54:	4413      	add	r3, r2
 8004e56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e5a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004e60:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004e64:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004e68:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004e6c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8004e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e70:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004e72:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8004e76:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e84:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e94:	2001      	movs	r0, #1
 8004e96:	f7fe fadd 	bl	8003454 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ea6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d10d      	bne.n	8004ecc <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	f241 031c 	movw	r3, #4124	; 0x101c
 8004eb8:	4413      	add	r3, r2
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6811      	ldr	r1, [r2, #0]
 8004ec0:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <ETH_MACDMAConfig+0x390>)
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	f241 031c 	movw	r3, #4124	; 0x101c
 8004ec8:	440b      	add	r3, r1
 8004eca:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f80b 	bl	8004ef0 <ETH_MACAddressConfig>
}
 8004eda:	bf00      	nop
 8004edc:	37c0      	adds	r7, #192	; 0xc0
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	ff20810f 	.word	0xff20810f
 8004ee8:	f8de3f23 	.word	0xf8de3f23
 8004eec:	00010040 	.word	0x00010040

08004ef0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3305      	adds	r3, #5
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	3204      	adds	r2, #4
 8004f08:	7812      	ldrb	r2, [r2, #0]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <ETH_MACAddressConfig+0x68>)
 8004f12:	4413      	add	r3, r2
 8004f14:	461a      	mov	r2, r3
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3303      	adds	r3, #3
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	061a      	lsls	r2, r3, #24
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3302      	adds	r3, #2
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	041b      	lsls	r3, r3, #16
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	4313      	orrs	r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	7812      	ldrb	r2, [r2, #0]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <ETH_MACAddressConfig+0x6c>)
 8004f42:	4413      	add	r3, r2
 8004f44:	461a      	mov	r2, r3
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	6013      	str	r3, [r2, #0]
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40028040 	.word	0x40028040
 8004f5c:	40028044 	.word	0x40028044

08004f60 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0208 	orr.w	r2, r2, #8
 8004f7a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f84:	2001      	movs	r0, #1
 8004f86:	f7fe fa65 	bl	8003454 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	601a      	str	r2, [r3, #0]
}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0208 	bic.w	r2, r2, #8
 8004fb4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fbe:	2001      	movs	r0, #1
 8004fc0:	f7fe fa48 	bl	8003454 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	601a      	str	r2, [r3, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0204 	orr.w	r2, r2, #4
 8004fee:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	f7fe fa2b 	bl	8003454 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	601a      	str	r2, [r3, #0]
}
 8005006:	bf00      	nop
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0204 	bic.w	r2, r2, #4
 8005028:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005032:	2001      	movs	r0, #1
 8005034:	f7fe fa0e 	bl	8003454 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	601a      	str	r2, [r3, #0]
}
 8005040:	bf00      	nop
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	f241 0318 	movw	r3, #4120	; 0x1018
 8005058:	4413      	add	r3, r2
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6811      	ldr	r1, [r2, #0]
 8005060:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005064:	f241 0318 	movw	r3, #4120	; 0x1018
 8005068:	440b      	add	r3, r1
 800506a:	601a      	str	r2, [r3, #0]
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	f241 0318 	movw	r3, #4120	; 0x1018
 8005088:	4413      	add	r3, r2
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6811      	ldr	r1, [r2, #0]
 8005090:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005094:	f241 0318 	movw	r3, #4120	; 0x1018
 8005098:	440b      	add	r3, r1
 800509a:	601a      	str	r2, [r3, #0]
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	f241 0318 	movw	r3, #4120	; 0x1018
 80050b8:	4413      	add	r3, r2
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6811      	ldr	r1, [r2, #0]
 80050c0:	f043 0202 	orr.w	r2, r3, #2
 80050c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80050c8:	440b      	add	r3, r1
 80050ca:	601a      	str	r2, [r3, #0]
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80050e8:	4413      	add	r3, r2
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6811      	ldr	r1, [r2, #0]
 80050f0:	f023 0202 	bic.w	r2, r3, #2
 80050f4:	f241 0318 	movw	r3, #4120	; 0x1018
 80050f8:	440b      	add	r3, r1
 80050fa:	601a      	str	r2, [r3, #0]
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	f241 0318 	movw	r3, #4120	; 0x1018
 800511c:	4413      	add	r3, r2
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6811      	ldr	r1, [r2, #0]
 8005124:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005128:	f241 0318 	movw	r3, #4120	; 0x1018
 800512c:	440b      	add	r3, r1
 800512e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	f241 0318 	movw	r3, #4120	; 0x1018
 8005138:	4413      	add	r3, r2
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800513e:	2001      	movs	r0, #1
 8005140:	f7fe f988 	bl	8003454 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6819      	ldr	r1, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	f241 0318 	movw	r3, #4120	; 0x1018
 800514e:	440b      	add	r3, r1
 8005150:	601a      	str	r2, [r3, #0]
}
 8005152:	bf00      	nop
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800515c:	b480      	push	{r7}
 800515e:	b089      	sub	sp, #36	; 0x24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005166:	2300      	movs	r3, #0
 8005168:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800516e:	2300      	movs	r3, #0
 8005170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005172:	2300      	movs	r3, #0
 8005174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005176:	2300      	movs	r3, #0
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	e175      	b.n	8005468 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800517c:	2201      	movs	r2, #1
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4013      	ands	r3, r2
 800518e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	429a      	cmp	r2, r3
 8005196:	f040 8164 	bne.w	8005462 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d00b      	beq.n	80051ba <HAL_GPIO_Init+0x5e>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d007      	beq.n	80051ba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051ae:	2b11      	cmp	r3, #17
 80051b0:	d003      	beq.n	80051ba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b12      	cmp	r3, #18
 80051b8:	d130      	bne.n	800521c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	2203      	movs	r2, #3
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	43db      	mvns	r3, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4013      	ands	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051f0:	2201      	movs	r2, #1
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	43db      	mvns	r3, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4013      	ands	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	f003 0201 	and.w	r2, r3, #1
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4313      	orrs	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	2203      	movs	r2, #3
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	43db      	mvns	r3, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4013      	ands	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4313      	orrs	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d003      	beq.n	800525c <HAL_GPIO_Init+0x100>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b12      	cmp	r3, #18
 800525a:	d123      	bne.n	80052a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	08da      	lsrs	r2, r3, #3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3208      	adds	r2, #8
 8005264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	220f      	movs	r2, #15
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	43db      	mvns	r3, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	4013      	ands	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	4313      	orrs	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	08da      	lsrs	r2, r3, #3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3208      	adds	r2, #8
 800529e:	69b9      	ldr	r1, [r7, #24]
 80052a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	2203      	movs	r2, #3
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	43db      	mvns	r3, r3
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	4013      	ands	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f003 0203 	and.w	r2, r3, #3
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 80be 	beq.w	8005462 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052e6:	4b66      	ldr	r3, [pc, #408]	; (8005480 <HAL_GPIO_Init+0x324>)
 80052e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ea:	4a65      	ldr	r2, [pc, #404]	; (8005480 <HAL_GPIO_Init+0x324>)
 80052ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052f0:	6453      	str	r3, [r2, #68]	; 0x44
 80052f2:	4b63      	ldr	r3, [pc, #396]	; (8005480 <HAL_GPIO_Init+0x324>)
 80052f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80052fe:	4a61      	ldr	r2, [pc, #388]	; (8005484 <HAL_GPIO_Init+0x328>)
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	089b      	lsrs	r3, r3, #2
 8005304:	3302      	adds	r3, #2
 8005306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800530a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	220f      	movs	r2, #15
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	43db      	mvns	r3, r3
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	4013      	ands	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a58      	ldr	r2, [pc, #352]	; (8005488 <HAL_GPIO_Init+0x32c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d037      	beq.n	800539a <HAL_GPIO_Init+0x23e>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a57      	ldr	r2, [pc, #348]	; (800548c <HAL_GPIO_Init+0x330>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d031      	beq.n	8005396 <HAL_GPIO_Init+0x23a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a56      	ldr	r2, [pc, #344]	; (8005490 <HAL_GPIO_Init+0x334>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d02b      	beq.n	8005392 <HAL_GPIO_Init+0x236>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a55      	ldr	r2, [pc, #340]	; (8005494 <HAL_GPIO_Init+0x338>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d025      	beq.n	800538e <HAL_GPIO_Init+0x232>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a54      	ldr	r2, [pc, #336]	; (8005498 <HAL_GPIO_Init+0x33c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d01f      	beq.n	800538a <HAL_GPIO_Init+0x22e>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a53      	ldr	r2, [pc, #332]	; (800549c <HAL_GPIO_Init+0x340>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d019      	beq.n	8005386 <HAL_GPIO_Init+0x22a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a52      	ldr	r2, [pc, #328]	; (80054a0 <HAL_GPIO_Init+0x344>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d013      	beq.n	8005382 <HAL_GPIO_Init+0x226>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a51      	ldr	r2, [pc, #324]	; (80054a4 <HAL_GPIO_Init+0x348>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00d      	beq.n	800537e <HAL_GPIO_Init+0x222>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a50      	ldr	r2, [pc, #320]	; (80054a8 <HAL_GPIO_Init+0x34c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d007      	beq.n	800537a <HAL_GPIO_Init+0x21e>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a4f      	ldr	r2, [pc, #316]	; (80054ac <HAL_GPIO_Init+0x350>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d101      	bne.n	8005376 <HAL_GPIO_Init+0x21a>
 8005372:	2309      	movs	r3, #9
 8005374:	e012      	b.n	800539c <HAL_GPIO_Init+0x240>
 8005376:	230a      	movs	r3, #10
 8005378:	e010      	b.n	800539c <HAL_GPIO_Init+0x240>
 800537a:	2308      	movs	r3, #8
 800537c:	e00e      	b.n	800539c <HAL_GPIO_Init+0x240>
 800537e:	2307      	movs	r3, #7
 8005380:	e00c      	b.n	800539c <HAL_GPIO_Init+0x240>
 8005382:	2306      	movs	r3, #6
 8005384:	e00a      	b.n	800539c <HAL_GPIO_Init+0x240>
 8005386:	2305      	movs	r3, #5
 8005388:	e008      	b.n	800539c <HAL_GPIO_Init+0x240>
 800538a:	2304      	movs	r3, #4
 800538c:	e006      	b.n	800539c <HAL_GPIO_Init+0x240>
 800538e:	2303      	movs	r3, #3
 8005390:	e004      	b.n	800539c <HAL_GPIO_Init+0x240>
 8005392:	2302      	movs	r3, #2
 8005394:	e002      	b.n	800539c <HAL_GPIO_Init+0x240>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <HAL_GPIO_Init+0x240>
 800539a:	2300      	movs	r3, #0
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	f002 0203 	and.w	r2, r2, #3
 80053a2:	0092      	lsls	r2, r2, #2
 80053a4:	4093      	lsls	r3, r2
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80053ac:	4935      	ldr	r1, [pc, #212]	; (8005484 <HAL_GPIO_Init+0x328>)
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	089b      	lsrs	r3, r3, #2
 80053b2:	3302      	adds	r3, #2
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053ba:	4b3d      	ldr	r3, [pc, #244]	; (80054b0 <HAL_GPIO_Init+0x354>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	43db      	mvns	r3, r3
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	4013      	ands	r3, r2
 80053c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053de:	4a34      	ldr	r2, [pc, #208]	; (80054b0 <HAL_GPIO_Init+0x354>)
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80053e4:	4b32      	ldr	r3, [pc, #200]	; (80054b0 <HAL_GPIO_Init+0x354>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	43db      	mvns	r3, r3
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	4013      	ands	r3, r2
 80053f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005408:	4a29      	ldr	r2, [pc, #164]	; (80054b0 <HAL_GPIO_Init+0x354>)
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800540e:	4b28      	ldr	r3, [pc, #160]	; (80054b0 <HAL_GPIO_Init+0x354>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	43db      	mvns	r3, r3
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	4013      	ands	r3, r2
 800541c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005432:	4a1f      	ldr	r2, [pc, #124]	; (80054b0 <HAL_GPIO_Init+0x354>)
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005438:	4b1d      	ldr	r3, [pc, #116]	; (80054b0 <HAL_GPIO_Init+0x354>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	43db      	mvns	r3, r3
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	4013      	ands	r3, r2
 8005446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800545c:	4a14      	ldr	r2, [pc, #80]	; (80054b0 <HAL_GPIO_Init+0x354>)
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	3301      	adds	r3, #1
 8005466:	61fb      	str	r3, [r7, #28]
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	2b0f      	cmp	r3, #15
 800546c:	f67f ae86 	bls.w	800517c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005470:	bf00      	nop
 8005472:	bf00      	nop
 8005474:	3724      	adds	r7, #36	; 0x24
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40023800 	.word	0x40023800
 8005484:	40013800 	.word	0x40013800
 8005488:	40020000 	.word	0x40020000
 800548c:	40020400 	.word	0x40020400
 8005490:	40020800 	.word	0x40020800
 8005494:	40020c00 	.word	0x40020c00
 8005498:	40021000 	.word	0x40021000
 800549c:	40021400 	.word	0x40021400
 80054a0:	40021800 	.word	0x40021800
 80054a4:	40021c00 	.word	0x40021c00
 80054a8:	40022000 	.word	0x40022000
 80054ac:	40022400 	.word	0x40022400
 80054b0:	40013c00 	.word	0x40013c00

080054b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	807b      	strh	r3, [r7, #2]
 80054c0:	4613      	mov	r3, r2
 80054c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054c4:	787b      	ldrb	r3, [r7, #1]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054ca:	887a      	ldrh	r2, [r7, #2]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80054d0:	e003      	b.n	80054da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80054d2:	887b      	ldrh	r3, [r7, #2]
 80054d4:	041a      	lsls	r2, r3, #16
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	619a      	str	r2, [r3, #24]
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e07f      	b.n	80055fa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f8a9 	bl	8005666 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2224      	movs	r2, #36	; 0x24
 8005518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0201 	bic.w	r2, r2, #1
 800552a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005538:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005548:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d107      	bne.n	8005562 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800555e:	609a      	str	r2, [r3, #8]
 8005560:	e006      	b.n	8005570 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800556e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	2b02      	cmp	r3, #2
 8005576:	d104      	bne.n	8005582 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005580:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6859      	ldr	r1, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	4b1d      	ldr	r3, [pc, #116]	; (8005604 <HAL_I2C_Init+0x11c>)
 800558e:	430b      	orrs	r3, r1
 8005590:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	ea42 0103 	orr.w	r1, r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	021a      	lsls	r2, r3, #8
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	69d9      	ldr	r1, [r3, #28]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a1a      	ldr	r2, [r3, #32]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	02008000 	.word	0x02008000

08005608 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e021      	b.n	800565e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2224      	movs	r2, #36	; 0x24
 800561e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0201 	bic.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f821 	bl	800567a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
	...

08005690 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	4608      	mov	r0, r1
 800569a:	4611      	mov	r1, r2
 800569c:	461a      	mov	r2, r3
 800569e:	4603      	mov	r3, r0
 80056a0:	817b      	strh	r3, [r7, #10]
 80056a2:	460b      	mov	r3, r1
 80056a4:	813b      	strh	r3, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	f040 80f9 	bne.w	80058aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <HAL_I2C_Mem_Write+0x34>
 80056be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d105      	bne.n	80056d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0ed      	b.n	80058ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <HAL_I2C_Mem_Write+0x4e>
 80056da:	2302      	movs	r3, #2
 80056dc:	e0e6      	b.n	80058ac <HAL_I2C_Mem_Write+0x21c>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056e6:	f7fd fea9 	bl	800343c <HAL_GetTick>
 80056ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	2319      	movs	r3, #25
 80056f2:	2201      	movs	r2, #1
 80056f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 fad1 	bl	8005ca0 <I2C_WaitOnFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e0d1      	b.n	80058ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2221      	movs	r2, #33	; 0x21
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2240      	movs	r2, #64	; 0x40
 8005714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a3a      	ldr	r2, [r7, #32]
 8005722:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005728:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005730:	88f8      	ldrh	r0, [r7, #6]
 8005732:	893a      	ldrh	r2, [r7, #8]
 8005734:	8979      	ldrh	r1, [r7, #10]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	4603      	mov	r3, r0
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f9e1 	bl	8005b08 <I2C_RequestMemoryWrite>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d005      	beq.n	8005758 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e0a9      	b.n	80058ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575c:	b29b      	uxth	r3, r3
 800575e:	2bff      	cmp	r3, #255	; 0xff
 8005760:	d90e      	bls.n	8005780 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	22ff      	movs	r2, #255	; 0xff
 8005766:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576c:	b2da      	uxtb	r2, r3
 800576e:	8979      	ldrh	r1, [r7, #10]
 8005770:	2300      	movs	r3, #0
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 fbb3 	bl	8005ee4 <I2C_TransferConfig>
 800577e:	e00f      	b.n	80057a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005784:	b29a      	uxth	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578e:	b2da      	uxtb	r2, r3
 8005790:	8979      	ldrh	r1, [r7, #10]
 8005792:	2300      	movs	r3, #0
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 fba2 	bl	8005ee4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 fabb 	bl	8005d20 <I2C_WaitOnTXISFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e07b      	b.n	80058ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	781a      	ldrb	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d034      	beq.n	8005858 <HAL_I2C_Mem_Write+0x1c8>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d130      	bne.n	8005858 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	2200      	movs	r2, #0
 80057fe:	2180      	movs	r1, #128	; 0x80
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 fa4d 	bl	8005ca0 <I2C_WaitOnFlagUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e04d      	b.n	80058ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005814:	b29b      	uxth	r3, r3
 8005816:	2bff      	cmp	r3, #255	; 0xff
 8005818:	d90e      	bls.n	8005838 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	22ff      	movs	r2, #255	; 0xff
 800581e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005824:	b2da      	uxtb	r2, r3
 8005826:	8979      	ldrh	r1, [r7, #10]
 8005828:	2300      	movs	r3, #0
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 fb57 	bl	8005ee4 <I2C_TransferConfig>
 8005836:	e00f      	b.n	8005858 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005846:	b2da      	uxtb	r2, r3
 8005848:	8979      	ldrh	r1, [r7, #10]
 800584a:	2300      	movs	r3, #0
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 fb46 	bl	8005ee4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585c:	b29b      	uxth	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d19e      	bne.n	80057a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 fa9a 	bl	8005da0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e01a      	b.n	80058ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2220      	movs	r2, #32
 800587c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6859      	ldr	r1, [r3, #4]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <HAL_I2C_Mem_Write+0x224>)
 800588a:	400b      	ands	r3, r1
 800588c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2220      	movs	r2, #32
 8005892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	e000      	b.n	80058ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80058aa:	2302      	movs	r3, #2
  }
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	fe00e800 	.word	0xfe00e800

080058b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af02      	add	r7, sp, #8
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	4608      	mov	r0, r1
 80058c2:	4611      	mov	r1, r2
 80058c4:	461a      	mov	r2, r3
 80058c6:	4603      	mov	r3, r0
 80058c8:	817b      	strh	r3, [r7, #10]
 80058ca:	460b      	mov	r3, r1
 80058cc:	813b      	strh	r3, [r7, #8]
 80058ce:	4613      	mov	r3, r2
 80058d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b20      	cmp	r3, #32
 80058dc:	f040 80fd 	bne.w	8005ada <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_I2C_Mem_Read+0x34>
 80058e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d105      	bne.n	80058f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e0f1      	b.n	8005adc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_I2C_Mem_Read+0x4e>
 8005902:	2302      	movs	r3, #2
 8005904:	e0ea      	b.n	8005adc <HAL_I2C_Mem_Read+0x224>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800590e:	f7fd fd95 	bl	800343c <HAL_GetTick>
 8005912:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	2319      	movs	r3, #25
 800591a:	2201      	movs	r2, #1
 800591c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 f9bd 	bl	8005ca0 <I2C_WaitOnFlagUntilTimeout>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e0d5      	b.n	8005adc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2222      	movs	r2, #34	; 0x22
 8005934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2240      	movs	r2, #64	; 0x40
 800593c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a3a      	ldr	r2, [r7, #32]
 800594a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005950:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005958:	88f8      	ldrh	r0, [r7, #6]
 800595a:	893a      	ldrh	r2, [r7, #8]
 800595c:	8979      	ldrh	r1, [r7, #10]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	9301      	str	r3, [sp, #4]
 8005962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	4603      	mov	r3, r0
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 f921 	bl	8005bb0 <I2C_RequestMemoryRead>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e0ad      	b.n	8005adc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005984:	b29b      	uxth	r3, r3
 8005986:	2bff      	cmp	r3, #255	; 0xff
 8005988:	d90e      	bls.n	80059a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	22ff      	movs	r2, #255	; 0xff
 800598e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005994:	b2da      	uxtb	r2, r3
 8005996:	8979      	ldrh	r1, [r7, #10]
 8005998:	4b52      	ldr	r3, [pc, #328]	; (8005ae4 <HAL_I2C_Mem_Read+0x22c>)
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 fa9f 	bl	8005ee4 <I2C_TransferConfig>
 80059a6:	e00f      	b.n	80059c8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	8979      	ldrh	r1, [r7, #10]
 80059ba:	4b4a      	ldr	r3, [pc, #296]	; (8005ae4 <HAL_I2C_Mem_Read+0x22c>)
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 fa8e 	bl	8005ee4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ce:	2200      	movs	r2, #0
 80059d0:	2104      	movs	r1, #4
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 f964 	bl	8005ca0 <I2C_WaitOnFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e07c      	b.n	8005adc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d034      	beq.n	8005a88 <HAL_I2C_Mem_Read+0x1d0>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d130      	bne.n	8005a88 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2180      	movs	r1, #128	; 0x80
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 f935 	bl	8005ca0 <I2C_WaitOnFlagUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e04d      	b.n	8005adc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2bff      	cmp	r3, #255	; 0xff
 8005a48:	d90e      	bls.n	8005a68 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	22ff      	movs	r2, #255	; 0xff
 8005a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	8979      	ldrh	r1, [r7, #10]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 fa3f 	bl	8005ee4 <I2C_TransferConfig>
 8005a66:	e00f      	b.n	8005a88 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	8979      	ldrh	r1, [r7, #10]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fa2e 	bl	8005ee4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d19a      	bne.n	80059c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 f982 	bl	8005da0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e01a      	b.n	8005adc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6859      	ldr	r1, [r3, #4]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <HAL_I2C_Mem_Read+0x230>)
 8005aba:	400b      	ands	r3, r1
 8005abc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e000      	b.n	8005adc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005ada:	2302      	movs	r3, #2
  }
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	80002400 	.word	0x80002400
 8005ae8:	fe00e800 	.word	0xfe00e800

08005aec <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005afa:	b2db      	uxtb	r3, r3
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af02      	add	r7, sp, #8
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	4608      	mov	r0, r1
 8005b12:	4611      	mov	r1, r2
 8005b14:	461a      	mov	r2, r3
 8005b16:	4603      	mov	r3, r0
 8005b18:	817b      	strh	r3, [r7, #10]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	813b      	strh	r3, [r7, #8]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	8979      	ldrh	r1, [r7, #10]
 8005b28:	4b20      	ldr	r3, [pc, #128]	; (8005bac <I2C_RequestMemoryWrite+0xa4>)
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 f9d7 	bl	8005ee4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	69b9      	ldr	r1, [r7, #24]
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 f8f0 	bl	8005d20 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e02c      	b.n	8005ba4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b4a:	88fb      	ldrh	r3, [r7, #6]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d105      	bne.n	8005b5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b50:	893b      	ldrh	r3, [r7, #8]
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	629a      	str	r2, [r3, #40]	; 0x28
 8005b5a:	e015      	b.n	8005b88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b5c:	893b      	ldrh	r3, [r7, #8]
 8005b5e:	0a1b      	lsrs	r3, r3, #8
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	69b9      	ldr	r1, [r7, #24]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f8d6 	bl	8005d20 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e012      	b.n	8005ba4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b7e:	893b      	ldrh	r3, [r7, #8]
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2180      	movs	r1, #128	; 0x80
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f884 	bl	8005ca0 <I2C_WaitOnFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	80002000 	.word	0x80002000

08005bb0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	4608      	mov	r0, r1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	817b      	strh	r3, [r7, #10]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	813b      	strh	r3, [r7, #8]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	8979      	ldrh	r1, [r7, #10]
 8005bd0:	4b20      	ldr	r3, [pc, #128]	; (8005c54 <I2C_RequestMemoryRead+0xa4>)
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 f984 	bl	8005ee4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bdc:	69fa      	ldr	r2, [r7, #28]
 8005bde:	69b9      	ldr	r1, [r7, #24]
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 f89d 	bl	8005d20 <I2C_WaitOnTXISFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e02c      	b.n	8005c4a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bf0:	88fb      	ldrh	r3, [r7, #6]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d105      	bne.n	8005c02 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bf6:	893b      	ldrh	r3, [r7, #8]
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	629a      	str	r2, [r3, #40]	; 0x28
 8005c00:	e015      	b.n	8005c2e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c02:	893b      	ldrh	r3, [r7, #8]
 8005c04:	0a1b      	lsrs	r3, r3, #8
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	69b9      	ldr	r1, [r7, #24]
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f883 	bl	8005d20 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e012      	b.n	8005c4a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c24:	893b      	ldrh	r3, [r7, #8]
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2200      	movs	r2, #0
 8005c36:	2140      	movs	r1, #64	; 0x40
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f831 	bl	8005ca0 <I2C_WaitOnFlagUntilTimeout>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e000      	b.n	8005c4a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	80002000 	.word	0x80002000

08005c58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d103      	bne.n	8005c76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2200      	movs	r2, #0
 8005c74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d007      	beq.n	8005c94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699a      	ldr	r2, [r3, #24]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	619a      	str	r2, [r3, #24]
  }
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	4613      	mov	r3, r2
 8005cae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cb0:	e022      	b.n	8005cf8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb8:	d01e      	beq.n	8005cf8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cba:	f7fd fbbf 	bl	800343c <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d302      	bcc.n	8005cd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d113      	bne.n	8005cf8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd4:	f043 0220 	orr.w	r2, r3, #32
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e00f      	b.n	8005d18 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	4013      	ands	r3, r2
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	bf0c      	ite	eq
 8005d08:	2301      	moveq	r3, #1
 8005d0a:	2300      	movne	r3, #0
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	461a      	mov	r2, r3
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d0cd      	beq.n	8005cb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d2c:	e02c      	b.n	8005d88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 f870 	bl	8005e18 <I2C_IsAcknowledgeFailed>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e02a      	b.n	8005d98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d48:	d01e      	beq.n	8005d88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4a:	f7fd fb77 	bl	800343c <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d302      	bcc.n	8005d60 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d113      	bne.n	8005d88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d64:	f043 0220 	orr.w	r2, r3, #32
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e007      	b.n	8005d98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d1cb      	bne.n	8005d2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dac:	e028      	b.n	8005e00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 f830 	bl	8005e18 <I2C_IsAcknowledgeFailed>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e026      	b.n	8005e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dc2:	f7fd fb3b 	bl	800343c <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d302      	bcc.n	8005dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d113      	bne.n	8005e00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ddc:	f043 0220 	orr.w	r2, r3, #32
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e007      	b.n	8005e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	d1cf      	bne.n	8005dae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	f003 0310 	and.w	r3, r3, #16
 8005e2e:	2b10      	cmp	r3, #16
 8005e30:	d151      	bne.n	8005ed6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e32:	e022      	b.n	8005e7a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3a:	d01e      	beq.n	8005e7a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e3c:	f7fd fafe 	bl	800343c <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d302      	bcc.n	8005e52 <I2C_IsAcknowledgeFailed+0x3a>
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d113      	bne.n	8005e7a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e56:	f043 0220 	orr.w	r2, r3, #32
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e02e      	b.n	8005ed8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	d1d5      	bne.n	8005e34 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2210      	movs	r2, #16
 8005e8e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2220      	movs	r2, #32
 8005e96:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f7ff fedd 	bl	8005c58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6859      	ldr	r1, [r3, #4]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4b0d      	ldr	r3, [pc, #52]	; (8005ee0 <I2C_IsAcknowledgeFailed+0xc8>)
 8005eaa:	400b      	ands	r3, r1
 8005eac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb2:	f043 0204 	orr.w	r2, r3, #4
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	fe00e800 	.word	0xfe00e800

08005ee4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	607b      	str	r3, [r7, #4]
 8005eee:	460b      	mov	r3, r1
 8005ef0:	817b      	strh	r3, [r7, #10]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	0d5b      	lsrs	r3, r3, #21
 8005f00:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f04:	4b0d      	ldr	r3, [pc, #52]	; (8005f3c <I2C_TransferConfig+0x58>)
 8005f06:	430b      	orrs	r3, r1
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	ea02 0103 	and.w	r1, r2, r3
 8005f0e:	897b      	ldrh	r3, [r7, #10]
 8005f10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f14:	7a7b      	ldrb	r3, [r7, #9]
 8005f16:	041b      	lsls	r3, r3, #16
 8005f18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	431a      	orrs	r2, r3
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	431a      	orrs	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005f2e:	bf00      	nop
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	03ff63ff 	.word	0x03ff63ff

08005f40 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e0bf      	b.n	80060d2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7fb fc08 	bl	800177c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699a      	ldr	r2, [r3, #24]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005f82:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6999      	ldr	r1, [r3, #24]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f98:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6899      	ldr	r1, [r3, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4b4a      	ldr	r3, [pc, #296]	; (80060dc <HAL_LTDC_Init+0x19c>)
 8005fb4:	400b      	ands	r3, r1
 8005fb6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	041b      	lsls	r3, r3, #16
 8005fbe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6899      	ldr	r1, [r3, #8]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699a      	ldr	r2, [r3, #24]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68d9      	ldr	r1, [r3, #12]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4b3e      	ldr	r3, [pc, #248]	; (80060dc <HAL_LTDC_Init+0x19c>)
 8005fe2:	400b      	ands	r3, r1
 8005fe4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	041b      	lsls	r3, r3, #16
 8005fec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68d9      	ldr	r1, [r3, #12]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a1a      	ldr	r2, [r3, #32]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6919      	ldr	r1, [r3, #16]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b33      	ldr	r3, [pc, #204]	; (80060dc <HAL_LTDC_Init+0x19c>)
 8006010:	400b      	ands	r3, r1
 8006012:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	041b      	lsls	r3, r3, #16
 800601a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6919      	ldr	r1, [r3, #16]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	431a      	orrs	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6959      	ldr	r1, [r3, #20]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	4b27      	ldr	r3, [pc, #156]	; (80060dc <HAL_LTDC_Init+0x19c>)
 800603e:	400b      	ands	r3, r1
 8006040:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006046:	041b      	lsls	r3, r3, #16
 8006048:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6959      	ldr	r1, [r3, #20]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	431a      	orrs	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006066:	021b      	lsls	r3, r3, #8
 8006068:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006070:	041b      	lsls	r3, r3, #16
 8006072:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006082:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0206 	orr.w	r2, r2, #6
 80060ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	f000f800 	.word	0xf000f800

080060e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80060e0:	b5b0      	push	{r4, r5, r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_LTDC_ConfigLayer+0x1a>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e02c      	b.n	8006154 <HAL_LTDC_ConfigLayer+0x74>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2202      	movs	r2, #2
 8006106:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2134      	movs	r1, #52	; 0x34
 8006110:	fb01 f303 	mul.w	r3, r1, r3
 8006114:	4413      	add	r3, r2
 8006116:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	4614      	mov	r4, r2
 800611e:	461d      	mov	r5, r3
 8006120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800612a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f81f 	bl	8006178 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2201      	movs	r2, #1
 8006140:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bdb0      	pop	{r4, r5, r7, pc}

0800615c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800616a:	b2db      	uxtb	r3, r3
}
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006178:	b480      	push	{r7}
 800617a:	b089      	sub	sp, #36	; 0x24
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	0c1b      	lsrs	r3, r3, #16
 8006190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006194:	4413      	add	r3, r2
 8006196:	041b      	lsls	r3, r3, #16
 8006198:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	01db      	lsls	r3, r3, #7
 80061a4:	4413      	add	r3, r2
 80061a6:	3384      	adds	r3, #132	; 0x84
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	6812      	ldr	r2, [r2, #0]
 80061ae:	4611      	mov	r1, r2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	01d2      	lsls	r2, r2, #7
 80061b4:	440a      	add	r2, r1
 80061b6:	3284      	adds	r2, #132	; 0x84
 80061b8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80061bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	0c1b      	lsrs	r3, r3, #16
 80061ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ce:	4413      	add	r3, r2
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4619      	mov	r1, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	01db      	lsls	r3, r3, #7
 80061dc:	440b      	add	r3, r1
 80061de:	3384      	adds	r3, #132	; 0x84
 80061e0:	4619      	mov	r1, r3
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061f6:	4413      	add	r3, r2
 80061f8:	041b      	lsls	r3, r3, #16
 80061fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	01db      	lsls	r3, r3, #7
 8006206:	4413      	add	r3, r2
 8006208:	3384      	adds	r3, #132	; 0x84
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	6812      	ldr	r2, [r2, #0]
 8006210:	4611      	mov	r1, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	01d2      	lsls	r2, r2, #7
 8006216:	440a      	add	r2, r1
 8006218:	3284      	adds	r2, #132	; 0x84
 800621a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800621e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800622e:	4413      	add	r3, r2
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4619      	mov	r1, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	01db      	lsls	r3, r3, #7
 800623c:	440b      	add	r3, r1
 800623e:	3384      	adds	r3, #132	; 0x84
 8006240:	4619      	mov	r1, r3
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	4313      	orrs	r3, r2
 8006246:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	461a      	mov	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	01db      	lsls	r3, r3, #7
 8006252:	4413      	add	r3, r2
 8006254:	3384      	adds	r3, #132	; 0x84
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	6812      	ldr	r2, [r2, #0]
 800625c:	4611      	mov	r1, r2
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	01d2      	lsls	r2, r2, #7
 8006262:	440a      	add	r2, r1
 8006264:	3284      	adds	r2, #132	; 0x84
 8006266:	f023 0307 	bic.w	r3, r3, #7
 800626a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	461a      	mov	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	01db      	lsls	r3, r3, #7
 8006276:	4413      	add	r3, r2
 8006278:	3384      	adds	r3, #132	; 0x84
 800627a:	461a      	mov	r2, r3
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006288:	021b      	lsls	r3, r3, #8
 800628a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006292:	041b      	lsls	r3, r3, #16
 8006294:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	061b      	lsls	r3, r3, #24
 800629c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	461a      	mov	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	01db      	lsls	r3, r3, #7
 80062a8:	4413      	add	r3, r2
 80062aa:	3384      	adds	r3, #132	; 0x84
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	01db      	lsls	r3, r3, #7
 80062b8:	4413      	add	r3, r2
 80062ba:	3384      	adds	r3, #132	; 0x84
 80062bc:	461a      	mov	r2, r3
 80062be:	2300      	movs	r3, #0
 80062c0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062c8:	461a      	mov	r2, r3
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	431a      	orrs	r2, r3
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	431a      	orrs	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4619      	mov	r1, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	01db      	lsls	r3, r3, #7
 80062dc:	440b      	add	r3, r1
 80062de:	3384      	adds	r3, #132	; 0x84
 80062e0:	4619      	mov	r1, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	01db      	lsls	r3, r3, #7
 80062f2:	4413      	add	r3, r2
 80062f4:	3384      	adds	r3, #132	; 0x84
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	4611      	mov	r1, r2
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	01d2      	lsls	r2, r2, #7
 8006302:	440a      	add	r2, r1
 8006304:	3284      	adds	r2, #132	; 0x84
 8006306:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800630a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	461a      	mov	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	01db      	lsls	r3, r3, #7
 8006316:	4413      	add	r3, r2
 8006318:	3384      	adds	r3, #132	; 0x84
 800631a:	461a      	mov	r2, r3
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	01db      	lsls	r3, r3, #7
 800632c:	4413      	add	r3, r2
 800632e:	3384      	adds	r3, #132	; 0x84
 8006330:	69da      	ldr	r2, [r3, #28]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4619      	mov	r1, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	01db      	lsls	r3, r3, #7
 800633c:	440b      	add	r3, r1
 800633e:	3384      	adds	r3, #132	; 0x84
 8006340:	4619      	mov	r1, r3
 8006342:	4b58      	ldr	r3, [pc, #352]	; (80064a4 <LTDC_SetConfig+0x32c>)
 8006344:	4013      	ands	r3, r2
 8006346:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	68f9      	ldr	r1, [r7, #12]
 8006352:	6809      	ldr	r1, [r1, #0]
 8006354:	4608      	mov	r0, r1
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	01c9      	lsls	r1, r1, #7
 800635a:	4401      	add	r1, r0
 800635c:	3184      	adds	r1, #132	; 0x84
 800635e:	4313      	orrs	r3, r2
 8006360:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	01db      	lsls	r3, r3, #7
 800636c:	4413      	add	r3, r2
 800636e:	3384      	adds	r3, #132	; 0x84
 8006370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	01db      	lsls	r3, r3, #7
 800637c:	4413      	add	r3, r2
 800637e:	3384      	adds	r3, #132	; 0x84
 8006380:	461a      	mov	r2, r3
 8006382:	2300      	movs	r3, #0
 8006384:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	01db      	lsls	r3, r3, #7
 8006390:	4413      	add	r3, r2
 8006392:	3384      	adds	r3, #132	; 0x84
 8006394:	461a      	mov	r2, r3
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d102      	bne.n	80063aa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80063a4:	2304      	movs	r3, #4
 80063a6:	61fb      	str	r3, [r7, #28]
 80063a8:	e01b      	b.n	80063e2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d102      	bne.n	80063b8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80063b2:	2303      	movs	r3, #3
 80063b4:	61fb      	str	r3, [r7, #28]
 80063b6:	e014      	b.n	80063e2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d00b      	beq.n	80063d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d007      	beq.n	80063d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d003      	beq.n	80063d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80063d4:	2b07      	cmp	r3, #7
 80063d6:	d102      	bne.n	80063de <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80063d8:	2302      	movs	r3, #2
 80063da:	61fb      	str	r3, [r7, #28]
 80063dc:	e001      	b.n	80063e2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80063de:	2301      	movs	r3, #1
 80063e0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	01db      	lsls	r3, r3, #7
 80063ec:	4413      	add	r3, r2
 80063ee:	3384      	adds	r3, #132	; 0x84
 80063f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	6812      	ldr	r2, [r2, #0]
 80063f6:	4611      	mov	r1, r2
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	01d2      	lsls	r2, r2, #7
 80063fc:	440a      	add	r2, r1
 80063fe:	3284      	adds	r2, #132	; 0x84
 8006400:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006404:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	fb02 f303 	mul.w	r3, r2, r3
 8006410:	041a      	lsls	r2, r3, #16
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6859      	ldr	r1, [r3, #4]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	1acb      	subs	r3, r1, r3
 800641c:	69f9      	ldr	r1, [r7, #28]
 800641e:	fb01 f303 	mul.w	r3, r1, r3
 8006422:	3303      	adds	r3, #3
 8006424:	68f9      	ldr	r1, [r7, #12]
 8006426:	6809      	ldr	r1, [r1, #0]
 8006428:	4608      	mov	r0, r1
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	01c9      	lsls	r1, r1, #7
 800642e:	4401      	add	r1, r0
 8006430:	3184      	adds	r1, #132	; 0x84
 8006432:	4313      	orrs	r3, r2
 8006434:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	01db      	lsls	r3, r3, #7
 8006440:	4413      	add	r3, r2
 8006442:	3384      	adds	r3, #132	; 0x84
 8006444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4619      	mov	r1, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	01db      	lsls	r3, r3, #7
 8006450:	440b      	add	r3, r1
 8006452:	3384      	adds	r3, #132	; 0x84
 8006454:	4619      	mov	r1, r3
 8006456:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <LTDC_SetConfig+0x330>)
 8006458:	4013      	ands	r3, r2
 800645a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	461a      	mov	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	01db      	lsls	r3, r3, #7
 8006466:	4413      	add	r3, r2
 8006468:	3384      	adds	r3, #132	; 0x84
 800646a:	461a      	mov	r2, r3
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	01db      	lsls	r3, r3, #7
 800647c:	4413      	add	r3, r2
 800647e:	3384      	adds	r3, #132	; 0x84
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	6812      	ldr	r2, [r2, #0]
 8006486:	4611      	mov	r1, r2
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	01d2      	lsls	r2, r2, #7
 800648c:	440a      	add	r2, r1
 800648e:	3284      	adds	r2, #132	; 0x84
 8006490:	f043 0301 	orr.w	r3, r3, #1
 8006494:	6013      	str	r3, [r2, #0]
}
 8006496:	bf00      	nop
 8006498:	3724      	adds	r7, #36	; 0x24
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	fffff8f8 	.word	0xfffff8f8
 80064a8:	fffff800 	.word	0xfffff800

080064ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064b0:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a04      	ldr	r2, [pc, #16]	; (80064c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ba:	6013      	str	r3, [r2, #0]
}
 80064bc:	bf00      	nop
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	40007000 	.word	0x40007000

080064cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80064d2:	2300      	movs	r3, #0
 80064d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80064d6:	4b23      	ldr	r3, [pc, #140]	; (8006564 <HAL_PWREx_EnableOverDrive+0x98>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	4a22      	ldr	r2, [pc, #136]	; (8006564 <HAL_PWREx_EnableOverDrive+0x98>)
 80064dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064e0:	6413      	str	r3, [r2, #64]	; 0x40
 80064e2:	4b20      	ldr	r3, [pc, #128]	; (8006564 <HAL_PWREx_EnableOverDrive+0x98>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80064ee:	4b1e      	ldr	r3, [pc, #120]	; (8006568 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a1d      	ldr	r2, [pc, #116]	; (8006568 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064fa:	f7fc ff9f 	bl	800343c <HAL_GetTick>
 80064fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006500:	e009      	b.n	8006516 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006502:	f7fc ff9b 	bl	800343c <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006510:	d901      	bls.n	8006516 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e022      	b.n	800655c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006516:	4b14      	ldr	r3, [pc, #80]	; (8006568 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800651e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006522:	d1ee      	bne.n	8006502 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006524:	4b10      	ldr	r3, [pc, #64]	; (8006568 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a0f      	ldr	r2, [pc, #60]	; (8006568 <HAL_PWREx_EnableOverDrive+0x9c>)
 800652a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800652e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006530:	f7fc ff84 	bl	800343c <HAL_GetTick>
 8006534:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006536:	e009      	b.n	800654c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006538:	f7fc ff80 	bl	800343c <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006546:	d901      	bls.n	800654c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e007      	b.n	800655c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800654c:	4b06      	ldr	r3, [pc, #24]	; (8006568 <HAL_PWREx_EnableOverDrive+0x9c>)
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006558:	d1ee      	bne.n	8006538 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	40023800 	.word	0x40023800
 8006568:	40007000 	.word	0x40007000

0800656c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006574:	2300      	movs	r3, #0
 8006576:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e291      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 8087 	beq.w	800669e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006590:	4b96      	ldr	r3, [pc, #600]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f003 030c 	and.w	r3, r3, #12
 8006598:	2b04      	cmp	r3, #4
 800659a:	d00c      	beq.n	80065b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800659c:	4b93      	ldr	r3, [pc, #588]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f003 030c 	and.w	r3, r3, #12
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d112      	bne.n	80065ce <HAL_RCC_OscConfig+0x62>
 80065a8:	4b90      	ldr	r3, [pc, #576]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065b4:	d10b      	bne.n	80065ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b6:	4b8d      	ldr	r3, [pc, #564]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d06c      	beq.n	800669c <HAL_RCC_OscConfig+0x130>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d168      	bne.n	800669c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e26b      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d6:	d106      	bne.n	80065e6 <HAL_RCC_OscConfig+0x7a>
 80065d8:	4b84      	ldr	r3, [pc, #528]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a83      	ldr	r2, [pc, #524]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80065de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	e02e      	b.n	8006644 <HAL_RCC_OscConfig+0xd8>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10c      	bne.n	8006608 <HAL_RCC_OscConfig+0x9c>
 80065ee:	4b7f      	ldr	r3, [pc, #508]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a7e      	ldr	r2, [pc, #504]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80065f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	4b7c      	ldr	r3, [pc, #496]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a7b      	ldr	r2, [pc, #492]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006600:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	e01d      	b.n	8006644 <HAL_RCC_OscConfig+0xd8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006610:	d10c      	bne.n	800662c <HAL_RCC_OscConfig+0xc0>
 8006612:	4b76      	ldr	r3, [pc, #472]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a75      	ldr	r2, [pc, #468]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	4b73      	ldr	r3, [pc, #460]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a72      	ldr	r2, [pc, #456]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	e00b      	b.n	8006644 <HAL_RCC_OscConfig+0xd8>
 800662c:	4b6f      	ldr	r3, [pc, #444]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a6e      	ldr	r2, [pc, #440]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	4b6c      	ldr	r3, [pc, #432]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a6b      	ldr	r2, [pc, #428]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 800663e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d013      	beq.n	8006674 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664c:	f7fc fef6 	bl	800343c <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006654:	f7fc fef2 	bl	800343c <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b64      	cmp	r3, #100	; 0x64
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e21f      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006666:	4b61      	ldr	r3, [pc, #388]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0f0      	beq.n	8006654 <HAL_RCC_OscConfig+0xe8>
 8006672:	e014      	b.n	800669e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006674:	f7fc fee2 	bl	800343c <HAL_GetTick>
 8006678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800667a:	e008      	b.n	800668e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800667c:	f7fc fede 	bl	800343c <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b64      	cmp	r3, #100	; 0x64
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e20b      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800668e:	4b57      	ldr	r3, [pc, #348]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1f0      	bne.n	800667c <HAL_RCC_OscConfig+0x110>
 800669a:	e000      	b.n	800669e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800669c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d069      	beq.n	800677e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066aa:	4b50      	ldr	r3, [pc, #320]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 030c 	and.w	r3, r3, #12
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00b      	beq.n	80066ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066b6:	4b4d      	ldr	r3, [pc, #308]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 030c 	and.w	r3, r3, #12
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d11c      	bne.n	80066fc <HAL_RCC_OscConfig+0x190>
 80066c2:	4b4a      	ldr	r3, [pc, #296]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d116      	bne.n	80066fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ce:	4b47      	ldr	r3, [pc, #284]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <HAL_RCC_OscConfig+0x17a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d001      	beq.n	80066e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e1df      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e6:	4b41      	ldr	r3, [pc, #260]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	493d      	ldr	r1, [pc, #244]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066fa:	e040      	b.n	800677e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d023      	beq.n	800674c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006704:	4b39      	ldr	r3, [pc, #228]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a38      	ldr	r2, [pc, #224]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 800670a:	f043 0301 	orr.w	r3, r3, #1
 800670e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006710:	f7fc fe94 	bl	800343c <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006718:	f7fc fe90 	bl	800343c <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e1bd      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800672a:	4b30      	ldr	r3, [pc, #192]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0f0      	beq.n	8006718 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006736:	4b2d      	ldr	r3, [pc, #180]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	4929      	ldr	r1, [pc, #164]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006746:	4313      	orrs	r3, r2
 8006748:	600b      	str	r3, [r1, #0]
 800674a:	e018      	b.n	800677e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800674c:	4b27      	ldr	r3, [pc, #156]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a26      	ldr	r2, [pc, #152]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006752:	f023 0301 	bic.w	r3, r3, #1
 8006756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006758:	f7fc fe70 	bl	800343c <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006760:	f7fc fe6c 	bl	800343c <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e199      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006772:	4b1e      	ldr	r3, [pc, #120]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1f0      	bne.n	8006760 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d038      	beq.n	80067fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d019      	beq.n	80067c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006792:	4b16      	ldr	r3, [pc, #88]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006796:	4a15      	ldr	r2, [pc, #84]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 8006798:	f043 0301 	orr.w	r3, r3, #1
 800679c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679e:	f7fc fe4d 	bl	800343c <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067a6:	f7fc fe49 	bl	800343c <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e176      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067b8:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80067ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0f0      	beq.n	80067a6 <HAL_RCC_OscConfig+0x23a>
 80067c4:	e01a      	b.n	80067fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067c6:	4b09      	ldr	r3, [pc, #36]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80067c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ca:	4a08      	ldr	r2, [pc, #32]	; (80067ec <HAL_RCC_OscConfig+0x280>)
 80067cc:	f023 0301 	bic.w	r3, r3, #1
 80067d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d2:	f7fc fe33 	bl	800343c <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067d8:	e00a      	b.n	80067f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067da:	f7fc fe2f 	bl	800343c <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d903      	bls.n	80067f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e15c      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
 80067ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067f0:	4b91      	ldr	r3, [pc, #580]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80067f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1ee      	bne.n	80067da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 80a4 	beq.w	8006952 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800680a:	4b8b      	ldr	r3, [pc, #556]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10d      	bne.n	8006832 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006816:	4b88      	ldr	r3, [pc, #544]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	4a87      	ldr	r2, [pc, #540]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 800681c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006820:	6413      	str	r3, [r2, #64]	; 0x40
 8006822:	4b85      	ldr	r3, [pc, #532]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682a:	60bb      	str	r3, [r7, #8]
 800682c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800682e:	2301      	movs	r3, #1
 8006830:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006832:	4b82      	ldr	r3, [pc, #520]	; (8006a3c <HAL_RCC_OscConfig+0x4d0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683a:	2b00      	cmp	r3, #0
 800683c:	d118      	bne.n	8006870 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800683e:	4b7f      	ldr	r3, [pc, #508]	; (8006a3c <HAL_RCC_OscConfig+0x4d0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a7e      	ldr	r2, [pc, #504]	; (8006a3c <HAL_RCC_OscConfig+0x4d0>)
 8006844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800684a:	f7fc fdf7 	bl	800343c <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006850:	e008      	b.n	8006864 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006852:	f7fc fdf3 	bl	800343c <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b64      	cmp	r3, #100	; 0x64
 800685e:	d901      	bls.n	8006864 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e120      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006864:	4b75      	ldr	r3, [pc, #468]	; (8006a3c <HAL_RCC_OscConfig+0x4d0>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0f0      	beq.n	8006852 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d106      	bne.n	8006886 <HAL_RCC_OscConfig+0x31a>
 8006878:	4b6f      	ldr	r3, [pc, #444]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687c:	4a6e      	ldr	r2, [pc, #440]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 800687e:	f043 0301 	orr.w	r3, r3, #1
 8006882:	6713      	str	r3, [r2, #112]	; 0x70
 8006884:	e02d      	b.n	80068e2 <HAL_RCC_OscConfig+0x376>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10c      	bne.n	80068a8 <HAL_RCC_OscConfig+0x33c>
 800688e:	4b6a      	ldr	r3, [pc, #424]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006892:	4a69      	ldr	r2, [pc, #420]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006894:	f023 0301 	bic.w	r3, r3, #1
 8006898:	6713      	str	r3, [r2, #112]	; 0x70
 800689a:	4b67      	ldr	r3, [pc, #412]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 800689c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689e:	4a66      	ldr	r2, [pc, #408]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068a0:	f023 0304 	bic.w	r3, r3, #4
 80068a4:	6713      	str	r3, [r2, #112]	; 0x70
 80068a6:	e01c      	b.n	80068e2 <HAL_RCC_OscConfig+0x376>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2b05      	cmp	r3, #5
 80068ae:	d10c      	bne.n	80068ca <HAL_RCC_OscConfig+0x35e>
 80068b0:	4b61      	ldr	r3, [pc, #388]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b4:	4a60      	ldr	r2, [pc, #384]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068b6:	f043 0304 	orr.w	r3, r3, #4
 80068ba:	6713      	str	r3, [r2, #112]	; 0x70
 80068bc:	4b5e      	ldr	r3, [pc, #376]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c0:	4a5d      	ldr	r2, [pc, #372]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068c2:	f043 0301 	orr.w	r3, r3, #1
 80068c6:	6713      	str	r3, [r2, #112]	; 0x70
 80068c8:	e00b      	b.n	80068e2 <HAL_RCC_OscConfig+0x376>
 80068ca:	4b5b      	ldr	r3, [pc, #364]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ce:	4a5a      	ldr	r2, [pc, #360]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068d0:	f023 0301 	bic.w	r3, r3, #1
 80068d4:	6713      	str	r3, [r2, #112]	; 0x70
 80068d6:	4b58      	ldr	r3, [pc, #352]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068da:	4a57      	ldr	r2, [pc, #348]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068dc:	f023 0304 	bic.w	r3, r3, #4
 80068e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d015      	beq.n	8006916 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ea:	f7fc fda7 	bl	800343c <HAL_GetTick>
 80068ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f0:	e00a      	b.n	8006908 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068f2:	f7fc fda3 	bl	800343c <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006900:	4293      	cmp	r3, r2
 8006902:	d901      	bls.n	8006908 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e0ce      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006908:	4b4b      	ldr	r3, [pc, #300]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 800690a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0ee      	beq.n	80068f2 <HAL_RCC_OscConfig+0x386>
 8006914:	e014      	b.n	8006940 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006916:	f7fc fd91 	bl	800343c <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800691c:	e00a      	b.n	8006934 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800691e:	f7fc fd8d 	bl	800343c <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	f241 3288 	movw	r2, #5000	; 0x1388
 800692c:	4293      	cmp	r3, r2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e0b8      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006934:	4b40      	ldr	r3, [pc, #256]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1ee      	bne.n	800691e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006940:	7dfb      	ldrb	r3, [r7, #23]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d105      	bne.n	8006952 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006946:	4b3c      	ldr	r3, [pc, #240]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	4a3b      	ldr	r2, [pc, #236]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 800694c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006950:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 80a4 	beq.w	8006aa4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800695c:	4b36      	ldr	r3, [pc, #216]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 030c 	and.w	r3, r3, #12
 8006964:	2b08      	cmp	r3, #8
 8006966:	d06b      	beq.n	8006a40 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	2b02      	cmp	r3, #2
 800696e:	d149      	bne.n	8006a04 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006970:	4b31      	ldr	r3, [pc, #196]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a30      	ldr	r2, [pc, #192]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800697a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697c:	f7fc fd5e 	bl	800343c <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006984:	f7fc fd5a 	bl	800343c <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e087      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006996:	4b28      	ldr	r3, [pc, #160]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1f0      	bne.n	8006984 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	69da      	ldr	r2, [r3, #28]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	019b      	lsls	r3, r3, #6
 80069b2:	431a      	orrs	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b8:	085b      	lsrs	r3, r3, #1
 80069ba:	3b01      	subs	r3, #1
 80069bc:	041b      	lsls	r3, r3, #16
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c4:	061b      	lsls	r3, r3, #24
 80069c6:	4313      	orrs	r3, r2
 80069c8:	4a1b      	ldr	r2, [pc, #108]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80069ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069d0:	4b19      	ldr	r3, [pc, #100]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a18      	ldr	r2, [pc, #96]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80069d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069dc:	f7fc fd2e 	bl	800343c <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e4:	f7fc fd2a 	bl	800343c <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e057      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069f6:	4b10      	ldr	r3, [pc, #64]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0f0      	beq.n	80069e4 <HAL_RCC_OscConfig+0x478>
 8006a02:	e04f      	b.n	8006aa4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a04:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a0b      	ldr	r2, [pc, #44]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a10:	f7fc fd14 	bl	800343c <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a18:	f7fc fd10 	bl	800343c <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e03d      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a2a:	4b03      	ldr	r3, [pc, #12]	; (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1f0      	bne.n	8006a18 <HAL_RCC_OscConfig+0x4ac>
 8006a36:	e035      	b.n	8006aa4 <HAL_RCC_OscConfig+0x538>
 8006a38:	40023800 	.word	0x40023800
 8006a3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006a40:	4b1b      	ldr	r3, [pc, #108]	; (8006ab0 <HAL_RCC_OscConfig+0x544>)
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d028      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d121      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d11a      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a70:	4013      	ands	r3, r2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a76:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d111      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	085b      	lsrs	r3, r3, #1
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d107      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d001      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e000      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	40023800 	.word	0x40023800

08006ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e0d0      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006acc:	4b6a      	ldr	r3, [pc, #424]	; (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 030f 	and.w	r3, r3, #15
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d910      	bls.n	8006afc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ada:	4b67      	ldr	r3, [pc, #412]	; (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f023 020f 	bic.w	r2, r3, #15
 8006ae2:	4965      	ldr	r1, [pc, #404]	; (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aea:	4b63      	ldr	r3, [pc, #396]	; (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d001      	beq.n	8006afc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e0b8      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d020      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d005      	beq.n	8006b20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b14:	4b59      	ldr	r3, [pc, #356]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	4a58      	ldr	r2, [pc, #352]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d005      	beq.n	8006b38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b2c:	4b53      	ldr	r3, [pc, #332]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	4a52      	ldr	r2, [pc, #328]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b38:	4b50      	ldr	r3, [pc, #320]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	494d      	ldr	r1, [pc, #308]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d040      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d107      	bne.n	8006b6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b5e:	4b47      	ldr	r3, [pc, #284]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d115      	bne.n	8006b96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e07f      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d107      	bne.n	8006b86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b76:	4b41      	ldr	r3, [pc, #260]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d109      	bne.n	8006b96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e073      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b86:	4b3d      	ldr	r3, [pc, #244]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e06b      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b96:	4b39      	ldr	r3, [pc, #228]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f023 0203 	bic.w	r2, r3, #3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	4936      	ldr	r1, [pc, #216]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba8:	f7fc fc48 	bl	800343c <HAL_GetTick>
 8006bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bae:	e00a      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bb0:	f7fc fc44 	bl	800343c <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e053      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bc6:	4b2d      	ldr	r3, [pc, #180]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 020c 	and.w	r2, r3, #12
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d1eb      	bne.n	8006bb0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bd8:	4b27      	ldr	r3, [pc, #156]	; (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 030f 	and.w	r3, r3, #15
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d210      	bcs.n	8006c08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006be6:	4b24      	ldr	r3, [pc, #144]	; (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f023 020f 	bic.w	r2, r3, #15
 8006bee:	4922      	ldr	r1, [pc, #136]	; (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bf6:	4b20      	ldr	r3, [pc, #128]	; (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 030f 	and.w	r3, r3, #15
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d001      	beq.n	8006c08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e032      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d008      	beq.n	8006c26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c14:	4b19      	ldr	r3, [pc, #100]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	4916      	ldr	r1, [pc, #88]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d009      	beq.n	8006c46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c32:	4b12      	ldr	r3, [pc, #72]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	490e      	ldr	r1, [pc, #56]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c46:	f000 f821 	bl	8006c8c <HAL_RCC_GetSysClockFreq>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	4b0b      	ldr	r3, [pc, #44]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	091b      	lsrs	r3, r3, #4
 8006c52:	f003 030f 	and.w	r3, r3, #15
 8006c56:	490a      	ldr	r1, [pc, #40]	; (8006c80 <HAL_RCC_ClockConfig+0x1cc>)
 8006c58:	5ccb      	ldrb	r3, [r1, r3]
 8006c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5e:	4a09      	ldr	r2, [pc, #36]	; (8006c84 <HAL_RCC_ClockConfig+0x1d0>)
 8006c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c62:	4b09      	ldr	r3, [pc, #36]	; (8006c88 <HAL_RCC_ClockConfig+0x1d4>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fc fba4 	bl	80033b4 <HAL_InitTick>

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	40023c00 	.word	0x40023c00
 8006c7c:	40023800 	.word	0x40023800
 8006c80:	08057fc0 	.word	0x08057fc0
 8006c84:	20000000 	.word	0x20000000
 8006c88:	20000038 	.word	0x20000038

08006c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c8c:	b5b0      	push	{r4, r5, r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006c92:	2100      	movs	r1, #0
 8006c94:	6079      	str	r1, [r7, #4]
 8006c96:	2100      	movs	r1, #0
 8006c98:	60f9      	str	r1, [r7, #12]
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ca2:	4952      	ldr	r1, [pc, #328]	; (8006dec <HAL_RCC_GetSysClockFreq+0x160>)
 8006ca4:	6889      	ldr	r1, [r1, #8]
 8006ca6:	f001 010c 	and.w	r1, r1, #12
 8006caa:	2908      	cmp	r1, #8
 8006cac:	d00d      	beq.n	8006cca <HAL_RCC_GetSysClockFreq+0x3e>
 8006cae:	2908      	cmp	r1, #8
 8006cb0:	f200 8094 	bhi.w	8006ddc <HAL_RCC_GetSysClockFreq+0x150>
 8006cb4:	2900      	cmp	r1, #0
 8006cb6:	d002      	beq.n	8006cbe <HAL_RCC_GetSysClockFreq+0x32>
 8006cb8:	2904      	cmp	r1, #4
 8006cba:	d003      	beq.n	8006cc4 <HAL_RCC_GetSysClockFreq+0x38>
 8006cbc:	e08e      	b.n	8006ddc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cbe:	4b4c      	ldr	r3, [pc, #304]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x164>)
 8006cc0:	60bb      	str	r3, [r7, #8]
      break;
 8006cc2:	e08e      	b.n	8006de2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cc4:	4b4b      	ldr	r3, [pc, #300]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x168>)
 8006cc6:	60bb      	str	r3, [r7, #8]
      break;
 8006cc8:	e08b      	b.n	8006de2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cca:	4948      	ldr	r1, [pc, #288]	; (8006dec <HAL_RCC_GetSysClockFreq+0x160>)
 8006ccc:	6849      	ldr	r1, [r1, #4]
 8006cce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006cd2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006cd4:	4945      	ldr	r1, [pc, #276]	; (8006dec <HAL_RCC_GetSysClockFreq+0x160>)
 8006cd6:	6849      	ldr	r1, [r1, #4]
 8006cd8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006cdc:	2900      	cmp	r1, #0
 8006cde:	d024      	beq.n	8006d2a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ce0:	4942      	ldr	r1, [pc, #264]	; (8006dec <HAL_RCC_GetSysClockFreq+0x160>)
 8006ce2:	6849      	ldr	r1, [r1, #4]
 8006ce4:	0989      	lsrs	r1, r1, #6
 8006ce6:	4608      	mov	r0, r1
 8006ce8:	f04f 0100 	mov.w	r1, #0
 8006cec:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006cf0:	f04f 0500 	mov.w	r5, #0
 8006cf4:	ea00 0204 	and.w	r2, r0, r4
 8006cf8:	ea01 0305 	and.w	r3, r1, r5
 8006cfc:	493d      	ldr	r1, [pc, #244]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x168>)
 8006cfe:	fb01 f003 	mul.w	r0, r1, r3
 8006d02:	2100      	movs	r1, #0
 8006d04:	fb01 f102 	mul.w	r1, r1, r2
 8006d08:	1844      	adds	r4, r0, r1
 8006d0a:	493a      	ldr	r1, [pc, #232]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x168>)
 8006d0c:	fba2 0101 	umull	r0, r1, r2, r1
 8006d10:	1863      	adds	r3, r4, r1
 8006d12:	4619      	mov	r1, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	461a      	mov	r2, r3
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	f7f9 fad0 	bl	80002c0 <__aeabi_uldivmod>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	4613      	mov	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	e04a      	b.n	8006dc0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d2a:	4b30      	ldr	r3, [pc, #192]	; (8006dec <HAL_RCC_GetSysClockFreq+0x160>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	099b      	lsrs	r3, r3, #6
 8006d30:	461a      	mov	r2, r3
 8006d32:	f04f 0300 	mov.w	r3, #0
 8006d36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006d3a:	f04f 0100 	mov.w	r1, #0
 8006d3e:	ea02 0400 	and.w	r4, r2, r0
 8006d42:	ea03 0501 	and.w	r5, r3, r1
 8006d46:	4620      	mov	r0, r4
 8006d48:	4629      	mov	r1, r5
 8006d4a:	f04f 0200 	mov.w	r2, #0
 8006d4e:	f04f 0300 	mov.w	r3, #0
 8006d52:	014b      	lsls	r3, r1, #5
 8006d54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006d58:	0142      	lsls	r2, r0, #5
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	1b00      	subs	r0, r0, r4
 8006d60:	eb61 0105 	sbc.w	r1, r1, r5
 8006d64:	f04f 0200 	mov.w	r2, #0
 8006d68:	f04f 0300 	mov.w	r3, #0
 8006d6c:	018b      	lsls	r3, r1, #6
 8006d6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006d72:	0182      	lsls	r2, r0, #6
 8006d74:	1a12      	subs	r2, r2, r0
 8006d76:	eb63 0301 	sbc.w	r3, r3, r1
 8006d7a:	f04f 0000 	mov.w	r0, #0
 8006d7e:	f04f 0100 	mov.w	r1, #0
 8006d82:	00d9      	lsls	r1, r3, #3
 8006d84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d88:	00d0      	lsls	r0, r2, #3
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	1912      	adds	r2, r2, r4
 8006d90:	eb45 0303 	adc.w	r3, r5, r3
 8006d94:	f04f 0000 	mov.w	r0, #0
 8006d98:	f04f 0100 	mov.w	r1, #0
 8006d9c:	0299      	lsls	r1, r3, #10
 8006d9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006da2:	0290      	lsls	r0, r2, #10
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4610      	mov	r0, r2
 8006daa:	4619      	mov	r1, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	461a      	mov	r2, r3
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	f7f9 fa84 	bl	80002c0 <__aeabi_uldivmod>
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <HAL_RCC_GetSysClockFreq+0x160>)
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	0c1b      	lsrs	r3, r3, #16
 8006dc6:	f003 0303 	and.w	r3, r3, #3
 8006dca:	3301      	adds	r3, #1
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd8:	60bb      	str	r3, [r7, #8]
      break;
 8006dda:	e002      	b.n	8006de2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ddc:	4b04      	ldr	r3, [pc, #16]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x164>)
 8006dde:	60bb      	str	r3, [r7, #8]
      break;
 8006de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006de2:	68bb      	ldr	r3, [r7, #8]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bdb0      	pop	{r4, r5, r7, pc}
 8006dec:	40023800 	.word	0x40023800
 8006df0:	00f42400 	.word	0x00f42400
 8006df4:	017d7840 	.word	0x017d7840

08006df8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dfc:	4b03      	ldr	r3, [pc, #12]	; (8006e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	20000000 	.word	0x20000000

08006e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e14:	f7ff fff0 	bl	8006df8 <HAL_RCC_GetHCLKFreq>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	0a9b      	lsrs	r3, r3, #10
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	4903      	ldr	r1, [pc, #12]	; (8006e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e26:	5ccb      	ldrb	r3, [r1, r3]
 8006e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	40023800 	.word	0x40023800
 8006e34:	08057fd0 	.word	0x08057fd0

08006e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e3c:	f7ff ffdc 	bl	8006df8 <HAL_RCC_GetHCLKFreq>
 8006e40:	4602      	mov	r2, r0
 8006e42:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	0b5b      	lsrs	r3, r3, #13
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	4903      	ldr	r1, [pc, #12]	; (8006e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e4e:	5ccb      	ldrb	r3, [r1, r3]
 8006e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	40023800 	.word	0x40023800
 8006e5c:	08057fd0 	.word	0x08057fd0

08006e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b088      	sub	sp, #32
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d012      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006e88:	4b69      	ldr	r3, [pc, #420]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	4a68      	ldr	r2, [pc, #416]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006e92:	6093      	str	r3, [r2, #8]
 8006e94:	4b66      	ldr	r3, [pc, #408]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9c:	4964      	ldr	r1, [pc, #400]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d017      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006eba:	4b5d      	ldr	r3, [pc, #372]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ec0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec8:	4959      	ldr	r1, [pc, #356]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ed8:	d101      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006eda:	2301      	movs	r3, #1
 8006edc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d017      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006ef6:	4b4e      	ldr	r3, [pc, #312]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006efc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	494a      	ldr	r1, [pc, #296]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f14:	d101      	bne.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006f16:	2301      	movs	r3, #1
 8006f18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006f22:	2301      	movs	r3, #1
 8006f24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006f32:	2301      	movs	r3, #1
 8006f34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0320 	and.w	r3, r3, #32
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 808b 	beq.w	800705a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f44:	4b3a      	ldr	r3, [pc, #232]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f48:	4a39      	ldr	r2, [pc, #228]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8006f50:	4b37      	ldr	r3, [pc, #220]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f58:	60bb      	str	r3, [r7, #8]
 8006f5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f5c:	4b35      	ldr	r3, [pc, #212]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a34      	ldr	r2, [pc, #208]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f68:	f7fc fa68 	bl	800343c <HAL_GetTick>
 8006f6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f6e:	e008      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f70:	f7fc fa64 	bl	800343c <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b64      	cmp	r3, #100	; 0x64
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e357      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f82:	4b2c      	ldr	r3, [pc, #176]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0f0      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f8e:	4b28      	ldr	r3, [pc, #160]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d035      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d02e      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fac:	4b20      	ldr	r3, [pc, #128]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fb4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006fb6:	4b1e      	ldr	r3, [pc, #120]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fba:	4a1d      	ldr	r2, [pc, #116]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006fc2:	4b1b      	ldr	r3, [pc, #108]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc6:	4a1a      	ldr	r2, [pc, #104]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006fce:	4a18      	ldr	r2, [pc, #96]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006fd4:	4b16      	ldr	r3, [pc, #88]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d114      	bne.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe0:	f7fc fa2c 	bl	800343c <HAL_GetTick>
 8006fe4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fe6:	e00a      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fe8:	f7fc fa28 	bl	800343c <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e319      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ffe:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0ee      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007016:	d111      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007018:	4b05      	ldr	r3, [pc, #20]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007024:	4b04      	ldr	r3, [pc, #16]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007026:	400b      	ands	r3, r1
 8007028:	4901      	ldr	r1, [pc, #4]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800702a:	4313      	orrs	r3, r2
 800702c:	608b      	str	r3, [r1, #8]
 800702e:	e00b      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007030:	40023800 	.word	0x40023800
 8007034:	40007000 	.word	0x40007000
 8007038:	0ffffcff 	.word	0x0ffffcff
 800703c:	4bb1      	ldr	r3, [pc, #708]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	4ab0      	ldr	r2, [pc, #704]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007042:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007046:	6093      	str	r3, [r2, #8]
 8007048:	4bae      	ldr	r3, [pc, #696]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800704a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007054:	49ab      	ldr	r1, [pc, #684]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007056:	4313      	orrs	r3, r2
 8007058:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0310 	and.w	r3, r3, #16
 8007062:	2b00      	cmp	r3, #0
 8007064:	d010      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007066:	4ba7      	ldr	r3, [pc, #668]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800706c:	4aa5      	ldr	r2, [pc, #660]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800706e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007072:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007076:	4ba3      	ldr	r3, [pc, #652]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007078:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007080:	49a0      	ldr	r1, [pc, #640]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007082:	4313      	orrs	r3, r2
 8007084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00a      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007094:	4b9b      	ldr	r3, [pc, #620]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800709a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070a2:	4998      	ldr	r1, [pc, #608]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00a      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070b6:	4b93      	ldr	r3, [pc, #588]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070c4:	498f      	ldr	r1, [pc, #572]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00a      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070d8:	4b8a      	ldr	r3, [pc, #552]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e6:	4987      	ldr	r1, [pc, #540]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00a      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070fa:	4b82      	ldr	r3, [pc, #520]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007100:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007108:	497e      	ldr	r1, [pc, #504]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800710a:	4313      	orrs	r3, r2
 800710c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00a      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800711c:	4b79      	ldr	r3, [pc, #484]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800711e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007122:	f023 0203 	bic.w	r2, r3, #3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712a:	4976      	ldr	r1, [pc, #472]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800712c:	4313      	orrs	r3, r2
 800712e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00a      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800713e:	4b71      	ldr	r3, [pc, #452]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007144:	f023 020c 	bic.w	r2, r3, #12
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800714c:	496d      	ldr	r1, [pc, #436]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800714e:	4313      	orrs	r3, r2
 8007150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00a      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007160:	4b68      	ldr	r3, [pc, #416]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007166:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800716e:	4965      	ldr	r1, [pc, #404]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007170:	4313      	orrs	r3, r2
 8007172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007182:	4b60      	ldr	r3, [pc, #384]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007188:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007190:	495c      	ldr	r1, [pc, #368]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007192:	4313      	orrs	r3, r2
 8007194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00a      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80071a4:	4b57      	ldr	r3, [pc, #348]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b2:	4954      	ldr	r1, [pc, #336]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00a      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80071c6:	4b4f      	ldr	r3, [pc, #316]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d4:	494b      	ldr	r1, [pc, #300]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00a      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80071e8:	4b46      	ldr	r3, [pc, #280]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f6:	4943      	ldr	r1, [pc, #268]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800720a:	4b3e      	ldr	r3, [pc, #248]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800720c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007210:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007218:	493a      	ldr	r1, [pc, #232]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800721a:	4313      	orrs	r3, r2
 800721c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800722c:	4b35      	ldr	r3, [pc, #212]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800722e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007232:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800723a:	4932      	ldr	r1, [pc, #200]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800723c:	4313      	orrs	r3, r2
 800723e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d011      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800724e:	4b2d      	ldr	r3, [pc, #180]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007254:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800725c:	4929      	ldr	r1, [pc, #164]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800725e:	4313      	orrs	r3, r2
 8007260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800726c:	d101      	bne.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800726e:	2301      	movs	r3, #1
 8007270:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0308 	and.w	r3, r3, #8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800727e:	2301      	movs	r3, #1
 8007280:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800728e:	4b1d      	ldr	r3, [pc, #116]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007294:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800729c:	4919      	ldr	r1, [pc, #100]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00b      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80072b0:	4b14      	ldr	r3, [pc, #80]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072c0:	4910      	ldr	r1, [pc, #64]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d006      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 80d9 	beq.w	800748e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80072dc:	4b09      	ldr	r3, [pc, #36]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a08      	ldr	r2, [pc, #32]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072e8:	f7fc f8a8 	bl	800343c <HAL_GetTick>
 80072ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072ee:	e00b      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80072f0:	f7fc f8a4 	bl	800343c <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	2b64      	cmp	r3, #100	; 0x64
 80072fc:	d904      	bls.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e197      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007302:	bf00      	nop
 8007304:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007308:	4b6c      	ldr	r3, [pc, #432]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1ed      	bne.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	2b00      	cmp	r3, #0
 800731e:	d021      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007324:	2b00      	cmp	r3, #0
 8007326:	d11d      	bne.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007328:	4b64      	ldr	r3, [pc, #400]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800732a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800732e:	0c1b      	lsrs	r3, r3, #16
 8007330:	f003 0303 	and.w	r3, r3, #3
 8007334:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007336:	4b61      	ldr	r3, [pc, #388]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800733c:	0e1b      	lsrs	r3, r3, #24
 800733e:	f003 030f 	and.w	r3, r3, #15
 8007342:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	019a      	lsls	r2, r3, #6
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	041b      	lsls	r3, r3, #16
 800734e:	431a      	orrs	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	061b      	lsls	r3, r3, #24
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	071b      	lsls	r3, r3, #28
 800735c:	4957      	ldr	r1, [pc, #348]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800735e:	4313      	orrs	r3, r2
 8007360:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d004      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007378:	d00a      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007382:	2b00      	cmp	r3, #0
 8007384:	d02e      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800738e:	d129      	bne.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007390:	4b4a      	ldr	r3, [pc, #296]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007396:	0c1b      	lsrs	r3, r3, #16
 8007398:	f003 0303 	and.w	r3, r3, #3
 800739c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800739e:	4b47      	ldr	r3, [pc, #284]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073a4:	0f1b      	lsrs	r3, r3, #28
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	019a      	lsls	r2, r3, #6
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	041b      	lsls	r3, r3, #16
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	061b      	lsls	r3, r3, #24
 80073be:	431a      	orrs	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	071b      	lsls	r3, r3, #28
 80073c4:	493d      	ldr	r1, [pc, #244]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80073cc:	4b3b      	ldr	r3, [pc, #236]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073d2:	f023 021f 	bic.w	r2, r3, #31
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	3b01      	subs	r3, #1
 80073dc:	4937      	ldr	r1, [pc, #220]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d01d      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073f0:	4b32      	ldr	r3, [pc, #200]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f6:	0e1b      	lsrs	r3, r3, #24
 80073f8:	f003 030f 	and.w	r3, r3, #15
 80073fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073fe:	4b2f      	ldr	r3, [pc, #188]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007404:	0f1b      	lsrs	r3, r3, #28
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	019a      	lsls	r2, r3, #6
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	041b      	lsls	r3, r3, #16
 8007418:	431a      	orrs	r2, r3
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	061b      	lsls	r3, r3, #24
 800741e:	431a      	orrs	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	071b      	lsls	r3, r3, #28
 8007424:	4925      	ldr	r1, [pc, #148]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007426:	4313      	orrs	r3, r2
 8007428:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d011      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	019a      	lsls	r2, r3, #6
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	041b      	lsls	r3, r3, #16
 8007444:	431a      	orrs	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	061b      	lsls	r3, r3, #24
 800744c:	431a      	orrs	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	071b      	lsls	r3, r3, #28
 8007454:	4919      	ldr	r1, [pc, #100]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007456:	4313      	orrs	r3, r2
 8007458:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800745c:	4b17      	ldr	r3, [pc, #92]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a16      	ldr	r2, [pc, #88]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007462:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007468:	f7fb ffe8 	bl	800343c <HAL_GetTick>
 800746c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800746e:	e008      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007470:	f7fb ffe4 	bl	800343c <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	2b64      	cmp	r3, #100	; 0x64
 800747c:	d901      	bls.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e0d7      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007482:	4b0e      	ldr	r3, [pc, #56]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0f0      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b01      	cmp	r3, #1
 8007492:	f040 80cd 	bne.w	8007630 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007496:	4b09      	ldr	r3, [pc, #36]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a08      	ldr	r2, [pc, #32]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800749c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074a2:	f7fb ffcb 	bl	800343c <HAL_GetTick>
 80074a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074a8:	e00a      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074aa:	f7fb ffc7 	bl	800343c <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	2b64      	cmp	r3, #100	; 0x64
 80074b6:	d903      	bls.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e0ba      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80074bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074c0:	4b5e      	ldr	r3, [pc, #376]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074cc:	d0ed      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d009      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d02e      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d12a      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80074f6:	4b51      	ldr	r3, [pc, #324]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074fc:	0c1b      	lsrs	r3, r3, #16
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007504:	4b4d      	ldr	r3, [pc, #308]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800750a:	0f1b      	lsrs	r3, r3, #28
 800750c:	f003 0307 	and.w	r3, r3, #7
 8007510:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	019a      	lsls	r2, r3, #6
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	041b      	lsls	r3, r3, #16
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	061b      	lsls	r3, r3, #24
 8007524:	431a      	orrs	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	071b      	lsls	r3, r3, #28
 800752a:	4944      	ldr	r1, [pc, #272]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800752c:	4313      	orrs	r3, r2
 800752e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007532:	4b42      	ldr	r3, [pc, #264]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007538:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007540:	3b01      	subs	r3, #1
 8007542:	021b      	lsls	r3, r3, #8
 8007544:	493d      	ldr	r1, [pc, #244]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d022      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800755c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007560:	d11d      	bne.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007562:	4b36      	ldr	r3, [pc, #216]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007568:	0e1b      	lsrs	r3, r3, #24
 800756a:	f003 030f 	and.w	r3, r3, #15
 800756e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007570:	4b32      	ldr	r3, [pc, #200]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007576:	0f1b      	lsrs	r3, r3, #28
 8007578:	f003 0307 	and.w	r3, r3, #7
 800757c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	019a      	lsls	r2, r3, #6
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a1b      	ldr	r3, [r3, #32]
 8007588:	041b      	lsls	r3, r3, #16
 800758a:	431a      	orrs	r2, r3
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	061b      	lsls	r3, r3, #24
 8007590:	431a      	orrs	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	071b      	lsls	r3, r3, #28
 8007596:	4929      	ldr	r1, [pc, #164]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007598:	4313      	orrs	r3, r2
 800759a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d028      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075aa:	4b24      	ldr	r3, [pc, #144]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b0:	0e1b      	lsrs	r3, r3, #24
 80075b2:	f003 030f 	and.w	r3, r3, #15
 80075b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075b8:	4b20      	ldr	r3, [pc, #128]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075be:	0c1b      	lsrs	r3, r3, #16
 80075c0:	f003 0303 	and.w	r3, r3, #3
 80075c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	019a      	lsls	r2, r3, #6
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	041b      	lsls	r3, r3, #16
 80075d0:	431a      	orrs	r2, r3
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	061b      	lsls	r3, r3, #24
 80075d6:	431a      	orrs	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	071b      	lsls	r3, r3, #28
 80075de:	4917      	ldr	r1, [pc, #92]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80075e6:	4b15      	ldr	r3, [pc, #84]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	4911      	ldr	r1, [pc, #68]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80075fc:	4b0f      	ldr	r3, [pc, #60]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a0e      	ldr	r2, [pc, #56]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007608:	f7fb ff18 	bl	800343c <HAL_GetTick>
 800760c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800760e:	e008      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007610:	f7fb ff14 	bl	800343c <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b64      	cmp	r3, #100	; 0x64
 800761c:	d901      	bls.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e007      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007622:	4b06      	ldr	r3, [pc, #24]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800762a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800762e:	d1ef      	bne.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3720      	adds	r7, #32
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	40023800 	.word	0x40023800

08007640 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e025      	b.n	80076a0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	d106      	bne.n	800766e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7fa fa39 	bl	8001ae0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2202      	movs	r2, #2
 8007672:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	3304      	adds	r3, #4
 800767e:	4619      	mov	r1, r3
 8007680:	4610      	mov	r0, r2
 8007682:	f000 fcf1 	bl	8008068 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6818      	ldr	r0, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	461a      	mov	r2, r3
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	f000 fd5b 	bl	800814c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d101      	bne.n	80076c4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80076c0:	2302      	movs	r3, #2
 80076c2:	e018      	b.n	80076f6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	68b9      	ldr	r1, [r7, #8]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fdb9 	bl	800824c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d104      	bne.n	80076ec <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2205      	movs	r2, #5
 80076e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80076ea:	e003      	b.n	80076f4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b02      	cmp	r3, #2
 8007712:	d101      	bne.n	8007718 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007714:	2302      	movs	r3, #2
 8007716:	e00e      	b.n	8007736 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	4618      	mov	r0, r3
 8007728:	f000 fdb4 	bl	8008294 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d101      	bne.n	8007750 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e040      	b.n	80077d2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007754:	2b00      	cmp	r3, #0
 8007756:	d106      	bne.n	8007766 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7fa f8cb 	bl	80018fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2224      	movs	r2, #36	; 0x24
 800776a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0201 	bic.w	r2, r2, #1
 800777a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f8bf 	bl	8007900 <UART_SetConfig>
 8007782:	4603      	mov	r3, r0
 8007784:	2b01      	cmp	r3, #1
 8007786:	d101      	bne.n	800778c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e022      	b.n	80077d2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fb15 	bl	8007dc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f042 0201 	orr.w	r2, r2, #1
 80077c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fb9c 	bl	8007f08 <UART_CheckIdleState>
 80077d0:	4603      	mov	r3, r0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b08a      	sub	sp, #40	; 0x28
 80077de:	af02      	add	r7, sp, #8
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	603b      	str	r3, [r7, #0]
 80077e6:	4613      	mov	r3, r2
 80077e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077ee:	2b20      	cmp	r3, #32
 80077f0:	f040 8081 	bne.w	80078f6 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <HAL_UART_Transmit+0x26>
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e079      	b.n	80078f8 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800780a:	2b01      	cmp	r3, #1
 800780c:	d101      	bne.n	8007812 <HAL_UART_Transmit+0x38>
 800780e:	2302      	movs	r3, #2
 8007810:	e072      	b.n	80078f8 <HAL_UART_Transmit+0x11e>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2221      	movs	r2, #33	; 0x21
 8007826:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007828:	f7fb fe08 	bl	800343c <HAL_GetTick>
 800782c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	88fa      	ldrh	r2, [r7, #6]
 8007832:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	88fa      	ldrh	r2, [r7, #6]
 800783a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007846:	d108      	bne.n	800785a <HAL_UART_Transmit+0x80>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d104      	bne.n	800785a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007850:	2300      	movs	r3, #0
 8007852:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	61bb      	str	r3, [r7, #24]
 8007858:	e003      	b.n	8007862 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800785e:	2300      	movs	r3, #0
 8007860:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800786a:	e02c      	b.n	80078c6 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	2200      	movs	r2, #0
 8007874:	2180      	movs	r1, #128	; 0x80
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 fb79 	bl	8007f6e <UART_WaitOnFlagUntilTimeout>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e038      	b.n	80078f8 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10b      	bne.n	80078a4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800789a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	3302      	adds	r3, #2
 80078a0:	61bb      	str	r3, [r7, #24]
 80078a2:	e007      	b.n	80078b4 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	781a      	ldrb	r2, [r3, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	3301      	adds	r3, #1
 80078b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	3b01      	subs	r3, #1
 80078be:	b29a      	uxth	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1cc      	bne.n	800786c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2200      	movs	r2, #0
 80078da:	2140      	movs	r1, #64	; 0x40
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 fb46 	bl	8007f6e <UART_WaitOnFlagUntilTimeout>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e005      	b.n	80078f8 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2220      	movs	r2, #32
 80078f0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	e000      	b.n	80078f8 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80078f6:	2302      	movs	r3, #2
  }
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3720      	adds	r7, #32
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	431a      	orrs	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	431a      	orrs	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	4313      	orrs	r3, r2
 8007922:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	4ba7      	ldr	r3, [pc, #668]	; (8007bc8 <UART_SetConfig+0x2c8>)
 800792c:	4013      	ands	r3, r2
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	6812      	ldr	r2, [r2, #0]
 8007932:	6979      	ldr	r1, [r7, #20]
 8007934:	430b      	orrs	r3, r1
 8007936:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	4313      	orrs	r3, r2
 800795c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	430a      	orrs	r2, r1
 8007970:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a95      	ldr	r2, [pc, #596]	; (8007bcc <UART_SetConfig+0x2cc>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d120      	bne.n	80079be <UART_SetConfig+0xbe>
 800797c:	4b94      	ldr	r3, [pc, #592]	; (8007bd0 <UART_SetConfig+0x2d0>)
 800797e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007982:	f003 0303 	and.w	r3, r3, #3
 8007986:	2b03      	cmp	r3, #3
 8007988:	d816      	bhi.n	80079b8 <UART_SetConfig+0xb8>
 800798a:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <UART_SetConfig+0x90>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	080079a1 	.word	0x080079a1
 8007994:	080079ad 	.word	0x080079ad
 8007998:	080079a7 	.word	0x080079a7
 800799c:	080079b3 	.word	0x080079b3
 80079a0:	2301      	movs	r3, #1
 80079a2:	77fb      	strb	r3, [r7, #31]
 80079a4:	e14f      	b.n	8007c46 <UART_SetConfig+0x346>
 80079a6:	2302      	movs	r3, #2
 80079a8:	77fb      	strb	r3, [r7, #31]
 80079aa:	e14c      	b.n	8007c46 <UART_SetConfig+0x346>
 80079ac:	2304      	movs	r3, #4
 80079ae:	77fb      	strb	r3, [r7, #31]
 80079b0:	e149      	b.n	8007c46 <UART_SetConfig+0x346>
 80079b2:	2308      	movs	r3, #8
 80079b4:	77fb      	strb	r3, [r7, #31]
 80079b6:	e146      	b.n	8007c46 <UART_SetConfig+0x346>
 80079b8:	2310      	movs	r3, #16
 80079ba:	77fb      	strb	r3, [r7, #31]
 80079bc:	e143      	b.n	8007c46 <UART_SetConfig+0x346>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a84      	ldr	r2, [pc, #528]	; (8007bd4 <UART_SetConfig+0x2d4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d132      	bne.n	8007a2e <UART_SetConfig+0x12e>
 80079c8:	4b81      	ldr	r3, [pc, #516]	; (8007bd0 <UART_SetConfig+0x2d0>)
 80079ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ce:	f003 030c 	and.w	r3, r3, #12
 80079d2:	2b0c      	cmp	r3, #12
 80079d4:	d828      	bhi.n	8007a28 <UART_SetConfig+0x128>
 80079d6:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <UART_SetConfig+0xdc>)
 80079d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079dc:	08007a11 	.word	0x08007a11
 80079e0:	08007a29 	.word	0x08007a29
 80079e4:	08007a29 	.word	0x08007a29
 80079e8:	08007a29 	.word	0x08007a29
 80079ec:	08007a1d 	.word	0x08007a1d
 80079f0:	08007a29 	.word	0x08007a29
 80079f4:	08007a29 	.word	0x08007a29
 80079f8:	08007a29 	.word	0x08007a29
 80079fc:	08007a17 	.word	0x08007a17
 8007a00:	08007a29 	.word	0x08007a29
 8007a04:	08007a29 	.word	0x08007a29
 8007a08:	08007a29 	.word	0x08007a29
 8007a0c:	08007a23 	.word	0x08007a23
 8007a10:	2300      	movs	r3, #0
 8007a12:	77fb      	strb	r3, [r7, #31]
 8007a14:	e117      	b.n	8007c46 <UART_SetConfig+0x346>
 8007a16:	2302      	movs	r3, #2
 8007a18:	77fb      	strb	r3, [r7, #31]
 8007a1a:	e114      	b.n	8007c46 <UART_SetConfig+0x346>
 8007a1c:	2304      	movs	r3, #4
 8007a1e:	77fb      	strb	r3, [r7, #31]
 8007a20:	e111      	b.n	8007c46 <UART_SetConfig+0x346>
 8007a22:	2308      	movs	r3, #8
 8007a24:	77fb      	strb	r3, [r7, #31]
 8007a26:	e10e      	b.n	8007c46 <UART_SetConfig+0x346>
 8007a28:	2310      	movs	r3, #16
 8007a2a:	77fb      	strb	r3, [r7, #31]
 8007a2c:	e10b      	b.n	8007c46 <UART_SetConfig+0x346>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a69      	ldr	r2, [pc, #420]	; (8007bd8 <UART_SetConfig+0x2d8>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d120      	bne.n	8007a7a <UART_SetConfig+0x17a>
 8007a38:	4b65      	ldr	r3, [pc, #404]	; (8007bd0 <UART_SetConfig+0x2d0>)
 8007a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a42:	2b30      	cmp	r3, #48	; 0x30
 8007a44:	d013      	beq.n	8007a6e <UART_SetConfig+0x16e>
 8007a46:	2b30      	cmp	r3, #48	; 0x30
 8007a48:	d814      	bhi.n	8007a74 <UART_SetConfig+0x174>
 8007a4a:	2b20      	cmp	r3, #32
 8007a4c:	d009      	beq.n	8007a62 <UART_SetConfig+0x162>
 8007a4e:	2b20      	cmp	r3, #32
 8007a50:	d810      	bhi.n	8007a74 <UART_SetConfig+0x174>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <UART_SetConfig+0x15c>
 8007a56:	2b10      	cmp	r3, #16
 8007a58:	d006      	beq.n	8007a68 <UART_SetConfig+0x168>
 8007a5a:	e00b      	b.n	8007a74 <UART_SetConfig+0x174>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	77fb      	strb	r3, [r7, #31]
 8007a60:	e0f1      	b.n	8007c46 <UART_SetConfig+0x346>
 8007a62:	2302      	movs	r3, #2
 8007a64:	77fb      	strb	r3, [r7, #31]
 8007a66:	e0ee      	b.n	8007c46 <UART_SetConfig+0x346>
 8007a68:	2304      	movs	r3, #4
 8007a6a:	77fb      	strb	r3, [r7, #31]
 8007a6c:	e0eb      	b.n	8007c46 <UART_SetConfig+0x346>
 8007a6e:	2308      	movs	r3, #8
 8007a70:	77fb      	strb	r3, [r7, #31]
 8007a72:	e0e8      	b.n	8007c46 <UART_SetConfig+0x346>
 8007a74:	2310      	movs	r3, #16
 8007a76:	77fb      	strb	r3, [r7, #31]
 8007a78:	e0e5      	b.n	8007c46 <UART_SetConfig+0x346>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a57      	ldr	r2, [pc, #348]	; (8007bdc <UART_SetConfig+0x2dc>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d120      	bne.n	8007ac6 <UART_SetConfig+0x1c6>
 8007a84:	4b52      	ldr	r3, [pc, #328]	; (8007bd0 <UART_SetConfig+0x2d0>)
 8007a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8007a90:	d013      	beq.n	8007aba <UART_SetConfig+0x1ba>
 8007a92:	2bc0      	cmp	r3, #192	; 0xc0
 8007a94:	d814      	bhi.n	8007ac0 <UART_SetConfig+0x1c0>
 8007a96:	2b80      	cmp	r3, #128	; 0x80
 8007a98:	d009      	beq.n	8007aae <UART_SetConfig+0x1ae>
 8007a9a:	2b80      	cmp	r3, #128	; 0x80
 8007a9c:	d810      	bhi.n	8007ac0 <UART_SetConfig+0x1c0>
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <UART_SetConfig+0x1a8>
 8007aa2:	2b40      	cmp	r3, #64	; 0x40
 8007aa4:	d006      	beq.n	8007ab4 <UART_SetConfig+0x1b4>
 8007aa6:	e00b      	b.n	8007ac0 <UART_SetConfig+0x1c0>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	77fb      	strb	r3, [r7, #31]
 8007aac:	e0cb      	b.n	8007c46 <UART_SetConfig+0x346>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	77fb      	strb	r3, [r7, #31]
 8007ab2:	e0c8      	b.n	8007c46 <UART_SetConfig+0x346>
 8007ab4:	2304      	movs	r3, #4
 8007ab6:	77fb      	strb	r3, [r7, #31]
 8007ab8:	e0c5      	b.n	8007c46 <UART_SetConfig+0x346>
 8007aba:	2308      	movs	r3, #8
 8007abc:	77fb      	strb	r3, [r7, #31]
 8007abe:	e0c2      	b.n	8007c46 <UART_SetConfig+0x346>
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	77fb      	strb	r3, [r7, #31]
 8007ac4:	e0bf      	b.n	8007c46 <UART_SetConfig+0x346>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a45      	ldr	r2, [pc, #276]	; (8007be0 <UART_SetConfig+0x2e0>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d125      	bne.n	8007b1c <UART_SetConfig+0x21c>
 8007ad0:	4b3f      	ldr	r3, [pc, #252]	; (8007bd0 <UART_SetConfig+0x2d0>)
 8007ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ada:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ade:	d017      	beq.n	8007b10 <UART_SetConfig+0x210>
 8007ae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ae4:	d817      	bhi.n	8007b16 <UART_SetConfig+0x216>
 8007ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aea:	d00b      	beq.n	8007b04 <UART_SetConfig+0x204>
 8007aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007af0:	d811      	bhi.n	8007b16 <UART_SetConfig+0x216>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <UART_SetConfig+0x1fe>
 8007af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007afa:	d006      	beq.n	8007b0a <UART_SetConfig+0x20a>
 8007afc:	e00b      	b.n	8007b16 <UART_SetConfig+0x216>
 8007afe:	2300      	movs	r3, #0
 8007b00:	77fb      	strb	r3, [r7, #31]
 8007b02:	e0a0      	b.n	8007c46 <UART_SetConfig+0x346>
 8007b04:	2302      	movs	r3, #2
 8007b06:	77fb      	strb	r3, [r7, #31]
 8007b08:	e09d      	b.n	8007c46 <UART_SetConfig+0x346>
 8007b0a:	2304      	movs	r3, #4
 8007b0c:	77fb      	strb	r3, [r7, #31]
 8007b0e:	e09a      	b.n	8007c46 <UART_SetConfig+0x346>
 8007b10:	2308      	movs	r3, #8
 8007b12:	77fb      	strb	r3, [r7, #31]
 8007b14:	e097      	b.n	8007c46 <UART_SetConfig+0x346>
 8007b16:	2310      	movs	r3, #16
 8007b18:	77fb      	strb	r3, [r7, #31]
 8007b1a:	e094      	b.n	8007c46 <UART_SetConfig+0x346>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a30      	ldr	r2, [pc, #192]	; (8007be4 <UART_SetConfig+0x2e4>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d125      	bne.n	8007b72 <UART_SetConfig+0x272>
 8007b26:	4b2a      	ldr	r3, [pc, #168]	; (8007bd0 <UART_SetConfig+0x2d0>)
 8007b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b34:	d017      	beq.n	8007b66 <UART_SetConfig+0x266>
 8007b36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b3a:	d817      	bhi.n	8007b6c <UART_SetConfig+0x26c>
 8007b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b40:	d00b      	beq.n	8007b5a <UART_SetConfig+0x25a>
 8007b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b46:	d811      	bhi.n	8007b6c <UART_SetConfig+0x26c>
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <UART_SetConfig+0x254>
 8007b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b50:	d006      	beq.n	8007b60 <UART_SetConfig+0x260>
 8007b52:	e00b      	b.n	8007b6c <UART_SetConfig+0x26c>
 8007b54:	2301      	movs	r3, #1
 8007b56:	77fb      	strb	r3, [r7, #31]
 8007b58:	e075      	b.n	8007c46 <UART_SetConfig+0x346>
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	77fb      	strb	r3, [r7, #31]
 8007b5e:	e072      	b.n	8007c46 <UART_SetConfig+0x346>
 8007b60:	2304      	movs	r3, #4
 8007b62:	77fb      	strb	r3, [r7, #31]
 8007b64:	e06f      	b.n	8007c46 <UART_SetConfig+0x346>
 8007b66:	2308      	movs	r3, #8
 8007b68:	77fb      	strb	r3, [r7, #31]
 8007b6a:	e06c      	b.n	8007c46 <UART_SetConfig+0x346>
 8007b6c:	2310      	movs	r3, #16
 8007b6e:	77fb      	strb	r3, [r7, #31]
 8007b70:	e069      	b.n	8007c46 <UART_SetConfig+0x346>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a1c      	ldr	r2, [pc, #112]	; (8007be8 <UART_SetConfig+0x2e8>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d137      	bne.n	8007bec <UART_SetConfig+0x2ec>
 8007b7c:	4b14      	ldr	r3, [pc, #80]	; (8007bd0 <UART_SetConfig+0x2d0>)
 8007b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007b86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b8a:	d017      	beq.n	8007bbc <UART_SetConfig+0x2bc>
 8007b8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b90:	d817      	bhi.n	8007bc2 <UART_SetConfig+0x2c2>
 8007b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b96:	d00b      	beq.n	8007bb0 <UART_SetConfig+0x2b0>
 8007b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b9c:	d811      	bhi.n	8007bc2 <UART_SetConfig+0x2c2>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <UART_SetConfig+0x2aa>
 8007ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba6:	d006      	beq.n	8007bb6 <UART_SetConfig+0x2b6>
 8007ba8:	e00b      	b.n	8007bc2 <UART_SetConfig+0x2c2>
 8007baa:	2300      	movs	r3, #0
 8007bac:	77fb      	strb	r3, [r7, #31]
 8007bae:	e04a      	b.n	8007c46 <UART_SetConfig+0x346>
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	77fb      	strb	r3, [r7, #31]
 8007bb4:	e047      	b.n	8007c46 <UART_SetConfig+0x346>
 8007bb6:	2304      	movs	r3, #4
 8007bb8:	77fb      	strb	r3, [r7, #31]
 8007bba:	e044      	b.n	8007c46 <UART_SetConfig+0x346>
 8007bbc:	2308      	movs	r3, #8
 8007bbe:	77fb      	strb	r3, [r7, #31]
 8007bc0:	e041      	b.n	8007c46 <UART_SetConfig+0x346>
 8007bc2:	2310      	movs	r3, #16
 8007bc4:	77fb      	strb	r3, [r7, #31]
 8007bc6:	e03e      	b.n	8007c46 <UART_SetConfig+0x346>
 8007bc8:	efff69f3 	.word	0xefff69f3
 8007bcc:	40011000 	.word	0x40011000
 8007bd0:	40023800 	.word	0x40023800
 8007bd4:	40004400 	.word	0x40004400
 8007bd8:	40004800 	.word	0x40004800
 8007bdc:	40004c00 	.word	0x40004c00
 8007be0:	40005000 	.word	0x40005000
 8007be4:	40011400 	.word	0x40011400
 8007be8:	40007800 	.word	0x40007800
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a71      	ldr	r2, [pc, #452]	; (8007db8 <UART_SetConfig+0x4b8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d125      	bne.n	8007c42 <UART_SetConfig+0x342>
 8007bf6:	4b71      	ldr	r3, [pc, #452]	; (8007dbc <UART_SetConfig+0x4bc>)
 8007bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007c00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007c04:	d017      	beq.n	8007c36 <UART_SetConfig+0x336>
 8007c06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007c0a:	d817      	bhi.n	8007c3c <UART_SetConfig+0x33c>
 8007c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c10:	d00b      	beq.n	8007c2a <UART_SetConfig+0x32a>
 8007c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c16:	d811      	bhi.n	8007c3c <UART_SetConfig+0x33c>
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d003      	beq.n	8007c24 <UART_SetConfig+0x324>
 8007c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c20:	d006      	beq.n	8007c30 <UART_SetConfig+0x330>
 8007c22:	e00b      	b.n	8007c3c <UART_SetConfig+0x33c>
 8007c24:	2300      	movs	r3, #0
 8007c26:	77fb      	strb	r3, [r7, #31]
 8007c28:	e00d      	b.n	8007c46 <UART_SetConfig+0x346>
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	77fb      	strb	r3, [r7, #31]
 8007c2e:	e00a      	b.n	8007c46 <UART_SetConfig+0x346>
 8007c30:	2304      	movs	r3, #4
 8007c32:	77fb      	strb	r3, [r7, #31]
 8007c34:	e007      	b.n	8007c46 <UART_SetConfig+0x346>
 8007c36:	2308      	movs	r3, #8
 8007c38:	77fb      	strb	r3, [r7, #31]
 8007c3a:	e004      	b.n	8007c46 <UART_SetConfig+0x346>
 8007c3c:	2310      	movs	r3, #16
 8007c3e:	77fb      	strb	r3, [r7, #31]
 8007c40:	e001      	b.n	8007c46 <UART_SetConfig+0x346>
 8007c42:	2310      	movs	r3, #16
 8007c44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c4e:	d15b      	bne.n	8007d08 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8007c50:	7ffb      	ldrb	r3, [r7, #31]
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d827      	bhi.n	8007ca6 <UART_SetConfig+0x3a6>
 8007c56:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <UART_SetConfig+0x35c>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007c81 	.word	0x08007c81
 8007c60:	08007c89 	.word	0x08007c89
 8007c64:	08007c91 	.word	0x08007c91
 8007c68:	08007ca7 	.word	0x08007ca7
 8007c6c:	08007c97 	.word	0x08007c97
 8007c70:	08007ca7 	.word	0x08007ca7
 8007c74:	08007ca7 	.word	0x08007ca7
 8007c78:	08007ca7 	.word	0x08007ca7
 8007c7c:	08007c9f 	.word	0x08007c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c80:	f7ff f8c6 	bl	8006e10 <HAL_RCC_GetPCLK1Freq>
 8007c84:	61b8      	str	r0, [r7, #24]
        break;
 8007c86:	e013      	b.n	8007cb0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c88:	f7ff f8d6 	bl	8006e38 <HAL_RCC_GetPCLK2Freq>
 8007c8c:	61b8      	str	r0, [r7, #24]
        break;
 8007c8e:	e00f      	b.n	8007cb0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c90:	4b4b      	ldr	r3, [pc, #300]	; (8007dc0 <UART_SetConfig+0x4c0>)
 8007c92:	61bb      	str	r3, [r7, #24]
        break;
 8007c94:	e00c      	b.n	8007cb0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c96:	f7fe fff9 	bl	8006c8c <HAL_RCC_GetSysClockFreq>
 8007c9a:	61b8      	str	r0, [r7, #24]
        break;
 8007c9c:	e008      	b.n	8007cb0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ca2:	61bb      	str	r3, [r7, #24]
        break;
 8007ca4:	e004      	b.n	8007cb0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	77bb      	strb	r3, [r7, #30]
        break;
 8007cae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d074      	beq.n	8007da0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	005a      	lsls	r2, r3, #1
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	085b      	lsrs	r3, r3, #1
 8007cc0:	441a      	add	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	2b0f      	cmp	r3, #15
 8007cd2:	d916      	bls.n	8007d02 <UART_SetConfig+0x402>
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cda:	d212      	bcs.n	8007d02 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	f023 030f 	bic.w	r3, r3, #15
 8007ce4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	085b      	lsrs	r3, r3, #1
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	f003 0307 	and.w	r3, r3, #7
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	89fb      	ldrh	r3, [r7, #14]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	89fa      	ldrh	r2, [r7, #14]
 8007cfe:	60da      	str	r2, [r3, #12]
 8007d00:	e04e      	b.n	8007da0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	77bb      	strb	r3, [r7, #30]
 8007d06:	e04b      	b.n	8007da0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d08:	7ffb      	ldrb	r3, [r7, #31]
 8007d0a:	2b08      	cmp	r3, #8
 8007d0c:	d827      	bhi.n	8007d5e <UART_SetConfig+0x45e>
 8007d0e:	a201      	add	r2, pc, #4	; (adr r2, 8007d14 <UART_SetConfig+0x414>)
 8007d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d14:	08007d39 	.word	0x08007d39
 8007d18:	08007d41 	.word	0x08007d41
 8007d1c:	08007d49 	.word	0x08007d49
 8007d20:	08007d5f 	.word	0x08007d5f
 8007d24:	08007d4f 	.word	0x08007d4f
 8007d28:	08007d5f 	.word	0x08007d5f
 8007d2c:	08007d5f 	.word	0x08007d5f
 8007d30:	08007d5f 	.word	0x08007d5f
 8007d34:	08007d57 	.word	0x08007d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d38:	f7ff f86a 	bl	8006e10 <HAL_RCC_GetPCLK1Freq>
 8007d3c:	61b8      	str	r0, [r7, #24]
        break;
 8007d3e:	e013      	b.n	8007d68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d40:	f7ff f87a 	bl	8006e38 <HAL_RCC_GetPCLK2Freq>
 8007d44:	61b8      	str	r0, [r7, #24]
        break;
 8007d46:	e00f      	b.n	8007d68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d48:	4b1d      	ldr	r3, [pc, #116]	; (8007dc0 <UART_SetConfig+0x4c0>)
 8007d4a:	61bb      	str	r3, [r7, #24]
        break;
 8007d4c:	e00c      	b.n	8007d68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d4e:	f7fe ff9d 	bl	8006c8c <HAL_RCC_GetSysClockFreq>
 8007d52:	61b8      	str	r0, [r7, #24]
        break;
 8007d54:	e008      	b.n	8007d68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d5a:	61bb      	str	r3, [r7, #24]
        break;
 8007d5c:	e004      	b.n	8007d68 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	77bb      	strb	r3, [r7, #30]
        break;
 8007d66:	bf00      	nop
    }

    if (pclk != 0U)
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d018      	beq.n	8007da0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	085a      	lsrs	r2, r3, #1
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	441a      	add	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	2b0f      	cmp	r3, #15
 8007d88:	d908      	bls.n	8007d9c <UART_SetConfig+0x49c>
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d90:	d204      	bcs.n	8007d9c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	60da      	str	r2, [r3, #12]
 8007d9a:	e001      	b.n	8007da0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007dac:	7fbb      	ldrb	r3, [r7, #30]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3720      	adds	r7, #32
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	40007c00 	.word	0x40007c00
 8007dbc:	40023800 	.word	0x40023800
 8007dc0:	00f42400 	.word	0x00f42400

08007dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00a      	beq.n	8007dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	f003 0304 	and.w	r3, r3, #4
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e36:	f003 0308 	and.w	r3, r3, #8
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	f003 0310 	and.w	r3, r3, #16
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00a      	beq.n	8007e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	f003 0320 	and.w	r3, r3, #32
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d01a      	beq.n	8007eda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ec2:	d10a      	bne.n	8007eda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	605a      	str	r2, [r3, #4]
  }
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af02      	add	r7, sp, #8
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f18:	f7fb fa90 	bl	800343c <HAL_GetTick>
 8007f1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	2b08      	cmp	r3, #8
 8007f2a:	d10e      	bne.n	8007f4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f817 	bl	8007f6e <UART_WaitOnFlagUntilTimeout>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e00d      	b.n	8007f66 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2220      	movs	r2, #32
 8007f54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	60f8      	str	r0, [r7, #12]
 8007f76:	60b9      	str	r1, [r7, #8]
 8007f78:	603b      	str	r3, [r7, #0]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f7e:	e05e      	b.n	800803e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f86:	d05a      	beq.n	800803e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f88:	f7fb fa58 	bl	800343c <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d302      	bcc.n	8007f9e <UART_WaitOnFlagUntilTimeout+0x30>
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d11b      	bne.n	8007fd6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007fac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0201 	bic.w	r2, r2, #1
 8007fbc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e043      	b.n	800805e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d02c      	beq.n	800803e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ff2:	d124      	bne.n	800803e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ffc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800800c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0201 	bic.w	r2, r2, #1
 800801c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2220      	movs	r2, #32
 8008022:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2220      	movs	r2, #32
 8008028:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2220      	movs	r2, #32
 800802e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e00f      	b.n	800805e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	69da      	ldr	r2, [r3, #28]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	4013      	ands	r3, r2
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	429a      	cmp	r2, r3
 800804c:	bf0c      	ite	eq
 800804e:	2301      	moveq	r3, #1
 8008050:	2300      	movne	r3, #0
 8008052:	b2db      	uxtb	r3, r3
 8008054:	461a      	mov	r2, r3
 8008056:	79fb      	ldrb	r3, [r7, #7]
 8008058:	429a      	cmp	r2, r3
 800805a:	d091      	beq.n	8007f80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
	...

08008068 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d027      	beq.n	80080d2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	4b2f      	ldr	r3, [pc, #188]	; (8008148 <FMC_SDRAM_Init+0xe0>)
 800808c:	4013      	ands	r3, r2
 800808e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008098:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800809e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80080a4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80080aa:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80080b0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80080b6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80080bc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80080c2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	e032      	b.n	8008138 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080de:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80080e8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80080ee:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	4b12      	ldr	r3, [pc, #72]	; (8008148 <FMC_SDRAM_Init+0xe0>)
 8008100:	4013      	ands	r3, r2
 8008102:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800810c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008112:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008118:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800811e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008124:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	4313      	orrs	r3, r2
 800812a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	ffff8000 	.word	0xffff8000

0800814c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800814c:	b480      	push	{r7}
 800814e:	b087      	sub	sp, #28
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800815c:	2300      	movs	r3, #0
 800815e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d02e      	beq.n	80081c4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008172:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	3b01      	subs	r3, #1
 8008180:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008182:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	3b01      	subs	r3, #1
 800818a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800818c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	3b01      	subs	r3, #1
 8008194:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008196:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	3b01      	subs	r3, #1
 800819e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80081a0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80081aa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	3b01      	subs	r3, #1
 80081b2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80081b4:	4313      	orrs	r3, r2
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	609a      	str	r2, [r3, #8]
 80081c2:	e039      	b.n	8008238 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	4b1e      	ldr	r3, [pc, #120]	; (8008248 <FMC_SDRAM_Timing_Init+0xfc>)
 80081ce:	4013      	ands	r3, r2
 80081d0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	3b01      	subs	r3, #1
 80081e0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80081e2:	4313      	orrs	r3, r2
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80081f6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	3b01      	subs	r3, #1
 8008204:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008206:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	3b01      	subs	r3, #1
 800820e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008210:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	3b01      	subs	r3, #1
 8008218:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800821a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	3b01      	subs	r3, #1
 8008222:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008224:	4313      	orrs	r3, r2
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	4313      	orrs	r3, r2
 800822a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	371c      	adds	r7, #28
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	ff0f0fff 	.word	0xff0f0fff

0800824c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	691a      	ldr	r2, [r3, #16]
 800825c:	4b0c      	ldr	r3, [pc, #48]	; (8008290 <FMC_SDRAM_SendCommand+0x44>)
 800825e:	4013      	ands	r3, r2
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	6811      	ldr	r1, [r2, #0]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	6852      	ldr	r2, [r2, #4]
 8008268:	4311      	orrs	r1, r2
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	6892      	ldr	r2, [r2, #8]
 800826e:	3a01      	subs	r2, #1
 8008270:	0152      	lsls	r2, r2, #5
 8008272:	4311      	orrs	r1, r2
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	68d2      	ldr	r2, [r2, #12]
 8008278:	0252      	lsls	r2, r2, #9
 800827a:	430a      	orrs	r2, r1
 800827c:	431a      	orrs	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	ffc00000 	.word	0xffc00000

08008294 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	695a      	ldr	r2, [r3, #20]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	431a      	orrs	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
	...

080082bc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80082c2:	4b8d      	ldr	r3, [pc, #564]	; (80084f8 <MX_LWIP_Init+0x23c>)
 80082c4:	22c0      	movs	r2, #192	; 0xc0
 80082c6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80082c8:	4b8b      	ldr	r3, [pc, #556]	; (80084f8 <MX_LWIP_Init+0x23c>)
 80082ca:	22a8      	movs	r2, #168	; 0xa8
 80082cc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 69;
 80082ce:	4b8a      	ldr	r3, [pc, #552]	; (80084f8 <MX_LWIP_Init+0x23c>)
 80082d0:	2245      	movs	r2, #69	; 0x45
 80082d2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80082d4:	4b88      	ldr	r3, [pc, #544]	; (80084f8 <MX_LWIP_Init+0x23c>)
 80082d6:	220a      	movs	r2, #10
 80082d8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80082da:	4b88      	ldr	r3, [pc, #544]	; (80084fc <MX_LWIP_Init+0x240>)
 80082dc:	22ff      	movs	r2, #255	; 0xff
 80082de:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80082e0:	4b86      	ldr	r3, [pc, #536]	; (80084fc <MX_LWIP_Init+0x240>)
 80082e2:	22ff      	movs	r2, #255	; 0xff
 80082e4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80082e6:	4b85      	ldr	r3, [pc, #532]	; (80084fc <MX_LWIP_Init+0x240>)
 80082e8:	22ff      	movs	r2, #255	; 0xff
 80082ea:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80082ec:	4b83      	ldr	r3, [pc, #524]	; (80084fc <MX_LWIP_Init+0x240>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80082f2:	4b83      	ldr	r3, [pc, #524]	; (8008500 <MX_LWIP_Init+0x244>)
 80082f4:	22c0      	movs	r2, #192	; 0xc0
 80082f6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80082f8:	4b81      	ldr	r3, [pc, #516]	; (8008500 <MX_LWIP_Init+0x244>)
 80082fa:	22a8      	movs	r2, #168	; 0xa8
 80082fc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 69;
 80082fe:	4b80      	ldr	r3, [pc, #512]	; (8008500 <MX_LWIP_Init+0x244>)
 8008300:	2245      	movs	r2, #69	; 0x45
 8008302:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8008304:	4b7e      	ldr	r3, [pc, #504]	; (8008500 <MX_LWIP_Init+0x244>)
 8008306:	2201      	movs	r2, #1
 8008308:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800830a:	f000 ff80 	bl	800920e <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800830e:	4b7a      	ldr	r3, [pc, #488]	; (80084f8 <MX_LWIP_Init+0x23c>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	061a      	lsls	r2, r3, #24
 8008314:	4b78      	ldr	r3, [pc, #480]	; (80084f8 <MX_LWIP_Init+0x23c>)
 8008316:	785b      	ldrb	r3, [r3, #1]
 8008318:	041b      	lsls	r3, r3, #16
 800831a:	431a      	orrs	r2, r3
 800831c:	4b76      	ldr	r3, [pc, #472]	; (80084f8 <MX_LWIP_Init+0x23c>)
 800831e:	789b      	ldrb	r3, [r3, #2]
 8008320:	021b      	lsls	r3, r3, #8
 8008322:	4313      	orrs	r3, r2
 8008324:	4a74      	ldr	r2, [pc, #464]	; (80084f8 <MX_LWIP_Init+0x23c>)
 8008326:	78d2      	ldrb	r2, [r2, #3]
 8008328:	4313      	orrs	r3, r2
 800832a:	061a      	lsls	r2, r3, #24
 800832c:	4b72      	ldr	r3, [pc, #456]	; (80084f8 <MX_LWIP_Init+0x23c>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	0619      	lsls	r1, r3, #24
 8008332:	4b71      	ldr	r3, [pc, #452]	; (80084f8 <MX_LWIP_Init+0x23c>)
 8008334:	785b      	ldrb	r3, [r3, #1]
 8008336:	041b      	lsls	r3, r3, #16
 8008338:	4319      	orrs	r1, r3
 800833a:	4b6f      	ldr	r3, [pc, #444]	; (80084f8 <MX_LWIP_Init+0x23c>)
 800833c:	789b      	ldrb	r3, [r3, #2]
 800833e:	021b      	lsls	r3, r3, #8
 8008340:	430b      	orrs	r3, r1
 8008342:	496d      	ldr	r1, [pc, #436]	; (80084f8 <MX_LWIP_Init+0x23c>)
 8008344:	78c9      	ldrb	r1, [r1, #3]
 8008346:	430b      	orrs	r3, r1
 8008348:	021b      	lsls	r3, r3, #8
 800834a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800834e:	431a      	orrs	r2, r3
 8008350:	4b69      	ldr	r3, [pc, #420]	; (80084f8 <MX_LWIP_Init+0x23c>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	0619      	lsls	r1, r3, #24
 8008356:	4b68      	ldr	r3, [pc, #416]	; (80084f8 <MX_LWIP_Init+0x23c>)
 8008358:	785b      	ldrb	r3, [r3, #1]
 800835a:	041b      	lsls	r3, r3, #16
 800835c:	4319      	orrs	r1, r3
 800835e:	4b66      	ldr	r3, [pc, #408]	; (80084f8 <MX_LWIP_Init+0x23c>)
 8008360:	789b      	ldrb	r3, [r3, #2]
 8008362:	021b      	lsls	r3, r3, #8
 8008364:	430b      	orrs	r3, r1
 8008366:	4964      	ldr	r1, [pc, #400]	; (80084f8 <MX_LWIP_Init+0x23c>)
 8008368:	78c9      	ldrb	r1, [r1, #3]
 800836a:	430b      	orrs	r3, r1
 800836c:	0a1b      	lsrs	r3, r3, #8
 800836e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008372:	431a      	orrs	r2, r3
 8008374:	4b60      	ldr	r3, [pc, #384]	; (80084f8 <MX_LWIP_Init+0x23c>)
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	0619      	lsls	r1, r3, #24
 800837a:	4b5f      	ldr	r3, [pc, #380]	; (80084f8 <MX_LWIP_Init+0x23c>)
 800837c:	785b      	ldrb	r3, [r3, #1]
 800837e:	041b      	lsls	r3, r3, #16
 8008380:	4319      	orrs	r1, r3
 8008382:	4b5d      	ldr	r3, [pc, #372]	; (80084f8 <MX_LWIP_Init+0x23c>)
 8008384:	789b      	ldrb	r3, [r3, #2]
 8008386:	021b      	lsls	r3, r3, #8
 8008388:	430b      	orrs	r3, r1
 800838a:	495b      	ldr	r1, [pc, #364]	; (80084f8 <MX_LWIP_Init+0x23c>)
 800838c:	78c9      	ldrb	r1, [r1, #3]
 800838e:	430b      	orrs	r3, r1
 8008390:	0e1b      	lsrs	r3, r3, #24
 8008392:	4313      	orrs	r3, r2
 8008394:	4a5b      	ldr	r2, [pc, #364]	; (8008504 <MX_LWIP_Init+0x248>)
 8008396:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008398:	4b58      	ldr	r3, [pc, #352]	; (80084fc <MX_LWIP_Init+0x240>)
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	061a      	lsls	r2, r3, #24
 800839e:	4b57      	ldr	r3, [pc, #348]	; (80084fc <MX_LWIP_Init+0x240>)
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	041b      	lsls	r3, r3, #16
 80083a4:	431a      	orrs	r2, r3
 80083a6:	4b55      	ldr	r3, [pc, #340]	; (80084fc <MX_LWIP_Init+0x240>)
 80083a8:	789b      	ldrb	r3, [r3, #2]
 80083aa:	021b      	lsls	r3, r3, #8
 80083ac:	4313      	orrs	r3, r2
 80083ae:	4a53      	ldr	r2, [pc, #332]	; (80084fc <MX_LWIP_Init+0x240>)
 80083b0:	78d2      	ldrb	r2, [r2, #3]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	061a      	lsls	r2, r3, #24
 80083b6:	4b51      	ldr	r3, [pc, #324]	; (80084fc <MX_LWIP_Init+0x240>)
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	0619      	lsls	r1, r3, #24
 80083bc:	4b4f      	ldr	r3, [pc, #316]	; (80084fc <MX_LWIP_Init+0x240>)
 80083be:	785b      	ldrb	r3, [r3, #1]
 80083c0:	041b      	lsls	r3, r3, #16
 80083c2:	4319      	orrs	r1, r3
 80083c4:	4b4d      	ldr	r3, [pc, #308]	; (80084fc <MX_LWIP_Init+0x240>)
 80083c6:	789b      	ldrb	r3, [r3, #2]
 80083c8:	021b      	lsls	r3, r3, #8
 80083ca:	430b      	orrs	r3, r1
 80083cc:	494b      	ldr	r1, [pc, #300]	; (80084fc <MX_LWIP_Init+0x240>)
 80083ce:	78c9      	ldrb	r1, [r1, #3]
 80083d0:	430b      	orrs	r3, r1
 80083d2:	021b      	lsls	r3, r3, #8
 80083d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083d8:	431a      	orrs	r2, r3
 80083da:	4b48      	ldr	r3, [pc, #288]	; (80084fc <MX_LWIP_Init+0x240>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	0619      	lsls	r1, r3, #24
 80083e0:	4b46      	ldr	r3, [pc, #280]	; (80084fc <MX_LWIP_Init+0x240>)
 80083e2:	785b      	ldrb	r3, [r3, #1]
 80083e4:	041b      	lsls	r3, r3, #16
 80083e6:	4319      	orrs	r1, r3
 80083e8:	4b44      	ldr	r3, [pc, #272]	; (80084fc <MX_LWIP_Init+0x240>)
 80083ea:	789b      	ldrb	r3, [r3, #2]
 80083ec:	021b      	lsls	r3, r3, #8
 80083ee:	430b      	orrs	r3, r1
 80083f0:	4942      	ldr	r1, [pc, #264]	; (80084fc <MX_LWIP_Init+0x240>)
 80083f2:	78c9      	ldrb	r1, [r1, #3]
 80083f4:	430b      	orrs	r3, r1
 80083f6:	0a1b      	lsrs	r3, r3, #8
 80083f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80083fc:	431a      	orrs	r2, r3
 80083fe:	4b3f      	ldr	r3, [pc, #252]	; (80084fc <MX_LWIP_Init+0x240>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	0619      	lsls	r1, r3, #24
 8008404:	4b3d      	ldr	r3, [pc, #244]	; (80084fc <MX_LWIP_Init+0x240>)
 8008406:	785b      	ldrb	r3, [r3, #1]
 8008408:	041b      	lsls	r3, r3, #16
 800840a:	4319      	orrs	r1, r3
 800840c:	4b3b      	ldr	r3, [pc, #236]	; (80084fc <MX_LWIP_Init+0x240>)
 800840e:	789b      	ldrb	r3, [r3, #2]
 8008410:	021b      	lsls	r3, r3, #8
 8008412:	430b      	orrs	r3, r1
 8008414:	4939      	ldr	r1, [pc, #228]	; (80084fc <MX_LWIP_Init+0x240>)
 8008416:	78c9      	ldrb	r1, [r1, #3]
 8008418:	430b      	orrs	r3, r1
 800841a:	0e1b      	lsrs	r3, r3, #24
 800841c:	4313      	orrs	r3, r2
 800841e:	4a3a      	ldr	r2, [pc, #232]	; (8008508 <MX_LWIP_Init+0x24c>)
 8008420:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008422:	4b37      	ldr	r3, [pc, #220]	; (8008500 <MX_LWIP_Init+0x244>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	061a      	lsls	r2, r3, #24
 8008428:	4b35      	ldr	r3, [pc, #212]	; (8008500 <MX_LWIP_Init+0x244>)
 800842a:	785b      	ldrb	r3, [r3, #1]
 800842c:	041b      	lsls	r3, r3, #16
 800842e:	431a      	orrs	r2, r3
 8008430:	4b33      	ldr	r3, [pc, #204]	; (8008500 <MX_LWIP_Init+0x244>)
 8008432:	789b      	ldrb	r3, [r3, #2]
 8008434:	021b      	lsls	r3, r3, #8
 8008436:	4313      	orrs	r3, r2
 8008438:	4a31      	ldr	r2, [pc, #196]	; (8008500 <MX_LWIP_Init+0x244>)
 800843a:	78d2      	ldrb	r2, [r2, #3]
 800843c:	4313      	orrs	r3, r2
 800843e:	061a      	lsls	r2, r3, #24
 8008440:	4b2f      	ldr	r3, [pc, #188]	; (8008500 <MX_LWIP_Init+0x244>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	0619      	lsls	r1, r3, #24
 8008446:	4b2e      	ldr	r3, [pc, #184]	; (8008500 <MX_LWIP_Init+0x244>)
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	041b      	lsls	r3, r3, #16
 800844c:	4319      	orrs	r1, r3
 800844e:	4b2c      	ldr	r3, [pc, #176]	; (8008500 <MX_LWIP_Init+0x244>)
 8008450:	789b      	ldrb	r3, [r3, #2]
 8008452:	021b      	lsls	r3, r3, #8
 8008454:	430b      	orrs	r3, r1
 8008456:	492a      	ldr	r1, [pc, #168]	; (8008500 <MX_LWIP_Init+0x244>)
 8008458:	78c9      	ldrb	r1, [r1, #3]
 800845a:	430b      	orrs	r3, r1
 800845c:	021b      	lsls	r3, r3, #8
 800845e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008462:	431a      	orrs	r2, r3
 8008464:	4b26      	ldr	r3, [pc, #152]	; (8008500 <MX_LWIP_Init+0x244>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	0619      	lsls	r1, r3, #24
 800846a:	4b25      	ldr	r3, [pc, #148]	; (8008500 <MX_LWIP_Init+0x244>)
 800846c:	785b      	ldrb	r3, [r3, #1]
 800846e:	041b      	lsls	r3, r3, #16
 8008470:	4319      	orrs	r1, r3
 8008472:	4b23      	ldr	r3, [pc, #140]	; (8008500 <MX_LWIP_Init+0x244>)
 8008474:	789b      	ldrb	r3, [r3, #2]
 8008476:	021b      	lsls	r3, r3, #8
 8008478:	430b      	orrs	r3, r1
 800847a:	4921      	ldr	r1, [pc, #132]	; (8008500 <MX_LWIP_Init+0x244>)
 800847c:	78c9      	ldrb	r1, [r1, #3]
 800847e:	430b      	orrs	r3, r1
 8008480:	0a1b      	lsrs	r3, r3, #8
 8008482:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008486:	431a      	orrs	r2, r3
 8008488:	4b1d      	ldr	r3, [pc, #116]	; (8008500 <MX_LWIP_Init+0x244>)
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	0619      	lsls	r1, r3, #24
 800848e:	4b1c      	ldr	r3, [pc, #112]	; (8008500 <MX_LWIP_Init+0x244>)
 8008490:	785b      	ldrb	r3, [r3, #1]
 8008492:	041b      	lsls	r3, r3, #16
 8008494:	4319      	orrs	r1, r3
 8008496:	4b1a      	ldr	r3, [pc, #104]	; (8008500 <MX_LWIP_Init+0x244>)
 8008498:	789b      	ldrb	r3, [r3, #2]
 800849a:	021b      	lsls	r3, r3, #8
 800849c:	430b      	orrs	r3, r1
 800849e:	4918      	ldr	r1, [pc, #96]	; (8008500 <MX_LWIP_Init+0x244>)
 80084a0:	78c9      	ldrb	r1, [r1, #3]
 80084a2:	430b      	orrs	r3, r1
 80084a4:	0e1b      	lsrs	r3, r3, #24
 80084a6:	4313      	orrs	r3, r2
 80084a8:	4a18      	ldr	r2, [pc, #96]	; (800850c <MX_LWIP_Init+0x250>)
 80084aa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80084ac:	4b18      	ldr	r3, [pc, #96]	; (8008510 <MX_LWIP_Init+0x254>)
 80084ae:	9302      	str	r3, [sp, #8]
 80084b0:	4b18      	ldr	r3, [pc, #96]	; (8008514 <MX_LWIP_Init+0x258>)
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	2300      	movs	r3, #0
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	4b14      	ldr	r3, [pc, #80]	; (800850c <MX_LWIP_Init+0x250>)
 80084ba:	4a13      	ldr	r2, [pc, #76]	; (8008508 <MX_LWIP_Init+0x24c>)
 80084bc:	4911      	ldr	r1, [pc, #68]	; (8008504 <MX_LWIP_Init+0x248>)
 80084be:	4816      	ldr	r0, [pc, #88]	; (8008518 <MX_LWIP_Init+0x25c>)
 80084c0:	f001 fb4c 	bl	8009b5c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80084c4:	4814      	ldr	r0, [pc, #80]	; (8008518 <MX_LWIP_Init+0x25c>)
 80084c6:	f001 fcfb 	bl	8009ec0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80084ca:	4b13      	ldr	r3, [pc, #76]	; (8008518 <MX_LWIP_Init+0x25c>)
 80084cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80084d0:	089b      	lsrs	r3, r3, #2
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80084dc:	480e      	ldr	r0, [pc, #56]	; (8008518 <MX_LWIP_Init+0x25c>)
 80084de:	f001 fcff 	bl	8009ee0 <netif_set_up>
 80084e2:	e002      	b.n	80084ea <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80084e4:	480c      	ldr	r0, [pc, #48]	; (8008518 <MX_LWIP_Init+0x25c>)
 80084e6:	f001 fd67 	bl	8009fb8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80084ea:	490c      	ldr	r1, [pc, #48]	; (800851c <MX_LWIP_Init+0x260>)
 80084ec:	480a      	ldr	r0, [pc, #40]	; (8008518 <MX_LWIP_Init+0x25c>)
 80084ee:	f001 fd95 	bl	800a01c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80084f2:	bf00      	nop
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	20000f88 	.word	0x20000f88
 80084fc:	20000f84 	.word	0x20000f84
 8008500:	20000f48 	.word	0x20000f48
 8008504:	20000f80 	.word	0x20000f80
 8008508:	20000f8c 	.word	0x20000f8c
 800850c:	20000f90 	.word	0x20000f90
 8008510:	08014129 	.word	0x08014129
 8008514:	08008aa9 	.word	0x08008aa9
 8008518:	20000f4c 	.word	0x20000f4c
 800851c:	08008b15 	.word	0x08008b15

08008520 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8008524:	4803      	ldr	r0, [pc, #12]	; (8008534 <MX_LWIP_Process+0x14>)
 8008526:	f000 fa9f 	bl	8008a68 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800852a:	f008 ff5f 	bl	80113ec <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800852e:	bf00      	nop
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	20000f4c 	.word	0x20000f4c

08008538 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08e      	sub	sp, #56	; 0x38
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	605a      	str	r2, [r3, #4]
 800854a:	609a      	str	r2, [r3, #8]
 800854c:	60da      	str	r2, [r3, #12]
 800854e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a3f      	ldr	r2, [pc, #252]	; (8008654 <HAL_ETH_MspInit+0x11c>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d178      	bne.n	800864c <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800855a:	4b3f      	ldr	r3, [pc, #252]	; (8008658 <HAL_ETH_MspInit+0x120>)
 800855c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855e:	4a3e      	ldr	r2, [pc, #248]	; (8008658 <HAL_ETH_MspInit+0x120>)
 8008560:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008564:	6313      	str	r3, [r2, #48]	; 0x30
 8008566:	4b3c      	ldr	r3, [pc, #240]	; (8008658 <HAL_ETH_MspInit+0x120>)
 8008568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800856e:	623b      	str	r3, [r7, #32]
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	4b39      	ldr	r3, [pc, #228]	; (8008658 <HAL_ETH_MspInit+0x120>)
 8008574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008576:	4a38      	ldr	r2, [pc, #224]	; (8008658 <HAL_ETH_MspInit+0x120>)
 8008578:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800857c:	6313      	str	r3, [r2, #48]	; 0x30
 800857e:	4b36      	ldr	r3, [pc, #216]	; (8008658 <HAL_ETH_MspInit+0x120>)
 8008580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008582:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008586:	61fb      	str	r3, [r7, #28]
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	4b33      	ldr	r3, [pc, #204]	; (8008658 <HAL_ETH_MspInit+0x120>)
 800858c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858e:	4a32      	ldr	r2, [pc, #200]	; (8008658 <HAL_ETH_MspInit+0x120>)
 8008590:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008594:	6313      	str	r3, [r2, #48]	; 0x30
 8008596:	4b30      	ldr	r3, [pc, #192]	; (8008658 <HAL_ETH_MspInit+0x120>)
 8008598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800859e:	61bb      	str	r3, [r7, #24]
 80085a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80085a2:	4b2d      	ldr	r3, [pc, #180]	; (8008658 <HAL_ETH_MspInit+0x120>)
 80085a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a6:	4a2c      	ldr	r2, [pc, #176]	; (8008658 <HAL_ETH_MspInit+0x120>)
 80085a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085ac:	6313      	str	r3, [r2, #48]	; 0x30
 80085ae:	4b2a      	ldr	r3, [pc, #168]	; (8008658 <HAL_ETH_MspInit+0x120>)
 80085b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b6:	617b      	str	r3, [r7, #20]
 80085b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80085ba:	4b27      	ldr	r3, [pc, #156]	; (8008658 <HAL_ETH_MspInit+0x120>)
 80085bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085be:	4a26      	ldr	r2, [pc, #152]	; (8008658 <HAL_ETH_MspInit+0x120>)
 80085c0:	f043 0304 	orr.w	r3, r3, #4
 80085c4:	6313      	str	r3, [r2, #48]	; 0x30
 80085c6:	4b24      	ldr	r3, [pc, #144]	; (8008658 <HAL_ETH_MspInit+0x120>)
 80085c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ca:	f003 0304 	and.w	r3, r3, #4
 80085ce:	613b      	str	r3, [r7, #16]
 80085d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085d2:	4b21      	ldr	r3, [pc, #132]	; (8008658 <HAL_ETH_MspInit+0x120>)
 80085d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d6:	4a20      	ldr	r2, [pc, #128]	; (8008658 <HAL_ETH_MspInit+0x120>)
 80085d8:	f043 0301 	orr.w	r3, r3, #1
 80085dc:	6313      	str	r3, [r2, #48]	; 0x30
 80085de:	4b1e      	ldr	r3, [pc, #120]	; (8008658 <HAL_ETH_MspInit+0x120>)
 80085e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	60fb      	str	r3, [r7, #12]
 80085e8:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80085ea:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085f0:	2302      	movs	r3, #2
 80085f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085f4:	2300      	movs	r3, #0
 80085f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085f8:	2303      	movs	r3, #3
 80085fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80085fc:	230b      	movs	r3, #11
 80085fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008604:	4619      	mov	r1, r3
 8008606:	4815      	ldr	r0, [pc, #84]	; (800865c <HAL_ETH_MspInit+0x124>)
 8008608:	f7fc fda8 	bl	800515c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800860c:	2332      	movs	r3, #50	; 0x32
 800860e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008610:	2302      	movs	r3, #2
 8008612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008614:	2300      	movs	r3, #0
 8008616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008618:	2303      	movs	r3, #3
 800861a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800861c:	230b      	movs	r3, #11
 800861e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008624:	4619      	mov	r1, r3
 8008626:	480e      	ldr	r0, [pc, #56]	; (8008660 <HAL_ETH_MspInit+0x128>)
 8008628:	f7fc fd98 	bl	800515c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800862c:	2386      	movs	r3, #134	; 0x86
 800862e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008630:	2302      	movs	r3, #2
 8008632:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008634:	2300      	movs	r3, #0
 8008636:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008638:	2303      	movs	r3, #3
 800863a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800863c:	230b      	movs	r3, #11
 800863e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008644:	4619      	mov	r1, r3
 8008646:	4807      	ldr	r0, [pc, #28]	; (8008664 <HAL_ETH_MspInit+0x12c>)
 8008648:	f7fc fd88 	bl	800515c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800864c:	bf00      	nop
 800864e:	3738      	adds	r7, #56	; 0x38
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	40028000 	.word	0x40028000
 8008658:	40023800 	.word	0x40023800
 800865c:	40021800 	.word	0x40021800
 8008660:	40020800 	.word	0x40020800
 8008664:	40020000 	.word	0x40020000

08008668 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008674:	4b4d      	ldr	r3, [pc, #308]	; (80087ac <low_level_init+0x144>)
 8008676:	4a4e      	ldr	r2, [pc, #312]	; (80087b0 <low_level_init+0x148>)
 8008678:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800867a:	4b4c      	ldr	r3, [pc, #304]	; (80087ac <low_level_init+0x144>)
 800867c:	2201      	movs	r2, #1
 800867e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8008680:	4b4a      	ldr	r3, [pc, #296]	; (80087ac <low_level_init+0x144>)
 8008682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008686:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008688:	4b48      	ldr	r3, [pc, #288]	; (80087ac <low_level_init+0x144>)
 800868a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800868e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8008690:	4b46      	ldr	r3, [pc, #280]	; (80087ac <low_level_init+0x144>)
 8008692:	2200      	movs	r2, #0
 8008694:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8008696:	2300      	movs	r3, #0
 8008698:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800869a:	2380      	movs	r3, #128	; 0x80
 800869c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800869e:	23e1      	movs	r3, #225	; 0xe1
 80086a0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80086a2:	2300      	movs	r3, #0
 80086a4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80086a6:	2300      	movs	r3, #0
 80086a8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x69;
 80086aa:	2369      	movs	r3, #105	; 0x69
 80086ac:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80086ae:	4a3f      	ldr	r2, [pc, #252]	; (80087ac <low_level_init+0x144>)
 80086b0:	f107 0308 	add.w	r3, r7, #8
 80086b4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80086b6:	4b3d      	ldr	r3, [pc, #244]	; (80087ac <low_level_init+0x144>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80086bc:	4b3b      	ldr	r3, [pc, #236]	; (80087ac <low_level_init+0x144>)
 80086be:	2200      	movs	r2, #0
 80086c0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80086c2:	4b3a      	ldr	r3, [pc, #232]	; (80087ac <low_level_init+0x144>)
 80086c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80086c8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80086ca:	4838      	ldr	r0, [pc, #224]	; (80087ac <low_level_init+0x144>)
 80086cc:	f7fb fc42 	bl	8003f54 <HAL_ETH_Init>
 80086d0:	4603      	mov	r3, r0
 80086d2:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80086d4:	7dfb      	ldrb	r3, [r7, #23]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d108      	bne.n	80086ec <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80086e0:	f043 0304 	orr.w	r3, r3, #4
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80086ec:	2304      	movs	r3, #4
 80086ee:	4a31      	ldr	r2, [pc, #196]	; (80087b4 <low_level_init+0x14c>)
 80086f0:	4931      	ldr	r1, [pc, #196]	; (80087b8 <low_level_init+0x150>)
 80086f2:	482e      	ldr	r0, [pc, #184]	; (80087ac <low_level_init+0x144>)
 80086f4:	f7fb fdc8 	bl	8004288 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80086f8:	2304      	movs	r3, #4
 80086fa:	4a30      	ldr	r2, [pc, #192]	; (80087bc <low_level_init+0x154>)
 80086fc:	4930      	ldr	r1, [pc, #192]	; (80087c0 <low_level_init+0x158>)
 80086fe:	482b      	ldr	r0, [pc, #172]	; (80087ac <low_level_init+0x144>)
 8008700:	f7fb fe2b 	bl	800435a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2206      	movs	r2, #6
 8008708:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800870c:	4b27      	ldr	r3, [pc, #156]	; (80087ac <low_level_init+0x144>)
 800870e:	695b      	ldr	r3, [r3, #20]
 8008710:	781a      	ldrb	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008718:	4b24      	ldr	r3, [pc, #144]	; (80087ac <low_level_init+0x144>)
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	785a      	ldrb	r2, [r3, #1]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008724:	4b21      	ldr	r3, [pc, #132]	; (80087ac <low_level_init+0x144>)
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	789a      	ldrb	r2, [r3, #2]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008730:	4b1e      	ldr	r3, [pc, #120]	; (80087ac <low_level_init+0x144>)
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	78da      	ldrb	r2, [r3, #3]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800873c:	4b1b      	ldr	r3, [pc, #108]	; (80087ac <low_level_init+0x144>)
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	791a      	ldrb	r2, [r3, #4]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008748:	4b18      	ldr	r3, [pc, #96]	; (80087ac <low_level_init+0x144>)
 800874a:	695b      	ldr	r3, [r3, #20]
 800874c:	795a      	ldrb	r2, [r3, #5]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800875a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008762:	f043 030a 	orr.w	r3, r3, #10
 8008766:	b2da      	uxtb	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800876e:	480f      	ldr	r0, [pc, #60]	; (80087ac <low_level_init+0x144>)
 8008770:	f7fc f89c 	bl	80048ac <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8008774:	f107 0310 	add.w	r3, r7, #16
 8008778:	461a      	mov	r2, r3
 800877a:	211d      	movs	r1, #29
 800877c:	480b      	ldr	r0, [pc, #44]	; (80087ac <low_level_init+0x144>)
 800877e:	f7fb ffc7 	bl	8004710 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	f043 030b 	orr.w	r3, r3, #11
 8008788:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	461a      	mov	r2, r3
 800878e:	211d      	movs	r1, #29
 8008790:	4806      	ldr	r0, [pc, #24]	; (80087ac <low_level_init+0x144>)
 8008792:	f7fc f825 	bl	80047e0 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8008796:	f107 0310 	add.w	r3, r7, #16
 800879a:	461a      	mov	r2, r3
 800879c:	211d      	movs	r1, #29
 800879e:	4803      	ldr	r0, [pc, #12]	; (80087ac <low_level_init+0x144>)
 80087a0:	f7fb ffb6 	bl	8004710 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80087a4:	bf00      	nop
 80087a6:	3718      	adds	r7, #24
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	20002864 	.word	0x20002864
 80087b0:	40028000 	.word	0x40028000
 80087b4:	200028ac 	.word	0x200028ac
 80087b8:	20000f94 	.word	0x20000f94
 80087bc:	20001014 	.word	0x20001014
 80087c0:	200027e4 	.word	0x200027e4

080087c4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b08a      	sub	sp, #40	; 0x28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80087ce:	4b4b      	ldr	r3, [pc, #300]	; (80088fc <low_level_output+0x138>)
 80087d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80087da:	2300      	movs	r3, #0
 80087dc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80087e2:	2300      	movs	r3, #0
 80087e4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80087e6:	4b45      	ldr	r3, [pc, #276]	; (80088fc <low_level_output+0x138>)
 80087e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ea:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80087ec:	2300      	movs	r3, #0
 80087ee:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	623b      	str	r3, [r7, #32]
 80087f4:	e05a      	b.n	80088ac <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	da03      	bge.n	8008806 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80087fe:	23f8      	movs	r3, #248	; 0xf8
 8008800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008804:	e05c      	b.n	80088c0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8008806:	6a3b      	ldr	r3, [r7, #32]
 8008808:	895b      	ldrh	r3, [r3, #10]
 800880a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008810:	e02f      	b.n	8008872 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008812:	69fa      	ldr	r2, [r7, #28]
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	18d0      	adds	r0, r2, r3
 8008818:	6a3b      	ldr	r3, [r7, #32]
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	18d1      	adds	r1, r2, r3
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8008826:	1a9b      	subs	r3, r3, r2
 8008828:	461a      	mov	r2, r3
 800882a:	f00b fd85 	bl	8014338 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	da03      	bge.n	8008844 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800883c:	23f8      	movs	r3, #248	; 0xf8
 800883e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008842:	e03d      	b.n	80088c0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4413      	add	r3, r2
 8008850:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008854:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008860:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800886c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	4413      	add	r3, r2
 8008878:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800887c:	4293      	cmp	r3, r2
 800887e:	d8c8      	bhi.n	8008812 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008880:	69fa      	ldr	r2, [r7, #28]
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	18d0      	adds	r0, r2, r3
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	685a      	ldr	r2, [r3, #4]
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	4413      	add	r3, r2
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	4619      	mov	r1, r3
 8008892:	f00b fd51 	bl	8014338 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4413      	add	r3, r2
 800889c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4413      	add	r3, r2
 80088a4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80088a6:	6a3b      	ldr	r3, [r7, #32]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	623b      	str	r3, [r7, #32]
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1a1      	bne.n	80087f6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80088b2:	6979      	ldr	r1, [r7, #20]
 80088b4:	4811      	ldr	r0, [pc, #68]	; (80088fc <low_level_output+0x138>)
 80088b6:	f7fb fdbd 	bl	8004434 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80088c0:	4b0e      	ldr	r3, [pc, #56]	; (80088fc <low_level_output+0x138>)
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	f241 0314 	movw	r3, #4116	; 0x1014
 80088c8:	4413      	add	r3, r2
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0320 	and.w	r3, r3, #32
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00d      	beq.n	80088f0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80088d4:	4b09      	ldr	r3, [pc, #36]	; (80088fc <low_level_output+0x138>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	f241 0314 	movw	r3, #4116	; 0x1014
 80088dc:	4413      	add	r3, r2
 80088de:	2220      	movs	r2, #32
 80088e0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80088e2:	4b06      	ldr	r3, [pc, #24]	; (80088fc <low_level_output+0x138>)
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	f241 0304 	movw	r3, #4100	; 0x1004
 80088ea:	4413      	add	r3, r2
 80088ec:	2200      	movs	r2, #0
 80088ee:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80088f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3728      	adds	r7, #40	; 0x28
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20002864 	.word	0x20002864

08008900 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08c      	sub	sp, #48	; 0x30
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008908:	2300      	movs	r3, #0
 800890a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800890c:	2300      	movs	r3, #0
 800890e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008914:	2300      	movs	r3, #0
 8008916:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800891c:	2300      	movs	r3, #0
 800891e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008920:	2300      	movs	r3, #0
 8008922:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8008924:	484f      	ldr	r0, [pc, #316]	; (8008a64 <low_level_input+0x164>)
 8008926:	f7fb fe6f 	bl	8004608 <HAL_ETH_GetReceivedFrame>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <low_level_input+0x34>

    return NULL;
 8008930:	2300      	movs	r3, #0
 8008932:	e092      	b.n	8008a5a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8008934:	4b4b      	ldr	r3, [pc, #300]	; (8008a64 <low_level_input+0x164>)
 8008936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008938:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800893a:	4b4a      	ldr	r3, [pc, #296]	; (8008a64 <low_level_input+0x164>)
 800893c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008940:	89fb      	ldrh	r3, [r7, #14]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d007      	beq.n	8008956 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8008946:	89fb      	ldrh	r3, [r7, #14]
 8008948:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800894c:	4619      	mov	r1, r3
 800894e:	2000      	movs	r0, #0
 8008950:	f001 fc00 	bl	800a154 <pbuf_alloc>
 8008954:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8008956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008958:	2b00      	cmp	r3, #0
 800895a:	d04b      	beq.n	80089f4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800895c:	4b41      	ldr	r3, [pc, #260]	; (8008a64 <low_level_input+0x164>)
 800895e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008960:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008962:	2300      	movs	r3, #0
 8008964:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008968:	62bb      	str	r3, [r7, #40]	; 0x28
 800896a:	e040      	b.n	80089ee <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	895b      	ldrh	r3, [r3, #10]
 8008970:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008972:	2300      	movs	r3, #0
 8008974:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008976:	e021      	b.n	80089bc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	18d0      	adds	r0, r2, r3
 8008980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	18d1      	adds	r1, r2, r3
 8008986:	69fa      	ldr	r2, [r7, #28]
 8008988:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800898c:	1a9b      	subs	r3, r3, r2
 800898e:	461a      	mov	r2, r3
 8008990:	f00b fcd2 	bl	8014338 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80089a0:	69fa      	ldr	r2, [r7, #28]
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	4413      	add	r3, r2
 80089a6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80089aa:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80089ac:	69ba      	ldr	r2, [r7, #24]
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80089b6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80089b8:	2300      	movs	r3, #0
 80089ba:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80089bc:	697a      	ldr	r2, [r7, #20]
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	4413      	add	r3, r2
 80089c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d8d6      	bhi.n	8008978 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80089ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	18d0      	adds	r0, r2, r3
 80089d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	4413      	add	r3, r2
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	4619      	mov	r1, r3
 80089dc:	f00b fcac 	bl	8014338 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80089e0:	69fa      	ldr	r2, [r7, #28]
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	4413      	add	r3, r2
 80089e6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80089e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80089ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1bb      	bne.n	800896c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80089f4:	4b1b      	ldr	r3, [pc, #108]	; (8008a64 <low_level_input+0x164>)
 80089f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80089fa:	2300      	movs	r3, #0
 80089fc:	613b      	str	r3, [r7, #16]
 80089fe:	e00b      	b.n	8008a18 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008a08:	6a3b      	ldr	r3, [r7, #32]
 8008a0a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	3301      	adds	r3, #1
 8008a16:	613b      	str	r3, [r7, #16]
 8008a18:	4b12      	ldr	r3, [pc, #72]	; (8008a64 <low_level_input+0x164>)
 8008a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d3ee      	bcc.n	8008a00 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8008a22:	4b10      	ldr	r3, [pc, #64]	; (8008a64 <low_level_input+0x164>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8008a28:	4b0e      	ldr	r3, [pc, #56]	; (8008a64 <low_level_input+0x164>)
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	f241 0314 	movw	r3, #4116	; 0x1014
 8008a30:	4413      	add	r3, r2
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00d      	beq.n	8008a58 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008a3c:	4b09      	ldr	r3, [pc, #36]	; (8008a64 <low_level_input+0x164>)
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	f241 0314 	movw	r3, #4116	; 0x1014
 8008a44:	4413      	add	r3, r2
 8008a46:	2280      	movs	r2, #128	; 0x80
 8008a48:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8008a4a:	4b06      	ldr	r3, [pc, #24]	; (8008a64 <low_level_input+0x164>)
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	f241 0308 	movw	r3, #4104	; 0x1008
 8008a52:	4413      	add	r3, r2
 8008a54:	2200      	movs	r2, #0
 8008a56:	601a      	str	r2, [r3, #0]
  }
  return p;
 8008a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3730      	adds	r7, #48	; 0x30
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20002864 	.word	0x20002864

08008a68 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7ff ff45 	bl	8008900 <low_level_input>
 8008a76:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d010      	beq.n	8008aa0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	6879      	ldr	r1, [r7, #4]
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	4798      	blx	r3
 8008a88:	4603      	mov	r3, r0
 8008a8a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8008a8c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d006      	beq.n	8008aa2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f001 fe41 	bl	800a71c <pbuf_free>
    p = NULL;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	e000      	b.n	8008aa2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8008aa0:	bf00      	nop
  }
}
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d106      	bne.n	8008ac4 <ethernetif_init+0x1c>
 8008ab6:	4b0e      	ldr	r3, [pc, #56]	; (8008af0 <ethernetif_init+0x48>)
 8008ab8:	f240 2207 	movw	r2, #519	; 0x207
 8008abc:	490d      	ldr	r1, [pc, #52]	; (8008af4 <ethernetif_init+0x4c>)
 8008abe:	480e      	ldr	r0, [pc, #56]	; (8008af8 <ethernetif_init+0x50>)
 8008ac0:	f00b fc6a 	bl	8014398 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2273      	movs	r2, #115	; 0x73
 8008ac8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2274      	movs	r2, #116	; 0x74
 8008ad0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a09      	ldr	r2, [pc, #36]	; (8008afc <ethernetif_init+0x54>)
 8008ad8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a08      	ldr	r2, [pc, #32]	; (8008b00 <ethernetif_init+0x58>)
 8008ade:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7ff fdc1 	bl	8008668 <low_level_init>

  return ERR_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	08015934 	.word	0x08015934
 8008af4:	08015950 	.word	0x08015950
 8008af8:	08015960 	.word	0x08015960
 8008afc:	080125ed 	.word	0x080125ed
 8008b00:	080087c5 	.word	0x080087c5

08008b04 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008b08:	f7fa fc98 	bl	800343c <HAL_GetTick>
 8008b0c:	4603      	mov	r3, r0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	bd80      	pop	{r7, pc}
	...

08008b14 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8008b20:	2300      	movs	r3, #0
 8008b22:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b2a:	089b      	lsrs	r3, r3, #2
 8008b2c:	f003 0301 	and.w	r3, r3, #1
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d05d      	beq.n	8008bf2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008b36:	4b34      	ldr	r3, [pc, #208]	; (8008c08 <ethernetif_update_config+0xf4>)
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d03f      	beq.n	8008bbe <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8008b3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b42:	2100      	movs	r1, #0
 8008b44:	4830      	ldr	r0, [pc, #192]	; (8008c08 <ethernetif_update_config+0xf4>)
 8008b46:	f7fb fe4b 	bl	80047e0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8008b4a:	f7fa fc77 	bl	800343c <HAL_GetTick>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008b52:	f107 0308 	add.w	r3, r7, #8
 8008b56:	461a      	mov	r2, r3
 8008b58:	2101      	movs	r1, #1
 8008b5a:	482b      	ldr	r0, [pc, #172]	; (8008c08 <ethernetif_update_config+0xf4>)
 8008b5c:	f7fb fdd8 	bl	8004710 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008b60:	f7fa fc6c 	bl	800343c <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b6e:	d828      	bhi.n	8008bc2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f003 0320 	and.w	r3, r3, #32
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0eb      	beq.n	8008b52 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8008b7a:	f107 0308 	add.w	r3, r7, #8
 8008b7e:	461a      	mov	r2, r3
 8008b80:	2110      	movs	r1, #16
 8008b82:	4821      	ldr	r0, [pc, #132]	; (8008c08 <ethernetif_update_config+0xf4>)
 8008b84:	f7fb fdc4 	bl	8004710 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	f003 0304 	and.w	r3, r3, #4
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d004      	beq.n	8008b9c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008b92:	4b1d      	ldr	r3, [pc, #116]	; (8008c08 <ethernetif_update_config+0xf4>)
 8008b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b98:	60da      	str	r2, [r3, #12]
 8008b9a:	e002      	b.n	8008ba2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8008b9c:	4b1a      	ldr	r3, [pc, #104]	; (8008c08 <ethernetif_update_config+0xf4>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	f003 0302 	and.w	r3, r3, #2
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8008bac:	4b16      	ldr	r3, [pc, #88]	; (8008c08 <ethernetif_update_config+0xf4>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	609a      	str	r2, [r3, #8]
 8008bb2:	e016      	b.n	8008be2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8008bb4:	4b14      	ldr	r3, [pc, #80]	; (8008c08 <ethernetif_update_config+0xf4>)
 8008bb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008bba:	609a      	str	r2, [r3, #8]
 8008bbc:	e011      	b.n	8008be2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8008bbe:	bf00      	nop
 8008bc0:	e000      	b.n	8008bc4 <ethernetif_update_config+0xb0>
          goto error;
 8008bc2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008bc4:	4b10      	ldr	r3, [pc, #64]	; (8008c08 <ethernetif_update_config+0xf4>)
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	08db      	lsrs	r3, r3, #3
 8008bca:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8008bcc:	4b0e      	ldr	r3, [pc, #56]	; (8008c08 <ethernetif_update_config+0xf4>)
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	085b      	lsrs	r3, r3, #1
 8008bd2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	461a      	mov	r2, r3
 8008bda:	2100      	movs	r1, #0
 8008bdc:	480a      	ldr	r0, [pc, #40]	; (8008c08 <ethernetif_update_config+0xf4>)
 8008bde:	f7fb fdff 	bl	80047e0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8008be2:	2100      	movs	r1, #0
 8008be4:	4808      	ldr	r0, [pc, #32]	; (8008c08 <ethernetif_update_config+0xf4>)
 8008be6:	f7fb febf 	bl	8004968 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8008bea:	4807      	ldr	r0, [pc, #28]	; (8008c08 <ethernetif_update_config+0xf4>)
 8008bec:	f7fb fe5e 	bl	80048ac <HAL_ETH_Start>
 8008bf0:	e002      	b.n	8008bf8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8008bf2:	4805      	ldr	r0, [pc, #20]	; (8008c08 <ethernetif_update_config+0xf4>)
 8008bf4:	f7fb fe89 	bl	800490a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f807 	bl	8008c0c <ethernetif_notify_conn_changed>
}
 8008bfe:	bf00      	nop
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	20002864 	.word	0x20002864

08008c0c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	4603      	mov	r3, r0
 8008c28:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008c2a:	88fb      	ldrh	r3, [r7, #6]
 8008c2c:	021b      	lsls	r3, r3, #8
 8008c2e:	b21a      	sxth	r2, r3
 8008c30:	88fb      	ldrh	r3, [r7, #6]
 8008c32:	0a1b      	lsrs	r3, r3, #8
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	b21b      	sxth	r3, r3
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	b21b      	sxth	r3, r3
 8008c3c:	b29b      	uxth	r3, r3
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	061a      	lsls	r2, r3, #24
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	021b      	lsls	r3, r3, #8
 8008c5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c5e:	431a      	orrs	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	0a1b      	lsrs	r3, r3, #8
 8008c64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	0e1b      	lsrs	r3, r3, #24
 8008c6e:	4313      	orrs	r3, r2
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 8008c80:	bf00      	nop
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8008c8e:	f000 faa9 	bl	80091e4 <dns_check_entries>
}
 8008c92:	bf00      	nop
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b090      	sub	sp, #64	; 0x40
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 8008ca2:	79fa      	ldrb	r2, [r7, #7]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	011b      	lsls	r3, r3, #4
 8008ca8:	4413      	add	r3, r2
 8008caa:	011b      	lsls	r3, r3, #4
 8008cac:	4a6c      	ldr	r2, [pc, #432]	; (8008e60 <dns_send+0x1c8>)
 8008cae:	4413      	add	r3, r2
 8008cb0:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	7adb      	ldrb	r3, [r3, #11]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d906      	bls.n	8008cc8 <dns_send+0x30>
 8008cba:	4b6a      	ldr	r3, [pc, #424]	; (8008e64 <dns_send+0x1cc>)
 8008cbc:	f240 22fa 	movw	r2, #762	; 0x2fa
 8008cc0:	4969      	ldr	r1, [pc, #420]	; (8008e68 <dns_send+0x1d0>)
 8008cc2:	486a      	ldr	r0, [pc, #424]	; (8008e6c <dns_send+0x1d4>)
 8008cc4:	f00b fb68 	bl	8014398 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8008cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cca:	7adb      	ldrb	r3, [r3, #11]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	4b68      	ldr	r3, [pc, #416]	; (8008e70 <dns_send+0x1d8>)
 8008cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d109      	bne.n	8008cec <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 8008cd8:	79fb      	ldrb	r3, [r7, #7]
 8008cda:	2100      	movs	r1, #0
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 f8cb 	bl	8008e78 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	e0b4      	b.n	8008e56 <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8008cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cee:	3310      	adds	r3, #16
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7f7 fa8d 	bl	8000210 <strlen>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	3312      	adds	r3, #18
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008d02:	4619      	mov	r1, r3
 8008d04:	2036      	movs	r0, #54	; 0x36
 8008d06:	f001 fa25 	bl	800a154 <pbuf_alloc>
 8008d0a:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8008d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 8095 	beq.w	8008e3e <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8008d14:	f107 0310 	add.w	r3, r7, #16
 8008d18:	220c      	movs	r2, #12
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f00b fb33 	bl	8014388 <memset>
    hdr.id = lwip_htons(entry->txid);
 8008d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d24:	891b      	ldrh	r3, [r3, #8]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7ff ff7a 	bl	8008c20 <lwip_htons>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8008d30:	2301      	movs	r3, #1
 8008d32:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8008d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d38:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8008d3a:	f107 0310 	add.w	r3, r7, #16
 8008d3e:	220c      	movs	r2, #12
 8008d40:	4619      	mov	r1, r3
 8008d42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d44:	f001 ff92 	bl	800ac6c <pbuf_take>
    hostname = entry->name;
 8008d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4a:	3310      	adds	r3, #16
 8008d4c:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d50:	3b01      	subs	r3, #1
 8008d52:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8008d54:	230c      	movs	r3, #12
 8008d56:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 8008d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d60:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8008d62:	2300      	movs	r3, #0
 8008d64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008d68:	e007      	b.n	8008d7a <dns_send+0xe2>
        ++n;
 8008d6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d6e:	3301      	adds	r3, #1
 8008d70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8008d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d76:	3301      	adds	r3, #1
 8008d78:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8008d80:	d003      	beq.n	8008d8a <dns_send+0xf2>
 8008d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1ef      	bne.n	8008d6a <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 8008d8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 8008d92:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8008d94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d98:	4413      	add	r3, r2
 8008d9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	dc53      	bgt.n	8008e4a <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 8008da2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008da6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008da8:	4619      	mov	r1, r3
 8008daa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dac:	f002 f88c 	bl	800aec8 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8008db0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008db2:	3301      	adds	r3, #1
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008dba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dbc:	f001 ffe8 	bl	800ad90 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8008dc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008dc8:	4413      	add	r3, r2
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	3301      	adds	r3, #1
 8008dce:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1bf      	bne.n	8008d58 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 8008dd8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008dda:	2200      	movs	r2, #0
 8008ddc:	4619      	mov	r1, r3
 8008dde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008de0:	f002 f872 	bl	800aec8 <pbuf_put_at>
    query_idx++;
 8008de4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008de6:	3301      	adds	r3, #1
 8008de8:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8008dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dee:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8008df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008df4:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8008df6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008df8:	f107 010c 	add.w	r1, r7, #12
 8008dfc:	2204      	movs	r2, #4
 8008dfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e00:	f001 ffc6 	bl	800ad90 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	7bdb      	ldrb	r3, [r3, #15]
 8008e08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8008e0c:	2335      	movs	r3, #53	; 0x35
 8008e0e:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8008e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e12:	7adb      	ldrb	r3, [r3, #11]
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4a16      	ldr	r2, [pc, #88]	; (8008e70 <dns_send+0x1d8>)
 8008e18:	4413      	add	r3, r2
 8008e1a:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8008e1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008e20:	4a14      	ldr	r2, [pc, #80]	; (8008e74 <dns_send+0x1dc>)
 8008e22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008e26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e28:	69fa      	ldr	r2, [r7, #28]
 8008e2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e2c:	f008 fce2 	bl	80117f4 <udp_sendto>
 8008e30:	4603      	mov	r3, r0
 8008e32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 8008e36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e38:	f001 fc70 	bl	800a71c <pbuf_free>
 8008e3c:	e002      	b.n	8008e44 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8008e3e:	23ff      	movs	r3, #255	; 0xff
 8008e40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 8008e44:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e48:	e005      	b.n	8008e56 <dns_send+0x1be>
        goto overflow_return;
 8008e4a:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8008e4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e4e:	f001 fc65 	bl	800a71c <pbuf_free>
  return ERR_VAL;
 8008e52:	f06f 0305 	mvn.w	r3, #5
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3740      	adds	r7, #64	; 0x40
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	200002d8 	.word	0x200002d8
 8008e64:	08015988 	.word	0x08015988
 8008e68:	080159b8 	.word	0x080159b8
 8008e6c:	080159d0 	.word	0x080159d0
 8008e70:	20000748 	.word	0x20000748
 8008e74:	200002c8 	.word	0x200002c8

08008e78 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8008e78:	b590      	push	{r4, r7, lr}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	4603      	mov	r3, r0
 8008e80:	6039      	str	r1, [r7, #0]
 8008e82:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8008e84:	2300      	movs	r3, #0
 8008e86:	73fb      	strb	r3, [r7, #15]
 8008e88:	e03d      	b.n	8008f06 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8008e8a:	7bfa      	ldrb	r2, [r7, #15]
 8008e8c:	4957      	ldr	r1, [pc, #348]	; (8008fec <dns_call_found+0x174>)
 8008e8e:	4613      	mov	r3, r2
 8008e90:	005b      	lsls	r3, r3, #1
 8008e92:	4413      	add	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	440b      	add	r3, r1
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d030      	beq.n	8008f00 <dns_call_found+0x88>
 8008e9e:	7bfa      	ldrb	r2, [r7, #15]
 8008ea0:	4952      	ldr	r1, [pc, #328]	; (8008fec <dns_call_found+0x174>)
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	005b      	lsls	r3, r3, #1
 8008ea6:	4413      	add	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	440b      	add	r3, r1
 8008eac:	3308      	adds	r3, #8
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	79fa      	ldrb	r2, [r7, #7]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d124      	bne.n	8008f00 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8008eb6:	7bfa      	ldrb	r2, [r7, #15]
 8008eb8:	494c      	ldr	r1, [pc, #304]	; (8008fec <dns_call_found+0x174>)
 8008eba:	4613      	mov	r3, r2
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	440b      	add	r3, r1
 8008ec4:	681c      	ldr	r4, [r3, #0]
 8008ec6:	79fa      	ldrb	r2, [r7, #7]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	011b      	lsls	r3, r3, #4
 8008ecc:	4413      	add	r3, r2
 8008ece:	011b      	lsls	r3, r3, #4
 8008ed0:	3310      	adds	r3, #16
 8008ed2:	4a47      	ldr	r2, [pc, #284]	; (8008ff0 <dns_call_found+0x178>)
 8008ed4:	1898      	adds	r0, r3, r2
 8008ed6:	7bfa      	ldrb	r2, [r7, #15]
 8008ed8:	4944      	ldr	r1, [pc, #272]	; (8008fec <dns_call_found+0x174>)
 8008eda:	4613      	mov	r3, r2
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	4413      	add	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	440b      	add	r3, r1
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	6839      	ldr	r1, [r7, #0]
 8008eec:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8008eee:	7bfa      	ldrb	r2, [r7, #15]
 8008ef0:	493e      	ldr	r1, [pc, #248]	; (8008fec <dns_call_found+0x174>)
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	005b      	lsls	r3, r3, #1
 8008ef6:	4413      	add	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	440b      	add	r3, r1
 8008efc:	2200      	movs	r2, #0
 8008efe:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	3301      	adds	r3, #1
 8008f04:	73fb      	strb	r3, [r7, #15]
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	2b03      	cmp	r3, #3
 8008f0a:	d9be      	bls.n	8008e8a <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
 8008f10:	e031      	b.n	8008f76 <dns_call_found+0xfe>
    if (i == idx) {
 8008f12:	7bfa      	ldrb	r2, [r7, #15]
 8008f14:	79fb      	ldrb	r3, [r7, #7]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d029      	beq.n	8008f6e <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8008f1a:	7bfa      	ldrb	r2, [r7, #15]
 8008f1c:	4934      	ldr	r1, [pc, #208]	; (8008ff0 <dns_call_found+0x178>)
 8008f1e:	4613      	mov	r3, r2
 8008f20:	011b      	lsls	r3, r3, #4
 8008f22:	4413      	add	r3, r2
 8008f24:	011b      	lsls	r3, r3, #4
 8008f26:	440b      	add	r3, r1
 8008f28:	330a      	adds	r3, #10
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d11f      	bne.n	8008f70 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8008f30:	7bfa      	ldrb	r2, [r7, #15]
 8008f32:	492f      	ldr	r1, [pc, #188]	; (8008ff0 <dns_call_found+0x178>)
 8008f34:	4613      	mov	r3, r2
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	4413      	add	r3, r2
 8008f3a:	011b      	lsls	r3, r3, #4
 8008f3c:	440b      	add	r3, r1
 8008f3e:	330f      	adds	r3, #15
 8008f40:	7819      	ldrb	r1, [r3, #0]
 8008f42:	79fa      	ldrb	r2, [r7, #7]
 8008f44:	482a      	ldr	r0, [pc, #168]	; (8008ff0 <dns_call_found+0x178>)
 8008f46:	4613      	mov	r3, r2
 8008f48:	011b      	lsls	r3, r3, #4
 8008f4a:	4413      	add	r3, r2
 8008f4c:	011b      	lsls	r3, r3, #4
 8008f4e:	4403      	add	r3, r0
 8008f50:	330f      	adds	r3, #15
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	4299      	cmp	r1, r3
 8008f56:	d10b      	bne.n	8008f70 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8008f58:	79fa      	ldrb	r2, [r7, #7]
 8008f5a:	4925      	ldr	r1, [pc, #148]	; (8008ff0 <dns_call_found+0x178>)
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	011b      	lsls	r3, r3, #4
 8008f60:	4413      	add	r3, r2
 8008f62:	011b      	lsls	r3, r3, #4
 8008f64:	440b      	add	r3, r1
 8008f66:	330f      	adds	r3, #15
 8008f68:	2204      	movs	r2, #4
 8008f6a:	701a      	strb	r2, [r3, #0]
        break;
 8008f6c:	e006      	b.n	8008f7c <dns_call_found+0x104>
      continue; /* only check other requests */
 8008f6e:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	3301      	adds	r3, #1
 8008f74:	73fb      	strb	r3, [r7, #15]
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d9ca      	bls.n	8008f12 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8008f7c:	79fa      	ldrb	r2, [r7, #7]
 8008f7e:	491c      	ldr	r1, [pc, #112]	; (8008ff0 <dns_call_found+0x178>)
 8008f80:	4613      	mov	r3, r2
 8008f82:	011b      	lsls	r3, r3, #4
 8008f84:	4413      	add	r3, r2
 8008f86:	011b      	lsls	r3, r3, #4
 8008f88:	440b      	add	r3, r1
 8008f8a:	330f      	adds	r3, #15
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	2b03      	cmp	r3, #3
 8008f90:	d827      	bhi.n	8008fe2 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8008f92:	79fa      	ldrb	r2, [r7, #7]
 8008f94:	4916      	ldr	r1, [pc, #88]	; (8008ff0 <dns_call_found+0x178>)
 8008f96:	4613      	mov	r3, r2
 8008f98:	011b      	lsls	r3, r3, #4
 8008f9a:	4413      	add	r3, r2
 8008f9c:	011b      	lsls	r3, r3, #4
 8008f9e:	440b      	add	r3, r1
 8008fa0:	330f      	adds	r3, #15
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	4b13      	ldr	r3, [pc, #76]	; (8008ff4 <dns_call_found+0x17c>)
 8008fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f008 fe5f 	bl	8011c70 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8008fb2:	79fa      	ldrb	r2, [r7, #7]
 8008fb4:	490e      	ldr	r1, [pc, #56]	; (8008ff0 <dns_call_found+0x178>)
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	011b      	lsls	r3, r3, #4
 8008fba:	4413      	add	r3, r2
 8008fbc:	011b      	lsls	r3, r3, #4
 8008fbe:	440b      	add	r3, r1
 8008fc0:	330f      	adds	r3, #15
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	4b0b      	ldr	r3, [pc, #44]	; (8008ff4 <dns_call_found+0x17c>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8008fce:	79fa      	ldrb	r2, [r7, #7]
 8008fd0:	4907      	ldr	r1, [pc, #28]	; (8008ff0 <dns_call_found+0x178>)
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	011b      	lsls	r3, r3, #4
 8008fd6:	4413      	add	r3, r2
 8008fd8:	011b      	lsls	r3, r3, #4
 8008fda:	440b      	add	r3, r1
 8008fdc:	330f      	adds	r3, #15
 8008fde:	2204      	movs	r2, #4
 8008fe0:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8008fe2:	bf00      	nop
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd90      	pop	{r4, r7, pc}
 8008fea:	bf00      	nop
 8008fec:	20000718 	.word	0x20000718
 8008ff0:	200002d8 	.word	0x200002d8
 8008ff4:	200002c8 	.word	0x200002c8

08008ff8 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8008ffe:	f00b fa59 	bl	80144b4 <rand>
 8009002:	4603      	mov	r3, r0
 8009004:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8009006:	2300      	movs	r3, #0
 8009008:	71fb      	strb	r3, [r7, #7]
 800900a:	e01a      	b.n	8009042 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800900c:	79fa      	ldrb	r2, [r7, #7]
 800900e:	4911      	ldr	r1, [pc, #68]	; (8009054 <dns_create_txid+0x5c>)
 8009010:	4613      	mov	r3, r2
 8009012:	011b      	lsls	r3, r3, #4
 8009014:	4413      	add	r3, r2
 8009016:	011b      	lsls	r3, r3, #4
 8009018:	440b      	add	r3, r1
 800901a:	330a      	adds	r3, #10
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b02      	cmp	r3, #2
 8009020:	d10c      	bne.n	800903c <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8009022:	79fa      	ldrb	r2, [r7, #7]
 8009024:	490b      	ldr	r1, [pc, #44]	; (8009054 <dns_create_txid+0x5c>)
 8009026:	4613      	mov	r3, r2
 8009028:	011b      	lsls	r3, r3, #4
 800902a:	4413      	add	r3, r2
 800902c:	011b      	lsls	r3, r3, #4
 800902e:	440b      	add	r3, r1
 8009030:	3308      	adds	r3, #8
 8009032:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8009034:	88ba      	ldrh	r2, [r7, #4]
 8009036:	429a      	cmp	r2, r3
 8009038:	d100      	bne.n	800903c <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800903a:	e7e0      	b.n	8008ffe <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	3301      	adds	r3, #1
 8009040:	71fb      	strb	r3, [r7, #7]
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	2b03      	cmp	r3, #3
 8009046:	d9e1      	bls.n	800900c <dns_create_txid+0x14>
    }
  }

  return txid;
 8009048:	88bb      	ldrh	r3, [r7, #4]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	200002d8 	.word	0x200002d8

08009058 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8009060:	2300      	movs	r3, #0
 8009062:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00d      	beq.n	8009086 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	7adb      	ldrb	r3, [r3, #11]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d109      	bne.n	8009086 <dns_backupserver_available+0x2e>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	7adb      	ldrb	r3, [r3, #11]
 8009076:	3301      	adds	r3, #1
 8009078:	4a06      	ldr	r2, [pc, #24]	; (8009094 <dns_backupserver_available+0x3c>)
 800907a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <dns_backupserver_available+0x2e>
      ret = 1;
 8009082:	2301      	movs	r3, #1
 8009084:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009086:	7bfb      	ldrb	r3, [r7, #15]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	20000748 	.word	0x20000748

08009098 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 80090a2:	79fa      	ldrb	r2, [r7, #7]
 80090a4:	4613      	mov	r3, r2
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	4413      	add	r3, r2
 80090aa:	011b      	lsls	r3, r3, #4
 80090ac:	4a48      	ldr	r2, [pc, #288]	; (80091d0 <dns_check_entry+0x138>)
 80090ae:	4413      	add	r3, r2
 80090b0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80090b2:	79fb      	ldrb	r3, [r7, #7]
 80090b4:	2b03      	cmp	r3, #3
 80090b6:	d906      	bls.n	80090c6 <dns_check_entry+0x2e>
 80090b8:	4b46      	ldr	r3, [pc, #280]	; (80091d4 <dns_check_entry+0x13c>)
 80090ba:	f240 421c 	movw	r2, #1052	; 0x41c
 80090be:	4946      	ldr	r1, [pc, #280]	; (80091d8 <dns_check_entry+0x140>)
 80090c0:	4846      	ldr	r0, [pc, #280]	; (80091dc <dns_check_entry+0x144>)
 80090c2:	f00b f969 	bl	8014398 <iprintf>

  switch (entry->state) {
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	7a9b      	ldrb	r3, [r3, #10]
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	d86f      	bhi.n	80091ae <dns_check_entry+0x116>
 80090ce:	a201      	add	r2, pc, #4	; (adr r2, 80090d4 <dns_check_entry+0x3c>)
 80090d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d4:	080091bf 	.word	0x080091bf
 80090d8:	080090e5 	.word	0x080090e5
 80090dc:	08009117 	.word	0x08009117
 80090e0:	0800918d 	.word	0x0800918d
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 80090e4:	f7ff ff88 	bl	8008ff8 <dns_create_txid>
 80090e8:	4603      	mov	r3, r0
 80090ea:	461a      	mov	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2202      	movs	r2, #2
 80090f4:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2200      	movs	r2, #0
 80090fa:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2201      	movs	r2, #1
 8009100:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8009108:	79fb      	ldrb	r3, [r7, #7]
 800910a:	4618      	mov	r0, r3
 800910c:	f7ff fdc4 	bl	8008c98 <dns_send>
 8009110:	4603      	mov	r3, r0
 8009112:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8009114:	e058      	b.n	80091c8 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	7b1b      	ldrb	r3, [r3, #12]
 800911a:	3b01      	subs	r3, #1
 800911c:	b2da      	uxtb	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	731a      	strb	r2, [r3, #12]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	7b1b      	ldrb	r3, [r3, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d14b      	bne.n	80091c2 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	7b5b      	ldrb	r3, [r3, #13]
 800912e:	3301      	adds	r3, #1
 8009130:	b2da      	uxtb	r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	735a      	strb	r2, [r3, #13]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	7b5b      	ldrb	r3, [r3, #13]
 800913a:	2b04      	cmp	r3, #4
 800913c:	d11b      	bne.n	8009176 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f7ff ff8a 	bl	8009058 <dns_backupserver_available>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00c      	beq.n	8009164 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	7adb      	ldrb	r3, [r3, #11]
 800914e:	3301      	adds	r3, #1
 8009150:	b2da      	uxtb	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2201      	movs	r2, #1
 800915a:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	735a      	strb	r2, [r3, #13]
 8009162:	e00c      	b.n	800917e <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8009164:	79fb      	ldrb	r3, [r7, #7]
 8009166:	2100      	movs	r1, #0
 8009168:	4618      	mov	r0, r3
 800916a:	f7ff fe85 	bl	8008e78 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	729a      	strb	r2, [r3, #10]
            break;
 8009174:	e028      	b.n	80091c8 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	7b5a      	ldrb	r2, [r3, #13]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800917e:	79fb      	ldrb	r3, [r7, #7]
 8009180:	4618      	mov	r0, r3
 8009182:	f7ff fd89 	bl	8008c98 <dns_send>
 8009186:	4603      	mov	r3, r0
 8009188:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800918a:	e01a      	b.n	80091c2 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d008      	beq.n	80091a6 <dns_check_entry+0x10e>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	1e5a      	subs	r2, r3, #1
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10f      	bne.n	80091c6 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	729a      	strb	r2, [r3, #10]
      }
      break;
 80091ac:	e00b      	b.n	80091c6 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80091ae:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <dns_check_entry+0x13c>)
 80091b0:	f240 425b 	movw	r2, #1115	; 0x45b
 80091b4:	490a      	ldr	r1, [pc, #40]	; (80091e0 <dns_check_entry+0x148>)
 80091b6:	4809      	ldr	r0, [pc, #36]	; (80091dc <dns_check_entry+0x144>)
 80091b8:	f00b f8ee 	bl	8014398 <iprintf>
      break;
 80091bc:	e004      	b.n	80091c8 <dns_check_entry+0x130>
      break;
 80091be:	bf00      	nop
 80091c0:	e002      	b.n	80091c8 <dns_check_entry+0x130>
      break;
 80091c2:	bf00      	nop
 80091c4:	e000      	b.n	80091c8 <dns_check_entry+0x130>
      break;
 80091c6:	bf00      	nop
  }
}
 80091c8:	bf00      	nop
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	200002d8 	.word	0x200002d8
 80091d4:	08015988 	.word	0x08015988
 80091d8:	080159f8 	.word	0x080159f8
 80091dc:	080159d0 	.word	0x080159d0
 80091e0:	08015a14 	.word	0x08015a14

080091e4 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80091ea:	2300      	movs	r3, #0
 80091ec:	71fb      	strb	r3, [r7, #7]
 80091ee:	e006      	b.n	80091fe <dns_check_entries+0x1a>
    dns_check_entry(i);
 80091f0:	79fb      	ldrb	r3, [r7, #7]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7ff ff50 	bl	8009098 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	3301      	adds	r3, #1
 80091fc:	71fb      	strb	r3, [r7, #7]
 80091fe:	79fb      	ldrb	r3, [r7, #7]
 8009200:	2b03      	cmp	r3, #3
 8009202:	d9f5      	bls.n	80091f0 <dns_check_entries+0xc>
  }
}
 8009204:	bf00      	nop
 8009206:	bf00      	nop
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b082      	sub	sp, #8
 8009212:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009214:	2300      	movs	r3, #0
 8009216:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009218:	f000 f8d6 	bl	80093c8 <mem_init>
  memp_init();
 800921c:	f000 fbdc 	bl	80099d8 <memp_init>
  pbuf_init();
  netif_init();
 8009220:	f000 fc94 	bl	8009b4c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009224:	f008 f924 	bl	8011470 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009228:	f001 fe70 	bl	800af0c <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800922c:	f7ff fd26 	bl	8008c7c <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009230:	f008 f894 	bl	801135c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009234:	bf00      	nop
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	4603      	mov	r3, r0
 8009244:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009246:	4b05      	ldr	r3, [pc, #20]	; (800925c <ptr_to_mem+0x20>)
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	88fb      	ldrh	r3, [r7, #6]
 800924c:	4413      	add	r3, r2
}
 800924e:	4618      	mov	r0, r3
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	20000750 	.word	0x20000750

08009260 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009268:	4b05      	ldr	r3, [pc, #20]	; (8009280 <mem_to_ptr+0x20>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	b29b      	uxth	r3, r3
}
 8009272:	4618      	mov	r0, r3
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	20000750 	.word	0x20000750

08009284 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009284:	b590      	push	{r4, r7, lr}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800928c:	4b45      	ldr	r3, [pc, #276]	; (80093a4 <plug_holes+0x120>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	429a      	cmp	r2, r3
 8009294:	d206      	bcs.n	80092a4 <plug_holes+0x20>
 8009296:	4b44      	ldr	r3, [pc, #272]	; (80093a8 <plug_holes+0x124>)
 8009298:	f240 12df 	movw	r2, #479	; 0x1df
 800929c:	4943      	ldr	r1, [pc, #268]	; (80093ac <plug_holes+0x128>)
 800929e:	4844      	ldr	r0, [pc, #272]	; (80093b0 <plug_holes+0x12c>)
 80092a0:	f00b f87a 	bl	8014398 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80092a4:	4b43      	ldr	r3, [pc, #268]	; (80093b4 <plug_holes+0x130>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d306      	bcc.n	80092bc <plug_holes+0x38>
 80092ae:	4b3e      	ldr	r3, [pc, #248]	; (80093a8 <plug_holes+0x124>)
 80092b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80092b4:	4940      	ldr	r1, [pc, #256]	; (80093b8 <plug_holes+0x134>)
 80092b6:	483e      	ldr	r0, [pc, #248]	; (80093b0 <plug_holes+0x12c>)
 80092b8:	f00b f86e 	bl	8014398 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	791b      	ldrb	r3, [r3, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d006      	beq.n	80092d2 <plug_holes+0x4e>
 80092c4:	4b38      	ldr	r3, [pc, #224]	; (80093a8 <plug_holes+0x124>)
 80092c6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80092ca:	493c      	ldr	r1, [pc, #240]	; (80093bc <plug_holes+0x138>)
 80092cc:	4838      	ldr	r0, [pc, #224]	; (80093b0 <plug_holes+0x12c>)
 80092ce:	f00b f863 	bl	8014398 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	881b      	ldrh	r3, [r3, #0]
 80092d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80092da:	d906      	bls.n	80092ea <plug_holes+0x66>
 80092dc:	4b32      	ldr	r3, [pc, #200]	; (80093a8 <plug_holes+0x124>)
 80092de:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80092e2:	4937      	ldr	r1, [pc, #220]	; (80093c0 <plug_holes+0x13c>)
 80092e4:	4832      	ldr	r0, [pc, #200]	; (80093b0 <plug_holes+0x12c>)
 80092e6:	f00b f857 	bl	8014398 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	881b      	ldrh	r3, [r3, #0]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7ff ffa4 	bl	800923c <ptr_to_mem>
 80092f4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d024      	beq.n	8009348 <plug_holes+0xc4>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	791b      	ldrb	r3, [r3, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d120      	bne.n	8009348 <plug_holes+0xc4>
 8009306:	4b2b      	ldr	r3, [pc, #172]	; (80093b4 <plug_holes+0x130>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	429a      	cmp	r2, r3
 800930e:	d01b      	beq.n	8009348 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009310:	4b2c      	ldr	r3, [pc, #176]	; (80093c4 <plug_holes+0x140>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	429a      	cmp	r2, r3
 8009318:	d102      	bne.n	8009320 <plug_holes+0x9c>
      lfree = mem;
 800931a:	4a2a      	ldr	r2, [pc, #168]	; (80093c4 <plug_holes+0x140>)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	881a      	ldrh	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009330:	d00a      	beq.n	8009348 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	4618      	mov	r0, r3
 8009338:	f7ff ff80 	bl	800923c <ptr_to_mem>
 800933c:	4604      	mov	r4, r0
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7ff ff8e 	bl	8009260 <mem_to_ptr>
 8009344:	4603      	mov	r3, r0
 8009346:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	885b      	ldrh	r3, [r3, #2]
 800934c:	4618      	mov	r0, r3
 800934e:	f7ff ff75 	bl	800923c <ptr_to_mem>
 8009352:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009354:	68ba      	ldr	r2, [r7, #8]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	429a      	cmp	r2, r3
 800935a:	d01f      	beq.n	800939c <plug_holes+0x118>
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	791b      	ldrb	r3, [r3, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d11b      	bne.n	800939c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009364:	4b17      	ldr	r3, [pc, #92]	; (80093c4 <plug_holes+0x140>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	429a      	cmp	r2, r3
 800936c:	d102      	bne.n	8009374 <plug_holes+0xf0>
      lfree = pmem;
 800936e:	4a15      	ldr	r2, [pc, #84]	; (80093c4 <plug_holes+0x140>)
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	881a      	ldrh	r2, [r3, #0]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009384:	d00a      	beq.n	800939c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	881b      	ldrh	r3, [r3, #0]
 800938a:	4618      	mov	r0, r3
 800938c:	f7ff ff56 	bl	800923c <ptr_to_mem>
 8009390:	4604      	mov	r4, r0
 8009392:	68b8      	ldr	r0, [r7, #8]
 8009394:	f7ff ff64 	bl	8009260 <mem_to_ptr>
 8009398:	4603      	mov	r3, r0
 800939a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800939c:	bf00      	nop
 800939e:	3714      	adds	r7, #20
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd90      	pop	{r4, r7, pc}
 80093a4:	20000750 	.word	0x20000750
 80093a8:	08015a34 	.word	0x08015a34
 80093ac:	08015a64 	.word	0x08015a64
 80093b0:	08015a7c 	.word	0x08015a7c
 80093b4:	20000754 	.word	0x20000754
 80093b8:	08015aa4 	.word	0x08015aa4
 80093bc:	08015ac0 	.word	0x08015ac0
 80093c0:	08015adc 	.word	0x08015adc
 80093c4:	20000758 	.word	0x20000758

080093c8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80093ce:	4b18      	ldr	r3, [pc, #96]	; (8009430 <mem_init+0x68>)
 80093d0:	3303      	adds	r3, #3
 80093d2:	f023 0303 	bic.w	r3, r3, #3
 80093d6:	461a      	mov	r2, r3
 80093d8:	4b16      	ldr	r3, [pc, #88]	; (8009434 <mem_init+0x6c>)
 80093da:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80093dc:	4b15      	ldr	r3, [pc, #84]	; (8009434 <mem_init+0x6c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80093e8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80093f6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80093fa:	f7ff ff1f 	bl	800923c <ptr_to_mem>
 80093fe:	4603      	mov	r3, r0
 8009400:	4a0d      	ldr	r2, [pc, #52]	; (8009438 <mem_init+0x70>)
 8009402:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009404:	4b0c      	ldr	r3, [pc, #48]	; (8009438 <mem_init+0x70>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2201      	movs	r2, #1
 800940a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800940c:	4b0a      	ldr	r3, [pc, #40]	; (8009438 <mem_init+0x70>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009414:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009416:	4b08      	ldr	r3, [pc, #32]	; (8009438 <mem_init+0x70>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800941e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009420:	4b04      	ldr	r3, [pc, #16]	; (8009434 <mem_init+0x6c>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a05      	ldr	r2, [pc, #20]	; (800943c <mem_init+0x74>)
 8009426:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	20004094 	.word	0x20004094
 8009434:	20000750 	.word	0x20000750
 8009438:	20000754 	.word	0x20000754
 800943c:	20000758 	.word	0x20000758

08009440 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f7ff ff09 	bl	8009260 <mem_to_ptr>
 800944e:	4603      	mov	r3, r0
 8009450:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	881b      	ldrh	r3, [r3, #0]
 8009456:	4618      	mov	r0, r3
 8009458:	f7ff fef0 	bl	800923c <ptr_to_mem>
 800945c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	885b      	ldrh	r3, [r3, #2]
 8009462:	4618      	mov	r0, r3
 8009464:	f7ff feea 	bl	800923c <ptr_to_mem>
 8009468:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009472:	d818      	bhi.n	80094a6 <mem_link_valid+0x66>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	885b      	ldrh	r3, [r3, #2]
 8009478:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800947c:	d813      	bhi.n	80094a6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009482:	8afa      	ldrh	r2, [r7, #22]
 8009484:	429a      	cmp	r2, r3
 8009486:	d004      	beq.n	8009492 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	881b      	ldrh	r3, [r3, #0]
 800948c:	8afa      	ldrh	r2, [r7, #22]
 800948e:	429a      	cmp	r2, r3
 8009490:	d109      	bne.n	80094a6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009492:	4b08      	ldr	r3, [pc, #32]	; (80094b4 <mem_link_valid+0x74>)
 8009494:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	429a      	cmp	r2, r3
 800949a:	d006      	beq.n	80094aa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	885b      	ldrh	r3, [r3, #2]
 80094a0:	8afa      	ldrh	r2, [r7, #22]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d001      	beq.n	80094aa <mem_link_valid+0x6a>
    return 0;
 80094a6:	2300      	movs	r3, #0
 80094a8:	e000      	b.n	80094ac <mem_link_valid+0x6c>
  }
  return 1;
 80094aa:	2301      	movs	r3, #1
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3718      	adds	r7, #24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	20000754 	.word	0x20000754

080094b8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d04c      	beq.n	8009560 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f003 0303 	and.w	r3, r3, #3
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d007      	beq.n	80094e0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80094d0:	4b25      	ldr	r3, [pc, #148]	; (8009568 <mem_free+0xb0>)
 80094d2:	f240 2273 	movw	r2, #627	; 0x273
 80094d6:	4925      	ldr	r1, [pc, #148]	; (800956c <mem_free+0xb4>)
 80094d8:	4825      	ldr	r0, [pc, #148]	; (8009570 <mem_free+0xb8>)
 80094da:	f00a ff5d 	bl	8014398 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80094de:	e040      	b.n	8009562 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	3b08      	subs	r3, #8
 80094e4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80094e6:	4b23      	ldr	r3, [pc, #140]	; (8009574 <mem_free+0xbc>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d306      	bcc.n	80094fe <mem_free+0x46>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f103 020c 	add.w	r2, r3, #12
 80094f6:	4b20      	ldr	r3, [pc, #128]	; (8009578 <mem_free+0xc0>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d907      	bls.n	800950e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80094fe:	4b1a      	ldr	r3, [pc, #104]	; (8009568 <mem_free+0xb0>)
 8009500:	f240 227f 	movw	r2, #639	; 0x27f
 8009504:	491d      	ldr	r1, [pc, #116]	; (800957c <mem_free+0xc4>)
 8009506:	481a      	ldr	r0, [pc, #104]	; (8009570 <mem_free+0xb8>)
 8009508:	f00a ff46 	bl	8014398 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800950c:	e029      	b.n	8009562 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	791b      	ldrb	r3, [r3, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d107      	bne.n	8009526 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009516:	4b14      	ldr	r3, [pc, #80]	; (8009568 <mem_free+0xb0>)
 8009518:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800951c:	4918      	ldr	r1, [pc, #96]	; (8009580 <mem_free+0xc8>)
 800951e:	4814      	ldr	r0, [pc, #80]	; (8009570 <mem_free+0xb8>)
 8009520:	f00a ff3a 	bl	8014398 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009524:	e01d      	b.n	8009562 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f7ff ff8a 	bl	8009440 <mem_link_valid>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d107      	bne.n	8009542 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009532:	4b0d      	ldr	r3, [pc, #52]	; (8009568 <mem_free+0xb0>)
 8009534:	f240 2295 	movw	r2, #661	; 0x295
 8009538:	4912      	ldr	r1, [pc, #72]	; (8009584 <mem_free+0xcc>)
 800953a:	480d      	ldr	r0, [pc, #52]	; (8009570 <mem_free+0xb8>)
 800953c:	f00a ff2c 	bl	8014398 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009540:	e00f      	b.n	8009562 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009548:	4b0f      	ldr	r3, [pc, #60]	; (8009588 <mem_free+0xd0>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	429a      	cmp	r2, r3
 8009550:	d202      	bcs.n	8009558 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009552:	4a0d      	ldr	r2, [pc, #52]	; (8009588 <mem_free+0xd0>)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f7ff fe93 	bl	8009284 <plug_holes>
 800955e:	e000      	b.n	8009562 <mem_free+0xaa>
    return;
 8009560:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	08015a34 	.word	0x08015a34
 800956c:	08015b08 	.word	0x08015b08
 8009570:	08015a7c 	.word	0x08015a7c
 8009574:	20000750 	.word	0x20000750
 8009578:	20000754 	.word	0x20000754
 800957c:	08015b2c 	.word	0x08015b2c
 8009580:	08015b48 	.word	0x08015b48
 8009584:	08015b70 	.word	0x08015b70
 8009588:	20000758 	.word	0x20000758

0800958c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b088      	sub	sp, #32
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009598:	887b      	ldrh	r3, [r7, #2]
 800959a:	3303      	adds	r3, #3
 800959c:	b29b      	uxth	r3, r3
 800959e:	f023 0303 	bic.w	r3, r3, #3
 80095a2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80095a4:	8bfb      	ldrh	r3, [r7, #30]
 80095a6:	2b0b      	cmp	r3, #11
 80095a8:	d801      	bhi.n	80095ae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80095aa:	230c      	movs	r3, #12
 80095ac:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80095ae:	8bfb      	ldrh	r3, [r7, #30]
 80095b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80095b4:	d803      	bhi.n	80095be <mem_trim+0x32>
 80095b6:	8bfa      	ldrh	r2, [r7, #30]
 80095b8:	887b      	ldrh	r3, [r7, #2]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d201      	bcs.n	80095c2 <mem_trim+0x36>
    return NULL;
 80095be:	2300      	movs	r3, #0
 80095c0:	e0cc      	b.n	800975c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80095c2:	4b68      	ldr	r3, [pc, #416]	; (8009764 <mem_trim+0x1d8>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d304      	bcc.n	80095d6 <mem_trim+0x4a>
 80095cc:	4b66      	ldr	r3, [pc, #408]	; (8009768 <mem_trim+0x1dc>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d306      	bcc.n	80095e4 <mem_trim+0x58>
 80095d6:	4b65      	ldr	r3, [pc, #404]	; (800976c <mem_trim+0x1e0>)
 80095d8:	f240 22d1 	movw	r2, #721	; 0x2d1
 80095dc:	4964      	ldr	r1, [pc, #400]	; (8009770 <mem_trim+0x1e4>)
 80095de:	4865      	ldr	r0, [pc, #404]	; (8009774 <mem_trim+0x1e8>)
 80095e0:	f00a feda 	bl	8014398 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80095e4:	4b5f      	ldr	r3, [pc, #380]	; (8009764 <mem_trim+0x1d8>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d304      	bcc.n	80095f8 <mem_trim+0x6c>
 80095ee:	4b5e      	ldr	r3, [pc, #376]	; (8009768 <mem_trim+0x1dc>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d301      	bcc.n	80095fc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	e0af      	b.n	800975c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	3b08      	subs	r3, #8
 8009600:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009602:	69b8      	ldr	r0, [r7, #24]
 8009604:	f7ff fe2c 	bl	8009260 <mem_to_ptr>
 8009608:	4603      	mov	r3, r0
 800960a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	881a      	ldrh	r2, [r3, #0]
 8009610:	8afb      	ldrh	r3, [r7, #22]
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	b29b      	uxth	r3, r3
 8009616:	3b08      	subs	r3, #8
 8009618:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800961a:	8bfa      	ldrh	r2, [r7, #30]
 800961c:	8abb      	ldrh	r3, [r7, #20]
 800961e:	429a      	cmp	r2, r3
 8009620:	d906      	bls.n	8009630 <mem_trim+0xa4>
 8009622:	4b52      	ldr	r3, [pc, #328]	; (800976c <mem_trim+0x1e0>)
 8009624:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009628:	4953      	ldr	r1, [pc, #332]	; (8009778 <mem_trim+0x1ec>)
 800962a:	4852      	ldr	r0, [pc, #328]	; (8009774 <mem_trim+0x1e8>)
 800962c:	f00a feb4 	bl	8014398 <iprintf>
  if (newsize > size) {
 8009630:	8bfa      	ldrh	r2, [r7, #30]
 8009632:	8abb      	ldrh	r3, [r7, #20]
 8009634:	429a      	cmp	r2, r3
 8009636:	d901      	bls.n	800963c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8009638:	2300      	movs	r3, #0
 800963a:	e08f      	b.n	800975c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800963c:	8bfa      	ldrh	r2, [r7, #30]
 800963e:	8abb      	ldrh	r3, [r7, #20]
 8009640:	429a      	cmp	r2, r3
 8009642:	d101      	bne.n	8009648 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	e089      	b.n	800975c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	881b      	ldrh	r3, [r3, #0]
 800964c:	4618      	mov	r0, r3
 800964e:	f7ff fdf5 	bl	800923c <ptr_to_mem>
 8009652:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	791b      	ldrb	r3, [r3, #4]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d13f      	bne.n	80096dc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009664:	d106      	bne.n	8009674 <mem_trim+0xe8>
 8009666:	4b41      	ldr	r3, [pc, #260]	; (800976c <mem_trim+0x1e0>)
 8009668:	f240 22f5 	movw	r2, #757	; 0x2f5
 800966c:	4943      	ldr	r1, [pc, #268]	; (800977c <mem_trim+0x1f0>)
 800966e:	4841      	ldr	r0, [pc, #260]	; (8009774 <mem_trim+0x1e8>)
 8009670:	f00a fe92 	bl	8014398 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800967a:	8afa      	ldrh	r2, [r7, #22]
 800967c:	8bfb      	ldrh	r3, [r7, #30]
 800967e:	4413      	add	r3, r2
 8009680:	b29b      	uxth	r3, r3
 8009682:	3308      	adds	r3, #8
 8009684:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009686:	4b3e      	ldr	r3, [pc, #248]	; (8009780 <mem_trim+0x1f4>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	429a      	cmp	r2, r3
 800968e:	d106      	bne.n	800969e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8009690:	89fb      	ldrh	r3, [r7, #14]
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff fdd2 	bl	800923c <ptr_to_mem>
 8009698:	4603      	mov	r3, r0
 800969a:	4a39      	ldr	r2, [pc, #228]	; (8009780 <mem_trim+0x1f4>)
 800969c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800969e:	89fb      	ldrh	r3, [r7, #14]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7ff fdcb 	bl	800923c <ptr_to_mem>
 80096a6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	2200      	movs	r2, #0
 80096ac:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	89ba      	ldrh	r2, [r7, #12]
 80096b2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	8afa      	ldrh	r2, [r7, #22]
 80096b8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	89fa      	ldrh	r2, [r7, #14]
 80096be:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	881b      	ldrh	r3, [r3, #0]
 80096c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80096c8:	d047      	beq.n	800975a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7ff fdb4 	bl	800923c <ptr_to_mem>
 80096d4:	4602      	mov	r2, r0
 80096d6:	89fb      	ldrh	r3, [r7, #14]
 80096d8:	8053      	strh	r3, [r2, #2]
 80096da:	e03e      	b.n	800975a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80096dc:	8bfb      	ldrh	r3, [r7, #30]
 80096de:	f103 0214 	add.w	r2, r3, #20
 80096e2:	8abb      	ldrh	r3, [r7, #20]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d838      	bhi.n	800975a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80096e8:	8afa      	ldrh	r2, [r7, #22]
 80096ea:	8bfb      	ldrh	r3, [r7, #30]
 80096ec:	4413      	add	r3, r2
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	3308      	adds	r3, #8
 80096f2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	881b      	ldrh	r3, [r3, #0]
 80096f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80096fc:	d106      	bne.n	800970c <mem_trim+0x180>
 80096fe:	4b1b      	ldr	r3, [pc, #108]	; (800976c <mem_trim+0x1e0>)
 8009700:	f240 3216 	movw	r2, #790	; 0x316
 8009704:	491d      	ldr	r1, [pc, #116]	; (800977c <mem_trim+0x1f0>)
 8009706:	481b      	ldr	r0, [pc, #108]	; (8009774 <mem_trim+0x1e8>)
 8009708:	f00a fe46 	bl	8014398 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800970c:	89fb      	ldrh	r3, [r7, #14]
 800970e:	4618      	mov	r0, r3
 8009710:	f7ff fd94 	bl	800923c <ptr_to_mem>
 8009714:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009716:	4b1a      	ldr	r3, [pc, #104]	; (8009780 <mem_trim+0x1f4>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	693a      	ldr	r2, [r7, #16]
 800971c:	429a      	cmp	r2, r3
 800971e:	d202      	bcs.n	8009726 <mem_trim+0x19a>
      lfree = mem2;
 8009720:	4a17      	ldr	r2, [pc, #92]	; (8009780 <mem_trim+0x1f4>)
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	2200      	movs	r2, #0
 800972a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	881a      	ldrh	r2, [r3, #0]
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	8afa      	ldrh	r2, [r7, #22]
 8009738:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	89fa      	ldrh	r2, [r7, #14]
 800973e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	881b      	ldrh	r3, [r3, #0]
 8009744:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009748:	d007      	beq.n	800975a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	4618      	mov	r0, r3
 8009750:	f7ff fd74 	bl	800923c <ptr_to_mem>
 8009754:	4602      	mov	r2, r0
 8009756:	89fb      	ldrh	r3, [r7, #14]
 8009758:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800975a:	687b      	ldr	r3, [r7, #4]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3720      	adds	r7, #32
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	20000750 	.word	0x20000750
 8009768:	20000754 	.word	0x20000754
 800976c:	08015a34 	.word	0x08015a34
 8009770:	08015ba4 	.word	0x08015ba4
 8009774:	08015a7c 	.word	0x08015a7c
 8009778:	08015bbc 	.word	0x08015bbc
 800977c:	08015bdc 	.word	0x08015bdc
 8009780:	20000758 	.word	0x20000758

08009784 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b088      	sub	sp, #32
 8009788:	af00      	add	r7, sp, #0
 800978a:	4603      	mov	r3, r0
 800978c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800978e:	88fb      	ldrh	r3, [r7, #6]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <mem_malloc+0x14>
    return NULL;
 8009794:	2300      	movs	r3, #0
 8009796:	e0d9      	b.n	800994c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009798:	88fb      	ldrh	r3, [r7, #6]
 800979a:	3303      	adds	r3, #3
 800979c:	b29b      	uxth	r3, r3
 800979e:	f023 0303 	bic.w	r3, r3, #3
 80097a2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80097a4:	8bbb      	ldrh	r3, [r7, #28]
 80097a6:	2b0b      	cmp	r3, #11
 80097a8:	d801      	bhi.n	80097ae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80097aa:	230c      	movs	r3, #12
 80097ac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80097ae:	8bbb      	ldrh	r3, [r7, #28]
 80097b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80097b4:	d803      	bhi.n	80097be <mem_malloc+0x3a>
 80097b6:	8bba      	ldrh	r2, [r7, #28]
 80097b8:	88fb      	ldrh	r3, [r7, #6]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d201      	bcs.n	80097c2 <mem_malloc+0x3e>
    return NULL;
 80097be:	2300      	movs	r3, #0
 80097c0:	e0c4      	b.n	800994c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80097c2:	4b64      	ldr	r3, [pc, #400]	; (8009954 <mem_malloc+0x1d0>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7ff fd4a 	bl	8009260 <mem_to_ptr>
 80097cc:	4603      	mov	r3, r0
 80097ce:	83fb      	strh	r3, [r7, #30]
 80097d0:	e0b4      	b.n	800993c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80097d2:	8bfb      	ldrh	r3, [r7, #30]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7ff fd31 	bl	800923c <ptr_to_mem>
 80097da:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	791b      	ldrb	r3, [r3, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f040 80a4 	bne.w	800992e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	461a      	mov	r2, r3
 80097ec:	8bfb      	ldrh	r3, [r7, #30]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	f1a3 0208 	sub.w	r2, r3, #8
 80097f4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80097f6:	429a      	cmp	r2, r3
 80097f8:	f0c0 8099 	bcc.w	800992e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	881b      	ldrh	r3, [r3, #0]
 8009800:	461a      	mov	r2, r3
 8009802:	8bfb      	ldrh	r3, [r7, #30]
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	f1a3 0208 	sub.w	r2, r3, #8
 800980a:	8bbb      	ldrh	r3, [r7, #28]
 800980c:	3314      	adds	r3, #20
 800980e:	429a      	cmp	r2, r3
 8009810:	d333      	bcc.n	800987a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009812:	8bfa      	ldrh	r2, [r7, #30]
 8009814:	8bbb      	ldrh	r3, [r7, #28]
 8009816:	4413      	add	r3, r2
 8009818:	b29b      	uxth	r3, r3
 800981a:	3308      	adds	r3, #8
 800981c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800981e:	8a7b      	ldrh	r3, [r7, #18]
 8009820:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009824:	d106      	bne.n	8009834 <mem_malloc+0xb0>
 8009826:	4b4c      	ldr	r3, [pc, #304]	; (8009958 <mem_malloc+0x1d4>)
 8009828:	f240 3287 	movw	r2, #903	; 0x387
 800982c:	494b      	ldr	r1, [pc, #300]	; (800995c <mem_malloc+0x1d8>)
 800982e:	484c      	ldr	r0, [pc, #304]	; (8009960 <mem_malloc+0x1dc>)
 8009830:	f00a fdb2 	bl	8014398 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009834:	8a7b      	ldrh	r3, [r7, #18]
 8009836:	4618      	mov	r0, r3
 8009838:	f7ff fd00 	bl	800923c <ptr_to_mem>
 800983c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	881a      	ldrh	r2, [r3, #0]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	8bfa      	ldrh	r2, [r7, #30]
 8009850:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	8a7a      	ldrh	r2, [r7, #18]
 8009856:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	2201      	movs	r2, #1
 800985c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	881b      	ldrh	r3, [r3, #0]
 8009862:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009866:	d00b      	beq.n	8009880 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	4618      	mov	r0, r3
 800986e:	f7ff fce5 	bl	800923c <ptr_to_mem>
 8009872:	4602      	mov	r2, r0
 8009874:	8a7b      	ldrh	r3, [r7, #18]
 8009876:	8053      	strh	r3, [r2, #2]
 8009878:	e002      	b.n	8009880 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2201      	movs	r2, #1
 800987e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009880:	4b34      	ldr	r3, [pc, #208]	; (8009954 <mem_malloc+0x1d0>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	429a      	cmp	r2, r3
 8009888:	d127      	bne.n	80098da <mem_malloc+0x156>
          struct mem *cur = lfree;
 800988a:	4b32      	ldr	r3, [pc, #200]	; (8009954 <mem_malloc+0x1d0>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009890:	e005      	b.n	800989e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	881b      	ldrh	r3, [r3, #0]
 8009896:	4618      	mov	r0, r3
 8009898:	f7ff fcd0 	bl	800923c <ptr_to_mem>
 800989c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	791b      	ldrb	r3, [r3, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d004      	beq.n	80098b0 <mem_malloc+0x12c>
 80098a6:	4b2f      	ldr	r3, [pc, #188]	; (8009964 <mem_malloc+0x1e0>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	69ba      	ldr	r2, [r7, #24]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d1f0      	bne.n	8009892 <mem_malloc+0x10e>
          }
          lfree = cur;
 80098b0:	4a28      	ldr	r2, [pc, #160]	; (8009954 <mem_malloc+0x1d0>)
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80098b6:	4b27      	ldr	r3, [pc, #156]	; (8009954 <mem_malloc+0x1d0>)
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	4b2a      	ldr	r3, [pc, #168]	; (8009964 <mem_malloc+0x1e0>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d00b      	beq.n	80098da <mem_malloc+0x156>
 80098c2:	4b24      	ldr	r3, [pc, #144]	; (8009954 <mem_malloc+0x1d0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	791b      	ldrb	r3, [r3, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d006      	beq.n	80098da <mem_malloc+0x156>
 80098cc:	4b22      	ldr	r3, [pc, #136]	; (8009958 <mem_malloc+0x1d4>)
 80098ce:	f240 32b5 	movw	r2, #949	; 0x3b5
 80098d2:	4925      	ldr	r1, [pc, #148]	; (8009968 <mem_malloc+0x1e4>)
 80098d4:	4822      	ldr	r0, [pc, #136]	; (8009960 <mem_malloc+0x1dc>)
 80098d6:	f00a fd5f 	bl	8014398 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80098da:	8bba      	ldrh	r2, [r7, #28]
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	4413      	add	r3, r2
 80098e0:	3308      	adds	r3, #8
 80098e2:	4a20      	ldr	r2, [pc, #128]	; (8009964 <mem_malloc+0x1e0>)
 80098e4:	6812      	ldr	r2, [r2, #0]
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d906      	bls.n	80098f8 <mem_malloc+0x174>
 80098ea:	4b1b      	ldr	r3, [pc, #108]	; (8009958 <mem_malloc+0x1d4>)
 80098ec:	f240 32b9 	movw	r2, #953	; 0x3b9
 80098f0:	491e      	ldr	r1, [pc, #120]	; (800996c <mem_malloc+0x1e8>)
 80098f2:	481b      	ldr	r0, [pc, #108]	; (8009960 <mem_malloc+0x1dc>)
 80098f4:	f00a fd50 	bl	8014398 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f003 0303 	and.w	r3, r3, #3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d006      	beq.n	8009910 <mem_malloc+0x18c>
 8009902:	4b15      	ldr	r3, [pc, #84]	; (8009958 <mem_malloc+0x1d4>)
 8009904:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009908:	4919      	ldr	r1, [pc, #100]	; (8009970 <mem_malloc+0x1ec>)
 800990a:	4815      	ldr	r0, [pc, #84]	; (8009960 <mem_malloc+0x1dc>)
 800990c:	f00a fd44 	bl	8014398 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	f003 0303 	and.w	r3, r3, #3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d006      	beq.n	8009928 <mem_malloc+0x1a4>
 800991a:	4b0f      	ldr	r3, [pc, #60]	; (8009958 <mem_malloc+0x1d4>)
 800991c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009920:	4914      	ldr	r1, [pc, #80]	; (8009974 <mem_malloc+0x1f0>)
 8009922:	480f      	ldr	r0, [pc, #60]	; (8009960 <mem_malloc+0x1dc>)
 8009924:	f00a fd38 	bl	8014398 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	3308      	adds	r3, #8
 800992c:	e00e      	b.n	800994c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800992e:	8bfb      	ldrh	r3, [r7, #30]
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff fc83 	bl	800923c <ptr_to_mem>
 8009936:	4603      	mov	r3, r0
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800993c:	8bfa      	ldrh	r2, [r7, #30]
 800993e:	8bbb      	ldrh	r3, [r7, #28]
 8009940:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009944:	429a      	cmp	r2, r3
 8009946:	f4ff af44 	bcc.w	80097d2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3720      	adds	r7, #32
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	20000758 	.word	0x20000758
 8009958:	08015a34 	.word	0x08015a34
 800995c:	08015bdc 	.word	0x08015bdc
 8009960:	08015a7c 	.word	0x08015a7c
 8009964:	20000754 	.word	0x20000754
 8009968:	08015bf0 	.word	0x08015bf0
 800996c:	08015c0c 	.word	0x08015c0c
 8009970:	08015c3c 	.word	0x08015c3c
 8009974:	08015c6c 	.word	0x08015c6c

08009978 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	2200      	movs	r2, #0
 8009986:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	3303      	adds	r3, #3
 800998e:	f023 0303 	bic.w	r3, r3, #3
 8009992:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009994:	2300      	movs	r3, #0
 8009996:	60fb      	str	r3, [r7, #12]
 8009998:	e011      	b.n	80099be <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	881b      	ldrh	r3, [r3, #0]
 80099b0:	461a      	mov	r2, r3
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	4413      	add	r3, r2
 80099b6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	3301      	adds	r3, #1
 80099bc:	60fb      	str	r3, [r7, #12]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	885b      	ldrh	r3, [r3, #2]
 80099c2:	461a      	mov	r2, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	4293      	cmp	r3, r2
 80099c8:	dbe7      	blt.n	800999a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80099ca:	bf00      	nop
 80099cc:	bf00      	nop
 80099ce:	3714      	adds	r7, #20
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80099de:	2300      	movs	r3, #0
 80099e0:	80fb      	strh	r3, [r7, #6]
 80099e2:	e009      	b.n	80099f8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80099e4:	88fb      	ldrh	r3, [r7, #6]
 80099e6:	4a08      	ldr	r2, [pc, #32]	; (8009a08 <memp_init+0x30>)
 80099e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7ff ffc3 	bl	8009978 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80099f2:	88fb      	ldrh	r3, [r7, #6]
 80099f4:	3301      	adds	r3, #1
 80099f6:	80fb      	strh	r3, [r7, #6]
 80099f8:	88fb      	ldrh	r3, [r7, #6]
 80099fa:	2b08      	cmp	r3, #8
 80099fc:	d9f2      	bls.n	80099e4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80099fe:	bf00      	nop
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	08059b04 	.word	0x08059b04

08009a0c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d012      	beq.n	8009a48 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	6812      	ldr	r2, [r2, #0]
 8009a2a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f003 0303 	and.w	r3, r3, #3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d006      	beq.n	8009a44 <do_memp_malloc_pool+0x38>
 8009a36:	4b07      	ldr	r3, [pc, #28]	; (8009a54 <do_memp_malloc_pool+0x48>)
 8009a38:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009a3c:	4906      	ldr	r1, [pc, #24]	; (8009a58 <do_memp_malloc_pool+0x4c>)
 8009a3e:	4807      	ldr	r0, [pc, #28]	; (8009a5c <do_memp_malloc_pool+0x50>)
 8009a40:	f00a fcaa 	bl	8014398 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	e000      	b.n	8009a4a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	08015c90 	.word	0x08015c90
 8009a58:	08015cc0 	.word	0x08015cc0
 8009a5c:	08015ce4 	.word	0x08015ce4

08009a60 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	4603      	mov	r3, r0
 8009a68:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009a6a:	79fb      	ldrb	r3, [r7, #7]
 8009a6c:	2b08      	cmp	r3, #8
 8009a6e:	d908      	bls.n	8009a82 <memp_malloc+0x22>
 8009a70:	4b0a      	ldr	r3, [pc, #40]	; (8009a9c <memp_malloc+0x3c>)
 8009a72:	f240 1257 	movw	r2, #343	; 0x157
 8009a76:	490a      	ldr	r1, [pc, #40]	; (8009aa0 <memp_malloc+0x40>)
 8009a78:	480a      	ldr	r0, [pc, #40]	; (8009aa4 <memp_malloc+0x44>)
 8009a7a:	f00a fc8d 	bl	8014398 <iprintf>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	e008      	b.n	8009a94 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009a82:	79fb      	ldrb	r3, [r7, #7]
 8009a84:	4a08      	ldr	r2, [pc, #32]	; (8009aa8 <memp_malloc+0x48>)
 8009a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7ff ffbe 	bl	8009a0c <do_memp_malloc_pool>
 8009a90:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009a92:	68fb      	ldr	r3, [r7, #12]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	08015c90 	.word	0x08015c90
 8009aa0:	08015d20 	.word	0x08015d20
 8009aa4:	08015ce4 	.word	0x08015ce4
 8009aa8:	08059b04 	.word	0x08059b04

08009aac <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	f003 0303 	and.w	r3, r3, #3
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d006      	beq.n	8009ace <do_memp_free_pool+0x22>
 8009ac0:	4b0a      	ldr	r3, [pc, #40]	; (8009aec <do_memp_free_pool+0x40>)
 8009ac2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009ac6:	490a      	ldr	r1, [pc, #40]	; (8009af0 <do_memp_free_pool+0x44>)
 8009ac8:	480a      	ldr	r0, [pc, #40]	; (8009af4 <do_memp_free_pool+0x48>)
 8009aca:	f00a fc65 	bl	8014398 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009ae4:	bf00      	nop
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	08015c90 	.word	0x08015c90
 8009af0:	08015d40 	.word	0x08015d40
 8009af4:	08015ce4 	.word	0x08015ce4

08009af8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	4603      	mov	r3, r0
 8009b00:	6039      	str	r1, [r7, #0]
 8009b02:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009b04:	79fb      	ldrb	r3, [r7, #7]
 8009b06:	2b08      	cmp	r3, #8
 8009b08:	d907      	bls.n	8009b1a <memp_free+0x22>
 8009b0a:	4b0c      	ldr	r3, [pc, #48]	; (8009b3c <memp_free+0x44>)
 8009b0c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009b10:	490b      	ldr	r1, [pc, #44]	; (8009b40 <memp_free+0x48>)
 8009b12:	480c      	ldr	r0, [pc, #48]	; (8009b44 <memp_free+0x4c>)
 8009b14:	f00a fc40 	bl	8014398 <iprintf>
 8009b18:	e00c      	b.n	8009b34 <memp_free+0x3c>

  if (mem == NULL) {
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d008      	beq.n	8009b32 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009b20:	79fb      	ldrb	r3, [r7, #7]
 8009b22:	4a09      	ldr	r2, [pc, #36]	; (8009b48 <memp_free+0x50>)
 8009b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b28:	6839      	ldr	r1, [r7, #0]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7ff ffbe 	bl	8009aac <do_memp_free_pool>
 8009b30:	e000      	b.n	8009b34 <memp_free+0x3c>
    return;
 8009b32:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	08015c90 	.word	0x08015c90
 8009b40:	08015d60 	.word	0x08015d60
 8009b44:	08015ce4 	.word	0x08015ce4
 8009b48:	08059b04 	.word	0x08059b04

08009b4c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009b50:	bf00      	nop
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr
	...

08009b5c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d108      	bne.n	8009b82 <netif_add+0x26>
 8009b70:	4b57      	ldr	r3, [pc, #348]	; (8009cd0 <netif_add+0x174>)
 8009b72:	f240 1227 	movw	r2, #295	; 0x127
 8009b76:	4957      	ldr	r1, [pc, #348]	; (8009cd4 <netif_add+0x178>)
 8009b78:	4857      	ldr	r0, [pc, #348]	; (8009cd8 <netif_add+0x17c>)
 8009b7a:	f00a fc0d 	bl	8014398 <iprintf>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	e0a2      	b.n	8009cc8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d108      	bne.n	8009b9a <netif_add+0x3e>
 8009b88:	4b51      	ldr	r3, [pc, #324]	; (8009cd0 <netif_add+0x174>)
 8009b8a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009b8e:	4953      	ldr	r1, [pc, #332]	; (8009cdc <netif_add+0x180>)
 8009b90:	4851      	ldr	r0, [pc, #324]	; (8009cd8 <netif_add+0x17c>)
 8009b92:	f00a fc01 	bl	8014398 <iprintf>
 8009b96:	2300      	movs	r3, #0
 8009b98:	e096      	b.n	8009cc8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009ba0:	4b4f      	ldr	r3, [pc, #316]	; (8009ce0 <netif_add+0x184>)
 8009ba2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d101      	bne.n	8009bae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009baa:	4b4d      	ldr	r3, [pc, #308]	; (8009ce0 <netif_add+0x184>)
 8009bac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009bb4:	4b4a      	ldr	r3, [pc, #296]	; (8009ce0 <netif_add+0x184>)
 8009bb6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	4a45      	ldr	r2, [pc, #276]	; (8009ce4 <netif_add+0x188>)
 8009bce:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6a3a      	ldr	r2, [r7, #32]
 8009be8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009bea:	4b3f      	ldr	r3, [pc, #252]	; (8009ce8 <netif_add+0x18c>)
 8009bec:	781a      	ldrb	r2, [r3, #0]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bf8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	68b9      	ldr	r1, [r7, #8]
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 f913 	bl	8009e2c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	4798      	blx	r3
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d001      	beq.n	8009c16 <netif_add+0xba>
    return NULL;
 8009c12:	2300      	movs	r3, #0
 8009c14:	e058      	b.n	8009cc8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c1c:	2bff      	cmp	r3, #255	; 0xff
 8009c1e:	d103      	bne.n	8009c28 <netif_add+0xcc>
        netif->num = 0;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009c2c:	4b2f      	ldr	r3, [pc, #188]	; (8009cec <netif_add+0x190>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	617b      	str	r3, [r7, #20]
 8009c32:	e02b      	b.n	8009c8c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d106      	bne.n	8009c4a <netif_add+0xee>
 8009c3c:	4b24      	ldr	r3, [pc, #144]	; (8009cd0 <netif_add+0x174>)
 8009c3e:	f240 128b 	movw	r2, #395	; 0x18b
 8009c42:	492b      	ldr	r1, [pc, #172]	; (8009cf0 <netif_add+0x194>)
 8009c44:	4824      	ldr	r0, [pc, #144]	; (8009cd8 <netif_add+0x17c>)
 8009c46:	f00a fba7 	bl	8014398 <iprintf>
        num_netifs++;
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	2bff      	cmp	r3, #255	; 0xff
 8009c54:	dd06      	ble.n	8009c64 <netif_add+0x108>
 8009c56:	4b1e      	ldr	r3, [pc, #120]	; (8009cd0 <netif_add+0x174>)
 8009c58:	f240 128d 	movw	r2, #397	; 0x18d
 8009c5c:	4925      	ldr	r1, [pc, #148]	; (8009cf4 <netif_add+0x198>)
 8009c5e:	481e      	ldr	r0, [pc, #120]	; (8009cd8 <netif_add+0x17c>)
 8009c60:	f00a fb9a 	bl	8014398 <iprintf>
        if (netif2->num == netif->num) {
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d108      	bne.n	8009c86 <netif_add+0x12a>
          netif->num++;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	b2da      	uxtb	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009c84:	e005      	b.n	8009c92 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1d0      	bne.n	8009c34 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1be      	bne.n	8009c16 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c9e:	2bfe      	cmp	r3, #254	; 0xfe
 8009ca0:	d103      	bne.n	8009caa <netif_add+0x14e>
    netif_num = 0;
 8009ca2:	4b11      	ldr	r3, [pc, #68]	; (8009ce8 <netif_add+0x18c>)
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	701a      	strb	r2, [r3, #0]
 8009ca8:	e006      	b.n	8009cb8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	b2da      	uxtb	r2, r3
 8009cb4:	4b0c      	ldr	r3, [pc, #48]	; (8009ce8 <netif_add+0x18c>)
 8009cb6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009cb8:	4b0c      	ldr	r3, [pc, #48]	; (8009cec <netif_add+0x190>)
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009cc0:	4a0a      	ldr	r2, [pc, #40]	; (8009cec <netif_add+0x190>)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3718      	adds	r7, #24
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	08015d7c 	.word	0x08015d7c
 8009cd4:	08015e10 	.word	0x08015e10
 8009cd8:	08015dcc 	.word	0x08015dcc
 8009cdc:	08015e2c 	.word	0x08015e2c
 8009ce0:	08059b70 	.word	0x08059b70
 8009ce4:	0800a03f 	.word	0x0800a03f
 8009ce8:	20000780 	.word	0x20000780
 8009cec:	200075c0 	.word	0x200075c0
 8009cf0:	08015e50 	.word	0x08015e50
 8009cf4:	08015e64 	.word	0x08015e64

08009cf8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009d02:	6839      	ldr	r1, [r7, #0]
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f003 f801 	bl	800cd0c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f007 fff1 	bl	8011cf4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009d12:	bf00      	nop
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
	...

08009d1c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d106      	bne.n	8009d3c <netif_do_set_ipaddr+0x20>
 8009d2e:	4b1d      	ldr	r3, [pc, #116]	; (8009da4 <netif_do_set_ipaddr+0x88>)
 8009d30:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009d34:	491c      	ldr	r1, [pc, #112]	; (8009da8 <netif_do_set_ipaddr+0x8c>)
 8009d36:	481d      	ldr	r0, [pc, #116]	; (8009dac <netif_do_set_ipaddr+0x90>)
 8009d38:	f00a fb2e 	bl	8014398 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d106      	bne.n	8009d50 <netif_do_set_ipaddr+0x34>
 8009d42:	4b18      	ldr	r3, [pc, #96]	; (8009da4 <netif_do_set_ipaddr+0x88>)
 8009d44:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009d48:	4917      	ldr	r1, [pc, #92]	; (8009da8 <netif_do_set_ipaddr+0x8c>)
 8009d4a:	4818      	ldr	r0, [pc, #96]	; (8009dac <netif_do_set_ipaddr+0x90>)
 8009d4c:	f00a fb24 	bl	8014398 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	3304      	adds	r3, #4
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d01c      	beq.n	8009d98 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	3304      	adds	r3, #4
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009d6e:	f107 0314 	add.w	r3, r7, #20
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f7ff ffbf 	bl	8009cf8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <netif_do_set_ipaddr+0x6a>
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	e000      	b.n	8009d88 <netif_do_set_ipaddr+0x6c>
 8009d86:	2300      	movs	r3, #0
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 f8d2 	bl	8009f38 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009d94:	2301      	movs	r3, #1
 8009d96:	e000      	b.n	8009d9a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	08015d7c 	.word	0x08015d7c
 8009da8:	08015e94 	.word	0x08015e94
 8009dac:	08015dcc 	.word	0x08015dcc

08009db0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	3308      	adds	r3, #8
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d00a      	beq.n	8009de0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d002      	beq.n	8009dd6 <netif_do_set_netmask+0x26>
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	e000      	b.n	8009dd8 <netif_do_set_netmask+0x28>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e000      	b.n	8009de2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b085      	sub	sp, #20
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	60f8      	str	r0, [r7, #12]
 8009df6:	60b9      	str	r1, [r7, #8]
 8009df8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	330c      	adds	r3, #12
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d00a      	beq.n	8009e1e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d002      	beq.n	8009e14 <netif_do_set_gw+0x26>
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	e000      	b.n	8009e16 <netif_do_set_gw+0x28>
 8009e14:	2300      	movs	r3, #0
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e000      	b.n	8009e20 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b088      	sub	sp, #32
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
 8009e38:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009e48:	4b1c      	ldr	r3, [pc, #112]	; (8009ebc <netif_set_addr+0x90>)
 8009e4a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d101      	bne.n	8009e56 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009e52:	4b1a      	ldr	r3, [pc, #104]	; (8009ebc <netif_set_addr+0x90>)
 8009e54:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009e5c:	4b17      	ldr	r3, [pc, #92]	; (8009ebc <netif_set_addr+0x90>)
 8009e5e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d003      	beq.n	8009e6e <netif_set_addr+0x42>
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d101      	bne.n	8009e72 <netif_set_addr+0x46>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e000      	b.n	8009e74 <netif_set_addr+0x48>
 8009e72:	2300      	movs	r3, #0
 8009e74:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d006      	beq.n	8009e8a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009e7c:	f107 0310 	add.w	r3, r7, #16
 8009e80:	461a      	mov	r2, r3
 8009e82:	68b9      	ldr	r1, [r7, #8]
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f7ff ff49 	bl	8009d1c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009e8a:	69fa      	ldr	r2, [r7, #28]
 8009e8c:	6879      	ldr	r1, [r7, #4]
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f7ff ff8e 	bl	8009db0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009e94:	69ba      	ldr	r2, [r7, #24]
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f7ff ffa8 	bl	8009dee <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d106      	bne.n	8009eb2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009ea4:	f107 0310 	add.w	r3, r7, #16
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	68b9      	ldr	r1, [r7, #8]
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f7ff ff35 	bl	8009d1c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009eb2:	bf00      	nop
 8009eb4:	3720      	adds	r7, #32
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	08059b70 	.word	0x08059b70

08009ec0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009ec8:	4a04      	ldr	r2, [pc, #16]	; (8009edc <netif_set_default+0x1c>)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009ece:	bf00      	nop
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	200075c4 	.word	0x200075c4

08009ee0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d107      	bne.n	8009efe <netif_set_up+0x1e>
 8009eee:	4b0f      	ldr	r3, [pc, #60]	; (8009f2c <netif_set_up+0x4c>)
 8009ef0:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009ef4:	490e      	ldr	r1, [pc, #56]	; (8009f30 <netif_set_up+0x50>)
 8009ef6:	480f      	ldr	r0, [pc, #60]	; (8009f34 <netif_set_up+0x54>)
 8009ef8:	f00a fa4e 	bl	8014398 <iprintf>
 8009efc:	e013      	b.n	8009f26 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f04:	f003 0301 	and.w	r3, r3, #1
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10c      	bne.n	8009f26 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f12:	f043 0301 	orr.w	r3, r3, #1
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009f1e:	2103      	movs	r1, #3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f809 	bl	8009f38 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	08015d7c 	.word	0x08015d7c
 8009f30:	08015f04 	.word	0x08015f04
 8009f34:	08015dcc 	.word	0x08015dcc

08009f38 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d106      	bne.n	8009f58 <netif_issue_reports+0x20>
 8009f4a:	4b18      	ldr	r3, [pc, #96]	; (8009fac <netif_issue_reports+0x74>)
 8009f4c:	f240 326d 	movw	r2, #877	; 0x36d
 8009f50:	4917      	ldr	r1, [pc, #92]	; (8009fb0 <netif_issue_reports+0x78>)
 8009f52:	4818      	ldr	r0, [pc, #96]	; (8009fb4 <netif_issue_reports+0x7c>)
 8009f54:	f00a fa20 	bl	8014398 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f5e:	f003 0304 	and.w	r3, r3, #4
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d01e      	beq.n	8009fa4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f6c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d017      	beq.n	8009fa4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009f74:	78fb      	ldrb	r3, [r7, #3]
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d013      	beq.n	8009fa6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	3304      	adds	r3, #4
 8009f82:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00e      	beq.n	8009fa6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f8e:	f003 0308 	and.w	r3, r3, #8
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d007      	beq.n	8009fa6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	3304      	adds	r3, #4
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f008 fe13 	bl	8012bc8 <etharp_request>
 8009fa2:	e000      	b.n	8009fa6 <netif_issue_reports+0x6e>
    return;
 8009fa4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	08015d7c 	.word	0x08015d7c
 8009fb0:	08015f20 	.word	0x08015f20
 8009fb4:	08015dcc 	.word	0x08015dcc

08009fb8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d107      	bne.n	8009fd6 <netif_set_down+0x1e>
 8009fc6:	4b12      	ldr	r3, [pc, #72]	; (800a010 <netif_set_down+0x58>)
 8009fc8:	f240 329b 	movw	r2, #923	; 0x39b
 8009fcc:	4911      	ldr	r1, [pc, #68]	; (800a014 <netif_set_down+0x5c>)
 8009fce:	4812      	ldr	r0, [pc, #72]	; (800a018 <netif_set_down+0x60>)
 8009fd0:	f00a f9e2 	bl	8014398 <iprintf>
 8009fd4:	e019      	b.n	800a00a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009fdc:	f003 0301 	and.w	r3, r3, #1
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d012      	beq.n	800a00a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009fea:	f023 0301 	bic.w	r3, r3, #1
 8009fee:	b2da      	uxtb	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ffc:	f003 0308 	and.w	r3, r3, #8
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f008 f99d 	bl	8012344 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	08015d7c 	.word	0x08015d7c
 800a014:	08015f44 	.word	0x08015f44
 800a018:	08015dcc 	.word	0x08015dcc

0800a01c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	61da      	str	r2, [r3, #28]
  }
}
 800a032:	bf00      	nop
 800a034:	370c      	adds	r7, #12
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a03e:	b480      	push	{r7}
 800a040:	b085      	sub	sp, #20
 800a042:	af00      	add	r7, sp, #0
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	60b9      	str	r1, [r7, #8]
 800a048:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a04a:	f06f 030b 	mvn.w	r3, #11
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
	...

0800a05c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	4603      	mov	r3, r0
 800a064:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a066:	79fb      	ldrb	r3, [r7, #7]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d013      	beq.n	800a094 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a06c:	4b0d      	ldr	r3, [pc, #52]	; (800a0a4 <netif_get_by_index+0x48>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	60fb      	str	r3, [r7, #12]
 800a072:	e00c      	b.n	800a08e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a07a:	3301      	adds	r3, #1
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	79fa      	ldrb	r2, [r7, #7]
 800a080:	429a      	cmp	r2, r3
 800a082:	d101      	bne.n	800a088 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	e006      	b.n	800a096 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	60fb      	str	r3, [r7, #12]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1ef      	bne.n	800a074 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3714      	adds	r7, #20
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	200075c0 	.word	0x200075c0

0800a0a8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a0ae:	4b0c      	ldr	r3, [pc, #48]	; (800a0e0 <pbuf_free_ooseq+0x38>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a0b4:	4b0b      	ldr	r3, [pc, #44]	; (800a0e4 <pbuf_free_ooseq+0x3c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	607b      	str	r3, [r7, #4]
 800a0ba:	e00a      	b.n	800a0d2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d003      	beq.n	800a0cc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f002 fe5f 	bl	800cd88 <tcp_free_ooseq>
      return;
 800a0ca:	e005      	b.n	800a0d8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	607b      	str	r3, [r7, #4]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1f1      	bne.n	800a0bc <pbuf_free_ooseq+0x14>
    }
  }
}
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	200075c8 	.word	0x200075c8
 800a0e4:	200075d0 	.word	0x200075d0

0800a0e8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800a0ec:	4b03      	ldr	r3, [pc, #12]	; (800a0fc <pbuf_pool_is_empty+0x14>)
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a0f2:	bf00      	nop
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	200075c8 	.word	0x200075c8

0800a100 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	4611      	mov	r1, r2
 800a10c:	461a      	mov	r2, r3
 800a10e:	460b      	mov	r3, r1
 800a110:	80fb      	strh	r3, [r7, #6]
 800a112:	4613      	mov	r3, r2
 800a114:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	68ba      	ldr	r2, [r7, #8]
 800a120:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	88fa      	ldrh	r2, [r7, #6]
 800a126:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	88ba      	ldrh	r2, [r7, #4]
 800a12c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a12e:	8b3b      	ldrh	r3, [r7, #24]
 800a130:	b2da      	uxtb	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	7f3a      	ldrb	r2, [r7, #28]
 800a13a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2201      	movs	r2, #1
 800a140:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	73da      	strb	r2, [r3, #15]
}
 800a148:	bf00      	nop
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b08c      	sub	sp, #48	; 0x30
 800a158:	af02      	add	r7, sp, #8
 800a15a:	4603      	mov	r3, r0
 800a15c:	71fb      	strb	r3, [r7, #7]
 800a15e:	460b      	mov	r3, r1
 800a160:	80bb      	strh	r3, [r7, #4]
 800a162:	4613      	mov	r3, r2
 800a164:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a166:	79fb      	ldrb	r3, [r7, #7]
 800a168:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a16a:	887b      	ldrh	r3, [r7, #2]
 800a16c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a170:	d07f      	beq.n	800a272 <pbuf_alloc+0x11e>
 800a172:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a176:	f300 80c8 	bgt.w	800a30a <pbuf_alloc+0x1b6>
 800a17a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a17e:	d010      	beq.n	800a1a2 <pbuf_alloc+0x4e>
 800a180:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a184:	f300 80c1 	bgt.w	800a30a <pbuf_alloc+0x1b6>
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d002      	beq.n	800a192 <pbuf_alloc+0x3e>
 800a18c:	2b41      	cmp	r3, #65	; 0x41
 800a18e:	f040 80bc 	bne.w	800a30a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a192:	887a      	ldrh	r2, [r7, #2]
 800a194:	88bb      	ldrh	r3, [r7, #4]
 800a196:	4619      	mov	r1, r3
 800a198:	2000      	movs	r0, #0
 800a19a:	f000 f8d1 	bl	800a340 <pbuf_alloc_reference>
 800a19e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a1a0:	e0bd      	b.n	800a31e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a1aa:	88bb      	ldrh	r3, [r7, #4]
 800a1ac:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a1ae:	2008      	movs	r0, #8
 800a1b0:	f7ff fc56 	bl	8009a60 <memp_malloc>
 800a1b4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d109      	bne.n	800a1d0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a1bc:	f7ff ff94 	bl	800a0e8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d002      	beq.n	800a1cc <pbuf_alloc+0x78>
            pbuf_free(p);
 800a1c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1c8:	f000 faa8 	bl	800a71c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	e0a7      	b.n	800a320 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a1d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1d2:	3303      	adds	r3, #3
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	f023 0303 	bic.w	r3, r3, #3
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	8b7a      	ldrh	r2, [r7, #26]
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	bf28      	it	cs
 800a1e8:	4613      	movcs	r3, r2
 800a1ea:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a1ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1ee:	3310      	adds	r3, #16
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	3303      	adds	r3, #3
 800a1f6:	f023 0303 	bic.w	r3, r3, #3
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	89f9      	ldrh	r1, [r7, #14]
 800a1fe:	8b7a      	ldrh	r2, [r7, #26]
 800a200:	2300      	movs	r3, #0
 800a202:	9301      	str	r3, [sp, #4]
 800a204:	887b      	ldrh	r3, [r7, #2]
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	460b      	mov	r3, r1
 800a20a:	4601      	mov	r1, r0
 800a20c:	6938      	ldr	r0, [r7, #16]
 800a20e:	f7ff ff77 	bl	800a100 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	f003 0303 	and.w	r3, r3, #3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d006      	beq.n	800a22c <pbuf_alloc+0xd8>
 800a21e:	4b42      	ldr	r3, [pc, #264]	; (800a328 <pbuf_alloc+0x1d4>)
 800a220:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a224:	4941      	ldr	r1, [pc, #260]	; (800a32c <pbuf_alloc+0x1d8>)
 800a226:	4842      	ldr	r0, [pc, #264]	; (800a330 <pbuf_alloc+0x1dc>)
 800a228:	f00a f8b6 	bl	8014398 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a22c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a22e:	3303      	adds	r3, #3
 800a230:	f023 0303 	bic.w	r3, r3, #3
 800a234:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a238:	d106      	bne.n	800a248 <pbuf_alloc+0xf4>
 800a23a:	4b3b      	ldr	r3, [pc, #236]	; (800a328 <pbuf_alloc+0x1d4>)
 800a23c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a240:	493c      	ldr	r1, [pc, #240]	; (800a334 <pbuf_alloc+0x1e0>)
 800a242:	483b      	ldr	r0, [pc, #236]	; (800a330 <pbuf_alloc+0x1dc>)
 800a244:	f00a f8a8 	bl	8014398 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d102      	bne.n	800a254 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	627b      	str	r3, [r7, #36]	; 0x24
 800a252:	e002      	b.n	800a25a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a25e:	8b7a      	ldrh	r2, [r7, #26]
 800a260:	89fb      	ldrh	r3, [r7, #14]
 800a262:	1ad3      	subs	r3, r2, r3
 800a264:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a26a:	8b7b      	ldrh	r3, [r7, #26]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d19e      	bne.n	800a1ae <pbuf_alloc+0x5a>
      break;
 800a270:	e055      	b.n	800a31e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a272:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a274:	3303      	adds	r3, #3
 800a276:	b29b      	uxth	r3, r3
 800a278:	f023 0303 	bic.w	r3, r3, #3
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	88bb      	ldrh	r3, [r7, #4]
 800a280:	3303      	adds	r3, #3
 800a282:	b29b      	uxth	r3, r3
 800a284:	f023 0303 	bic.w	r3, r3, #3
 800a288:	b29b      	uxth	r3, r3
 800a28a:	4413      	add	r3, r2
 800a28c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a28e:	8b3b      	ldrh	r3, [r7, #24]
 800a290:	3310      	adds	r3, #16
 800a292:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a294:	8b3a      	ldrh	r2, [r7, #24]
 800a296:	88bb      	ldrh	r3, [r7, #4]
 800a298:	3303      	adds	r3, #3
 800a29a:	f023 0303 	bic.w	r3, r3, #3
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d306      	bcc.n	800a2b0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a2a2:	8afa      	ldrh	r2, [r7, #22]
 800a2a4:	88bb      	ldrh	r3, [r7, #4]
 800a2a6:	3303      	adds	r3, #3
 800a2a8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d201      	bcs.n	800a2b4 <pbuf_alloc+0x160>
        return NULL;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	e035      	b.n	800a320 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a2b4:	8afb      	ldrh	r3, [r7, #22]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7ff fa64 	bl	8009784 <mem_malloc>
 800a2bc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <pbuf_alloc+0x174>
        return NULL;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	e02b      	b.n	800a320 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a2c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2ca:	3310      	adds	r3, #16
 800a2cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ce:	4413      	add	r3, r2
 800a2d0:	3303      	adds	r3, #3
 800a2d2:	f023 0303 	bic.w	r3, r3, #3
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	88b9      	ldrh	r1, [r7, #4]
 800a2da:	88ba      	ldrh	r2, [r7, #4]
 800a2dc:	2300      	movs	r3, #0
 800a2de:	9301      	str	r3, [sp, #4]
 800a2e0:	887b      	ldrh	r3, [r7, #2]
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	4601      	mov	r1, r0
 800a2e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2ea:	f7ff ff09 	bl	800a100 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f003 0303 	and.w	r3, r3, #3
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d010      	beq.n	800a31c <pbuf_alloc+0x1c8>
 800a2fa:	4b0b      	ldr	r3, [pc, #44]	; (800a328 <pbuf_alloc+0x1d4>)
 800a2fc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a300:	490d      	ldr	r1, [pc, #52]	; (800a338 <pbuf_alloc+0x1e4>)
 800a302:	480b      	ldr	r0, [pc, #44]	; (800a330 <pbuf_alloc+0x1dc>)
 800a304:	f00a f848 	bl	8014398 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a308:	e008      	b.n	800a31c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a30a:	4b07      	ldr	r3, [pc, #28]	; (800a328 <pbuf_alloc+0x1d4>)
 800a30c:	f240 1227 	movw	r2, #295	; 0x127
 800a310:	490a      	ldr	r1, [pc, #40]	; (800a33c <pbuf_alloc+0x1e8>)
 800a312:	4807      	ldr	r0, [pc, #28]	; (800a330 <pbuf_alloc+0x1dc>)
 800a314:	f00a f840 	bl	8014398 <iprintf>
      return NULL;
 800a318:	2300      	movs	r3, #0
 800a31a:	e001      	b.n	800a320 <pbuf_alloc+0x1cc>
      break;
 800a31c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a320:	4618      	mov	r0, r3
 800a322:	3728      	adds	r7, #40	; 0x28
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	08015fac 	.word	0x08015fac
 800a32c:	08015fdc 	.word	0x08015fdc
 800a330:	0801600c 	.word	0x0801600c
 800a334:	08016034 	.word	0x08016034
 800a338:	08016068 	.word	0x08016068
 800a33c:	08016094 	.word	0x08016094

0800a340 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af02      	add	r7, sp, #8
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	460b      	mov	r3, r1
 800a34a:	807b      	strh	r3, [r7, #2]
 800a34c:	4613      	mov	r3, r2
 800a34e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a350:	883b      	ldrh	r3, [r7, #0]
 800a352:	2b41      	cmp	r3, #65	; 0x41
 800a354:	d009      	beq.n	800a36a <pbuf_alloc_reference+0x2a>
 800a356:	883b      	ldrh	r3, [r7, #0]
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d006      	beq.n	800a36a <pbuf_alloc_reference+0x2a>
 800a35c:	4b0f      	ldr	r3, [pc, #60]	; (800a39c <pbuf_alloc_reference+0x5c>)
 800a35e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a362:	490f      	ldr	r1, [pc, #60]	; (800a3a0 <pbuf_alloc_reference+0x60>)
 800a364:	480f      	ldr	r0, [pc, #60]	; (800a3a4 <pbuf_alloc_reference+0x64>)
 800a366:	f00a f817 	bl	8014398 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a36a:	2007      	movs	r0, #7
 800a36c:	f7ff fb78 	bl	8009a60 <memp_malloc>
 800a370:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d101      	bne.n	800a37c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a378:	2300      	movs	r3, #0
 800a37a:	e00b      	b.n	800a394 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a37c:	8879      	ldrh	r1, [r7, #2]
 800a37e:	887a      	ldrh	r2, [r7, #2]
 800a380:	2300      	movs	r3, #0
 800a382:	9301      	str	r3, [sp, #4]
 800a384:	883b      	ldrh	r3, [r7, #0]
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	460b      	mov	r3, r1
 800a38a:	6879      	ldr	r1, [r7, #4]
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f7ff feb7 	bl	800a100 <pbuf_init_alloced_pbuf>
  return p;
 800a392:	68fb      	ldr	r3, [r7, #12]
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	08015fac 	.word	0x08015fac
 800a3a0:	080160b0 	.word	0x080160b0
 800a3a4:	0801600c 	.word	0x0801600c

0800a3a8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b088      	sub	sp, #32
 800a3ac:	af02      	add	r7, sp, #8
 800a3ae:	607b      	str	r3, [r7, #4]
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	73fb      	strb	r3, [r7, #15]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	81bb      	strh	r3, [r7, #12]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
 800a3be:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a3c0:	8a7b      	ldrh	r3, [r7, #18]
 800a3c2:	3303      	adds	r3, #3
 800a3c4:	f023 0203 	bic.w	r2, r3, #3
 800a3c8:	89bb      	ldrh	r3, [r7, #12]
 800a3ca:	441a      	add	r2, r3
 800a3cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d901      	bls.n	800a3d6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	e018      	b.n	800a408 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a3d6:	6a3b      	ldr	r3, [r7, #32]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d007      	beq.n	800a3ec <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a3dc:	8a7b      	ldrh	r3, [r7, #18]
 800a3de:	3303      	adds	r3, #3
 800a3e0:	f023 0303 	bic.w	r3, r3, #3
 800a3e4:	6a3a      	ldr	r2, [r7, #32]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	617b      	str	r3, [r7, #20]
 800a3ea:	e001      	b.n	800a3f0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	89b9      	ldrh	r1, [r7, #12]
 800a3f4:	89ba      	ldrh	r2, [r7, #12]
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	897b      	ldrh	r3, [r7, #10]
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	460b      	mov	r3, r1
 800a400:	6979      	ldr	r1, [r7, #20]
 800a402:	f7ff fe7d 	bl	800a100 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a406:	687b      	ldr	r3, [r7, #4]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d106      	bne.n	800a430 <pbuf_realloc+0x20>
 800a422:	4b3a      	ldr	r3, [pc, #232]	; (800a50c <pbuf_realloc+0xfc>)
 800a424:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a428:	4939      	ldr	r1, [pc, #228]	; (800a510 <pbuf_realloc+0x100>)
 800a42a:	483a      	ldr	r0, [pc, #232]	; (800a514 <pbuf_realloc+0x104>)
 800a42c:	f009 ffb4 	bl	8014398 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	891b      	ldrh	r3, [r3, #8]
 800a434:	887a      	ldrh	r2, [r7, #2]
 800a436:	429a      	cmp	r2, r3
 800a438:	d263      	bcs.n	800a502 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	891a      	ldrh	r2, [r3, #8]
 800a43e:	887b      	ldrh	r3, [r7, #2]
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a444:	887b      	ldrh	r3, [r7, #2]
 800a446:	817b      	strh	r3, [r7, #10]
  q = p;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a44c:	e018      	b.n	800a480 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	895b      	ldrh	r3, [r3, #10]
 800a452:	897a      	ldrh	r2, [r7, #10]
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	891a      	ldrh	r2, [r3, #8]
 800a45c:	893b      	ldrh	r3, [r7, #8]
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	b29a      	uxth	r2, r3
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d106      	bne.n	800a480 <pbuf_realloc+0x70>
 800a472:	4b26      	ldr	r3, [pc, #152]	; (800a50c <pbuf_realloc+0xfc>)
 800a474:	f240 12af 	movw	r2, #431	; 0x1af
 800a478:	4927      	ldr	r1, [pc, #156]	; (800a518 <pbuf_realloc+0x108>)
 800a47a:	4826      	ldr	r0, [pc, #152]	; (800a514 <pbuf_realloc+0x104>)
 800a47c:	f009 ff8c 	bl	8014398 <iprintf>
  while (rem_len > q->len) {
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	895b      	ldrh	r3, [r3, #10]
 800a484:	897a      	ldrh	r2, [r7, #10]
 800a486:	429a      	cmp	r2, r3
 800a488:	d8e1      	bhi.n	800a44e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	7b1b      	ldrb	r3, [r3, #12]
 800a48e:	f003 030f 	and.w	r3, r3, #15
 800a492:	2b00      	cmp	r3, #0
 800a494:	d121      	bne.n	800a4da <pbuf_realloc+0xca>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	895b      	ldrh	r3, [r3, #10]
 800a49a:	897a      	ldrh	r2, [r7, #10]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d01c      	beq.n	800a4da <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	7b5b      	ldrb	r3, [r3, #13]
 800a4a4:	f003 0302 	and.w	r3, r3, #2
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d116      	bne.n	800a4da <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	b29a      	uxth	r2, r3
 800a4b6:	897b      	ldrh	r3, [r7, #10]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	4619      	mov	r1, r3
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f7ff f864 	bl	800958c <mem_trim>
 800a4c4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d106      	bne.n	800a4da <pbuf_realloc+0xca>
 800a4cc:	4b0f      	ldr	r3, [pc, #60]	; (800a50c <pbuf_realloc+0xfc>)
 800a4ce:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a4d2:	4912      	ldr	r1, [pc, #72]	; (800a51c <pbuf_realloc+0x10c>)
 800a4d4:	480f      	ldr	r0, [pc, #60]	; (800a514 <pbuf_realloc+0x104>)
 800a4d6:	f009 ff5f 	bl	8014398 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	897a      	ldrh	r2, [r7, #10]
 800a4de:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	895a      	ldrh	r2, [r3, #10]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d004      	beq.n	800a4fa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f000 f911 	bl	800a71c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	e000      	b.n	800a504 <pbuf_realloc+0xf4>
    return;
 800a502:	bf00      	nop

}
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	08015fac 	.word	0x08015fac
 800a510:	080160c4 	.word	0x080160c4
 800a514:	0801600c 	.word	0x0801600c
 800a518:	080160dc 	.word	0x080160dc
 800a51c:	080160f4 	.word	0x080160f4

0800a520 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	4613      	mov	r3, r2
 800a52c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d106      	bne.n	800a542 <pbuf_add_header_impl+0x22>
 800a534:	4b2b      	ldr	r3, [pc, #172]	; (800a5e4 <pbuf_add_header_impl+0xc4>)
 800a536:	f240 12df 	movw	r2, #479	; 0x1df
 800a53a:	492b      	ldr	r1, [pc, #172]	; (800a5e8 <pbuf_add_header_impl+0xc8>)
 800a53c:	482b      	ldr	r0, [pc, #172]	; (800a5ec <pbuf_add_header_impl+0xcc>)
 800a53e:	f009 ff2b 	bl	8014398 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d003      	beq.n	800a550 <pbuf_add_header_impl+0x30>
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a54e:	d301      	bcc.n	800a554 <pbuf_add_header_impl+0x34>
    return 1;
 800a550:	2301      	movs	r3, #1
 800a552:	e043      	b.n	800a5dc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d101      	bne.n	800a55e <pbuf_add_header_impl+0x3e>
    return 0;
 800a55a:	2300      	movs	r3, #0
 800a55c:	e03e      	b.n	800a5dc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	891a      	ldrh	r2, [r3, #8]
 800a566:	8a7b      	ldrh	r3, [r7, #18]
 800a568:	4413      	add	r3, r2
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	8a7a      	ldrh	r2, [r7, #18]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d901      	bls.n	800a576 <pbuf_add_header_impl+0x56>
    return 1;
 800a572:	2301      	movs	r3, #1
 800a574:	e032      	b.n	800a5dc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	7b1b      	ldrb	r3, [r3, #12]
 800a57a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a57c:	8a3b      	ldrh	r3, [r7, #16]
 800a57e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00c      	beq.n	800a5a0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	685a      	ldr	r2, [r3, #4]
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	425b      	negs	r3, r3
 800a58e:	4413      	add	r3, r2
 800a590:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	3310      	adds	r3, #16
 800a596:	697a      	ldr	r2, [r7, #20]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d20d      	bcs.n	800a5b8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a59c:	2301      	movs	r3, #1
 800a59e:	e01d      	b.n	800a5dc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a5a0:	79fb      	ldrb	r3, [r7, #7]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d006      	beq.n	800a5b4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	685a      	ldr	r2, [r3, #4]
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	425b      	negs	r3, r3
 800a5ae:	4413      	add	r3, r2
 800a5b0:	617b      	str	r3, [r7, #20]
 800a5b2:	e001      	b.n	800a5b8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e011      	b.n	800a5dc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	895a      	ldrh	r2, [r3, #10]
 800a5c2:	8a7b      	ldrh	r3, [r7, #18]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	891a      	ldrh	r2, [r3, #8]
 800a5d0:	8a7b      	ldrh	r3, [r7, #18]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	811a      	strh	r2, [r3, #8]


  return 0;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3718      	adds	r7, #24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	08015fac 	.word	0x08015fac
 800a5e8:	08016110 	.word	0x08016110
 800a5ec:	0801600c 	.word	0x0801600c

0800a5f0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f7ff ff8e 	bl	800a520 <pbuf_add_header_impl>
 800a604:	4603      	mov	r3, r0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3708      	adds	r7, #8
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
	...

0800a610 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d106      	bne.n	800a62e <pbuf_remove_header+0x1e>
 800a620:	4b20      	ldr	r3, [pc, #128]	; (800a6a4 <pbuf_remove_header+0x94>)
 800a622:	f240 224b 	movw	r2, #587	; 0x24b
 800a626:	4920      	ldr	r1, [pc, #128]	; (800a6a8 <pbuf_remove_header+0x98>)
 800a628:	4820      	ldr	r0, [pc, #128]	; (800a6ac <pbuf_remove_header+0x9c>)
 800a62a:	f009 feb5 	bl	8014398 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d003      	beq.n	800a63c <pbuf_remove_header+0x2c>
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a63a:	d301      	bcc.n	800a640 <pbuf_remove_header+0x30>
    return 1;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e02c      	b.n	800a69a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d101      	bne.n	800a64a <pbuf_remove_header+0x3a>
    return 0;
 800a646:	2300      	movs	r3, #0
 800a648:	e027      	b.n	800a69a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	895b      	ldrh	r3, [r3, #10]
 800a652:	89fa      	ldrh	r2, [r7, #14]
 800a654:	429a      	cmp	r2, r3
 800a656:	d908      	bls.n	800a66a <pbuf_remove_header+0x5a>
 800a658:	4b12      	ldr	r3, [pc, #72]	; (800a6a4 <pbuf_remove_header+0x94>)
 800a65a:	f240 2255 	movw	r2, #597	; 0x255
 800a65e:	4914      	ldr	r1, [pc, #80]	; (800a6b0 <pbuf_remove_header+0xa0>)
 800a660:	4812      	ldr	r0, [pc, #72]	; (800a6ac <pbuf_remove_header+0x9c>)
 800a662:	f009 fe99 	bl	8014398 <iprintf>
 800a666:	2301      	movs	r3, #1
 800a668:	e017      	b.n	800a69a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	685a      	ldr	r2, [r3, #4]
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	441a      	add	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	895a      	ldrh	r2, [r3, #10]
 800a680:	89fb      	ldrh	r3, [r7, #14]
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	b29a      	uxth	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	891a      	ldrh	r2, [r3, #8]
 800a68e:	89fb      	ldrh	r3, [r7, #14]
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	b29a      	uxth	r2, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	08015fac 	.word	0x08015fac
 800a6a8:	08016110 	.word	0x08016110
 800a6ac:	0801600c 	.word	0x0801600c
 800a6b0:	0801611c 	.word	0x0801611c

0800a6b4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	807b      	strh	r3, [r7, #2]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a6c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	da08      	bge.n	800a6de <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a6cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6d0:	425b      	negs	r3, r3
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7ff ff9b 	bl	800a610 <pbuf_remove_header>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	e007      	b.n	800a6ee <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a6de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6e2:	787a      	ldrb	r2, [r7, #1]
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7ff ff1a 	bl	800a520 <pbuf_add_header_impl>
 800a6ec:	4603      	mov	r3, r0
  }
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3708      	adds	r7, #8
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b082      	sub	sp, #8
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	460b      	mov	r3, r1
 800a700:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a702:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a706:	2201      	movs	r2, #1
 800a708:	4619      	mov	r1, r3
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7ff ffd2 	bl	800a6b4 <pbuf_header_impl>
 800a710:	4603      	mov	r3, r0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
	...

0800a71c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10b      	bne.n	800a742 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d106      	bne.n	800a73e <pbuf_free+0x22>
 800a730:	4b38      	ldr	r3, [pc, #224]	; (800a814 <pbuf_free+0xf8>)
 800a732:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a736:	4938      	ldr	r1, [pc, #224]	; (800a818 <pbuf_free+0xfc>)
 800a738:	4838      	ldr	r0, [pc, #224]	; (800a81c <pbuf_free+0x100>)
 800a73a:	f009 fe2d 	bl	8014398 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a73e:	2300      	movs	r3, #0
 800a740:	e063      	b.n	800a80a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a742:	2300      	movs	r3, #0
 800a744:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a746:	e05c      	b.n	800a802 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	7b9b      	ldrb	r3, [r3, #14]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d106      	bne.n	800a75e <pbuf_free+0x42>
 800a750:	4b30      	ldr	r3, [pc, #192]	; (800a814 <pbuf_free+0xf8>)
 800a752:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a756:	4932      	ldr	r1, [pc, #200]	; (800a820 <pbuf_free+0x104>)
 800a758:	4830      	ldr	r0, [pc, #192]	; (800a81c <pbuf_free+0x100>)
 800a75a:	f009 fe1d 	bl	8014398 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	7b9b      	ldrb	r3, [r3, #14]
 800a762:	3b01      	subs	r3, #1
 800a764:	b2da      	uxtb	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	739a      	strb	r2, [r3, #14]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	7b9b      	ldrb	r3, [r3, #14]
 800a76e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a770:	7dbb      	ldrb	r3, [r7, #22]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d143      	bne.n	800a7fe <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	7b1b      	ldrb	r3, [r3, #12]
 800a780:	f003 030f 	and.w	r3, r3, #15
 800a784:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	7b5b      	ldrb	r3, [r3, #13]
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d011      	beq.n	800a7b6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d106      	bne.n	800a7ac <pbuf_free+0x90>
 800a79e:	4b1d      	ldr	r3, [pc, #116]	; (800a814 <pbuf_free+0xf8>)
 800a7a0:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a7a4:	491f      	ldr	r1, [pc, #124]	; (800a824 <pbuf_free+0x108>)
 800a7a6:	481d      	ldr	r0, [pc, #116]	; (800a81c <pbuf_free+0x100>)
 800a7a8:	f009 fdf6 	bl	8014398 <iprintf>
        pc->custom_free_function(p);
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	4798      	blx	r3
 800a7b4:	e01d      	b.n	800a7f2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d104      	bne.n	800a7c6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800a7bc:	6879      	ldr	r1, [r7, #4]
 800a7be:	2008      	movs	r0, #8
 800a7c0:	f7ff f99a 	bl	8009af8 <memp_free>
 800a7c4:	e015      	b.n	800a7f2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a7c6:	7bfb      	ldrb	r3, [r7, #15]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d104      	bne.n	800a7d6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a7cc:	6879      	ldr	r1, [r7, #4]
 800a7ce:	2007      	movs	r0, #7
 800a7d0:	f7ff f992 	bl	8009af8 <memp_free>
 800a7d4:	e00d      	b.n	800a7f2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a7d6:	7bfb      	ldrb	r3, [r7, #15]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d103      	bne.n	800a7e4 <pbuf_free+0xc8>
          mem_free(p);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7fe fe6b 	bl	80094b8 <mem_free>
 800a7e2:	e006      	b.n	800a7f2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a7e4:	4b0b      	ldr	r3, [pc, #44]	; (800a814 <pbuf_free+0xf8>)
 800a7e6:	f240 320f 	movw	r2, #783	; 0x30f
 800a7ea:	490f      	ldr	r1, [pc, #60]	; (800a828 <pbuf_free+0x10c>)
 800a7ec:	480b      	ldr	r0, [pc, #44]	; (800a81c <pbuf_free+0x100>)
 800a7ee:	f009 fdd3 	bl	8014398 <iprintf>
        }
      }
      count++;
 800a7f2:	7dfb      	ldrb	r3, [r7, #23]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	607b      	str	r3, [r7, #4]
 800a7fc:	e001      	b.n	800a802 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a7fe:	2300      	movs	r3, #0
 800a800:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d19f      	bne.n	800a748 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a808:	7dfb      	ldrb	r3, [r7, #23]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	08015fac 	.word	0x08015fac
 800a818:	08016110 	.word	0x08016110
 800a81c:	0801600c 	.word	0x0801600c
 800a820:	0801613c 	.word	0x0801613c
 800a824:	08016154 	.word	0x08016154
 800a828:	08016178 	.word	0x08016178

0800a82c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a834:	2300      	movs	r3, #0
 800a836:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a838:	e005      	b.n	800a846 <pbuf_clen+0x1a>
    ++len;
 800a83a:	89fb      	ldrh	r3, [r7, #14]
 800a83c:	3301      	adds	r3, #1
 800a83e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1f6      	bne.n	800a83a <pbuf_clen+0xe>
  }
  return len;
 800a84c:	89fb      	ldrh	r3, [r7, #14]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
	...

0800a85c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d010      	beq.n	800a88c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	7b9b      	ldrb	r3, [r3, #14]
 800a86e:	3301      	adds	r3, #1
 800a870:	b2da      	uxtb	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	7b9b      	ldrb	r3, [r3, #14]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d106      	bne.n	800a88c <pbuf_ref+0x30>
 800a87e:	4b05      	ldr	r3, [pc, #20]	; (800a894 <pbuf_ref+0x38>)
 800a880:	f240 3242 	movw	r2, #834	; 0x342
 800a884:	4904      	ldr	r1, [pc, #16]	; (800a898 <pbuf_ref+0x3c>)
 800a886:	4805      	ldr	r0, [pc, #20]	; (800a89c <pbuf_ref+0x40>)
 800a888:	f009 fd86 	bl	8014398 <iprintf>
  }
}
 800a88c:	bf00      	nop
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	08015fac 	.word	0x08015fac
 800a898:	0801618c 	.word	0x0801618c
 800a89c:	0801600c 	.word	0x0801600c

0800a8a0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d002      	beq.n	800a8b6 <pbuf_cat+0x16>
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d107      	bne.n	800a8c6 <pbuf_cat+0x26>
 800a8b6:	4b20      	ldr	r3, [pc, #128]	; (800a938 <pbuf_cat+0x98>)
 800a8b8:	f240 3259 	movw	r2, #857	; 0x359
 800a8bc:	491f      	ldr	r1, [pc, #124]	; (800a93c <pbuf_cat+0x9c>)
 800a8be:	4820      	ldr	r0, [pc, #128]	; (800a940 <pbuf_cat+0xa0>)
 800a8c0:	f009 fd6a 	bl	8014398 <iprintf>
 800a8c4:	e034      	b.n	800a930 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	60fb      	str	r3, [r7, #12]
 800a8ca:	e00a      	b.n	800a8e2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	891a      	ldrh	r2, [r3, #8]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	891b      	ldrh	r3, [r3, #8]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	60fb      	str	r3, [r7, #12]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1f0      	bne.n	800a8cc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	891a      	ldrh	r2, [r3, #8]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	895b      	ldrh	r3, [r3, #10]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d006      	beq.n	800a904 <pbuf_cat+0x64>
 800a8f6:	4b10      	ldr	r3, [pc, #64]	; (800a938 <pbuf_cat+0x98>)
 800a8f8:	f240 3262 	movw	r2, #866	; 0x362
 800a8fc:	4911      	ldr	r1, [pc, #68]	; (800a944 <pbuf_cat+0xa4>)
 800a8fe:	4810      	ldr	r0, [pc, #64]	; (800a940 <pbuf_cat+0xa0>)
 800a900:	f009 fd4a 	bl	8014398 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d006      	beq.n	800a91a <pbuf_cat+0x7a>
 800a90c:	4b0a      	ldr	r3, [pc, #40]	; (800a938 <pbuf_cat+0x98>)
 800a90e:	f240 3263 	movw	r2, #867	; 0x363
 800a912:	490d      	ldr	r1, [pc, #52]	; (800a948 <pbuf_cat+0xa8>)
 800a914:	480a      	ldr	r0, [pc, #40]	; (800a940 <pbuf_cat+0xa0>)
 800a916:	f009 fd3f 	bl	8014398 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	891a      	ldrh	r2, [r3, #8]
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	891b      	ldrh	r3, [r3, #8]
 800a922:	4413      	add	r3, r2
 800a924:	b29a      	uxth	r2, r3
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	08015fac 	.word	0x08015fac
 800a93c:	080161a0 	.word	0x080161a0
 800a940:	0801600c 	.word	0x0801600c
 800a944:	080161d8 	.word	0x080161d8
 800a948:	08016208 	.word	0x08016208

0800a94c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a956:	6839      	ldr	r1, [r7, #0]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7ff ffa1 	bl	800a8a0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a95e:	6838      	ldr	r0, [r7, #0]
 800a960:	f7ff ff7c 	bl	800a85c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a964:	bf00      	nop
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b086      	sub	sp, #24
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a976:	2300      	movs	r3, #0
 800a978:	617b      	str	r3, [r7, #20]
 800a97a:	2300      	movs	r3, #0
 800a97c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d008      	beq.n	800a996 <pbuf_copy+0x2a>
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d005      	beq.n	800a996 <pbuf_copy+0x2a>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	891a      	ldrh	r2, [r3, #8]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	891b      	ldrh	r3, [r3, #8]
 800a992:	429a      	cmp	r2, r3
 800a994:	d209      	bcs.n	800a9aa <pbuf_copy+0x3e>
 800a996:	4b57      	ldr	r3, [pc, #348]	; (800aaf4 <pbuf_copy+0x188>)
 800a998:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a99c:	4956      	ldr	r1, [pc, #344]	; (800aaf8 <pbuf_copy+0x18c>)
 800a99e:	4857      	ldr	r0, [pc, #348]	; (800aafc <pbuf_copy+0x190>)
 800a9a0:	f009 fcfa 	bl	8014398 <iprintf>
 800a9a4:	f06f 030f 	mvn.w	r3, #15
 800a9a8:	e09f      	b.n	800aaea <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	895b      	ldrh	r3, [r3, #10]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	1ad2      	subs	r2, r2, r3
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	895b      	ldrh	r3, [r3, #10]
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	1acb      	subs	r3, r1, r3
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d306      	bcc.n	800a9d0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	895b      	ldrh	r3, [r3, #10]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	60fb      	str	r3, [r7, #12]
 800a9ce:	e005      	b.n	800a9dc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	895b      	ldrh	r3, [r3, #10]
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685a      	ldr	r2, [r3, #4]
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	18d0      	adds	r0, r2, r3
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	f009 fca2 	bl	8014338 <memcpy>
    offset_to += len;
 800a9f4:	697a      	ldr	r2, [r7, #20]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a9fc:	693a      	ldr	r2, [r7, #16]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	4413      	add	r3, r2
 800aa02:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	895b      	ldrh	r3, [r3, #10]
 800aa08:	461a      	mov	r2, r3
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d906      	bls.n	800aa1e <pbuf_copy+0xb2>
 800aa10:	4b38      	ldr	r3, [pc, #224]	; (800aaf4 <pbuf_copy+0x188>)
 800aa12:	f240 32d9 	movw	r2, #985	; 0x3d9
 800aa16:	493a      	ldr	r1, [pc, #232]	; (800ab00 <pbuf_copy+0x194>)
 800aa18:	4838      	ldr	r0, [pc, #224]	; (800aafc <pbuf_copy+0x190>)
 800aa1a:	f009 fcbd 	bl	8014398 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	895b      	ldrh	r3, [r3, #10]
 800aa22:	461a      	mov	r2, r3
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d906      	bls.n	800aa38 <pbuf_copy+0xcc>
 800aa2a:	4b32      	ldr	r3, [pc, #200]	; (800aaf4 <pbuf_copy+0x188>)
 800aa2c:	f240 32da 	movw	r2, #986	; 0x3da
 800aa30:	4934      	ldr	r1, [pc, #208]	; (800ab04 <pbuf_copy+0x198>)
 800aa32:	4832      	ldr	r0, [pc, #200]	; (800aafc <pbuf_copy+0x190>)
 800aa34:	f009 fcb0 	bl	8014398 <iprintf>
    if (offset_from >= p_from->len) {
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	895b      	ldrh	r3, [r3, #10]
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d304      	bcc.n	800aa4e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	895b      	ldrh	r3, [r3, #10]
 800aa52:	461a      	mov	r2, r3
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d114      	bne.n	800aa84 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d10c      	bne.n	800aa84 <pbuf_copy+0x118>
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d009      	beq.n	800aa84 <pbuf_copy+0x118>
 800aa70:	4b20      	ldr	r3, [pc, #128]	; (800aaf4 <pbuf_copy+0x188>)
 800aa72:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800aa76:	4924      	ldr	r1, [pc, #144]	; (800ab08 <pbuf_copy+0x19c>)
 800aa78:	4820      	ldr	r0, [pc, #128]	; (800aafc <pbuf_copy+0x190>)
 800aa7a:	f009 fc8d 	bl	8014398 <iprintf>
 800aa7e:	f06f 030f 	mvn.w	r3, #15
 800aa82:	e032      	b.n	800aaea <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d013      	beq.n	800aab2 <pbuf_copy+0x146>
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	895a      	ldrh	r2, [r3, #10]
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	891b      	ldrh	r3, [r3, #8]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d10d      	bne.n	800aab2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d009      	beq.n	800aab2 <pbuf_copy+0x146>
 800aa9e:	4b15      	ldr	r3, [pc, #84]	; (800aaf4 <pbuf_copy+0x188>)
 800aaa0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800aaa4:	4919      	ldr	r1, [pc, #100]	; (800ab0c <pbuf_copy+0x1a0>)
 800aaa6:	4815      	ldr	r0, [pc, #84]	; (800aafc <pbuf_copy+0x190>)
 800aaa8:	f009 fc76 	bl	8014398 <iprintf>
 800aaac:	f06f 0305 	mvn.w	r3, #5
 800aab0:	e01b      	b.n	800aaea <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d013      	beq.n	800aae0 <pbuf_copy+0x174>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	895a      	ldrh	r2, [r3, #10]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	891b      	ldrh	r3, [r3, #8]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d10d      	bne.n	800aae0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d009      	beq.n	800aae0 <pbuf_copy+0x174>
 800aacc:	4b09      	ldr	r3, [pc, #36]	; (800aaf4 <pbuf_copy+0x188>)
 800aace:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800aad2:	490e      	ldr	r1, [pc, #56]	; (800ab0c <pbuf_copy+0x1a0>)
 800aad4:	4809      	ldr	r0, [pc, #36]	; (800aafc <pbuf_copy+0x190>)
 800aad6:	f009 fc5f 	bl	8014398 <iprintf>
 800aada:	f06f 0305 	mvn.w	r3, #5
 800aade:	e004      	b.n	800aaea <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f47f af61 	bne.w	800a9aa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3718      	adds	r7, #24
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	08015fac 	.word	0x08015fac
 800aaf8:	08016254 	.word	0x08016254
 800aafc:	0801600c 	.word	0x0801600c
 800ab00:	08016284 	.word	0x08016284
 800ab04:	0801629c 	.word	0x0801629c
 800ab08:	080162b8 	.word	0x080162b8
 800ab0c:	080162c8 	.word	0x080162c8

0800ab10 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b088      	sub	sp, #32
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	4611      	mov	r1, r2
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	460b      	mov	r3, r1
 800ab20:	80fb      	strh	r3, [r7, #6]
 800ab22:	4613      	mov	r3, r2
 800ab24:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d108      	bne.n	800ab46 <pbuf_copy_partial+0x36>
 800ab34:	4b2b      	ldr	r3, [pc, #172]	; (800abe4 <pbuf_copy_partial+0xd4>)
 800ab36:	f240 420a 	movw	r2, #1034	; 0x40a
 800ab3a:	492b      	ldr	r1, [pc, #172]	; (800abe8 <pbuf_copy_partial+0xd8>)
 800ab3c:	482b      	ldr	r0, [pc, #172]	; (800abec <pbuf_copy_partial+0xdc>)
 800ab3e:	f009 fc2b 	bl	8014398 <iprintf>
 800ab42:	2300      	movs	r3, #0
 800ab44:	e04a      	b.n	800abdc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d108      	bne.n	800ab5e <pbuf_copy_partial+0x4e>
 800ab4c:	4b25      	ldr	r3, [pc, #148]	; (800abe4 <pbuf_copy_partial+0xd4>)
 800ab4e:	f240 420b 	movw	r2, #1035	; 0x40b
 800ab52:	4927      	ldr	r1, [pc, #156]	; (800abf0 <pbuf_copy_partial+0xe0>)
 800ab54:	4825      	ldr	r0, [pc, #148]	; (800abec <pbuf_copy_partial+0xdc>)
 800ab56:	f009 fc1f 	bl	8014398 <iprintf>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	e03e      	b.n	800abdc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	61fb      	str	r3, [r7, #28]
 800ab62:	e034      	b.n	800abce <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ab64:	88bb      	ldrh	r3, [r7, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00a      	beq.n	800ab80 <pbuf_copy_partial+0x70>
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	895b      	ldrh	r3, [r3, #10]
 800ab6e:	88ba      	ldrh	r2, [r7, #4]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d305      	bcc.n	800ab80 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	895b      	ldrh	r3, [r3, #10]
 800ab78:	88ba      	ldrh	r2, [r7, #4]
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	80bb      	strh	r3, [r7, #4]
 800ab7e:	e023      	b.n	800abc8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	895a      	ldrh	r2, [r3, #10]
 800ab84:	88bb      	ldrh	r3, [r7, #4]
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ab8a:	8b3a      	ldrh	r2, [r7, #24]
 800ab8c:	88fb      	ldrh	r3, [r7, #6]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d901      	bls.n	800ab96 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ab96:	8b7b      	ldrh	r3, [r7, #26]
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	18d0      	adds	r0, r2, r3
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	685a      	ldr	r2, [r3, #4]
 800aba0:	88bb      	ldrh	r3, [r7, #4]
 800aba2:	4413      	add	r3, r2
 800aba4:	8b3a      	ldrh	r2, [r7, #24]
 800aba6:	4619      	mov	r1, r3
 800aba8:	f009 fbc6 	bl	8014338 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800abac:	8afa      	ldrh	r2, [r7, #22]
 800abae:	8b3b      	ldrh	r3, [r7, #24]
 800abb0:	4413      	add	r3, r2
 800abb2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800abb4:	8b7a      	ldrh	r2, [r7, #26]
 800abb6:	8b3b      	ldrh	r3, [r7, #24]
 800abb8:	4413      	add	r3, r2
 800abba:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800abbc:	88fa      	ldrh	r2, [r7, #6]
 800abbe:	8b3b      	ldrh	r3, [r7, #24]
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800abc4:	2300      	movs	r3, #0
 800abc6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	61fb      	str	r3, [r7, #28]
 800abce:	88fb      	ldrh	r3, [r7, #6]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d002      	beq.n	800abda <pbuf_copy_partial+0xca>
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1c4      	bne.n	800ab64 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800abda:	8afb      	ldrh	r3, [r7, #22]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3720      	adds	r7, #32
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	08015fac 	.word	0x08015fac
 800abe8:	080162f4 	.word	0x080162f4
 800abec:	0801600c 	.word	0x0801600c
 800abf0:	08016314 	.word	0x08016314

0800abf4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b087      	sub	sp, #28
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	460b      	mov	r3, r1
 800abfe:	607a      	str	r2, [r7, #4]
 800ac00:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800ac02:	897b      	ldrh	r3, [r7, #10]
 800ac04:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800ac0a:	e007      	b.n	800ac1c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	895b      	ldrh	r3, [r3, #10]
 800ac10:	8afa      	ldrh	r2, [r7, #22]
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d004      	beq.n	800ac2c <pbuf_skip_const+0x38>
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	895b      	ldrh	r3, [r3, #10]
 800ac26:	8afa      	ldrh	r2, [r7, #22]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d2ef      	bcs.n	800ac0c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d002      	beq.n	800ac38 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	8afa      	ldrh	r2, [r7, #22]
 800ac36:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800ac38:	693b      	ldr	r3, [r7, #16]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	371c      	adds	r7, #28
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b086      	sub	sp, #24
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	60f8      	str	r0, [r7, #12]
 800ac4e:	460b      	mov	r3, r1
 800ac50:	607a      	str	r2, [r7, #4]
 800ac52:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800ac54:	897b      	ldrh	r3, [r7, #10]
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f7ff ffca 	bl	800abf4 <pbuf_skip_const>
 800ac60:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800ac62:	697b      	ldr	r3, [r7, #20]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3718      	adds	r7, #24
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b088      	sub	sp, #32
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	4613      	mov	r3, r2
 800ac78:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800ac7a:	88fb      	ldrh	r3, [r7, #6]
 800ac7c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d109      	bne.n	800ac9c <pbuf_take+0x30>
 800ac88:	4b3a      	ldr	r3, [pc, #232]	; (800ad74 <pbuf_take+0x108>)
 800ac8a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800ac8e:	493a      	ldr	r1, [pc, #232]	; (800ad78 <pbuf_take+0x10c>)
 800ac90:	483a      	ldr	r0, [pc, #232]	; (800ad7c <pbuf_take+0x110>)
 800ac92:	f009 fb81 	bl	8014398 <iprintf>
 800ac96:	f06f 030f 	mvn.w	r3, #15
 800ac9a:	e067      	b.n	800ad6c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d109      	bne.n	800acb6 <pbuf_take+0x4a>
 800aca2:	4b34      	ldr	r3, [pc, #208]	; (800ad74 <pbuf_take+0x108>)
 800aca4:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800aca8:	4935      	ldr	r1, [pc, #212]	; (800ad80 <pbuf_take+0x114>)
 800acaa:	4834      	ldr	r0, [pc, #208]	; (800ad7c <pbuf_take+0x110>)
 800acac:	f009 fb74 	bl	8014398 <iprintf>
 800acb0:	f06f 030f 	mvn.w	r3, #15
 800acb4:	e05a      	b.n	800ad6c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	891b      	ldrh	r3, [r3, #8]
 800acba:	88fa      	ldrh	r2, [r7, #6]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d909      	bls.n	800acd4 <pbuf_take+0x68>
 800acc0:	4b2c      	ldr	r3, [pc, #176]	; (800ad74 <pbuf_take+0x108>)
 800acc2:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800acc6:	492f      	ldr	r1, [pc, #188]	; (800ad84 <pbuf_take+0x118>)
 800acc8:	482c      	ldr	r0, [pc, #176]	; (800ad7c <pbuf_take+0x110>)
 800acca:	f009 fb65 	bl	8014398 <iprintf>
 800acce:	f04f 33ff 	mov.w	r3, #4294967295
 800acd2:	e04b      	b.n	800ad6c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d007      	beq.n	800acea <pbuf_take+0x7e>
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d004      	beq.n	800acea <pbuf_take+0x7e>
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	891b      	ldrh	r3, [r3, #8]
 800ace4:	88fa      	ldrh	r2, [r7, #6]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d902      	bls.n	800acf0 <pbuf_take+0x84>
    return ERR_ARG;
 800acea:	f06f 030f 	mvn.w	r3, #15
 800acee:	e03d      	b.n	800ad6c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	61fb      	str	r3, [r7, #28]
 800acf4:	e028      	b.n	800ad48 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d106      	bne.n	800ad0a <pbuf_take+0x9e>
 800acfc:	4b1d      	ldr	r3, [pc, #116]	; (800ad74 <pbuf_take+0x108>)
 800acfe:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800ad02:	4921      	ldr	r1, [pc, #132]	; (800ad88 <pbuf_take+0x11c>)
 800ad04:	481d      	ldr	r0, [pc, #116]	; (800ad7c <pbuf_take+0x110>)
 800ad06:	f009 fb47 	bl	8014398 <iprintf>
    buf_copy_len = total_copy_len;
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	895b      	ldrh	r3, [r3, #10]
 800ad12:	461a      	mov	r2, r3
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d902      	bls.n	800ad20 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	895b      	ldrh	r3, [r3, #10]
 800ad1e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	6858      	ldr	r0, [r3, #4]
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	4413      	add	r3, r2
 800ad2a:	69ba      	ldr	r2, [r7, #24]
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	f009 fb03 	bl	8014338 <memcpy>
    total_copy_len -= buf_copy_len;
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800ad3a:	693a      	ldr	r2, [r7, #16]
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	4413      	add	r3, r2
 800ad40:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	61fb      	str	r3, [r7, #28]
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1d3      	bne.n	800acf6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d103      	bne.n	800ad5c <pbuf_take+0xf0>
 800ad54:	88fb      	ldrh	r3, [r7, #6]
 800ad56:	693a      	ldr	r2, [r7, #16]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d006      	beq.n	800ad6a <pbuf_take+0xfe>
 800ad5c:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <pbuf_take+0x108>)
 800ad5e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800ad62:	490a      	ldr	r1, [pc, #40]	; (800ad8c <pbuf_take+0x120>)
 800ad64:	4805      	ldr	r0, [pc, #20]	; (800ad7c <pbuf_take+0x110>)
 800ad66:	f009 fb17 	bl	8014398 <iprintf>
  return ERR_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3720      	adds	r7, #32
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	08015fac 	.word	0x08015fac
 800ad78:	08016384 	.word	0x08016384
 800ad7c:	0801600c 	.word	0x0801600c
 800ad80:	0801639c 	.word	0x0801639c
 800ad84:	080163b8 	.word	0x080163b8
 800ad88:	080163d8 	.word	0x080163d8
 800ad8c:	080163f0 	.word	0x080163f0

0800ad90 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b088      	sub	sp, #32
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	4611      	mov	r1, r2
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	460b      	mov	r3, r1
 800ada0:	80fb      	strh	r3, [r7, #6]
 800ada2:	4613      	mov	r3, r2
 800ada4:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800ada6:	f107 0210 	add.w	r2, r7, #16
 800adaa:	88bb      	ldrh	r3, [r7, #4]
 800adac:	4619      	mov	r1, r3
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f7ff ff49 	bl	800ac46 <pbuf_skip>
 800adb4:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d047      	beq.n	800ae4c <pbuf_take_at+0xbc>
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	891b      	ldrh	r3, [r3, #8]
 800adc0:	461a      	mov	r2, r3
 800adc2:	8a3b      	ldrh	r3, [r7, #16]
 800adc4:	4619      	mov	r1, r3
 800adc6:	88fb      	ldrh	r3, [r7, #6]
 800adc8:	440b      	add	r3, r1
 800adca:	429a      	cmp	r2, r3
 800adcc:	db3e      	blt.n	800ae4c <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800adce:	88fb      	ldrh	r3, [r7, #6]
 800add0:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	895a      	ldrh	r2, [r3, #10]
 800adda:	8a3b      	ldrh	r3, [r7, #16]
 800addc:	429a      	cmp	r2, r3
 800adde:	d806      	bhi.n	800adee <pbuf_take_at+0x5e>
 800ade0:	4b1d      	ldr	r3, [pc, #116]	; (800ae58 <pbuf_take_at+0xc8>)
 800ade2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ade6:	491d      	ldr	r1, [pc, #116]	; (800ae5c <pbuf_take_at+0xcc>)
 800ade8:	481d      	ldr	r0, [pc, #116]	; (800ae60 <pbuf_take_at+0xd0>)
 800adea:	f009 fad5 	bl	8014398 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	895b      	ldrh	r3, [r3, #10]
 800adf2:	461a      	mov	r2, r3
 800adf4:	8a3b      	ldrh	r3, [r7, #16]
 800adf6:	1ad2      	subs	r2, r2, r3
 800adf8:	88fb      	ldrh	r3, [r7, #6]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	da05      	bge.n	800ae0a <pbuf_take_at+0x7a>
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	895a      	ldrh	r2, [r3, #10]
 800ae02:	8a3b      	ldrh	r3, [r7, #16]
 800ae04:	1ad3      	subs	r3, r2, r3
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	e000      	b.n	800ae0c <pbuf_take_at+0x7c>
 800ae0a:	88fb      	ldrh	r3, [r7, #6]
 800ae0c:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	8a3a      	ldrh	r2, [r7, #16]
 800ae14:	4413      	add	r3, r2
 800ae16:	8a7a      	ldrh	r2, [r7, #18]
 800ae18:	68b9      	ldr	r1, [r7, #8]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f009 fa8c 	bl	8014338 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800ae20:	8b7a      	ldrh	r2, [r7, #26]
 800ae22:	8a7b      	ldrh	r3, [r7, #18]
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800ae28:	8a7b      	ldrh	r3, [r7, #18]
 800ae2a:	697a      	ldr	r2, [r7, #20]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800ae30:	8b7b      	ldrh	r3, [r7, #26]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d008      	beq.n	800ae48 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	8b7a      	ldrh	r2, [r7, #26]
 800ae3c:	6979      	ldr	r1, [r7, #20]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7ff ff14 	bl	800ac6c <pbuf_take>
 800ae44:	4603      	mov	r3, r0
 800ae46:	e003      	b.n	800ae50 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	e001      	b.n	800ae50 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800ae4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3720      	adds	r7, #32
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	08015fac 	.word	0x08015fac
 800ae5c:	08016408 	.word	0x08016408
 800ae60:	0801600c 	.word	0x0801600c

0800ae64 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	603a      	str	r2, [r7, #0]
 800ae6e:	71fb      	strb	r3, [r7, #7]
 800ae70:	460b      	mov	r3, r1
 800ae72:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	8919      	ldrh	r1, [r3, #8]
 800ae78:	88ba      	ldrh	r2, [r7, #4]
 800ae7a:	79fb      	ldrb	r3, [r7, #7]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7ff f969 	bl	800a154 <pbuf_alloc>
 800ae82:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d101      	bne.n	800ae8e <pbuf_clone+0x2a>
    return NULL;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	e011      	b.n	800aeb2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f7ff fd6b 	bl	800a96c <pbuf_copy>
 800ae96:	4603      	mov	r3, r0
 800ae98:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ae9a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d006      	beq.n	800aeb0 <pbuf_clone+0x4c>
 800aea2:	4b06      	ldr	r3, [pc, #24]	; (800aebc <pbuf_clone+0x58>)
 800aea4:	f240 5224 	movw	r2, #1316	; 0x524
 800aea8:	4905      	ldr	r1, [pc, #20]	; (800aec0 <pbuf_clone+0x5c>)
 800aeaa:	4806      	ldr	r0, [pc, #24]	; (800aec4 <pbuf_clone+0x60>)
 800aeac:	f009 fa74 	bl	8014398 <iprintf>
  return q;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	08015fac 	.word	0x08015fac
 800aec0:	08016420 	.word	0x08016420
 800aec4:	0801600c 	.word	0x0801600c

0800aec8 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	807b      	strh	r3, [r7, #2]
 800aed4:	4613      	mov	r3, r2
 800aed6:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800aed8:	f107 020a 	add.w	r2, r7, #10
 800aedc:	887b      	ldrh	r3, [r7, #2]
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f7ff feb0 	bl	800ac46 <pbuf_skip>
 800aee6:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00a      	beq.n	800af04 <pbuf_put_at+0x3c>
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	895a      	ldrh	r2, [r3, #10]
 800aef2:	897b      	ldrh	r3, [r7, #10]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d905      	bls.n	800af04 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	897a      	ldrh	r2, [r7, #10]
 800aefe:	4413      	add	r3, r2
 800af00:	787a      	ldrb	r2, [r7, #1]
 800af02:	701a      	strb	r2, [r3, #0]
  }
}
 800af04:	bf00      	nop
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800af10:	f009 fad0 	bl	80144b4 <rand>
 800af14:	4603      	mov	r3, r0
 800af16:	b29b      	uxth	r3, r3
 800af18:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800af22:	b29a      	uxth	r2, r3
 800af24:	4b01      	ldr	r3, [pc, #4]	; (800af2c <tcp_init+0x20>)
 800af26:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800af28:	bf00      	nop
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	2000003e 	.word	0x2000003e

0800af30 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	7d1b      	ldrb	r3, [r3, #20]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d105      	bne.n	800af4c <tcp_free+0x1c>
 800af40:	4b06      	ldr	r3, [pc, #24]	; (800af5c <tcp_free+0x2c>)
 800af42:	22d4      	movs	r2, #212	; 0xd4
 800af44:	4906      	ldr	r1, [pc, #24]	; (800af60 <tcp_free+0x30>)
 800af46:	4807      	ldr	r0, [pc, #28]	; (800af64 <tcp_free+0x34>)
 800af48:	f009 fa26 	bl	8014398 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800af4c:	6879      	ldr	r1, [r7, #4]
 800af4e:	2001      	movs	r0, #1
 800af50:	f7fe fdd2 	bl	8009af8 <memp_free>
}
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	080164ac 	.word	0x080164ac
 800af60:	080164dc 	.word	0x080164dc
 800af64:	080164f0 	.word	0x080164f0

0800af68 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	7d1b      	ldrb	r3, [r3, #20]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d105      	bne.n	800af84 <tcp_free_listen+0x1c>
 800af78:	4b06      	ldr	r3, [pc, #24]	; (800af94 <tcp_free_listen+0x2c>)
 800af7a:	22df      	movs	r2, #223	; 0xdf
 800af7c:	4906      	ldr	r1, [pc, #24]	; (800af98 <tcp_free_listen+0x30>)
 800af7e:	4807      	ldr	r0, [pc, #28]	; (800af9c <tcp_free_listen+0x34>)
 800af80:	f009 fa0a 	bl	8014398 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800af84:	6879      	ldr	r1, [r7, #4]
 800af86:	2002      	movs	r0, #2
 800af88:	f7fe fdb6 	bl	8009af8 <memp_free>
}
 800af8c:	bf00      	nop
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	080164ac 	.word	0x080164ac
 800af98:	08016518 	.word	0x08016518
 800af9c:	080164f0 	.word	0x080164f0

0800afa0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800afa4:	f001 f974 	bl	800c290 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800afa8:	4b07      	ldr	r3, [pc, #28]	; (800afc8 <tcp_tmr+0x28>)
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	3301      	adds	r3, #1
 800afae:	b2da      	uxtb	r2, r3
 800afb0:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <tcp_tmr+0x28>)
 800afb2:	701a      	strb	r2, [r3, #0]
 800afb4:	4b04      	ldr	r3, [pc, #16]	; (800afc8 <tcp_tmr+0x28>)
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	f003 0301 	and.w	r3, r3, #1
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d001      	beq.n	800afc4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800afc0:	f000 fe26 	bl	800bc10 <tcp_slowtmr>
  }
}
 800afc4:	bf00      	nop
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	20000781 	.word	0x20000781

0800afcc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d105      	bne.n	800afe8 <tcp_remove_listener+0x1c>
 800afdc:	4b0d      	ldr	r3, [pc, #52]	; (800b014 <tcp_remove_listener+0x48>)
 800afde:	22ff      	movs	r2, #255	; 0xff
 800afe0:	490d      	ldr	r1, [pc, #52]	; (800b018 <tcp_remove_listener+0x4c>)
 800afe2:	480e      	ldr	r0, [pc, #56]	; (800b01c <tcp_remove_listener+0x50>)
 800afe4:	f009 f9d8 	bl	8014398 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	60fb      	str	r3, [r7, #12]
 800afec:	e00a      	b.n	800b004 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aff2:	683a      	ldr	r2, [r7, #0]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d102      	bne.n	800affe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2200      	movs	r2, #0
 800affc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	60fb      	str	r3, [r7, #12]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1f1      	bne.n	800afee <tcp_remove_listener+0x22>
    }
  }
}
 800b00a:	bf00      	nop
 800b00c:	bf00      	nop
 800b00e:	3710      	adds	r7, #16
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	080164ac 	.word	0x080164ac
 800b018:	08016534 	.word	0x08016534
 800b01c:	080164f0 	.word	0x080164f0

0800b020 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d106      	bne.n	800b03c <tcp_listen_closed+0x1c>
 800b02e:	4b14      	ldr	r3, [pc, #80]	; (800b080 <tcp_listen_closed+0x60>)
 800b030:	f240 1211 	movw	r2, #273	; 0x111
 800b034:	4913      	ldr	r1, [pc, #76]	; (800b084 <tcp_listen_closed+0x64>)
 800b036:	4814      	ldr	r0, [pc, #80]	; (800b088 <tcp_listen_closed+0x68>)
 800b038:	f009 f9ae 	bl	8014398 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	7d1b      	ldrb	r3, [r3, #20]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d006      	beq.n	800b052 <tcp_listen_closed+0x32>
 800b044:	4b0e      	ldr	r3, [pc, #56]	; (800b080 <tcp_listen_closed+0x60>)
 800b046:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b04a:	4910      	ldr	r1, [pc, #64]	; (800b08c <tcp_listen_closed+0x6c>)
 800b04c:	480e      	ldr	r0, [pc, #56]	; (800b088 <tcp_listen_closed+0x68>)
 800b04e:	f009 f9a3 	bl	8014398 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b052:	2301      	movs	r3, #1
 800b054:	60fb      	str	r3, [r7, #12]
 800b056:	e00b      	b.n	800b070 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b058:	4a0d      	ldr	r2, [pc, #52]	; (800b090 <tcp_listen_closed+0x70>)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	6879      	ldr	r1, [r7, #4]
 800b064:	4618      	mov	r0, r3
 800b066:	f7ff ffb1 	bl	800afcc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	3301      	adds	r3, #1
 800b06e:	60fb      	str	r3, [r7, #12]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2b03      	cmp	r3, #3
 800b074:	d9f0      	bls.n	800b058 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b076:	bf00      	nop
 800b078:	bf00      	nop
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	080164ac 	.word	0x080164ac
 800b084:	0801655c 	.word	0x0801655c
 800b088:	080164f0 	.word	0x080164f0
 800b08c:	08016568 	.word	0x08016568
 800b090:	08059b40 	.word	0x08059b40

0800b094 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b094:	b5b0      	push	{r4, r5, r7, lr}
 800b096:	b088      	sub	sp, #32
 800b098:	af04      	add	r7, sp, #16
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	460b      	mov	r3, r1
 800b09e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d106      	bne.n	800b0b4 <tcp_close_shutdown+0x20>
 800b0a6:	4b63      	ldr	r3, [pc, #396]	; (800b234 <tcp_close_shutdown+0x1a0>)
 800b0a8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b0ac:	4962      	ldr	r1, [pc, #392]	; (800b238 <tcp_close_shutdown+0x1a4>)
 800b0ae:	4863      	ldr	r0, [pc, #396]	; (800b23c <tcp_close_shutdown+0x1a8>)
 800b0b0:	f009 f972 	bl	8014398 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b0b4:	78fb      	ldrb	r3, [r7, #3]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d066      	beq.n	800b188 <tcp_close_shutdown+0xf4>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	7d1b      	ldrb	r3, [r3, #20]
 800b0be:	2b04      	cmp	r3, #4
 800b0c0:	d003      	beq.n	800b0ca <tcp_close_shutdown+0x36>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	7d1b      	ldrb	r3, [r3, #20]
 800b0c6:	2b07      	cmp	r3, #7
 800b0c8:	d15e      	bne.n	800b188 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d104      	bne.n	800b0dc <tcp_close_shutdown+0x48>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b0da:	d055      	beq.n	800b188 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	8b5b      	ldrh	r3, [r3, #26]
 800b0e0:	f003 0310 	and.w	r3, r3, #16
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d106      	bne.n	800b0f6 <tcp_close_shutdown+0x62>
 800b0e8:	4b52      	ldr	r3, [pc, #328]	; (800b234 <tcp_close_shutdown+0x1a0>)
 800b0ea:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b0ee:	4954      	ldr	r1, [pc, #336]	; (800b240 <tcp_close_shutdown+0x1ac>)
 800b0f0:	4852      	ldr	r0, [pc, #328]	; (800b23c <tcp_close_shutdown+0x1a8>)
 800b0f2:	f009 f951 	bl	8014398 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b0fe:	687d      	ldr	r5, [r7, #4]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	3304      	adds	r3, #4
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	8ad2      	ldrh	r2, [r2, #22]
 800b108:	6879      	ldr	r1, [r7, #4]
 800b10a:	8b09      	ldrh	r1, [r1, #24]
 800b10c:	9102      	str	r1, [sp, #8]
 800b10e:	9201      	str	r2, [sp, #4]
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	462b      	mov	r3, r5
 800b114:	4622      	mov	r2, r4
 800b116:	4601      	mov	r1, r0
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f005 fe9d 	bl	8010e58 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f001 fc7e 	bl	800ca20 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b124:	4b47      	ldr	r3, [pc, #284]	; (800b244 <tcp_close_shutdown+0x1b0>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d105      	bne.n	800b13a <tcp_close_shutdown+0xa6>
 800b12e:	4b45      	ldr	r3, [pc, #276]	; (800b244 <tcp_close_shutdown+0x1b0>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	4a43      	ldr	r2, [pc, #268]	; (800b244 <tcp_close_shutdown+0x1b0>)
 800b136:	6013      	str	r3, [r2, #0]
 800b138:	e013      	b.n	800b162 <tcp_close_shutdown+0xce>
 800b13a:	4b42      	ldr	r3, [pc, #264]	; (800b244 <tcp_close_shutdown+0x1b0>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	60fb      	str	r3, [r7, #12]
 800b140:	e00c      	b.n	800b15c <tcp_close_shutdown+0xc8>
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d104      	bne.n	800b156 <tcp_close_shutdown+0xc2>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	68da      	ldr	r2, [r3, #12]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	60da      	str	r2, [r3, #12]
 800b154:	e005      	b.n	800b162 <tcp_close_shutdown+0xce>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	60fb      	str	r3, [r7, #12]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1ef      	bne.n	800b142 <tcp_close_shutdown+0xae>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	60da      	str	r2, [r3, #12]
 800b168:	4b37      	ldr	r3, [pc, #220]	; (800b248 <tcp_close_shutdown+0x1b4>)
 800b16a:	2201      	movs	r2, #1
 800b16c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b16e:	4b37      	ldr	r3, [pc, #220]	; (800b24c <tcp_close_shutdown+0x1b8>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	429a      	cmp	r2, r3
 800b176:	d102      	bne.n	800b17e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b178:	f004 f912 	bl	800f3a0 <tcp_trigger_input_pcb_close>
 800b17c:	e002      	b.n	800b184 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7ff fed6 	bl	800af30 <tcp_free>
      }
      return ERR_OK;
 800b184:	2300      	movs	r3, #0
 800b186:	e050      	b.n	800b22a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	7d1b      	ldrb	r3, [r3, #20]
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	d03b      	beq.n	800b208 <tcp_close_shutdown+0x174>
 800b190:	2b02      	cmp	r3, #2
 800b192:	dc44      	bgt.n	800b21e <tcp_close_shutdown+0x18a>
 800b194:	2b00      	cmp	r3, #0
 800b196:	d002      	beq.n	800b19e <tcp_close_shutdown+0x10a>
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d02a      	beq.n	800b1f2 <tcp_close_shutdown+0x15e>
 800b19c:	e03f      	b.n	800b21e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	8adb      	ldrh	r3, [r3, #22]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d021      	beq.n	800b1ea <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b1a6:	4b2a      	ldr	r3, [pc, #168]	; (800b250 <tcp_close_shutdown+0x1bc>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d105      	bne.n	800b1bc <tcp_close_shutdown+0x128>
 800b1b0:	4b27      	ldr	r3, [pc, #156]	; (800b250 <tcp_close_shutdown+0x1bc>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	4a26      	ldr	r2, [pc, #152]	; (800b250 <tcp_close_shutdown+0x1bc>)
 800b1b8:	6013      	str	r3, [r2, #0]
 800b1ba:	e013      	b.n	800b1e4 <tcp_close_shutdown+0x150>
 800b1bc:	4b24      	ldr	r3, [pc, #144]	; (800b250 <tcp_close_shutdown+0x1bc>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	60bb      	str	r3, [r7, #8]
 800b1c2:	e00c      	b.n	800b1de <tcp_close_shutdown+0x14a>
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d104      	bne.n	800b1d8 <tcp_close_shutdown+0x144>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	68da      	ldr	r2, [r3, #12]
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	60da      	str	r2, [r3, #12]
 800b1d6:	e005      	b.n	800b1e4 <tcp_close_shutdown+0x150>
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	60bb      	str	r3, [r7, #8]
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1ef      	bne.n	800b1c4 <tcp_close_shutdown+0x130>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7ff fea0 	bl	800af30 <tcp_free>
      break;
 800b1f0:	e01a      	b.n	800b228 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7ff ff14 	bl	800b020 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b1f8:	6879      	ldr	r1, [r7, #4]
 800b1fa:	4816      	ldr	r0, [pc, #88]	; (800b254 <tcp_close_shutdown+0x1c0>)
 800b1fc:	f001 fc60 	bl	800cac0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7ff feb1 	bl	800af68 <tcp_free_listen>
      break;
 800b206:	e00f      	b.n	800b228 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b208:	6879      	ldr	r1, [r7, #4]
 800b20a:	480e      	ldr	r0, [pc, #56]	; (800b244 <tcp_close_shutdown+0x1b0>)
 800b20c:	f001 fc58 	bl	800cac0 <tcp_pcb_remove>
 800b210:	4b0d      	ldr	r3, [pc, #52]	; (800b248 <tcp_close_shutdown+0x1b4>)
 800b212:	2201      	movs	r2, #1
 800b214:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f7ff fe8a 	bl	800af30 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b21c:	e004      	b.n	800b228 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f81a 	bl	800b258 <tcp_close_shutdown_fin>
 800b224:	4603      	mov	r3, r0
 800b226:	e000      	b.n	800b22a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b228:	2300      	movs	r3, #0
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bdb0      	pop	{r4, r5, r7, pc}
 800b232:	bf00      	nop
 800b234:	080164ac 	.word	0x080164ac
 800b238:	08016580 	.word	0x08016580
 800b23c:	080164f0 	.word	0x080164f0
 800b240:	080165a0 	.word	0x080165a0
 800b244:	200075d0 	.word	0x200075d0
 800b248:	200075cc 	.word	0x200075cc
 800b24c:	200075e4 	.word	0x200075e4
 800b250:	200075dc 	.word	0x200075dc
 800b254:	200075d8 	.word	0x200075d8

0800b258 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d106      	bne.n	800b274 <tcp_close_shutdown_fin+0x1c>
 800b266:	4b2e      	ldr	r3, [pc, #184]	; (800b320 <tcp_close_shutdown_fin+0xc8>)
 800b268:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b26c:	492d      	ldr	r1, [pc, #180]	; (800b324 <tcp_close_shutdown_fin+0xcc>)
 800b26e:	482e      	ldr	r0, [pc, #184]	; (800b328 <tcp_close_shutdown_fin+0xd0>)
 800b270:	f009 f892 	bl	8014398 <iprintf>

  switch (pcb->state) {
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	7d1b      	ldrb	r3, [r3, #20]
 800b278:	2b07      	cmp	r3, #7
 800b27a:	d020      	beq.n	800b2be <tcp_close_shutdown_fin+0x66>
 800b27c:	2b07      	cmp	r3, #7
 800b27e:	dc2b      	bgt.n	800b2d8 <tcp_close_shutdown_fin+0x80>
 800b280:	2b03      	cmp	r3, #3
 800b282:	d002      	beq.n	800b28a <tcp_close_shutdown_fin+0x32>
 800b284:	2b04      	cmp	r3, #4
 800b286:	d00d      	beq.n	800b2a4 <tcp_close_shutdown_fin+0x4c>
 800b288:	e026      	b.n	800b2d8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f004 fef2 	bl	8010074 <tcp_send_fin>
 800b290:	4603      	mov	r3, r0
 800b292:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d11f      	bne.n	800b2dc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2205      	movs	r2, #5
 800b2a0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b2a2:	e01b      	b.n	800b2dc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f004 fee5 	bl	8010074 <tcp_send_fin>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b2ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d114      	bne.n	800b2e0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2205      	movs	r2, #5
 800b2ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b2bc:	e010      	b.n	800b2e0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f004 fed8 	bl	8010074 <tcp_send_fin>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b2c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d109      	bne.n	800b2e4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2209      	movs	r2, #9
 800b2d4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b2d6:	e005      	b.n	800b2e4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	e01c      	b.n	800b316 <tcp_close_shutdown_fin+0xbe>
      break;
 800b2dc:	bf00      	nop
 800b2de:	e002      	b.n	800b2e6 <tcp_close_shutdown_fin+0x8e>
      break;
 800b2e0:	bf00      	nop
 800b2e2:	e000      	b.n	800b2e6 <tcp_close_shutdown_fin+0x8e>
      break;
 800b2e4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b2e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d103      	bne.n	800b2f6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f004 fffe 	bl	80102f0 <tcp_output>
 800b2f4:	e00d      	b.n	800b312 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b2f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fe:	d108      	bne.n	800b312 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	8b5b      	ldrh	r3, [r3, #26]
 800b304:	f043 0308 	orr.w	r3, r3, #8
 800b308:	b29a      	uxth	r2, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b30e:	2300      	movs	r3, #0
 800b310:	e001      	b.n	800b316 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b312:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	080164ac 	.word	0x080164ac
 800b324:	0801655c 	.word	0x0801655c
 800b328:	080164f0 	.word	0x080164f0

0800b32c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d109      	bne.n	800b34e <tcp_close+0x22>
 800b33a:	4b0f      	ldr	r3, [pc, #60]	; (800b378 <tcp_close+0x4c>)
 800b33c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b340:	490e      	ldr	r1, [pc, #56]	; (800b37c <tcp_close+0x50>)
 800b342:	480f      	ldr	r0, [pc, #60]	; (800b380 <tcp_close+0x54>)
 800b344:	f009 f828 	bl	8014398 <iprintf>
 800b348:	f06f 030f 	mvn.w	r3, #15
 800b34c:	e00f      	b.n	800b36e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	7d1b      	ldrb	r3, [r3, #20]
 800b352:	2b01      	cmp	r3, #1
 800b354:	d006      	beq.n	800b364 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	8b5b      	ldrh	r3, [r3, #26]
 800b35a:	f043 0310 	orr.w	r3, r3, #16
 800b35e:	b29a      	uxth	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b364:	2101      	movs	r1, #1
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f7ff fe94 	bl	800b094 <tcp_close_shutdown>
 800b36c:	4603      	mov	r3, r0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	080164ac 	.word	0x080164ac
 800b37c:	080165bc 	.word	0x080165bc
 800b380:	080164f0 	.word	0x080164f0

0800b384 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b08e      	sub	sp, #56	; 0x38
 800b388:	af04      	add	r7, sp, #16
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d107      	bne.n	800b3a4 <tcp_abandon+0x20>
 800b394:	4b52      	ldr	r3, [pc, #328]	; (800b4e0 <tcp_abandon+0x15c>)
 800b396:	f240 223d 	movw	r2, #573	; 0x23d
 800b39a:	4952      	ldr	r1, [pc, #328]	; (800b4e4 <tcp_abandon+0x160>)
 800b39c:	4852      	ldr	r0, [pc, #328]	; (800b4e8 <tcp_abandon+0x164>)
 800b39e:	f008 fffb 	bl	8014398 <iprintf>
 800b3a2:	e099      	b.n	800b4d8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	7d1b      	ldrb	r3, [r3, #20]
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d106      	bne.n	800b3ba <tcp_abandon+0x36>
 800b3ac:	4b4c      	ldr	r3, [pc, #304]	; (800b4e0 <tcp_abandon+0x15c>)
 800b3ae:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b3b2:	494e      	ldr	r1, [pc, #312]	; (800b4ec <tcp_abandon+0x168>)
 800b3b4:	484c      	ldr	r0, [pc, #304]	; (800b4e8 <tcp_abandon+0x164>)
 800b3b6:	f008 ffef 	bl	8014398 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	7d1b      	ldrb	r3, [r3, #20]
 800b3be:	2b0a      	cmp	r3, #10
 800b3c0:	d107      	bne.n	800b3d2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b3c2:	6879      	ldr	r1, [r7, #4]
 800b3c4:	484a      	ldr	r0, [pc, #296]	; (800b4f0 <tcp_abandon+0x16c>)
 800b3c6:	f001 fb7b 	bl	800cac0 <tcp_pcb_remove>
    tcp_free(pcb);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f7ff fdb0 	bl	800af30 <tcp_free>
 800b3d0:	e082      	b.n	800b4d8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3de:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ec:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	691b      	ldr	r3, [r3, #16]
 800b3f2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	7d1b      	ldrb	r3, [r3, #20]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d126      	bne.n	800b44a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	8adb      	ldrh	r3, [r3, #22]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d02e      	beq.n	800b462 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b404:	4b3b      	ldr	r3, [pc, #236]	; (800b4f4 <tcp_abandon+0x170>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d105      	bne.n	800b41a <tcp_abandon+0x96>
 800b40e:	4b39      	ldr	r3, [pc, #228]	; (800b4f4 <tcp_abandon+0x170>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	4a37      	ldr	r2, [pc, #220]	; (800b4f4 <tcp_abandon+0x170>)
 800b416:	6013      	str	r3, [r2, #0]
 800b418:	e013      	b.n	800b442 <tcp_abandon+0xbe>
 800b41a:	4b36      	ldr	r3, [pc, #216]	; (800b4f4 <tcp_abandon+0x170>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	61fb      	str	r3, [r7, #28]
 800b420:	e00c      	b.n	800b43c <tcp_abandon+0xb8>
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d104      	bne.n	800b436 <tcp_abandon+0xb2>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	68da      	ldr	r2, [r3, #12]
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	60da      	str	r2, [r3, #12]
 800b434:	e005      	b.n	800b442 <tcp_abandon+0xbe>
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	61fb      	str	r3, [r7, #28]
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1ef      	bne.n	800b422 <tcp_abandon+0x9e>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	60da      	str	r2, [r3, #12]
 800b448:	e00b      	b.n	800b462 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	8adb      	ldrh	r3, [r3, #22]
 800b452:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b454:	6879      	ldr	r1, [r7, #4]
 800b456:	4828      	ldr	r0, [pc, #160]	; (800b4f8 <tcp_abandon+0x174>)
 800b458:	f001 fb32 	bl	800cac0 <tcp_pcb_remove>
 800b45c:	4b27      	ldr	r3, [pc, #156]	; (800b4fc <tcp_abandon+0x178>)
 800b45e:	2201      	movs	r2, #1
 800b460:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b466:	2b00      	cmp	r3, #0
 800b468:	d004      	beq.n	800b474 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b46e:	4618      	mov	r0, r3
 800b470:	f000 ffee 	bl	800c450 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d004      	beq.n	800b486 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b480:	4618      	mov	r0, r3
 800b482:	f000 ffe5 	bl	800c450 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d004      	beq.n	800b498 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b492:	4618      	mov	r0, r3
 800b494:	f000 ffdc 	bl	800c450 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00e      	beq.n	800b4bc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b49e:	6879      	ldr	r1, [r7, #4]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	3304      	adds	r3, #4
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	8b12      	ldrh	r2, [r2, #24]
 800b4a8:	9202      	str	r2, [sp, #8]
 800b4aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b4ac:	9201      	str	r2, [sp, #4]
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	69b9      	ldr	r1, [r7, #24]
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f005 fcce 	bl	8010e58 <tcp_rst>
    }
    last_state = pcb->state;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	7d1b      	ldrb	r3, [r3, #20]
 800b4c0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7ff fd34 	bl	800af30 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d004      	beq.n	800b4d8 <tcp_abandon+0x154>
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	f06f 010c 	mvn.w	r1, #12
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	4798      	blx	r3
  }
}
 800b4d8:	3728      	adds	r7, #40	; 0x28
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	080164ac 	.word	0x080164ac
 800b4e4:	080165f0 	.word	0x080165f0
 800b4e8:	080164f0 	.word	0x080164f0
 800b4ec:	0801660c 	.word	0x0801660c
 800b4f0:	200075e0 	.word	0x200075e0
 800b4f4:	200075dc 	.word	0x200075dc
 800b4f8:	200075d0 	.word	0x200075d0
 800b4fc:	200075cc 	.word	0x200075cc

0800b500 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b508:	2101      	movs	r1, #1
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f7ff ff3a 	bl	800b384 <tcp_abandon>
}
 800b510:	bf00      	nop
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	4613      	mov	r3, r2
 800b524:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800b526:	2304      	movs	r3, #4
 800b528:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d101      	bne.n	800b534 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800b530:	4b3e      	ldr	r3, [pc, #248]	; (800b62c <tcp_bind+0x114>)
 800b532:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d109      	bne.n	800b54e <tcp_bind+0x36>
 800b53a:	4b3d      	ldr	r3, [pc, #244]	; (800b630 <tcp_bind+0x118>)
 800b53c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800b540:	493c      	ldr	r1, [pc, #240]	; (800b634 <tcp_bind+0x11c>)
 800b542:	483d      	ldr	r0, [pc, #244]	; (800b638 <tcp_bind+0x120>)
 800b544:	f008 ff28 	bl	8014398 <iprintf>
 800b548:	f06f 030f 	mvn.w	r3, #15
 800b54c:	e06a      	b.n	800b624 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	7d1b      	ldrb	r3, [r3, #20]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d009      	beq.n	800b56a <tcp_bind+0x52>
 800b556:	4b36      	ldr	r3, [pc, #216]	; (800b630 <tcp_bind+0x118>)
 800b558:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b55c:	4937      	ldr	r1, [pc, #220]	; (800b63c <tcp_bind+0x124>)
 800b55e:	4836      	ldr	r0, [pc, #216]	; (800b638 <tcp_bind+0x120>)
 800b560:	f008 ff1a 	bl	8014398 <iprintf>
 800b564:	f06f 0305 	mvn.w	r3, #5
 800b568:	e05c      	b.n	800b624 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800b56a:	88fb      	ldrh	r3, [r7, #6]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d109      	bne.n	800b584 <tcp_bind+0x6c>
    port = tcp_new_port();
 800b570:	f000 f9f0 	bl	800b954 <tcp_new_port>
 800b574:	4603      	mov	r3, r0
 800b576:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b578:	88fb      	ldrh	r3, [r7, #6]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d135      	bne.n	800b5ea <tcp_bind+0xd2>
      return ERR_BUF;
 800b57e:	f06f 0301 	mvn.w	r3, #1
 800b582:	e04f      	b.n	800b624 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800b584:	2300      	movs	r3, #0
 800b586:	61fb      	str	r3, [r7, #28]
 800b588:	e02b      	b.n	800b5e2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b58a:	4a2d      	ldr	r2, [pc, #180]	; (800b640 <tcp_bind+0x128>)
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	61bb      	str	r3, [r7, #24]
 800b596:	e01e      	b.n	800b5d6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	8adb      	ldrh	r3, [r3, #22]
 800b59c:	88fa      	ldrh	r2, [r7, #6]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d116      	bne.n	800b5d0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800b5a2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d010      	beq.n	800b5ca <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00c      	beq.n	800b5ca <tcp_bind+0xb2>
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d009      	beq.n	800b5ca <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d005      	beq.n	800b5ca <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d102      	bne.n	800b5d0 <tcp_bind+0xb8>
              return ERR_USE;
 800b5ca:	f06f 0307 	mvn.w	r3, #7
 800b5ce:	e029      	b.n	800b624 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b5d0:	69bb      	ldr	r3, [r7, #24]
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	61bb      	str	r3, [r7, #24]
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1dd      	bne.n	800b598 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	3301      	adds	r3, #1
 800b5e0:	61fb      	str	r3, [r7, #28]
 800b5e2:	69fa      	ldr	r2, [r7, #28]
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	dbcf      	blt.n	800b58a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00c      	beq.n	800b60a <tcp_bind+0xf2>
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d008      	beq.n	800b60a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d002      	beq.n	800b604 <tcp_bind+0xec>
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	e000      	b.n	800b606 <tcp_bind+0xee>
 800b604:	2300      	movs	r3, #0
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	88fa      	ldrh	r2, [r7, #6]
 800b60e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800b610:	4b0c      	ldr	r3, [pc, #48]	; (800b644 <tcp_bind+0x12c>)
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	60da      	str	r2, [r3, #12]
 800b618:	4a0a      	ldr	r2, [pc, #40]	; (800b644 <tcp_bind+0x12c>)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	f005 fddd 	bl	80111dc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800b622:	2300      	movs	r3, #0
}
 800b624:	4618      	mov	r0, r3
 800b626:	3720      	adds	r7, #32
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}
 800b62c:	08059b70 	.word	0x08059b70
 800b630:	080164ac 	.word	0x080164ac
 800b634:	08016640 	.word	0x08016640
 800b638:	080164f0 	.word	0x080164f0
 800b63c:	08016658 	.word	0x08016658
 800b640:	08059b40 	.word	0x08059b40
 800b644:	200075dc 	.word	0x200075dc

0800b648 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	4613      	mov	r3, r2
 800b654:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d106      	bne.n	800b66a <tcp_accept_null+0x22>
 800b65c:	4b07      	ldr	r3, [pc, #28]	; (800b67c <tcp_accept_null+0x34>)
 800b65e:	f240 320f 	movw	r2, #783	; 0x30f
 800b662:	4907      	ldr	r1, [pc, #28]	; (800b680 <tcp_accept_null+0x38>)
 800b664:	4807      	ldr	r0, [pc, #28]	; (800b684 <tcp_accept_null+0x3c>)
 800b666:	f008 fe97 	bl	8014398 <iprintf>

  tcp_abort(pcb);
 800b66a:	68b8      	ldr	r0, [r7, #8]
 800b66c:	f7ff ff48 	bl	800b500 <tcp_abort>

  return ERR_ABRT;
 800b670:	f06f 030c 	mvn.w	r3, #12
}
 800b674:	4618      	mov	r0, r3
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}
 800b67c:	080164ac 	.word	0x080164ac
 800b680:	08016680 	.word	0x08016680
 800b684:	080164f0 	.word	0x080164f0

0800b688 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	460b      	mov	r3, r1
 800b692:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800b694:	78fb      	ldrb	r3, [r7, #3]
 800b696:	2200      	movs	r2, #0
 800b698:	4619      	mov	r1, r3
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f806 	bl	800b6ac <tcp_listen_with_backlog_and_err>
 800b6a0:	4603      	mov	r3, r0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3708      	adds	r7, #8
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
	...

0800b6ac <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b088      	sub	sp, #32
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	607a      	str	r2, [r7, #4]
 800b6b8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d109      	bne.n	800b6d8 <tcp_listen_with_backlog_and_err+0x2c>
 800b6c4:	4b47      	ldr	r3, [pc, #284]	; (800b7e4 <tcp_listen_with_backlog_and_err+0x138>)
 800b6c6:	f240 3259 	movw	r2, #857	; 0x359
 800b6ca:	4947      	ldr	r1, [pc, #284]	; (800b7e8 <tcp_listen_with_backlog_and_err+0x13c>)
 800b6cc:	4847      	ldr	r0, [pc, #284]	; (800b7ec <tcp_listen_with_backlog_and_err+0x140>)
 800b6ce:	f008 fe63 	bl	8014398 <iprintf>
 800b6d2:	23f0      	movs	r3, #240	; 0xf0
 800b6d4:	76fb      	strb	r3, [r7, #27]
 800b6d6:	e079      	b.n	800b7cc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	7d1b      	ldrb	r3, [r3, #20]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d009      	beq.n	800b6f4 <tcp_listen_with_backlog_and_err+0x48>
 800b6e0:	4b40      	ldr	r3, [pc, #256]	; (800b7e4 <tcp_listen_with_backlog_and_err+0x138>)
 800b6e2:	f240 325a 	movw	r2, #858	; 0x35a
 800b6e6:	4942      	ldr	r1, [pc, #264]	; (800b7f0 <tcp_listen_with_backlog_and_err+0x144>)
 800b6e8:	4840      	ldr	r0, [pc, #256]	; (800b7ec <tcp_listen_with_backlog_and_err+0x140>)
 800b6ea:	f008 fe55 	bl	8014398 <iprintf>
 800b6ee:	23f1      	movs	r3, #241	; 0xf1
 800b6f0:	76fb      	strb	r3, [r7, #27]
 800b6f2:	e06b      	b.n	800b7cc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	7d1b      	ldrb	r3, [r3, #20]
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d104      	bne.n	800b706 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800b700:	23f7      	movs	r3, #247	; 0xf7
 800b702:	76fb      	strb	r3, [r7, #27]
    goto done;
 800b704:	e062      	b.n	800b7cc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800b706:	2002      	movs	r0, #2
 800b708:	f7fe f9aa 	bl	8009a60 <memp_malloc>
 800b70c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d102      	bne.n	800b71a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800b714:	23ff      	movs	r3, #255	; 0xff
 800b716:	76fb      	strb	r3, [r7, #27]
    goto done;
 800b718:	e058      	b.n	800b7cc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	691a      	ldr	r2, [r3, #16]
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	8ada      	ldrh	r2, [r3, #22]
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	2201      	movs	r2, #1
 800b72e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	7d5a      	ldrb	r2, [r3, #21]
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	7a5a      	ldrb	r2, [r3, #9]
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	2200      	movs	r2, #0
 800b744:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	7ada      	ldrb	r2, [r3, #11]
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	7a9a      	ldrb	r2, [r3, #10]
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	69fb      	ldr	r3, [r7, #28]
 800b75c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	8adb      	ldrh	r3, [r3, #22]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d021      	beq.n	800b7aa <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800b766:	4b23      	ldr	r3, [pc, #140]	; (800b7f4 <tcp_listen_with_backlog_and_err+0x148>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d105      	bne.n	800b77c <tcp_listen_with_backlog_and_err+0xd0>
 800b770:	4b20      	ldr	r3, [pc, #128]	; (800b7f4 <tcp_listen_with_backlog_and_err+0x148>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	4a1f      	ldr	r2, [pc, #124]	; (800b7f4 <tcp_listen_with_backlog_and_err+0x148>)
 800b778:	6013      	str	r3, [r2, #0]
 800b77a:	e013      	b.n	800b7a4 <tcp_listen_with_backlog_and_err+0xf8>
 800b77c:	4b1d      	ldr	r3, [pc, #116]	; (800b7f4 <tcp_listen_with_backlog_and_err+0x148>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	617b      	str	r3, [r7, #20]
 800b782:	e00c      	b.n	800b79e <tcp_listen_with_backlog_and_err+0xf2>
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d104      	bne.n	800b798 <tcp_listen_with_backlog_and_err+0xec>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	68da      	ldr	r2, [r3, #12]
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	60da      	str	r2, [r3, #12]
 800b796:	e005      	b.n	800b7a4 <tcp_listen_with_backlog_and_err+0xf8>
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	617b      	str	r3, [r7, #20]
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d1ef      	bne.n	800b784 <tcp_listen_with_backlog_and_err+0xd8>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800b7aa:	68f8      	ldr	r0, [r7, #12]
 800b7ac:	f7ff fbc0 	bl	800af30 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	4a11      	ldr	r2, [pc, #68]	; (800b7f8 <tcp_listen_with_backlog_and_err+0x14c>)
 800b7b4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800b7b6:	4b11      	ldr	r3, [pc, #68]	; (800b7fc <tcp_listen_with_backlog_and_err+0x150>)
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	60da      	str	r2, [r3, #12]
 800b7be:	4a0f      	ldr	r2, [pc, #60]	; (800b7fc <tcp_listen_with_backlog_and_err+0x150>)
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	6013      	str	r3, [r2, #0]
 800b7c4:	f005 fd0a 	bl	80111dc <tcp_timer_needed>
  res = ERR_OK;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d002      	beq.n	800b7d8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	7efa      	ldrb	r2, [r7, #27]
 800b7d6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800b7d8:	69fb      	ldr	r3, [r7, #28]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3720      	adds	r7, #32
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	080164ac 	.word	0x080164ac
 800b7e8:	080166a0 	.word	0x080166a0
 800b7ec:	080164f0 	.word	0x080164f0
 800b7f0:	080166d0 	.word	0x080166d0
 800b7f4:	200075dc 	.word	0x200075dc
 800b7f8:	0800b649 	.word	0x0800b649
 800b7fc:	200075d8 	.word	0x200075d8

0800b800 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b084      	sub	sp, #16
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d106      	bne.n	800b81c <tcp_update_rcv_ann_wnd+0x1c>
 800b80e:	4b25      	ldr	r3, [pc, #148]	; (800b8a4 <tcp_update_rcv_ann_wnd+0xa4>)
 800b810:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b814:	4924      	ldr	r1, [pc, #144]	; (800b8a8 <tcp_update_rcv_ann_wnd+0xa8>)
 800b816:	4825      	ldr	r0, [pc, #148]	; (800b8ac <tcp_update_rcv_ann_wnd+0xac>)
 800b818:	f008 fdbe 	bl	8014398 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b824:	4413      	add	r3, r2
 800b826:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b830:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b834:	bf28      	it	cs
 800b836:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b83a:	b292      	uxth	r2, r2
 800b83c:	4413      	add	r3, r2
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	1ad3      	subs	r3, r2, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	db08      	blt.n	800b858 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	1ad3      	subs	r3, r2, r3
 800b856:	e020      	b.n	800b89a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	2b00      	cmp	r3, #0
 800b864:	dd03      	ble.n	800b86e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2200      	movs	r2, #0
 800b86a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b86c:	e014      	b.n	800b898 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b880:	d306      	bcc.n	800b890 <tcp_update_rcv_ann_wnd+0x90>
 800b882:	4b08      	ldr	r3, [pc, #32]	; (800b8a4 <tcp_update_rcv_ann_wnd+0xa4>)
 800b884:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b888:	4909      	ldr	r1, [pc, #36]	; (800b8b0 <tcp_update_rcv_ann_wnd+0xb0>)
 800b88a:	4808      	ldr	r0, [pc, #32]	; (800b8ac <tcp_update_rcv_ann_wnd+0xac>)
 800b88c:	f008 fd84 	bl	8014398 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	b29a      	uxth	r2, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b898:	2300      	movs	r3, #0
  }
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	080164ac 	.word	0x080164ac
 800b8a8:	08016708 	.word	0x08016708
 800b8ac:	080164f0 	.word	0x080164f0
 800b8b0:	0801672c 	.word	0x0801672c

0800b8b4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	460b      	mov	r3, r1
 800b8be:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d107      	bne.n	800b8d6 <tcp_recved+0x22>
 800b8c6:	4b1f      	ldr	r3, [pc, #124]	; (800b944 <tcp_recved+0x90>)
 800b8c8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b8cc:	491e      	ldr	r1, [pc, #120]	; (800b948 <tcp_recved+0x94>)
 800b8ce:	481f      	ldr	r0, [pc, #124]	; (800b94c <tcp_recved+0x98>)
 800b8d0:	f008 fd62 	bl	8014398 <iprintf>
 800b8d4:	e032      	b.n	800b93c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	7d1b      	ldrb	r3, [r3, #20]
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d106      	bne.n	800b8ec <tcp_recved+0x38>
 800b8de:	4b19      	ldr	r3, [pc, #100]	; (800b944 <tcp_recved+0x90>)
 800b8e0:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b8e4:	491a      	ldr	r1, [pc, #104]	; (800b950 <tcp_recved+0x9c>)
 800b8e6:	4819      	ldr	r0, [pc, #100]	; (800b94c <tcp_recved+0x98>)
 800b8e8:	f008 fd56 	bl	8014398 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b8f0:	887b      	ldrh	r3, [r7, #2]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b8f6:	89fb      	ldrh	r3, [r7, #14]
 800b8f8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b8fc:	d804      	bhi.n	800b908 <tcp_recved+0x54>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b902:	89fa      	ldrh	r2, [r7, #14]
 800b904:	429a      	cmp	r2, r3
 800b906:	d204      	bcs.n	800b912 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b90e:	851a      	strh	r2, [r3, #40]	; 0x28
 800b910:	e002      	b.n	800b918 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	89fa      	ldrh	r2, [r7, #14]
 800b916:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f7ff ff71 	bl	800b800 <tcp_update_rcv_ann_wnd>
 800b91e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b926:	d309      	bcc.n	800b93c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	8b5b      	ldrh	r3, [r3, #26]
 800b92c:	f043 0302 	orr.w	r3, r3, #2
 800b930:	b29a      	uxth	r2, r3
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f004 fcda 	bl	80102f0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b93c:	3710      	adds	r7, #16
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	080164ac 	.word	0x080164ac
 800b948:	08016748 	.word	0x08016748
 800b94c:	080164f0 	.word	0x080164f0
 800b950:	08016760 	.word	0x08016760

0800b954 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800b95a:	2300      	movs	r3, #0
 800b95c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800b95e:	4b1e      	ldr	r3, [pc, #120]	; (800b9d8 <tcp_new_port+0x84>)
 800b960:	881b      	ldrh	r3, [r3, #0]
 800b962:	3301      	adds	r3, #1
 800b964:	b29a      	uxth	r2, r3
 800b966:	4b1c      	ldr	r3, [pc, #112]	; (800b9d8 <tcp_new_port+0x84>)
 800b968:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800b96a:	4b1b      	ldr	r3, [pc, #108]	; (800b9d8 <tcp_new_port+0x84>)
 800b96c:	881b      	ldrh	r3, [r3, #0]
 800b96e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b972:	4293      	cmp	r3, r2
 800b974:	d103      	bne.n	800b97e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b976:	4b18      	ldr	r3, [pc, #96]	; (800b9d8 <tcp_new_port+0x84>)
 800b978:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b97c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b97e:	2300      	movs	r3, #0
 800b980:	71fb      	strb	r3, [r7, #7]
 800b982:	e01e      	b.n	800b9c2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b984:	79fb      	ldrb	r3, [r7, #7]
 800b986:	4a15      	ldr	r2, [pc, #84]	; (800b9dc <tcp_new_port+0x88>)
 800b988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	603b      	str	r3, [r7, #0]
 800b990:	e011      	b.n	800b9b6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	8ada      	ldrh	r2, [r3, #22]
 800b996:	4b10      	ldr	r3, [pc, #64]	; (800b9d8 <tcp_new_port+0x84>)
 800b998:	881b      	ldrh	r3, [r3, #0]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d108      	bne.n	800b9b0 <tcp_new_port+0x5c>
        n++;
 800b99e:	88bb      	ldrh	r3, [r7, #4]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800b9a4:	88bb      	ldrh	r3, [r7, #4]
 800b9a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9aa:	d3d8      	bcc.n	800b95e <tcp_new_port+0xa>
          return 0;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	e00d      	b.n	800b9cc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	603b      	str	r3, [r7, #0]
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1ea      	bne.n	800b992 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b9bc:	79fb      	ldrb	r3, [r7, #7]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	71fb      	strb	r3, [r7, #7]
 800b9c2:	79fb      	ldrb	r3, [r7, #7]
 800b9c4:	2b03      	cmp	r3, #3
 800b9c6:	d9dd      	bls.n	800b984 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800b9c8:	4b03      	ldr	r3, [pc, #12]	; (800b9d8 <tcp_new_port+0x84>)
 800b9ca:	881b      	ldrh	r3, [r3, #0]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	370c      	adds	r7, #12
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr
 800b9d8:	2000003e 	.word	0x2000003e
 800b9dc:	08059b40 	.word	0x08059b40

0800b9e0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b08a      	sub	sp, #40	; 0x28
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	603b      	str	r3, [r7, #0]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d109      	bne.n	800ba0e <tcp_connect+0x2e>
 800b9fa:	4b7d      	ldr	r3, [pc, #500]	; (800bbf0 <tcp_connect+0x210>)
 800b9fc:	f240 4235 	movw	r2, #1077	; 0x435
 800ba00:	497c      	ldr	r1, [pc, #496]	; (800bbf4 <tcp_connect+0x214>)
 800ba02:	487d      	ldr	r0, [pc, #500]	; (800bbf8 <tcp_connect+0x218>)
 800ba04:	f008 fcc8 	bl	8014398 <iprintf>
 800ba08:	f06f 030f 	mvn.w	r3, #15
 800ba0c:	e0ec      	b.n	800bbe8 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d109      	bne.n	800ba28 <tcp_connect+0x48>
 800ba14:	4b76      	ldr	r3, [pc, #472]	; (800bbf0 <tcp_connect+0x210>)
 800ba16:	f240 4236 	movw	r2, #1078	; 0x436
 800ba1a:	4978      	ldr	r1, [pc, #480]	; (800bbfc <tcp_connect+0x21c>)
 800ba1c:	4876      	ldr	r0, [pc, #472]	; (800bbf8 <tcp_connect+0x218>)
 800ba1e:	f008 fcbb 	bl	8014398 <iprintf>
 800ba22:	f06f 030f 	mvn.w	r3, #15
 800ba26:	e0df      	b.n	800bbe8 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	7d1b      	ldrb	r3, [r3, #20]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d009      	beq.n	800ba44 <tcp_connect+0x64>
 800ba30:	4b6f      	ldr	r3, [pc, #444]	; (800bbf0 <tcp_connect+0x210>)
 800ba32:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800ba36:	4972      	ldr	r1, [pc, #456]	; (800bc00 <tcp_connect+0x220>)
 800ba38:	486f      	ldr	r0, [pc, #444]	; (800bbf8 <tcp_connect+0x218>)
 800ba3a:	f008 fcad 	bl	8014398 <iprintf>
 800ba3e:	f06f 0309 	mvn.w	r3, #9
 800ba42:	e0d1      	b.n	800bbe8 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d002      	beq.n	800ba50 <tcp_connect+0x70>
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	e000      	b.n	800ba52 <tcp_connect+0x72>
 800ba50:	2300      	movs	r3, #0
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	88fa      	ldrh	r2, [r7, #6]
 800ba5a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	7a1b      	ldrb	r3, [r3, #8]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d006      	beq.n	800ba72 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	7a1b      	ldrb	r3, [r3, #8]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7fe faf7 	bl	800a05c <netif_get_by_index>
 800ba6e:	6278      	str	r0, [r7, #36]	; 0x24
 800ba70:	e005      	b.n	800ba7e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	3304      	adds	r3, #4
 800ba76:	4618      	mov	r0, r3
 800ba78:	f007 fa46 	bl	8012f08 <ip4_route>
 800ba7c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d102      	bne.n	800ba8a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800ba84:	f06f 0303 	mvn.w	r3, #3
 800ba88:	e0ae      	b.n	800bbe8 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d003      	beq.n	800ba98 <tcp_connect+0xb8>
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d111      	bne.n	800babc <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800ba98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d002      	beq.n	800baa4 <tcp_connect+0xc4>
 800ba9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa0:	3304      	adds	r3, #4
 800baa2:	e000      	b.n	800baa6 <tcp_connect+0xc6>
 800baa4:	2300      	movs	r3, #0
 800baa6:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d102      	bne.n	800bab4 <tcp_connect+0xd4>
      return ERR_RTE;
 800baae:	f06f 0303 	mvn.w	r3, #3
 800bab2:	e099      	b.n	800bbe8 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	8adb      	ldrh	r3, [r3, #22]
 800bac0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	8adb      	ldrh	r3, [r3, #22]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d10c      	bne.n	800bae4 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800baca:	f7ff ff43 	bl	800b954 <tcp_new_port>
 800bace:	4603      	mov	r3, r0
 800bad0:	461a      	mov	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	8adb      	ldrh	r3, [r3, #22]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d102      	bne.n	800bae4 <tcp_connect+0x104>
      return ERR_BUF;
 800bade:	f06f 0301 	mvn.w	r3, #1
 800bae2:	e081      	b.n	800bbe8 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f001 f87f 	bl	800cbe8 <tcp_next_iss>
 800baea:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	697a      	ldr	r2, [r7, #20]
 800baf6:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	1e5a      	subs	r2, r3, #1
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	1e5a      	subs	r2, r3, #1
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	1e5a      	subs	r2, r3, #1
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bb16:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bb2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bb38:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	3304      	adds	r3, #4
 800bb42:	461a      	mov	r2, r3
 800bb44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb46:	f001 f875 	bl	800cc34 <tcp_eff_send_mss_netif>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2201      	movs	r2, #1
 800bb56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	683a      	ldr	r2, [r7, #0]
 800bb5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800bb62:	2102      	movs	r1, #2
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f004 fad5 	bl	8010114 <tcp_enqueue_flags>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800bb6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d136      	bne.n	800bbe4 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2202      	movs	r2, #2
 800bb7a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800bb7c:	8b7b      	ldrh	r3, [r7, #26]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d021      	beq.n	800bbc6 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800bb82:	4b20      	ldr	r3, [pc, #128]	; (800bc04 <tcp_connect+0x224>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	68fa      	ldr	r2, [r7, #12]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d105      	bne.n	800bb98 <tcp_connect+0x1b8>
 800bb8c:	4b1d      	ldr	r3, [pc, #116]	; (800bc04 <tcp_connect+0x224>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	4a1c      	ldr	r2, [pc, #112]	; (800bc04 <tcp_connect+0x224>)
 800bb94:	6013      	str	r3, [r2, #0]
 800bb96:	e013      	b.n	800bbc0 <tcp_connect+0x1e0>
 800bb98:	4b1a      	ldr	r3, [pc, #104]	; (800bc04 <tcp_connect+0x224>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	623b      	str	r3, [r7, #32]
 800bb9e:	e00c      	b.n	800bbba <tcp_connect+0x1da>
 800bba0:	6a3b      	ldr	r3, [r7, #32]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d104      	bne.n	800bbb4 <tcp_connect+0x1d4>
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	68da      	ldr	r2, [r3, #12]
 800bbae:	6a3b      	ldr	r3, [r7, #32]
 800bbb0:	60da      	str	r2, [r3, #12]
 800bbb2:	e005      	b.n	800bbc0 <tcp_connect+0x1e0>
 800bbb4:	6a3b      	ldr	r3, [r7, #32]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	623b      	str	r3, [r7, #32]
 800bbba:	6a3b      	ldr	r3, [r7, #32]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d1ef      	bne.n	800bba0 <tcp_connect+0x1c0>
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800bbc6:	4b10      	ldr	r3, [pc, #64]	; (800bc08 <tcp_connect+0x228>)
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	60da      	str	r2, [r3, #12]
 800bbce:	4a0e      	ldr	r2, [pc, #56]	; (800bc08 <tcp_connect+0x228>)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6013      	str	r3, [r2, #0]
 800bbd4:	f005 fb02 	bl	80111dc <tcp_timer_needed>
 800bbd8:	4b0c      	ldr	r3, [pc, #48]	; (800bc0c <tcp_connect+0x22c>)
 800bbda:	2201      	movs	r2, #1
 800bbdc:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	f004 fb86 	bl	80102f0 <tcp_output>
  }
  return ret;
 800bbe4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3728      	adds	r7, #40	; 0x28
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	080164ac 	.word	0x080164ac
 800bbf4:	08016788 	.word	0x08016788
 800bbf8:	080164f0 	.word	0x080164f0
 800bbfc:	080167a4 	.word	0x080167a4
 800bc00:	080167c0 	.word	0x080167c0
 800bc04:	200075dc 	.word	0x200075dc
 800bc08:	200075d0 	.word	0x200075d0
 800bc0c:	200075cc 	.word	0x200075cc

0800bc10 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800bc10:	b5b0      	push	{r4, r5, r7, lr}
 800bc12:	b090      	sub	sp, #64	; 0x40
 800bc14:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800bc16:	2300      	movs	r3, #0
 800bc18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800bc1c:	4b94      	ldr	r3, [pc, #592]	; (800be70 <tcp_slowtmr+0x260>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	3301      	adds	r3, #1
 800bc22:	4a93      	ldr	r2, [pc, #588]	; (800be70 <tcp_slowtmr+0x260>)
 800bc24:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800bc26:	4b93      	ldr	r3, [pc, #588]	; (800be74 <tcp_slowtmr+0x264>)
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	b2da      	uxtb	r2, r3
 800bc2e:	4b91      	ldr	r3, [pc, #580]	; (800be74 <tcp_slowtmr+0x264>)
 800bc30:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800bc32:	2300      	movs	r3, #0
 800bc34:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800bc36:	4b90      	ldr	r3, [pc, #576]	; (800be78 <tcp_slowtmr+0x268>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800bc3c:	e29d      	b.n	800c17a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800bc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc40:	7d1b      	ldrb	r3, [r3, #20]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d106      	bne.n	800bc54 <tcp_slowtmr+0x44>
 800bc46:	4b8d      	ldr	r3, [pc, #564]	; (800be7c <tcp_slowtmr+0x26c>)
 800bc48:	f240 42be 	movw	r2, #1214	; 0x4be
 800bc4c:	498c      	ldr	r1, [pc, #560]	; (800be80 <tcp_slowtmr+0x270>)
 800bc4e:	488d      	ldr	r0, [pc, #564]	; (800be84 <tcp_slowtmr+0x274>)
 800bc50:	f008 fba2 	bl	8014398 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800bc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc56:	7d1b      	ldrb	r3, [r3, #20]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d106      	bne.n	800bc6a <tcp_slowtmr+0x5a>
 800bc5c:	4b87      	ldr	r3, [pc, #540]	; (800be7c <tcp_slowtmr+0x26c>)
 800bc5e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800bc62:	4989      	ldr	r1, [pc, #548]	; (800be88 <tcp_slowtmr+0x278>)
 800bc64:	4887      	ldr	r0, [pc, #540]	; (800be84 <tcp_slowtmr+0x274>)
 800bc66:	f008 fb97 	bl	8014398 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800bc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6c:	7d1b      	ldrb	r3, [r3, #20]
 800bc6e:	2b0a      	cmp	r3, #10
 800bc70:	d106      	bne.n	800bc80 <tcp_slowtmr+0x70>
 800bc72:	4b82      	ldr	r3, [pc, #520]	; (800be7c <tcp_slowtmr+0x26c>)
 800bc74:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800bc78:	4984      	ldr	r1, [pc, #528]	; (800be8c <tcp_slowtmr+0x27c>)
 800bc7a:	4882      	ldr	r0, [pc, #520]	; (800be84 <tcp_slowtmr+0x274>)
 800bc7c:	f008 fb8c 	bl	8014398 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800bc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc82:	7f9a      	ldrb	r2, [r3, #30]
 800bc84:	4b7b      	ldr	r3, [pc, #492]	; (800be74 <tcp_slowtmr+0x264>)
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d105      	bne.n	800bc98 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800bc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800bc96:	e270      	b.n	800c17a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800bc98:	4b76      	ldr	r3, [pc, #472]	; (800be74 <tcp_slowtmr+0x264>)
 800bc9a:	781a      	ldrb	r2, [r3, #0]
 800bc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc9e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800bca0:	2300      	movs	r3, #0
 800bca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800bca6:	2300      	movs	r3, #0
 800bca8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcae:	7d1b      	ldrb	r3, [r3, #20]
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d10a      	bne.n	800bcca <tcp_slowtmr+0xba>
 800bcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bcba:	2b05      	cmp	r3, #5
 800bcbc:	d905      	bls.n	800bcca <tcp_slowtmr+0xba>
      ++pcb_remove;
 800bcbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bcc8:	e11e      	b.n	800bf08 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800bcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bccc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bcd0:	2b0b      	cmp	r3, #11
 800bcd2:	d905      	bls.n	800bce0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800bcd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcd8:	3301      	adds	r3, #1
 800bcda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bcde:	e113      	b.n	800bf08 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800bce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d075      	beq.n	800bdd6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800bcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d006      	beq.n	800bd00 <tcp_slowtmr+0xf0>
 800bcf2:	4b62      	ldr	r3, [pc, #392]	; (800be7c <tcp_slowtmr+0x26c>)
 800bcf4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800bcf8:	4965      	ldr	r1, [pc, #404]	; (800be90 <tcp_slowtmr+0x280>)
 800bcfa:	4862      	ldr	r0, [pc, #392]	; (800be84 <tcp_slowtmr+0x274>)
 800bcfc:	f008 fb4c 	bl	8014398 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800bd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d106      	bne.n	800bd16 <tcp_slowtmr+0x106>
 800bd08:	4b5c      	ldr	r3, [pc, #368]	; (800be7c <tcp_slowtmr+0x26c>)
 800bd0a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800bd0e:	4961      	ldr	r1, [pc, #388]	; (800be94 <tcp_slowtmr+0x284>)
 800bd10:	485c      	ldr	r0, [pc, #368]	; (800be84 <tcp_slowtmr+0x274>)
 800bd12:	f008 fb41 	bl	8014398 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800bd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd18:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bd1c:	2b0b      	cmp	r3, #11
 800bd1e:	d905      	bls.n	800bd2c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800bd20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd24:	3301      	adds	r3, #1
 800bd26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bd2a:	e0ed      	b.n	800bf08 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800bd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bd32:	3b01      	subs	r3, #1
 800bd34:	4a58      	ldr	r2, [pc, #352]	; (800be98 <tcp_slowtmr+0x288>)
 800bd36:	5cd3      	ldrb	r3, [r2, r3]
 800bd38:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800bd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bd40:	7c7a      	ldrb	r2, [r7, #17]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d907      	bls.n	800bd56 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800bd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd48:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	b2da      	uxtb	r2, r3
 800bd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd52:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800bd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bd5c:	7c7a      	ldrb	r2, [r7, #17]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	f200 80d2 	bhi.w	800bf08 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800bd64:	2301      	movs	r3, #1
 800bd66:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800bd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d108      	bne.n	800bd84 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800bd72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd74:	f005 f964 	bl	8011040 <tcp_zero_window_probe>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d014      	beq.n	800bda8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800bd7e:	2300      	movs	r3, #0
 800bd80:	623b      	str	r3, [r7, #32]
 800bd82:	e011      	b.n	800bda8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800bd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd8e:	f004 f829 	bl	800fde4 <tcp_split_unsent_seg>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d107      	bne.n	800bda8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800bd98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd9a:	f004 faa9 	bl	80102f0 <tcp_output>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d101      	bne.n	800bda8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800bda4:	2300      	movs	r3, #0
 800bda6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800bda8:	6a3b      	ldr	r3, [r7, #32]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f000 80ac 	beq.w	800bf08 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800bdb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bdbe:	2b06      	cmp	r3, #6
 800bdc0:	f200 80a2 	bhi.w	800bf08 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800bdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bdca:	3301      	adds	r3, #1
 800bdcc:	b2da      	uxtb	r2, r3
 800bdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800bdd4:	e098      	b.n	800bf08 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800bdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	db0f      	blt.n	800be00 <tcp_slowtmr+0x1f0>
 800bde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bde6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d008      	beq.n	800be00 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800bdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	b21a      	sxth	r2, r3
 800bdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800be00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be02:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800be06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be08:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800be0c:	429a      	cmp	r2, r3
 800be0e:	db7b      	blt.n	800bf08 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800be10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be12:	f004 fd5f 	bl	80108d4 <tcp_rexmit_rto_prepare>
 800be16:	4603      	mov	r3, r0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d007      	beq.n	800be2c <tcp_slowtmr+0x21c>
 800be1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be20:	2b00      	cmp	r3, #0
 800be22:	d171      	bne.n	800bf08 <tcp_slowtmr+0x2f8>
 800be24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d06d      	beq.n	800bf08 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800be2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2e:	7d1b      	ldrb	r3, [r3, #20]
 800be30:	2b02      	cmp	r3, #2
 800be32:	d03a      	beq.n	800beaa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800be34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be3a:	2b0c      	cmp	r3, #12
 800be3c:	bf28      	it	cs
 800be3e:	230c      	movcs	r3, #12
 800be40:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800be42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800be48:	10db      	asrs	r3, r3, #3
 800be4a:	b21b      	sxth	r3, r3
 800be4c:	461a      	mov	r2, r3
 800be4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be50:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800be54:	4413      	add	r3, r2
 800be56:	7efa      	ldrb	r2, [r7, #27]
 800be58:	4910      	ldr	r1, [pc, #64]	; (800be9c <tcp_slowtmr+0x28c>)
 800be5a:	5c8a      	ldrb	r2, [r1, r2]
 800be5c:	4093      	lsls	r3, r2
 800be5e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800be66:	4293      	cmp	r3, r2
 800be68:	dc1a      	bgt.n	800bea0 <tcp_slowtmr+0x290>
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	b21a      	sxth	r2, r3
 800be6e:	e019      	b.n	800bea4 <tcp_slowtmr+0x294>
 800be70:	200075d4 	.word	0x200075d4
 800be74:	20000782 	.word	0x20000782
 800be78:	200075d0 	.word	0x200075d0
 800be7c:	080164ac 	.word	0x080164ac
 800be80:	080167f0 	.word	0x080167f0
 800be84:	080164f0 	.word	0x080164f0
 800be88:	0801681c 	.word	0x0801681c
 800be8c:	08016848 	.word	0x08016848
 800be90:	08016878 	.word	0x08016878
 800be94:	080168ac 	.word	0x080168ac
 800be98:	08059b38 	.word	0x08059b38
 800be9c:	08059b28 	.word	0x08059b28
 800bea0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800beaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beac:	2200      	movs	r2, #0
 800beae:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800beb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800beb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bebc:	4293      	cmp	r3, r2
 800bebe:	bf28      	it	cs
 800bec0:	4613      	movcs	r3, r2
 800bec2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800bec4:	8a7b      	ldrh	r3, [r7, #18]
 800bec6:	085b      	lsrs	r3, r3, #1
 800bec8:	b29a      	uxth	r2, r3
 800beca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800becc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800beda:	005b      	lsls	r3, r3, #1
 800bedc:	b29b      	uxth	r3, r3
 800bede:	429a      	cmp	r2, r3
 800bee0:	d206      	bcs.n	800bef0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800bee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bee6:	005b      	lsls	r3, r3, #1
 800bee8:	b29a      	uxth	r2, r3
 800beea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800bef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800befa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befc:	2200      	movs	r2, #0
 800befe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800bf02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf04:	f004 fd56 	bl	80109b4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800bf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0a:	7d1b      	ldrb	r3, [r3, #20]
 800bf0c:	2b06      	cmp	r3, #6
 800bf0e:	d111      	bne.n	800bf34 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800bf10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf12:	8b5b      	ldrh	r3, [r3, #26]
 800bf14:	f003 0310 	and.w	r3, r3, #16
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00b      	beq.n	800bf34 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bf1c:	4b9c      	ldr	r3, [pc, #624]	; (800c190 <tcp_slowtmr+0x580>)
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf22:	6a1b      	ldr	r3, [r3, #32]
 800bf24:	1ad3      	subs	r3, r2, r3
 800bf26:	2b28      	cmp	r3, #40	; 0x28
 800bf28:	d904      	bls.n	800bf34 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800bf2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf2e:	3301      	adds	r3, #1
 800bf30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf36:	7a5b      	ldrb	r3, [r3, #9]
 800bf38:	f003 0308 	and.w	r3, r3, #8
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d04a      	beq.n	800bfd6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800bf40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf42:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bf44:	2b04      	cmp	r3, #4
 800bf46:	d003      	beq.n	800bf50 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800bf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800bf4c:	2b07      	cmp	r3, #7
 800bf4e:	d142      	bne.n	800bfd6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bf50:	4b8f      	ldr	r3, [pc, #572]	; (800c190 <tcp_slowtmr+0x580>)
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf56:	6a1b      	ldr	r3, [r3, #32]
 800bf58:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800bf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bf60:	4b8c      	ldr	r3, [pc, #560]	; (800c194 <tcp_slowtmr+0x584>)
 800bf62:	440b      	add	r3, r1
 800bf64:	498c      	ldr	r1, [pc, #560]	; (800c198 <tcp_slowtmr+0x588>)
 800bf66:	fba1 1303 	umull	r1, r3, r1, r3
 800bf6a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d90a      	bls.n	800bf86 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800bf70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf74:	3301      	adds	r3, #1
 800bf76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800bf7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf7e:	3301      	adds	r3, #1
 800bf80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bf84:	e027      	b.n	800bfd6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bf86:	4b82      	ldr	r3, [pc, #520]	; (800c190 <tcp_slowtmr+0x580>)
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8c:	6a1b      	ldr	r3, [r3, #32]
 800bf8e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800bf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf92:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf98:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	4b7f      	ldr	r3, [pc, #508]	; (800c19c <tcp_slowtmr+0x58c>)
 800bfa0:	fb03 f300 	mul.w	r3, r3, r0
 800bfa4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800bfa6:	497c      	ldr	r1, [pc, #496]	; (800c198 <tcp_slowtmr+0x588>)
 800bfa8:	fba1 1303 	umull	r1, r3, r1, r3
 800bfac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d911      	bls.n	800bfd6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800bfb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfb4:	f005 f804 	bl	8010fc0 <tcp_keepalive>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800bfbe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d107      	bne.n	800bfd6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800bfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bfcc:	3301      	adds	r3, #1
 800bfce:	b2da      	uxtb	r2, r3
 800bfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800bfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d011      	beq.n	800c002 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800bfde:	4b6c      	ldr	r3, [pc, #432]	; (800c190 <tcp_slowtmr+0x580>)
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe4:	6a1b      	ldr	r3, [r3, #32]
 800bfe6:	1ad2      	subs	r2, r2, r3
 800bfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bfee:	4619      	mov	r1, r3
 800bff0:	460b      	mov	r3, r1
 800bff2:	005b      	lsls	r3, r3, #1
 800bff4:	440b      	add	r3, r1
 800bff6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d302      	bcc.n	800c002 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800bffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bffe:	f000 fec3 	bl	800cd88 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c004:	7d1b      	ldrb	r3, [r3, #20]
 800c006:	2b03      	cmp	r3, #3
 800c008:	d10b      	bne.n	800c022 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c00a:	4b61      	ldr	r3, [pc, #388]	; (800c190 <tcp_slowtmr+0x580>)
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c010:	6a1b      	ldr	r3, [r3, #32]
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	2b28      	cmp	r3, #40	; 0x28
 800c016:	d904      	bls.n	800c022 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c01c:	3301      	adds	r3, #1
 800c01e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c024:	7d1b      	ldrb	r3, [r3, #20]
 800c026:	2b09      	cmp	r3, #9
 800c028:	d10b      	bne.n	800c042 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c02a:	4b59      	ldr	r3, [pc, #356]	; (800c190 <tcp_slowtmr+0x580>)
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c030:	6a1b      	ldr	r3, [r3, #32]
 800c032:	1ad3      	subs	r3, r2, r3
 800c034:	2bf0      	cmp	r3, #240	; 0xf0
 800c036:	d904      	bls.n	800c042 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800c038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c03c:	3301      	adds	r3, #1
 800c03e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c046:	2b00      	cmp	r3, #0
 800c048:	d060      	beq.n	800c10c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c050:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c052:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c054:	f000 fce4 	bl	800ca20 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d010      	beq.n	800c080 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c05e:	4b50      	ldr	r3, [pc, #320]	; (800c1a0 <tcp_slowtmr+0x590>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c064:	429a      	cmp	r2, r3
 800c066:	d106      	bne.n	800c076 <tcp_slowtmr+0x466>
 800c068:	4b4e      	ldr	r3, [pc, #312]	; (800c1a4 <tcp_slowtmr+0x594>)
 800c06a:	f240 526d 	movw	r2, #1389	; 0x56d
 800c06e:	494e      	ldr	r1, [pc, #312]	; (800c1a8 <tcp_slowtmr+0x598>)
 800c070:	484e      	ldr	r0, [pc, #312]	; (800c1ac <tcp_slowtmr+0x59c>)
 800c072:	f008 f991 	bl	8014398 <iprintf>
        prev->next = pcb->next;
 800c076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c078:	68da      	ldr	r2, [r3, #12]
 800c07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07c:	60da      	str	r2, [r3, #12]
 800c07e:	e00f      	b.n	800c0a0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c080:	4b47      	ldr	r3, [pc, #284]	; (800c1a0 <tcp_slowtmr+0x590>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c086:	429a      	cmp	r2, r3
 800c088:	d006      	beq.n	800c098 <tcp_slowtmr+0x488>
 800c08a:	4b46      	ldr	r3, [pc, #280]	; (800c1a4 <tcp_slowtmr+0x594>)
 800c08c:	f240 5271 	movw	r2, #1393	; 0x571
 800c090:	4947      	ldr	r1, [pc, #284]	; (800c1b0 <tcp_slowtmr+0x5a0>)
 800c092:	4846      	ldr	r0, [pc, #280]	; (800c1ac <tcp_slowtmr+0x59c>)
 800c094:	f008 f980 	bl	8014398 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	4a40      	ldr	r2, [pc, #256]	; (800c1a0 <tcp_slowtmr+0x590>)
 800c09e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c0a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d013      	beq.n	800c0d0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0aa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c0b0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b4:	3304      	adds	r3, #4
 800c0b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0b8:	8ad2      	ldrh	r2, [r2, #22]
 800c0ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c0bc:	8b09      	ldrh	r1, [r1, #24]
 800c0be:	9102      	str	r1, [sp, #8]
 800c0c0:	9201      	str	r2, [sp, #4]
 800c0c2:	9300      	str	r3, [sp, #0]
 800c0c4:	462b      	mov	r3, r5
 800c0c6:	4622      	mov	r2, r4
 800c0c8:	4601      	mov	r1, r0
 800c0ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0cc:	f004 fec4 	bl	8010e58 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d2:	691b      	ldr	r3, [r3, #16]
 800c0d4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d8:	7d1b      	ldrb	r3, [r3, #20]
 800c0da:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0de:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c0e6:	6838      	ldr	r0, [r7, #0]
 800c0e8:	f7fe ff22 	bl	800af30 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c0ec:	4b31      	ldr	r3, [pc, #196]	; (800c1b4 <tcp_slowtmr+0x5a4>)
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d004      	beq.n	800c102 <tcp_slowtmr+0x4f2>
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f06f 010c 	mvn.w	r1, #12
 800c0fe:	68b8      	ldr	r0, [r7, #8]
 800c100:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c102:	4b2c      	ldr	r3, [pc, #176]	; (800c1b4 <tcp_slowtmr+0x5a4>)
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d037      	beq.n	800c17a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800c10a:	e592      	b.n	800bc32 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c118:	7f1b      	ldrb	r3, [r3, #28]
 800c11a:	3301      	adds	r3, #1
 800c11c:	b2da      	uxtb	r2, r3
 800c11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c120:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c124:	7f1a      	ldrb	r2, [r3, #28]
 800c126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c128:	7f5b      	ldrb	r3, [r3, #29]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d325      	bcc.n	800c17a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800c12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c130:	2200      	movs	r2, #0
 800c132:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c134:	4b1f      	ldr	r3, [pc, #124]	; (800c1b4 <tcp_slowtmr+0x5a4>)
 800c136:	2200      	movs	r2, #0
 800c138:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c140:	2b00      	cmp	r3, #0
 800c142:	d00b      	beq.n	800c15c <tcp_slowtmr+0x54c>
 800c144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c14a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c14c:	6912      	ldr	r2, [r2, #16]
 800c14e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c150:	4610      	mov	r0, r2
 800c152:	4798      	blx	r3
 800c154:	4603      	mov	r3, r0
 800c156:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c15a:	e002      	b.n	800c162 <tcp_slowtmr+0x552>
 800c15c:	2300      	movs	r3, #0
 800c15e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c162:	4b14      	ldr	r3, [pc, #80]	; (800c1b4 <tcp_slowtmr+0x5a4>)
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d000      	beq.n	800c16c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800c16a:	e562      	b.n	800bc32 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c16c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c170:	2b00      	cmp	r3, #0
 800c172:	d102      	bne.n	800c17a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800c174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c176:	f004 f8bb 	bl	80102f0 <tcp_output>
  while (pcb != NULL) {
 800c17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f47f ad5e 	bne.w	800bc3e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c182:	2300      	movs	r3, #0
 800c184:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c186:	4b0c      	ldr	r3, [pc, #48]	; (800c1b8 <tcp_slowtmr+0x5a8>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c18c:	e069      	b.n	800c262 <tcp_slowtmr+0x652>
 800c18e:	bf00      	nop
 800c190:	200075d4 	.word	0x200075d4
 800c194:	000a4cb8 	.word	0x000a4cb8
 800c198:	10624dd3 	.word	0x10624dd3
 800c19c:	000124f8 	.word	0x000124f8
 800c1a0:	200075d0 	.word	0x200075d0
 800c1a4:	080164ac 	.word	0x080164ac
 800c1a8:	080168e4 	.word	0x080168e4
 800c1ac:	080164f0 	.word	0x080164f0
 800c1b0:	08016910 	.word	0x08016910
 800c1b4:	200075cc 	.word	0x200075cc
 800c1b8:	200075e0 	.word	0x200075e0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1be:	7d1b      	ldrb	r3, [r3, #20]
 800c1c0:	2b0a      	cmp	r3, #10
 800c1c2:	d006      	beq.n	800c1d2 <tcp_slowtmr+0x5c2>
 800c1c4:	4b2b      	ldr	r3, [pc, #172]	; (800c274 <tcp_slowtmr+0x664>)
 800c1c6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c1ca:	492b      	ldr	r1, [pc, #172]	; (800c278 <tcp_slowtmr+0x668>)
 800c1cc:	482b      	ldr	r0, [pc, #172]	; (800c27c <tcp_slowtmr+0x66c>)
 800c1ce:	f008 f8e3 	bl	8014398 <iprintf>
    pcb_remove = 0;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c1d8:	4b29      	ldr	r3, [pc, #164]	; (800c280 <tcp_slowtmr+0x670>)
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1de:	6a1b      	ldr	r3, [r3, #32]
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	2bf0      	cmp	r3, #240	; 0xf0
 800c1e4:	d904      	bls.n	800c1f0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c1e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d02f      	beq.n	800c258 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c1f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1fa:	f000 fc11 	bl	800ca20 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c200:	2b00      	cmp	r3, #0
 800c202:	d010      	beq.n	800c226 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c204:	4b1f      	ldr	r3, [pc, #124]	; (800c284 <tcp_slowtmr+0x674>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d106      	bne.n	800c21c <tcp_slowtmr+0x60c>
 800c20e:	4b19      	ldr	r3, [pc, #100]	; (800c274 <tcp_slowtmr+0x664>)
 800c210:	f240 52af 	movw	r2, #1455	; 0x5af
 800c214:	491c      	ldr	r1, [pc, #112]	; (800c288 <tcp_slowtmr+0x678>)
 800c216:	4819      	ldr	r0, [pc, #100]	; (800c27c <tcp_slowtmr+0x66c>)
 800c218:	f008 f8be 	bl	8014398 <iprintf>
        prev->next = pcb->next;
 800c21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21e:	68da      	ldr	r2, [r3, #12]
 800c220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c222:	60da      	str	r2, [r3, #12]
 800c224:	e00f      	b.n	800c246 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c226:	4b17      	ldr	r3, [pc, #92]	; (800c284 <tcp_slowtmr+0x674>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d006      	beq.n	800c23e <tcp_slowtmr+0x62e>
 800c230:	4b10      	ldr	r3, [pc, #64]	; (800c274 <tcp_slowtmr+0x664>)
 800c232:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c236:	4915      	ldr	r1, [pc, #84]	; (800c28c <tcp_slowtmr+0x67c>)
 800c238:	4810      	ldr	r0, [pc, #64]	; (800c27c <tcp_slowtmr+0x66c>)
 800c23a:	f008 f8ad 	bl	8014398 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	4a10      	ldr	r2, [pc, #64]	; (800c284 <tcp_slowtmr+0x674>)
 800c244:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c248:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c250:	69f8      	ldr	r0, [r7, #28]
 800c252:	f7fe fe6d 	bl	800af30 <tcp_free>
 800c256:	e004      	b.n	800c262 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c264:	2b00      	cmp	r3, #0
 800c266:	d1a9      	bne.n	800c1bc <tcp_slowtmr+0x5ac>
    }
  }
}
 800c268:	bf00      	nop
 800c26a:	bf00      	nop
 800c26c:	3730      	adds	r7, #48	; 0x30
 800c26e:	46bd      	mov	sp, r7
 800c270:	bdb0      	pop	{r4, r5, r7, pc}
 800c272:	bf00      	nop
 800c274:	080164ac 	.word	0x080164ac
 800c278:	0801693c 	.word	0x0801693c
 800c27c:	080164f0 	.word	0x080164f0
 800c280:	200075d4 	.word	0x200075d4
 800c284:	200075e0 	.word	0x200075e0
 800c288:	0801696c 	.word	0x0801696c
 800c28c:	08016994 	.word	0x08016994

0800c290 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c296:	4b2d      	ldr	r3, [pc, #180]	; (800c34c <tcp_fasttmr+0xbc>)
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	3301      	adds	r3, #1
 800c29c:	b2da      	uxtb	r2, r3
 800c29e:	4b2b      	ldr	r3, [pc, #172]	; (800c34c <tcp_fasttmr+0xbc>)
 800c2a0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c2a2:	4b2b      	ldr	r3, [pc, #172]	; (800c350 <tcp_fasttmr+0xc0>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c2a8:	e048      	b.n	800c33c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	7f9a      	ldrb	r2, [r3, #30]
 800c2ae:	4b27      	ldr	r3, [pc, #156]	; (800c34c <tcp_fasttmr+0xbc>)
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d03f      	beq.n	800c336 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c2b6:	4b25      	ldr	r3, [pc, #148]	; (800c34c <tcp_fasttmr+0xbc>)
 800c2b8:	781a      	ldrb	r2, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	8b5b      	ldrh	r3, [r3, #26]
 800c2c2:	f003 0301 	and.w	r3, r3, #1
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d010      	beq.n	800c2ec <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	8b5b      	ldrh	r3, [r3, #26]
 800c2ce:	f043 0302 	orr.w	r3, r3, #2
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f004 f809 	bl	80102f0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	8b5b      	ldrh	r3, [r3, #26]
 800c2e2:	f023 0303 	bic.w	r3, r3, #3
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	8b5b      	ldrh	r3, [r3, #26]
 800c2f0:	f003 0308 	and.w	r3, r3, #8
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d009      	beq.n	800c30c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	8b5b      	ldrh	r3, [r3, #26]
 800c2fc:	f023 0308 	bic.w	r3, r3, #8
 800c300:	b29a      	uxth	r2, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7fe ffa6 	bl	800b258 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00a      	beq.n	800c330 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c31a:	4b0e      	ldr	r3, [pc, #56]	; (800c354 <tcp_fasttmr+0xc4>)
 800c31c:	2200      	movs	r2, #0
 800c31e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 f819 	bl	800c358 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c326:	4b0b      	ldr	r3, [pc, #44]	; (800c354 <tcp_fasttmr+0xc4>)
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d000      	beq.n	800c330 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c32e:	e7b8      	b.n	800c2a2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	607b      	str	r3, [r7, #4]
 800c334:	e002      	b.n	800c33c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1b3      	bne.n	800c2aa <tcp_fasttmr+0x1a>
    }
  }
}
 800c342:	bf00      	nop
 800c344:	bf00      	nop
 800c346:	3708      	adds	r7, #8
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	20000782 	.word	0x20000782
 800c350:	200075d0 	.word	0x200075d0
 800c354:	200075cc 	.word	0x200075cc

0800c358 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c358:	b590      	push	{r4, r7, lr}
 800c35a:	b085      	sub	sp, #20
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d109      	bne.n	800c37a <tcp_process_refused_data+0x22>
 800c366:	4b37      	ldr	r3, [pc, #220]	; (800c444 <tcp_process_refused_data+0xec>)
 800c368:	f240 6209 	movw	r2, #1545	; 0x609
 800c36c:	4936      	ldr	r1, [pc, #216]	; (800c448 <tcp_process_refused_data+0xf0>)
 800c36e:	4837      	ldr	r0, [pc, #220]	; (800c44c <tcp_process_refused_data+0xf4>)
 800c370:	f008 f812 	bl	8014398 <iprintf>
 800c374:	f06f 030f 	mvn.w	r3, #15
 800c378:	e060      	b.n	800c43c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c37e:	7b5b      	ldrb	r3, [r3, #13]
 800c380:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c386:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00b      	beq.n	800c3b0 <tcp_process_refused_data+0x58>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6918      	ldr	r0, [r3, #16]
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	68ba      	ldr	r2, [r7, #8]
 800c3a6:	6879      	ldr	r1, [r7, #4]
 800c3a8:	47a0      	blx	r4
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	73fb      	strb	r3, [r7, #15]
 800c3ae:	e007      	b.n	800c3c0 <tcp_process_refused_data+0x68>
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	68ba      	ldr	r2, [r7, #8]
 800c3b4:	6879      	ldr	r1, [r7, #4]
 800c3b6:	2000      	movs	r0, #0
 800c3b8:	f000 f8c2 	bl	800c540 <tcp_recv_null>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c3c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d12a      	bne.n	800c41e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c3c8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ca:	f003 0320 	and.w	r3, r3, #32
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d033      	beq.n	800c43a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c3da:	d005      	beq.n	800c3e8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	b29a      	uxth	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00b      	beq.n	800c40a <tcp_process_refused_data+0xb2>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6918      	ldr	r0, [r3, #16]
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	2200      	movs	r2, #0
 800c400:	6879      	ldr	r1, [r7, #4]
 800c402:	47a0      	blx	r4
 800c404:	4603      	mov	r3, r0
 800c406:	73fb      	strb	r3, [r7, #15]
 800c408:	e001      	b.n	800c40e <tcp_process_refused_data+0xb6>
 800c40a:	2300      	movs	r3, #0
 800c40c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c40e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c412:	f113 0f0d 	cmn.w	r3, #13
 800c416:	d110      	bne.n	800c43a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c418:	f06f 030c 	mvn.w	r3, #12
 800c41c:	e00e      	b.n	800c43c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c41e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c422:	f113 0f0d 	cmn.w	r3, #13
 800c426:	d102      	bne.n	800c42e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c428:	f06f 030c 	mvn.w	r3, #12
 800c42c:	e006      	b.n	800c43c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	68ba      	ldr	r2, [r7, #8]
 800c432:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c434:	f06f 0304 	mvn.w	r3, #4
 800c438:	e000      	b.n	800c43c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3714      	adds	r7, #20
 800c440:	46bd      	mov	sp, r7
 800c442:	bd90      	pop	{r4, r7, pc}
 800c444:	080164ac 	.word	0x080164ac
 800c448:	080169bc 	.word	0x080169bc
 800c44c:	080164f0 	.word	0x080164f0

0800c450 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c458:	e007      	b.n	800c46a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f000 f80a 	bl	800c47a <tcp_seg_free>
    seg = next;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d1f4      	bne.n	800c45a <tcp_segs_free+0xa>
  }
}
 800c470:	bf00      	nop
 800c472:	bf00      	nop
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b082      	sub	sp, #8
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d00c      	beq.n	800c4a2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d004      	beq.n	800c49a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	4618      	mov	r0, r3
 800c496:	f7fe f941 	bl	800a71c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c49a:	6879      	ldr	r1, [r7, #4]
 800c49c:	2003      	movs	r0, #3
 800c49e:	f7fd fb2b 	bl	8009af8 <memp_free>
  }
}
 800c4a2:	bf00      	nop
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
	...

0800c4ac <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d107      	bne.n	800c4ce <tcp_setprio+0x22>
 800c4be:	4b07      	ldr	r3, [pc, #28]	; (800c4dc <tcp_setprio+0x30>)
 800c4c0:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800c4c4:	4906      	ldr	r1, [pc, #24]	; (800c4e0 <tcp_setprio+0x34>)
 800c4c6:	4807      	ldr	r0, [pc, #28]	; (800c4e4 <tcp_setprio+0x38>)
 800c4c8:	f007 ff66 	bl	8014398 <iprintf>
 800c4cc:	e002      	b.n	800c4d4 <tcp_setprio+0x28>

  pcb->prio = prio;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	78fa      	ldrb	r2, [r7, #3]
 800c4d2:	755a      	strb	r2, [r3, #21]
}
 800c4d4:	3708      	adds	r7, #8
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	080164ac 	.word	0x080164ac
 800c4e0:	080169e4 	.word	0x080169e4
 800c4e4:	080164f0 	.word	0x080164f0

0800c4e8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d106      	bne.n	800c504 <tcp_seg_copy+0x1c>
 800c4f6:	4b0f      	ldr	r3, [pc, #60]	; (800c534 <tcp_seg_copy+0x4c>)
 800c4f8:	f240 6282 	movw	r2, #1666	; 0x682
 800c4fc:	490e      	ldr	r1, [pc, #56]	; (800c538 <tcp_seg_copy+0x50>)
 800c4fe:	480f      	ldr	r0, [pc, #60]	; (800c53c <tcp_seg_copy+0x54>)
 800c500:	f007 ff4a 	bl	8014398 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c504:	2003      	movs	r0, #3
 800c506:	f7fd faab 	bl	8009a60 <memp_malloc>
 800c50a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d101      	bne.n	800c516 <tcp_seg_copy+0x2e>
    return NULL;
 800c512:	2300      	movs	r3, #0
 800c514:	e00a      	b.n	800c52c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c516:	2210      	movs	r2, #16
 800c518:	6879      	ldr	r1, [r7, #4]
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	f007 ff0c 	bl	8014338 <memcpy>
  pbuf_ref(cseg->p);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	4618      	mov	r0, r3
 800c526:	f7fe f999 	bl	800a85c <pbuf_ref>
  return cseg;
 800c52a:	68fb      	ldr	r3, [r7, #12]
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	080164ac 	.word	0x080164ac
 800c538:	08016a00 	.word	0x08016a00
 800c53c:	080164f0 	.word	0x080164f0

0800c540 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	607a      	str	r2, [r7, #4]
 800c54c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d109      	bne.n	800c568 <tcp_recv_null+0x28>
 800c554:	4b12      	ldr	r3, [pc, #72]	; (800c5a0 <tcp_recv_null+0x60>)
 800c556:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c55a:	4912      	ldr	r1, [pc, #72]	; (800c5a4 <tcp_recv_null+0x64>)
 800c55c:	4812      	ldr	r0, [pc, #72]	; (800c5a8 <tcp_recv_null+0x68>)
 800c55e:	f007 ff1b 	bl	8014398 <iprintf>
 800c562:	f06f 030f 	mvn.w	r3, #15
 800c566:	e016      	b.n	800c596 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d009      	beq.n	800c582 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	891b      	ldrh	r3, [r3, #8]
 800c572:	4619      	mov	r1, r3
 800c574:	68b8      	ldr	r0, [r7, #8]
 800c576:	f7ff f99d 	bl	800b8b4 <tcp_recved>
    pbuf_free(p);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f7fe f8ce 	bl	800a71c <pbuf_free>
 800c580:	e008      	b.n	800c594 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c582:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d104      	bne.n	800c594 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c58a:	68b8      	ldr	r0, [r7, #8]
 800c58c:	f7fe fece 	bl	800b32c <tcp_close>
 800c590:	4603      	mov	r3, r0
 800c592:	e000      	b.n	800c596 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c594:	2300      	movs	r3, #0
}
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	080164ac 	.word	0x080164ac
 800c5a4:	08016a1c 	.word	0x08016a1c
 800c5a8:	080164f0 	.word	0x080164f0

0800c5ac <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b086      	sub	sp, #24
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c5b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	db01      	blt.n	800c5c2 <tcp_kill_prio+0x16>
 800c5be:	79fb      	ldrb	r3, [r7, #7]
 800c5c0:	e000      	b.n	800c5c4 <tcp_kill_prio+0x18>
 800c5c2:	237f      	movs	r3, #127	; 0x7f
 800c5c4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c5c6:	7afb      	ldrb	r3, [r7, #11]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d034      	beq.n	800c636 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c5cc:	7afb      	ldrb	r3, [r7, #11]
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5da:	4b19      	ldr	r3, [pc, #100]	; (800c640 <tcp_kill_prio+0x94>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	617b      	str	r3, [r7, #20]
 800c5e0:	e01f      	b.n	800c622 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	7d5b      	ldrb	r3, [r3, #21]
 800c5e6:	7afa      	ldrb	r2, [r7, #11]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d80c      	bhi.n	800c606 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c5f0:	7afa      	ldrb	r2, [r7, #11]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d112      	bne.n	800c61c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c5f6:	4b13      	ldr	r3, [pc, #76]	; (800c644 <tcp_kill_prio+0x98>)
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	6a1b      	ldr	r3, [r3, #32]
 800c5fe:	1ad3      	subs	r3, r2, r3
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	429a      	cmp	r2, r3
 800c604:	d80a      	bhi.n	800c61c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c606:	4b0f      	ldr	r3, [pc, #60]	; (800c644 <tcp_kill_prio+0x98>)
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	6a1b      	ldr	r3, [r3, #32]
 800c60e:	1ad3      	subs	r3, r2, r3
 800c610:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	7d5b      	ldrb	r3, [r3, #21]
 800c61a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	617b      	str	r3, [r7, #20]
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d1dc      	bne.n	800c5e2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d004      	beq.n	800c638 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c62e:	6938      	ldr	r0, [r7, #16]
 800c630:	f7fe ff66 	bl	800b500 <tcp_abort>
 800c634:	e000      	b.n	800c638 <tcp_kill_prio+0x8c>
    return;
 800c636:	bf00      	nop
  }
}
 800c638:	3718      	adds	r7, #24
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	200075d0 	.word	0x200075d0
 800c644:	200075d4 	.word	0x200075d4

0800c648 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	4603      	mov	r3, r0
 800c650:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c652:	79fb      	ldrb	r3, [r7, #7]
 800c654:	2b08      	cmp	r3, #8
 800c656:	d009      	beq.n	800c66c <tcp_kill_state+0x24>
 800c658:	79fb      	ldrb	r3, [r7, #7]
 800c65a:	2b09      	cmp	r3, #9
 800c65c:	d006      	beq.n	800c66c <tcp_kill_state+0x24>
 800c65e:	4b1a      	ldr	r3, [pc, #104]	; (800c6c8 <tcp_kill_state+0x80>)
 800c660:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c664:	4919      	ldr	r1, [pc, #100]	; (800c6cc <tcp_kill_state+0x84>)
 800c666:	481a      	ldr	r0, [pc, #104]	; (800c6d0 <tcp_kill_state+0x88>)
 800c668:	f007 fe96 	bl	8014398 <iprintf>

  inactivity = 0;
 800c66c:	2300      	movs	r3, #0
 800c66e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c670:	2300      	movs	r3, #0
 800c672:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c674:	4b17      	ldr	r3, [pc, #92]	; (800c6d4 <tcp_kill_state+0x8c>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	617b      	str	r3, [r7, #20]
 800c67a:	e017      	b.n	800c6ac <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	7d1b      	ldrb	r3, [r3, #20]
 800c680:	79fa      	ldrb	r2, [r7, #7]
 800c682:	429a      	cmp	r2, r3
 800c684:	d10f      	bne.n	800c6a6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c686:	4b14      	ldr	r3, [pc, #80]	; (800c6d8 <tcp_kill_state+0x90>)
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	6a1b      	ldr	r3, [r3, #32]
 800c68e:	1ad3      	subs	r3, r2, r3
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	429a      	cmp	r2, r3
 800c694:	d807      	bhi.n	800c6a6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c696:	4b10      	ldr	r3, [pc, #64]	; (800c6d8 <tcp_kill_state+0x90>)
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	6a1b      	ldr	r3, [r3, #32]
 800c69e:	1ad3      	subs	r3, r2, r3
 800c6a0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	617b      	str	r3, [r7, #20]
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d1e4      	bne.n	800c67c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d003      	beq.n	800c6c0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	6938      	ldr	r0, [r7, #16]
 800c6bc:	f7fe fe62 	bl	800b384 <tcp_abandon>
  }
}
 800c6c0:	bf00      	nop
 800c6c2:	3718      	adds	r7, #24
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	080164ac 	.word	0x080164ac
 800c6cc:	08016a38 	.word	0x08016a38
 800c6d0:	080164f0 	.word	0x080164f0
 800c6d4:	200075d0 	.word	0x200075d0
 800c6d8:	200075d4 	.word	0x200075d4

0800c6dc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c6ea:	4b12      	ldr	r3, [pc, #72]	; (800c734 <tcp_kill_timewait+0x58>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	60fb      	str	r3, [r7, #12]
 800c6f0:	e012      	b.n	800c718 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c6f2:	4b11      	ldr	r3, [pc, #68]	; (800c738 <tcp_kill_timewait+0x5c>)
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	6a1b      	ldr	r3, [r3, #32]
 800c6fa:	1ad3      	subs	r3, r2, r3
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d807      	bhi.n	800c712 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c702:	4b0d      	ldr	r3, [pc, #52]	; (800c738 <tcp_kill_timewait+0x5c>)
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6a1b      	ldr	r3, [r3, #32]
 800c70a:	1ad3      	subs	r3, r2, r3
 800c70c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	60fb      	str	r3, [r7, #12]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d1e9      	bne.n	800c6f2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d002      	beq.n	800c72a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c724:	68b8      	ldr	r0, [r7, #8]
 800c726:	f7fe feeb 	bl	800b500 <tcp_abort>
  }
}
 800c72a:	bf00      	nop
 800c72c:	3710      	adds	r7, #16
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	200075e0 	.word	0x200075e0
 800c738:	200075d4 	.word	0x200075d4

0800c73c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c742:	4b10      	ldr	r3, [pc, #64]	; (800c784 <tcp_handle_closepend+0x48>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c748:	e014      	b.n	800c774 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	8b5b      	ldrh	r3, [r3, #26]
 800c754:	f003 0308 	and.w	r3, r3, #8
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d009      	beq.n	800c770 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	8b5b      	ldrh	r3, [r3, #26]
 800c760:	f023 0308 	bic.w	r3, r3, #8
 800c764:	b29a      	uxth	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f7fe fd74 	bl	800b258 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d1e7      	bne.n	800c74a <tcp_handle_closepend+0xe>
  }
}
 800c77a:	bf00      	nop
 800c77c:	bf00      	nop
 800c77e:	3708      	adds	r7, #8
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	200075d0 	.word	0x200075d0

0800c788 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	4603      	mov	r3, r0
 800c790:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c792:	2001      	movs	r0, #1
 800c794:	f7fd f964 	bl	8009a60 <memp_malloc>
 800c798:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d126      	bne.n	800c7ee <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c7a0:	f7ff ffcc 	bl	800c73c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c7a4:	f7ff ff9a 	bl	800c6dc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c7a8:	2001      	movs	r0, #1
 800c7aa:	f7fd f959 	bl	8009a60 <memp_malloc>
 800c7ae:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d11b      	bne.n	800c7ee <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c7b6:	2009      	movs	r0, #9
 800c7b8:	f7ff ff46 	bl	800c648 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c7bc:	2001      	movs	r0, #1
 800c7be:	f7fd f94f 	bl	8009a60 <memp_malloc>
 800c7c2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d111      	bne.n	800c7ee <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c7ca:	2008      	movs	r0, #8
 800c7cc:	f7ff ff3c 	bl	800c648 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c7d0:	2001      	movs	r0, #1
 800c7d2:	f7fd f945 	bl	8009a60 <memp_malloc>
 800c7d6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d107      	bne.n	800c7ee <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c7de:	79fb      	ldrb	r3, [r7, #7]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7ff fee3 	bl	800c5ac <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c7e6:	2001      	movs	r0, #1
 800c7e8:	f7fd f93a 	bl	8009a60 <memp_malloc>
 800c7ec:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d03f      	beq.n	800c874 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c7f4:	229c      	movs	r2, #156	; 0x9c
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	68f8      	ldr	r0, [r7, #12]
 800c7fa:	f007 fdc5 	bl	8014388 <memset>
    pcb->prio = prio;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	79fa      	ldrb	r2, [r7, #7]
 800c802:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c80a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c814:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	22ff      	movs	r2, #255	; 0xff
 800c822:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c82a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2206      	movs	r2, #6
 800c830:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2206      	movs	r2, #6
 800c838:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c840:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2201      	movs	r2, #1
 800c846:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c84a:	4b0d      	ldr	r3, [pc, #52]	; (800c880 <tcp_alloc+0xf8>)
 800c84c:	681a      	ldr	r2, [r3, #0]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c852:	4b0c      	ldr	r3, [pc, #48]	; (800c884 <tcp_alloc+0xfc>)
 800c854:	781a      	ldrb	r2, [r3, #0]
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c860:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	4a08      	ldr	r2, [pc, #32]	; (800c888 <tcp_alloc+0x100>)
 800c868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	4a07      	ldr	r2, [pc, #28]	; (800c88c <tcp_alloc+0x104>)
 800c870:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c874:	68fb      	ldr	r3, [r7, #12]
}
 800c876:	4618      	mov	r0, r3
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	200075d4 	.word	0x200075d4
 800c884:	20000782 	.word	0x20000782
 800c888:	0800c541 	.word	0x0800c541
 800c88c:	006ddd00 	.word	0x006ddd00

0800c890 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800c894:	2040      	movs	r0, #64	; 0x40
 800c896:	f7ff ff77 	bl	800c788 <tcp_alloc>
 800c89a:	4603      	mov	r3, r0
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d002      	beq.n	800c8b6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	611a      	str	r2, [r3, #16]
  }
}
 800c8b6:	bf00      	nop
 800c8b8:	370c      	adds	r7, #12
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr
	...

0800c8c4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00e      	beq.n	800c8f2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	7d1b      	ldrb	r3, [r3, #20]
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d106      	bne.n	800c8ea <tcp_recv+0x26>
 800c8dc:	4b07      	ldr	r3, [pc, #28]	; (800c8fc <tcp_recv+0x38>)
 800c8de:	f240 72df 	movw	r2, #2015	; 0x7df
 800c8e2:	4907      	ldr	r1, [pc, #28]	; (800c900 <tcp_recv+0x3c>)
 800c8e4:	4807      	ldr	r0, [pc, #28]	; (800c904 <tcp_recv+0x40>)
 800c8e6:	f007 fd57 	bl	8014398 <iprintf>
    pcb->recv = recv;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	683a      	ldr	r2, [r7, #0]
 800c8ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800c8f2:	bf00      	nop
 800c8f4:	3708      	adds	r7, #8
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	080164ac 	.word	0x080164ac
 800c900:	08016a48 	.word	0x08016a48
 800c904:	080164f0 	.word	0x080164f0

0800c908 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00e      	beq.n	800c936 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	7d1b      	ldrb	r3, [r3, #20]
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d106      	bne.n	800c92e <tcp_sent+0x26>
 800c920:	4b07      	ldr	r3, [pc, #28]	; (800c940 <tcp_sent+0x38>)
 800c922:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800c926:	4907      	ldr	r1, [pc, #28]	; (800c944 <tcp_sent+0x3c>)
 800c928:	4807      	ldr	r0, [pc, #28]	; (800c948 <tcp_sent+0x40>)
 800c92a:	f007 fd35 	bl	8014398 <iprintf>
    pcb->sent = sent;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	683a      	ldr	r2, [r7, #0]
 800c932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800c936:	bf00      	nop
 800c938:	3708      	adds	r7, #8
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	080164ac 	.word	0x080164ac
 800c944:	08016a70 	.word	0x08016a70
 800c948:	080164f0 	.word	0x080164f0

0800c94c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00e      	beq.n	800c97a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	7d1b      	ldrb	r3, [r3, #20]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d106      	bne.n	800c972 <tcp_err+0x26>
 800c964:	4b07      	ldr	r3, [pc, #28]	; (800c984 <tcp_err+0x38>)
 800c966:	f640 020d 	movw	r2, #2061	; 0x80d
 800c96a:	4907      	ldr	r1, [pc, #28]	; (800c988 <tcp_err+0x3c>)
 800c96c:	4807      	ldr	r0, [pc, #28]	; (800c98c <tcp_err+0x40>)
 800c96e:	f007 fd13 	bl	8014398 <iprintf>
    pcb->errf = err;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	683a      	ldr	r2, [r7, #0]
 800c976:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800c97a:	bf00      	nop
 800c97c:	3708      	adds	r7, #8
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	080164ac 	.word	0x080164ac
 800c988:	08016a98 	.word	0x08016a98
 800c98c:	080164f0 	.word	0x080164f0

0800c990 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800c990:	b480      	push	{r7}
 800c992:	b085      	sub	sp, #20
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d008      	beq.n	800c9b2 <tcp_accept+0x22>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	7d1b      	ldrb	r3, [r3, #20]
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d104      	bne.n	800c9b2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	683a      	ldr	r2, [r7, #0]
 800c9b0:	619a      	str	r2, [r3, #24]
  }
}
 800c9b2:	bf00      	nop
 800c9b4:	3714      	adds	r7, #20
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr
	...

0800c9c0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d107      	bne.n	800c9e4 <tcp_poll+0x24>
 800c9d4:	4b0e      	ldr	r3, [pc, #56]	; (800ca10 <tcp_poll+0x50>)
 800c9d6:	f640 023d 	movw	r2, #2109	; 0x83d
 800c9da:	490e      	ldr	r1, [pc, #56]	; (800ca14 <tcp_poll+0x54>)
 800c9dc:	480e      	ldr	r0, [pc, #56]	; (800ca18 <tcp_poll+0x58>)
 800c9de:	f007 fcdb 	bl	8014398 <iprintf>
 800c9e2:	e011      	b.n	800ca08 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	7d1b      	ldrb	r3, [r3, #20]
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d106      	bne.n	800c9fa <tcp_poll+0x3a>
 800c9ec:	4b08      	ldr	r3, [pc, #32]	; (800ca10 <tcp_poll+0x50>)
 800c9ee:	f640 023e 	movw	r2, #2110	; 0x83e
 800c9f2:	490a      	ldr	r1, [pc, #40]	; (800ca1c <tcp_poll+0x5c>)
 800c9f4:	4808      	ldr	r0, [pc, #32]	; (800ca18 <tcp_poll+0x58>)
 800c9f6:	f007 fccf 	bl	8014398 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	79fa      	ldrb	r2, [r7, #7]
 800ca06:	775a      	strb	r2, [r3, #29]
}
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	080164ac 	.word	0x080164ac
 800ca14:	08016ac0 	.word	0x08016ac0
 800ca18:	080164f0 	.word	0x080164f0
 800ca1c:	08016ad8 	.word	0x08016ad8

0800ca20 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d107      	bne.n	800ca3e <tcp_pcb_purge+0x1e>
 800ca2e:	4b21      	ldr	r3, [pc, #132]	; (800cab4 <tcp_pcb_purge+0x94>)
 800ca30:	f640 0251 	movw	r2, #2129	; 0x851
 800ca34:	4920      	ldr	r1, [pc, #128]	; (800cab8 <tcp_pcb_purge+0x98>)
 800ca36:	4821      	ldr	r0, [pc, #132]	; (800cabc <tcp_pcb_purge+0x9c>)
 800ca38:	f007 fcae 	bl	8014398 <iprintf>
 800ca3c:	e037      	b.n	800caae <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	7d1b      	ldrb	r3, [r3, #20]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d033      	beq.n	800caae <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ca4a:	2b0a      	cmp	r3, #10
 800ca4c:	d02f      	beq.n	800caae <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d02b      	beq.n	800caae <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d007      	beq.n	800ca6e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fd fe5a 	bl	800a71c <pbuf_free>
      pcb->refused_data = NULL;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d002      	beq.n	800ca7c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 f986 	bl	800cd88 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca82:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7ff fce1 	bl	800c450 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7ff fcdc 	bl	800c450 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	66da      	str	r2, [r3, #108]	; 0x6c
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	080164ac 	.word	0x080164ac
 800cab8:	08016af8 	.word	0x08016af8
 800cabc:	080164f0 	.word	0x080164f0

0800cac0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d106      	bne.n	800cade <tcp_pcb_remove+0x1e>
 800cad0:	4b3e      	ldr	r3, [pc, #248]	; (800cbcc <tcp_pcb_remove+0x10c>)
 800cad2:	f640 0283 	movw	r2, #2179	; 0x883
 800cad6:	493e      	ldr	r1, [pc, #248]	; (800cbd0 <tcp_pcb_remove+0x110>)
 800cad8:	483e      	ldr	r0, [pc, #248]	; (800cbd4 <tcp_pcb_remove+0x114>)
 800cada:	f007 fc5d 	bl	8014398 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d106      	bne.n	800caf2 <tcp_pcb_remove+0x32>
 800cae4:	4b39      	ldr	r3, [pc, #228]	; (800cbcc <tcp_pcb_remove+0x10c>)
 800cae6:	f640 0284 	movw	r2, #2180	; 0x884
 800caea:	493b      	ldr	r1, [pc, #236]	; (800cbd8 <tcp_pcb_remove+0x118>)
 800caec:	4839      	ldr	r0, [pc, #228]	; (800cbd4 <tcp_pcb_remove+0x114>)
 800caee:	f007 fc53 	bl	8014398 <iprintf>

  TCP_RMV(pcblist, pcb);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	683a      	ldr	r2, [r7, #0]
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d105      	bne.n	800cb08 <tcp_pcb_remove+0x48>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	68da      	ldr	r2, [r3, #12]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	601a      	str	r2, [r3, #0]
 800cb06:	e013      	b.n	800cb30 <tcp_pcb_remove+0x70>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	60fb      	str	r3, [r7, #12]
 800cb0e:	e00c      	b.n	800cb2a <tcp_pcb_remove+0x6a>
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	683a      	ldr	r2, [r7, #0]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d104      	bne.n	800cb24 <tcp_pcb_remove+0x64>
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	68da      	ldr	r2, [r3, #12]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	60da      	str	r2, [r3, #12]
 800cb22:	e005      	b.n	800cb30 <tcp_pcb_remove+0x70>
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	60fb      	str	r3, [r7, #12]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1ef      	bne.n	800cb10 <tcp_pcb_remove+0x50>
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	2200      	movs	r2, #0
 800cb34:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800cb36:	6838      	ldr	r0, [r7, #0]
 800cb38:	f7ff ff72 	bl	800ca20 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	7d1b      	ldrb	r3, [r3, #20]
 800cb40:	2b0a      	cmp	r3, #10
 800cb42:	d013      	beq.n	800cb6c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d00f      	beq.n	800cb6c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	8b5b      	ldrh	r3, [r3, #26]
 800cb50:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d009      	beq.n	800cb6c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	8b5b      	ldrh	r3, [r3, #26]
 800cb5c:	f043 0302 	orr.w	r3, r3, #2
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cb66:	6838      	ldr	r0, [r7, #0]
 800cb68:	f003 fbc2 	bl	80102f0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	7d1b      	ldrb	r3, [r3, #20]
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d020      	beq.n	800cbb6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d006      	beq.n	800cb8a <tcp_pcb_remove+0xca>
 800cb7c:	4b13      	ldr	r3, [pc, #76]	; (800cbcc <tcp_pcb_remove+0x10c>)
 800cb7e:	f640 0293 	movw	r2, #2195	; 0x893
 800cb82:	4916      	ldr	r1, [pc, #88]	; (800cbdc <tcp_pcb_remove+0x11c>)
 800cb84:	4813      	ldr	r0, [pc, #76]	; (800cbd4 <tcp_pcb_remove+0x114>)
 800cb86:	f007 fc07 	bl	8014398 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d006      	beq.n	800cba0 <tcp_pcb_remove+0xe0>
 800cb92:	4b0e      	ldr	r3, [pc, #56]	; (800cbcc <tcp_pcb_remove+0x10c>)
 800cb94:	f640 0294 	movw	r2, #2196	; 0x894
 800cb98:	4911      	ldr	r1, [pc, #68]	; (800cbe0 <tcp_pcb_remove+0x120>)
 800cb9a:	480e      	ldr	r0, [pc, #56]	; (800cbd4 <tcp_pcb_remove+0x114>)
 800cb9c:	f007 fbfc 	bl	8014398 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d006      	beq.n	800cbb6 <tcp_pcb_remove+0xf6>
 800cba8:	4b08      	ldr	r3, [pc, #32]	; (800cbcc <tcp_pcb_remove+0x10c>)
 800cbaa:	f640 0296 	movw	r2, #2198	; 0x896
 800cbae:	490d      	ldr	r1, [pc, #52]	; (800cbe4 <tcp_pcb_remove+0x124>)
 800cbb0:	4808      	ldr	r0, [pc, #32]	; (800cbd4 <tcp_pcb_remove+0x114>)
 800cbb2:	f007 fbf1 	bl	8014398 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800cbc2:	bf00      	nop
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	080164ac 	.word	0x080164ac
 800cbd0:	08016b14 	.word	0x08016b14
 800cbd4:	080164f0 	.word	0x080164f0
 800cbd8:	08016b30 	.word	0x08016b30
 800cbdc:	08016b50 	.word	0x08016b50
 800cbe0:	08016b68 	.word	0x08016b68
 800cbe4:	08016b84 	.word	0x08016b84

0800cbe8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d106      	bne.n	800cc04 <tcp_next_iss+0x1c>
 800cbf6:	4b0a      	ldr	r3, [pc, #40]	; (800cc20 <tcp_next_iss+0x38>)
 800cbf8:	f640 02af 	movw	r2, #2223	; 0x8af
 800cbfc:	4909      	ldr	r1, [pc, #36]	; (800cc24 <tcp_next_iss+0x3c>)
 800cbfe:	480a      	ldr	r0, [pc, #40]	; (800cc28 <tcp_next_iss+0x40>)
 800cc00:	f007 fbca 	bl	8014398 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800cc04:	4b09      	ldr	r3, [pc, #36]	; (800cc2c <tcp_next_iss+0x44>)
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	4b09      	ldr	r3, [pc, #36]	; (800cc30 <tcp_next_iss+0x48>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	4a07      	ldr	r2, [pc, #28]	; (800cc2c <tcp_next_iss+0x44>)
 800cc10:	6013      	str	r3, [r2, #0]
  return iss;
 800cc12:	4b06      	ldr	r3, [pc, #24]	; (800cc2c <tcp_next_iss+0x44>)
 800cc14:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	080164ac 	.word	0x080164ac
 800cc24:	08016b9c 	.word	0x08016b9c
 800cc28:	080164f0 	.word	0x080164f0
 800cc2c:	20000040 	.word	0x20000040
 800cc30:	200075d4 	.word	0x200075d4

0800cc34 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b086      	sub	sp, #24
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	607a      	str	r2, [r7, #4]
 800cc40:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d106      	bne.n	800cc56 <tcp_eff_send_mss_netif+0x22>
 800cc48:	4b14      	ldr	r3, [pc, #80]	; (800cc9c <tcp_eff_send_mss_netif+0x68>)
 800cc4a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800cc4e:	4914      	ldr	r1, [pc, #80]	; (800cca0 <tcp_eff_send_mss_netif+0x6c>)
 800cc50:	4814      	ldr	r0, [pc, #80]	; (800cca4 <tcp_eff_send_mss_netif+0x70>)
 800cc52:	f007 fba1 	bl	8014398 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d101      	bne.n	800cc60 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800cc5c:	89fb      	ldrh	r3, [r7, #14]
 800cc5e:	e019      	b.n	800cc94 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cc64:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800cc66:	8afb      	ldrh	r3, [r7, #22]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d012      	beq.n	800cc92 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800cc6c:	2328      	movs	r3, #40	; 0x28
 800cc6e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800cc70:	8afa      	ldrh	r2, [r7, #22]
 800cc72:	8abb      	ldrh	r3, [r7, #20]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d904      	bls.n	800cc82 <tcp_eff_send_mss_netif+0x4e>
 800cc78:	8afa      	ldrh	r2, [r7, #22]
 800cc7a:	8abb      	ldrh	r3, [r7, #20]
 800cc7c:	1ad3      	subs	r3, r2, r3
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	e000      	b.n	800cc84 <tcp_eff_send_mss_netif+0x50>
 800cc82:	2300      	movs	r3, #0
 800cc84:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800cc86:	8a7a      	ldrh	r2, [r7, #18]
 800cc88:	89fb      	ldrh	r3, [r7, #14]
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	bf28      	it	cs
 800cc8e:	4613      	movcs	r3, r2
 800cc90:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800cc92:	89fb      	ldrh	r3, [r7, #14]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3718      	adds	r7, #24
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	080164ac 	.word	0x080164ac
 800cca0:	08016bb8 	.word	0x08016bb8
 800cca4:	080164f0 	.word	0x080164f0

0800cca8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d119      	bne.n	800ccf0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ccbc:	4b10      	ldr	r3, [pc, #64]	; (800cd00 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ccbe:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ccc2:	4910      	ldr	r1, [pc, #64]	; (800cd04 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ccc4:	4810      	ldr	r0, [pc, #64]	; (800cd08 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ccc6:	f007 fb67 	bl	8014398 <iprintf>

  while (pcb != NULL) {
 800ccca:	e011      	b.n	800ccf0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d108      	bne.n	800ccea <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	68db      	ldr	r3, [r3, #12]
 800ccdc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ccde:	68f8      	ldr	r0, [r7, #12]
 800cce0:	f7fe fc0e 	bl	800b500 <tcp_abort>
      pcb = next;
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	60fb      	str	r3, [r7, #12]
 800cce8:	e002      	b.n	800ccf0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	68db      	ldr	r3, [r3, #12]
 800ccee:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1ea      	bne.n	800cccc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ccf6:	bf00      	nop
 800ccf8:	bf00      	nop
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	080164ac 	.word	0x080164ac
 800cd04:	08016be0 	.word	0x08016be0
 800cd08:	080164f0 	.word	0x080164f0

0800cd0c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d02a      	beq.n	800cd72 <tcp_netif_ip_addr_changed+0x66>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d026      	beq.n	800cd72 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800cd24:	4b15      	ldr	r3, [pc, #84]	; (800cd7c <tcp_netif_ip_addr_changed+0x70>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4619      	mov	r1, r3
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f7ff ffbc 	bl	800cca8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800cd30:	4b13      	ldr	r3, [pc, #76]	; (800cd80 <tcp_netif_ip_addr_changed+0x74>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4619      	mov	r1, r3
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f7ff ffb6 	bl	800cca8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d017      	beq.n	800cd72 <tcp_netif_ip_addr_changed+0x66>
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d013      	beq.n	800cd72 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cd4a:	4b0e      	ldr	r3, [pc, #56]	; (800cd84 <tcp_netif_ip_addr_changed+0x78>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	60fb      	str	r3, [r7, #12]
 800cd50:	e00c      	b.n	800cd6c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d103      	bne.n	800cd66 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	68db      	ldr	r3, [r3, #12]
 800cd6a:	60fb      	str	r3, [r7, #12]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1ef      	bne.n	800cd52 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800cd72:	bf00      	nop
 800cd74:	3710      	adds	r7, #16
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	200075d0 	.word	0x200075d0
 800cd80:	200075dc 	.word	0x200075dc
 800cd84:	200075d8 	.word	0x200075d8

0800cd88 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d007      	beq.n	800cda8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7ff fb57 	bl	800c450 <tcp_segs_free>
    pcb->ooseq = NULL;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800cda8:	bf00      	nop
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800cdb0:	b590      	push	{r4, r7, lr}
 800cdb2:	b08d      	sub	sp, #52	; 0x34
 800cdb4:	af04      	add	r7, sp, #16
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d105      	bne.n	800cdcc <tcp_input+0x1c>
 800cdc0:	4b9b      	ldr	r3, [pc, #620]	; (800d030 <tcp_input+0x280>)
 800cdc2:	2283      	movs	r2, #131	; 0x83
 800cdc4:	499b      	ldr	r1, [pc, #620]	; (800d034 <tcp_input+0x284>)
 800cdc6:	489c      	ldr	r0, [pc, #624]	; (800d038 <tcp_input+0x288>)
 800cdc8:	f007 fae6 	bl	8014398 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	4a9a      	ldr	r2, [pc, #616]	; (800d03c <tcp_input+0x28c>)
 800cdd2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	895b      	ldrh	r3, [r3, #10]
 800cdd8:	2b13      	cmp	r3, #19
 800cdda:	f240 83c4 	bls.w	800d566 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cdde:	4b98      	ldr	r3, [pc, #608]	; (800d040 <tcp_input+0x290>)
 800cde0:	695b      	ldr	r3, [r3, #20]
 800cde2:	4a97      	ldr	r2, [pc, #604]	; (800d040 <tcp_input+0x290>)
 800cde4:	6812      	ldr	r2, [r2, #0]
 800cde6:	4611      	mov	r1, r2
 800cde8:	4618      	mov	r0, r3
 800cdea:	f006 fb23 	bl	8013434 <ip4_addr_isbroadcast_u32>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f040 83ba 	bne.w	800d56a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800cdf6:	4b92      	ldr	r3, [pc, #584]	; (800d040 <tcp_input+0x290>)
 800cdf8:	695b      	ldr	r3, [r3, #20]
 800cdfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cdfe:	2be0      	cmp	r3, #224	; 0xe0
 800ce00:	f000 83b3 	beq.w	800d56a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ce04:	4b8d      	ldr	r3, [pc, #564]	; (800d03c <tcp_input+0x28c>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	899b      	ldrh	r3, [r3, #12]
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f7fb ff07 	bl	8008c20 <lwip_htons>
 800ce12:	4603      	mov	r3, r0
 800ce14:	0b1b      	lsrs	r3, r3, #12
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ce1e:	7cbb      	ldrb	r3, [r7, #18]
 800ce20:	2b13      	cmp	r3, #19
 800ce22:	f240 83a4 	bls.w	800d56e <tcp_input+0x7be>
 800ce26:	7cbb      	ldrb	r3, [r7, #18]
 800ce28:	b29a      	uxth	r2, r3
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	891b      	ldrh	r3, [r3, #8]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	f200 839d 	bhi.w	800d56e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ce34:	7cbb      	ldrb	r3, [r7, #18]
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	3b14      	subs	r3, #20
 800ce3a:	b29a      	uxth	r2, r3
 800ce3c:	4b81      	ldr	r3, [pc, #516]	; (800d044 <tcp_input+0x294>)
 800ce3e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ce40:	4b81      	ldr	r3, [pc, #516]	; (800d048 <tcp_input+0x298>)
 800ce42:	2200      	movs	r2, #0
 800ce44:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	895a      	ldrh	r2, [r3, #10]
 800ce4a:	7cbb      	ldrb	r3, [r7, #18]
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d309      	bcc.n	800ce66 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ce52:	4b7c      	ldr	r3, [pc, #496]	; (800d044 <tcp_input+0x294>)
 800ce54:	881a      	ldrh	r2, [r3, #0]
 800ce56:	4b7d      	ldr	r3, [pc, #500]	; (800d04c <tcp_input+0x29c>)
 800ce58:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ce5a:	7cbb      	ldrb	r3, [r7, #18]
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f7fd fbd6 	bl	800a610 <pbuf_remove_header>
 800ce64:	e04e      	b.n	800cf04 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d105      	bne.n	800ce7a <tcp_input+0xca>
 800ce6e:	4b70      	ldr	r3, [pc, #448]	; (800d030 <tcp_input+0x280>)
 800ce70:	22c2      	movs	r2, #194	; 0xc2
 800ce72:	4977      	ldr	r1, [pc, #476]	; (800d050 <tcp_input+0x2a0>)
 800ce74:	4870      	ldr	r0, [pc, #448]	; (800d038 <tcp_input+0x288>)
 800ce76:	f007 fa8f 	bl	8014398 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ce7a:	2114      	movs	r1, #20
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f7fd fbc7 	bl	800a610 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	895a      	ldrh	r2, [r3, #10]
 800ce86:	4b71      	ldr	r3, [pc, #452]	; (800d04c <tcp_input+0x29c>)
 800ce88:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ce8a:	4b6e      	ldr	r3, [pc, #440]	; (800d044 <tcp_input+0x294>)
 800ce8c:	881a      	ldrh	r2, [r3, #0]
 800ce8e:	4b6f      	ldr	r3, [pc, #444]	; (800d04c <tcp_input+0x29c>)
 800ce90:	881b      	ldrh	r3, [r3, #0]
 800ce92:	1ad3      	subs	r3, r2, r3
 800ce94:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ce96:	4b6d      	ldr	r3, [pc, #436]	; (800d04c <tcp_input+0x29c>)
 800ce98:	881b      	ldrh	r3, [r3, #0]
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f7fd fbb7 	bl	800a610 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	895b      	ldrh	r3, [r3, #10]
 800cea8:	8a3a      	ldrh	r2, [r7, #16]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	f200 8361 	bhi.w	800d572 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	4a64      	ldr	r2, [pc, #400]	; (800d048 <tcp_input+0x298>)
 800ceb8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	8a3a      	ldrh	r2, [r7, #16]
 800cec0:	4611      	mov	r1, r2
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fd fba4 	bl	800a610 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	891a      	ldrh	r2, [r3, #8]
 800cecc:	8a3b      	ldrh	r3, [r7, #16]
 800cece:	1ad3      	subs	r3, r2, r3
 800ced0:	b29a      	uxth	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	895b      	ldrh	r3, [r3, #10]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d005      	beq.n	800ceea <tcp_input+0x13a>
 800cede:	4b54      	ldr	r3, [pc, #336]	; (800d030 <tcp_input+0x280>)
 800cee0:	22df      	movs	r2, #223	; 0xdf
 800cee2:	495c      	ldr	r1, [pc, #368]	; (800d054 <tcp_input+0x2a4>)
 800cee4:	4854      	ldr	r0, [pc, #336]	; (800d038 <tcp_input+0x288>)
 800cee6:	f007 fa57 	bl	8014398 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	891a      	ldrh	r2, [r3, #8]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	891b      	ldrh	r3, [r3, #8]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d005      	beq.n	800cf04 <tcp_input+0x154>
 800cef8:	4b4d      	ldr	r3, [pc, #308]	; (800d030 <tcp_input+0x280>)
 800cefa:	22e0      	movs	r2, #224	; 0xe0
 800cefc:	4956      	ldr	r1, [pc, #344]	; (800d058 <tcp_input+0x2a8>)
 800cefe:	484e      	ldr	r0, [pc, #312]	; (800d038 <tcp_input+0x288>)
 800cf00:	f007 fa4a 	bl	8014398 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800cf04:	4b4d      	ldr	r3, [pc, #308]	; (800d03c <tcp_input+0x28c>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	881b      	ldrh	r3, [r3, #0]
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	4a4b      	ldr	r2, [pc, #300]	; (800d03c <tcp_input+0x28c>)
 800cf0e:	6814      	ldr	r4, [r2, #0]
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fb fe85 	bl	8008c20 <lwip_htons>
 800cf16:	4603      	mov	r3, r0
 800cf18:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800cf1a:	4b48      	ldr	r3, [pc, #288]	; (800d03c <tcp_input+0x28c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	885b      	ldrh	r3, [r3, #2]
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	4a46      	ldr	r2, [pc, #280]	; (800d03c <tcp_input+0x28c>)
 800cf24:	6814      	ldr	r4, [r2, #0]
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fb fe7a 	bl	8008c20 <lwip_htons>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cf30:	4b42      	ldr	r3, [pc, #264]	; (800d03c <tcp_input+0x28c>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	4a41      	ldr	r2, [pc, #260]	; (800d03c <tcp_input+0x28c>)
 800cf38:	6814      	ldr	r4, [r2, #0]
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fb fe85 	bl	8008c4a <lwip_htonl>
 800cf40:	4603      	mov	r3, r0
 800cf42:	6063      	str	r3, [r4, #4]
 800cf44:	6863      	ldr	r3, [r4, #4]
 800cf46:	4a45      	ldr	r2, [pc, #276]	; (800d05c <tcp_input+0x2ac>)
 800cf48:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cf4a:	4b3c      	ldr	r3, [pc, #240]	; (800d03c <tcp_input+0x28c>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	4a3a      	ldr	r2, [pc, #232]	; (800d03c <tcp_input+0x28c>)
 800cf52:	6814      	ldr	r4, [r2, #0]
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fb fe78 	bl	8008c4a <lwip_htonl>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	60a3      	str	r3, [r4, #8]
 800cf5e:	68a3      	ldr	r3, [r4, #8]
 800cf60:	4a3f      	ldr	r2, [pc, #252]	; (800d060 <tcp_input+0x2b0>)
 800cf62:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cf64:	4b35      	ldr	r3, [pc, #212]	; (800d03c <tcp_input+0x28c>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	89db      	ldrh	r3, [r3, #14]
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	4a33      	ldr	r2, [pc, #204]	; (800d03c <tcp_input+0x28c>)
 800cf6e:	6814      	ldr	r4, [r2, #0]
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7fb fe55 	bl	8008c20 <lwip_htons>
 800cf76:	4603      	mov	r3, r0
 800cf78:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800cf7a:	4b30      	ldr	r3, [pc, #192]	; (800d03c <tcp_input+0x28c>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	899b      	ldrh	r3, [r3, #12]
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7fb fe4c 	bl	8008c20 <lwip_htons>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf90:	b2da      	uxtb	r2, r3
 800cf92:	4b34      	ldr	r3, [pc, #208]	; (800d064 <tcp_input+0x2b4>)
 800cf94:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	891a      	ldrh	r2, [r3, #8]
 800cf9a:	4b33      	ldr	r3, [pc, #204]	; (800d068 <tcp_input+0x2b8>)
 800cf9c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800cf9e:	4b31      	ldr	r3, [pc, #196]	; (800d064 <tcp_input+0x2b4>)
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	f003 0303 	and.w	r3, r3, #3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00c      	beq.n	800cfc4 <tcp_input+0x214>
    tcplen++;
 800cfaa:	4b2f      	ldr	r3, [pc, #188]	; (800d068 <tcp_input+0x2b8>)
 800cfac:	881b      	ldrh	r3, [r3, #0]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	b29a      	uxth	r2, r3
 800cfb2:	4b2d      	ldr	r3, [pc, #180]	; (800d068 <tcp_input+0x2b8>)
 800cfb4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	891a      	ldrh	r2, [r3, #8]
 800cfba:	4b2b      	ldr	r3, [pc, #172]	; (800d068 <tcp_input+0x2b8>)
 800cfbc:	881b      	ldrh	r3, [r3, #0]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	f200 82d9 	bhi.w	800d576 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfc8:	4b28      	ldr	r3, [pc, #160]	; (800d06c <tcp_input+0x2bc>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	61fb      	str	r3, [r7, #28]
 800cfce:	e09d      	b.n	800d10c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	7d1b      	ldrb	r3, [r3, #20]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d105      	bne.n	800cfe4 <tcp_input+0x234>
 800cfd8:	4b15      	ldr	r3, [pc, #84]	; (800d030 <tcp_input+0x280>)
 800cfda:	22fb      	movs	r2, #251	; 0xfb
 800cfdc:	4924      	ldr	r1, [pc, #144]	; (800d070 <tcp_input+0x2c0>)
 800cfde:	4816      	ldr	r0, [pc, #88]	; (800d038 <tcp_input+0x288>)
 800cfe0:	f007 f9da 	bl	8014398 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	7d1b      	ldrb	r3, [r3, #20]
 800cfe8:	2b0a      	cmp	r3, #10
 800cfea:	d105      	bne.n	800cff8 <tcp_input+0x248>
 800cfec:	4b10      	ldr	r3, [pc, #64]	; (800d030 <tcp_input+0x280>)
 800cfee:	22fc      	movs	r2, #252	; 0xfc
 800cff0:	4920      	ldr	r1, [pc, #128]	; (800d074 <tcp_input+0x2c4>)
 800cff2:	4811      	ldr	r0, [pc, #68]	; (800d038 <tcp_input+0x288>)
 800cff4:	f007 f9d0 	bl	8014398 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	7d1b      	ldrb	r3, [r3, #20]
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d105      	bne.n	800d00c <tcp_input+0x25c>
 800d000:	4b0b      	ldr	r3, [pc, #44]	; (800d030 <tcp_input+0x280>)
 800d002:	22fd      	movs	r2, #253	; 0xfd
 800d004:	491c      	ldr	r1, [pc, #112]	; (800d078 <tcp_input+0x2c8>)
 800d006:	480c      	ldr	r0, [pc, #48]	; (800d038 <tcp_input+0x288>)
 800d008:	f007 f9c6 	bl	8014398 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d00c:	69fb      	ldr	r3, [r7, #28]
 800d00e:	7a1b      	ldrb	r3, [r3, #8]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d033      	beq.n	800d07c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	7a1a      	ldrb	r2, [r3, #8]
 800d018:	4b09      	ldr	r3, [pc, #36]	; (800d040 <tcp_input+0x290>)
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d020:	3301      	adds	r3, #1
 800d022:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d024:	429a      	cmp	r2, r3
 800d026:	d029      	beq.n	800d07c <tcp_input+0x2cc>
      prev = pcb;
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	61bb      	str	r3, [r7, #24]
      continue;
 800d02c:	e06b      	b.n	800d106 <tcp_input+0x356>
 800d02e:	bf00      	nop
 800d030:	08016c14 	.word	0x08016c14
 800d034:	08016c48 	.word	0x08016c48
 800d038:	08016c60 	.word	0x08016c60
 800d03c:	20000794 	.word	0x20000794
 800d040:	2000407c 	.word	0x2000407c
 800d044:	20000798 	.word	0x20000798
 800d048:	2000079c 	.word	0x2000079c
 800d04c:	2000079a 	.word	0x2000079a
 800d050:	08016c88 	.word	0x08016c88
 800d054:	08016c98 	.word	0x08016c98
 800d058:	08016ca4 	.word	0x08016ca4
 800d05c:	200007a4 	.word	0x200007a4
 800d060:	200007a8 	.word	0x200007a8
 800d064:	200007b0 	.word	0x200007b0
 800d068:	200007ae 	.word	0x200007ae
 800d06c:	200075d0 	.word	0x200075d0
 800d070:	08016cc4 	.word	0x08016cc4
 800d074:	08016cec 	.word	0x08016cec
 800d078:	08016d18 	.word	0x08016d18
    }

    if (pcb->remote_port == tcphdr->src &&
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	8b1a      	ldrh	r2, [r3, #24]
 800d080:	4b94      	ldr	r3, [pc, #592]	; (800d2d4 <tcp_input+0x524>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	881b      	ldrh	r3, [r3, #0]
 800d086:	b29b      	uxth	r3, r3
 800d088:	429a      	cmp	r2, r3
 800d08a:	d13a      	bne.n	800d102 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d08c:	69fb      	ldr	r3, [r7, #28]
 800d08e:	8ada      	ldrh	r2, [r3, #22]
 800d090:	4b90      	ldr	r3, [pc, #576]	; (800d2d4 <tcp_input+0x524>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	885b      	ldrh	r3, [r3, #2]
 800d096:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d098:	429a      	cmp	r2, r3
 800d09a:	d132      	bne.n	800d102 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	685a      	ldr	r2, [r3, #4]
 800d0a0:	4b8d      	ldr	r3, [pc, #564]	; (800d2d8 <tcp_input+0x528>)
 800d0a2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d12c      	bne.n	800d102 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	4b8a      	ldr	r3, [pc, #552]	; (800d2d8 <tcp_input+0x528>)
 800d0ae:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d126      	bne.n	800d102 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	69fa      	ldr	r2, [r7, #28]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d106      	bne.n	800d0cc <tcp_input+0x31c>
 800d0be:	4b87      	ldr	r3, [pc, #540]	; (800d2dc <tcp_input+0x52c>)
 800d0c0:	f240 120d 	movw	r2, #269	; 0x10d
 800d0c4:	4986      	ldr	r1, [pc, #536]	; (800d2e0 <tcp_input+0x530>)
 800d0c6:	4887      	ldr	r0, [pc, #540]	; (800d2e4 <tcp_input+0x534>)
 800d0c8:	f007 f966 	bl	8014398 <iprintf>
      if (prev != NULL) {
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d00a      	beq.n	800d0e8 <tcp_input+0x338>
        prev->next = pcb->next;
 800d0d2:	69fb      	ldr	r3, [r7, #28]
 800d0d4:	68da      	ldr	r2, [r3, #12]
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d0da:	4b83      	ldr	r3, [pc, #524]	; (800d2e8 <tcp_input+0x538>)
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d0e2:	4a81      	ldr	r2, [pc, #516]	; (800d2e8 <tcp_input+0x538>)
 800d0e4:	69fb      	ldr	r3, [r7, #28]
 800d0e6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	69fa      	ldr	r2, [r7, #28]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d111      	bne.n	800d116 <tcp_input+0x366>
 800d0f2:	4b7a      	ldr	r3, [pc, #488]	; (800d2dc <tcp_input+0x52c>)
 800d0f4:	f240 1215 	movw	r2, #277	; 0x115
 800d0f8:	497c      	ldr	r1, [pc, #496]	; (800d2ec <tcp_input+0x53c>)
 800d0fa:	487a      	ldr	r0, [pc, #488]	; (800d2e4 <tcp_input+0x534>)
 800d0fc:	f007 f94c 	bl	8014398 <iprintf>
      break;
 800d100:	e009      	b.n	800d116 <tcp_input+0x366>
    }
    prev = pcb;
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	61fb      	str	r3, [r7, #28]
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	f47f af5e 	bne.w	800cfd0 <tcp_input+0x220>
 800d114:	e000      	b.n	800d118 <tcp_input+0x368>
      break;
 800d116:	bf00      	nop
  }

  if (pcb == NULL) {
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	f040 8095 	bne.w	800d24a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d120:	4b73      	ldr	r3, [pc, #460]	; (800d2f0 <tcp_input+0x540>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	61fb      	str	r3, [r7, #28]
 800d126:	e03f      	b.n	800d1a8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	7d1b      	ldrb	r3, [r3, #20]
 800d12c:	2b0a      	cmp	r3, #10
 800d12e:	d006      	beq.n	800d13e <tcp_input+0x38e>
 800d130:	4b6a      	ldr	r3, [pc, #424]	; (800d2dc <tcp_input+0x52c>)
 800d132:	f240 121f 	movw	r2, #287	; 0x11f
 800d136:	496f      	ldr	r1, [pc, #444]	; (800d2f4 <tcp_input+0x544>)
 800d138:	486a      	ldr	r0, [pc, #424]	; (800d2e4 <tcp_input+0x534>)
 800d13a:	f007 f92d 	bl	8014398 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d13e:	69fb      	ldr	r3, [r7, #28]
 800d140:	7a1b      	ldrb	r3, [r3, #8]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d009      	beq.n	800d15a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	7a1a      	ldrb	r2, [r3, #8]
 800d14a:	4b63      	ldr	r3, [pc, #396]	; (800d2d8 <tcp_input+0x528>)
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d152:	3301      	adds	r3, #1
 800d154:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d156:	429a      	cmp	r2, r3
 800d158:	d122      	bne.n	800d1a0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	8b1a      	ldrh	r2, [r3, #24]
 800d15e:	4b5d      	ldr	r3, [pc, #372]	; (800d2d4 <tcp_input+0x524>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	881b      	ldrh	r3, [r3, #0]
 800d164:	b29b      	uxth	r3, r3
 800d166:	429a      	cmp	r2, r3
 800d168:	d11b      	bne.n	800d1a2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	8ada      	ldrh	r2, [r3, #22]
 800d16e:	4b59      	ldr	r3, [pc, #356]	; (800d2d4 <tcp_input+0x524>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	885b      	ldrh	r3, [r3, #2]
 800d174:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d176:	429a      	cmp	r2, r3
 800d178:	d113      	bne.n	800d1a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	685a      	ldr	r2, [r3, #4]
 800d17e:	4b56      	ldr	r3, [pc, #344]	; (800d2d8 <tcp_input+0x528>)
 800d180:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d182:	429a      	cmp	r2, r3
 800d184:	d10d      	bne.n	800d1a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	4b53      	ldr	r3, [pc, #332]	; (800d2d8 <tcp_input+0x528>)
 800d18c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d18e:	429a      	cmp	r2, r3
 800d190:	d107      	bne.n	800d1a2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d192:	69f8      	ldr	r0, [r7, #28]
 800d194:	f000 fb54 	bl	800d840 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f7fd fabf 	bl	800a71c <pbuf_free>
        return;
 800d19e:	e1f0      	b.n	800d582 <tcp_input+0x7d2>
        continue;
 800d1a0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	68db      	ldr	r3, [r3, #12]
 800d1a6:	61fb      	str	r3, [r7, #28]
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d1bc      	bne.n	800d128 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d1b2:	4b51      	ldr	r3, [pc, #324]	; (800d2f8 <tcp_input+0x548>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	617b      	str	r3, [r7, #20]
 800d1b8:	e02a      	b.n	800d210 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	7a1b      	ldrb	r3, [r3, #8]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00c      	beq.n	800d1dc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	7a1a      	ldrb	r2, [r3, #8]
 800d1c6:	4b44      	ldr	r3, [pc, #272]	; (800d2d8 <tcp_input+0x528>)
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d002      	beq.n	800d1dc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	61bb      	str	r3, [r7, #24]
        continue;
 800d1da:	e016      	b.n	800d20a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	8ada      	ldrh	r2, [r3, #22]
 800d1e0:	4b3c      	ldr	r3, [pc, #240]	; (800d2d4 <tcp_input+0x524>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	885b      	ldrh	r3, [r3, #2]
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d10c      	bne.n	800d206 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	4b39      	ldr	r3, [pc, #228]	; (800d2d8 <tcp_input+0x528>)
 800d1f2:	695b      	ldr	r3, [r3, #20]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d00f      	beq.n	800d218 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d00d      	beq.n	800d21a <tcp_input+0x46a>
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d009      	beq.n	800d21a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	68db      	ldr	r3, [r3, #12]
 800d20e:	617b      	str	r3, [r7, #20]
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d1d1      	bne.n	800d1ba <tcp_input+0x40a>
 800d216:	e000      	b.n	800d21a <tcp_input+0x46a>
            break;
 800d218:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d014      	beq.n	800d24a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d00a      	beq.n	800d23c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	68da      	ldr	r2, [r3, #12]
 800d22a:	69bb      	ldr	r3, [r7, #24]
 800d22c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d22e:	4b32      	ldr	r3, [pc, #200]	; (800d2f8 <tcp_input+0x548>)
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d236:	4a30      	ldr	r2, [pc, #192]	; (800d2f8 <tcp_input+0x548>)
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d23c:	6978      	ldr	r0, [r7, #20]
 800d23e:	f000 fa01 	bl	800d644 <tcp_listen_input>
      }
      pbuf_free(p);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f7fd fa6a 	bl	800a71c <pbuf_free>
      return;
 800d248:	e19b      	b.n	800d582 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d24a:	69fb      	ldr	r3, [r7, #28]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	f000 8160 	beq.w	800d512 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d252:	4b2a      	ldr	r3, [pc, #168]	; (800d2fc <tcp_input+0x54c>)
 800d254:	2200      	movs	r2, #0
 800d256:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	891a      	ldrh	r2, [r3, #8]
 800d25c:	4b27      	ldr	r3, [pc, #156]	; (800d2fc <tcp_input+0x54c>)
 800d25e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d260:	4a26      	ldr	r2, [pc, #152]	; (800d2fc <tcp_input+0x54c>)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d266:	4b1b      	ldr	r3, [pc, #108]	; (800d2d4 <tcp_input+0x524>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a24      	ldr	r2, [pc, #144]	; (800d2fc <tcp_input+0x54c>)
 800d26c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d26e:	4b24      	ldr	r3, [pc, #144]	; (800d300 <tcp_input+0x550>)
 800d270:	2200      	movs	r2, #0
 800d272:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d274:	4b23      	ldr	r3, [pc, #140]	; (800d304 <tcp_input+0x554>)
 800d276:	2200      	movs	r2, #0
 800d278:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d27a:	4b23      	ldr	r3, [pc, #140]	; (800d308 <tcp_input+0x558>)
 800d27c:	2200      	movs	r2, #0
 800d27e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d280:	4b22      	ldr	r3, [pc, #136]	; (800d30c <tcp_input+0x55c>)
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	f003 0308 	and.w	r3, r3, #8
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d006      	beq.n	800d29a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	7b5b      	ldrb	r3, [r3, #13]
 800d290:	f043 0301 	orr.w	r3, r3, #1
 800d294:	b2da      	uxtb	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d29a:	69fb      	ldr	r3, [r7, #28]
 800d29c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d038      	beq.n	800d314 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d2a2:	69f8      	ldr	r0, [r7, #28]
 800d2a4:	f7ff f858 	bl	800c358 <tcp_process_refused_data>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	f113 0f0d 	cmn.w	r3, #13
 800d2ae:	d007      	beq.n	800d2c0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d02d      	beq.n	800d314 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d2b8:	4b15      	ldr	r3, [pc, #84]	; (800d310 <tcp_input+0x560>)
 800d2ba:	881b      	ldrh	r3, [r3, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d029      	beq.n	800d314 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	f040 8104 	bne.w	800d4d2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d2ca:	69f8      	ldr	r0, [r7, #28]
 800d2cc:	f003 fe16 	bl	8010efc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d2d0:	e0ff      	b.n	800d4d2 <tcp_input+0x722>
 800d2d2:	bf00      	nop
 800d2d4:	20000794 	.word	0x20000794
 800d2d8:	2000407c 	.word	0x2000407c
 800d2dc:	08016c14 	.word	0x08016c14
 800d2e0:	08016d40 	.word	0x08016d40
 800d2e4:	08016c60 	.word	0x08016c60
 800d2e8:	200075d0 	.word	0x200075d0
 800d2ec:	08016d6c 	.word	0x08016d6c
 800d2f0:	200075e0 	.word	0x200075e0
 800d2f4:	08016d98 	.word	0x08016d98
 800d2f8:	200075d8 	.word	0x200075d8
 800d2fc:	20000784 	.word	0x20000784
 800d300:	200007b4 	.word	0x200007b4
 800d304:	200007b1 	.word	0x200007b1
 800d308:	200007ac 	.word	0x200007ac
 800d30c:	200007b0 	.word	0x200007b0
 800d310:	200007ae 	.word	0x200007ae
      }
    }
    tcp_input_pcb = pcb;
 800d314:	4a9c      	ldr	r2, [pc, #624]	; (800d588 <tcp_input+0x7d8>)
 800d316:	69fb      	ldr	r3, [r7, #28]
 800d318:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d31a:	69f8      	ldr	r0, [r7, #28]
 800d31c:	f000 fb0a 	bl	800d934 <tcp_process>
 800d320:	4603      	mov	r3, r0
 800d322:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d324:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d328:	f113 0f0d 	cmn.w	r3, #13
 800d32c:	f000 80d3 	beq.w	800d4d6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800d330:	4b96      	ldr	r3, [pc, #600]	; (800d58c <tcp_input+0x7dc>)
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	f003 0308 	and.w	r3, r3, #8
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d015      	beq.n	800d368 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d33c:	69fb      	ldr	r3, [r7, #28]
 800d33e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d342:	2b00      	cmp	r3, #0
 800d344:	d008      	beq.n	800d358 <tcp_input+0x5a8>
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d34c:	69fa      	ldr	r2, [r7, #28]
 800d34e:	6912      	ldr	r2, [r2, #16]
 800d350:	f06f 010d 	mvn.w	r1, #13
 800d354:	4610      	mov	r0, r2
 800d356:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d358:	69f9      	ldr	r1, [r7, #28]
 800d35a:	488d      	ldr	r0, [pc, #564]	; (800d590 <tcp_input+0x7e0>)
 800d35c:	f7ff fbb0 	bl	800cac0 <tcp_pcb_remove>
        tcp_free(pcb);
 800d360:	69f8      	ldr	r0, [r7, #28]
 800d362:	f7fd fde5 	bl	800af30 <tcp_free>
 800d366:	e0c1      	b.n	800d4ec <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800d368:	2300      	movs	r3, #0
 800d36a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d36c:	4b89      	ldr	r3, [pc, #548]	; (800d594 <tcp_input+0x7e4>)
 800d36e:	881b      	ldrh	r3, [r3, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d01d      	beq.n	800d3b0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d374:	4b87      	ldr	r3, [pc, #540]	; (800d594 <tcp_input+0x7e4>)
 800d376:	881b      	ldrh	r3, [r3, #0]
 800d378:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d380:	2b00      	cmp	r3, #0
 800d382:	d00a      	beq.n	800d39a <tcp_input+0x5ea>
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d38a:	69fa      	ldr	r2, [r7, #28]
 800d38c:	6910      	ldr	r0, [r2, #16]
 800d38e:	89fa      	ldrh	r2, [r7, #14]
 800d390:	69f9      	ldr	r1, [r7, #28]
 800d392:	4798      	blx	r3
 800d394:	4603      	mov	r3, r0
 800d396:	74fb      	strb	r3, [r7, #19]
 800d398:	e001      	b.n	800d39e <tcp_input+0x5ee>
 800d39a:	2300      	movs	r3, #0
 800d39c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d39e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d3a2:	f113 0f0d 	cmn.w	r3, #13
 800d3a6:	f000 8098 	beq.w	800d4da <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d3aa:	4b7a      	ldr	r3, [pc, #488]	; (800d594 <tcp_input+0x7e4>)
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d3b0:	69f8      	ldr	r0, [r7, #28]
 800d3b2:	f000 f907 	bl	800d5c4 <tcp_input_delayed_close>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f040 8090 	bne.w	800d4de <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d3be:	4b76      	ldr	r3, [pc, #472]	; (800d598 <tcp_input+0x7e8>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d041      	beq.n	800d44a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d006      	beq.n	800d3dc <tcp_input+0x62c>
 800d3ce:	4b73      	ldr	r3, [pc, #460]	; (800d59c <tcp_input+0x7ec>)
 800d3d0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d3d4:	4972      	ldr	r1, [pc, #456]	; (800d5a0 <tcp_input+0x7f0>)
 800d3d6:	4873      	ldr	r0, [pc, #460]	; (800d5a4 <tcp_input+0x7f4>)
 800d3d8:	f006 ffde 	bl	8014398 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	8b5b      	ldrh	r3, [r3, #26]
 800d3e0:	f003 0310 	and.w	r3, r3, #16
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d008      	beq.n	800d3fa <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d3e8:	4b6b      	ldr	r3, [pc, #428]	; (800d598 <tcp_input+0x7e8>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7fd f995 	bl	800a71c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d3f2:	69f8      	ldr	r0, [r7, #28]
 800d3f4:	f7fe f884 	bl	800b500 <tcp_abort>
            goto aborted;
 800d3f8:	e078      	b.n	800d4ec <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00c      	beq.n	800d41e <tcp_input+0x66e>
 800d404:	69fb      	ldr	r3, [r7, #28]
 800d406:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	6918      	ldr	r0, [r3, #16]
 800d40e:	4b62      	ldr	r3, [pc, #392]	; (800d598 <tcp_input+0x7e8>)
 800d410:	681a      	ldr	r2, [r3, #0]
 800d412:	2300      	movs	r3, #0
 800d414:	69f9      	ldr	r1, [r7, #28]
 800d416:	47a0      	blx	r4
 800d418:	4603      	mov	r3, r0
 800d41a:	74fb      	strb	r3, [r7, #19]
 800d41c:	e008      	b.n	800d430 <tcp_input+0x680>
 800d41e:	4b5e      	ldr	r3, [pc, #376]	; (800d598 <tcp_input+0x7e8>)
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	2300      	movs	r3, #0
 800d424:	69f9      	ldr	r1, [r7, #28]
 800d426:	2000      	movs	r0, #0
 800d428:	f7ff f88a 	bl	800c540 <tcp_recv_null>
 800d42c:	4603      	mov	r3, r0
 800d42e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d430:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d434:	f113 0f0d 	cmn.w	r3, #13
 800d438:	d053      	beq.n	800d4e2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d43a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d003      	beq.n	800d44a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d442:	4b55      	ldr	r3, [pc, #340]	; (800d598 <tcp_input+0x7e8>)
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d44a:	4b50      	ldr	r3, [pc, #320]	; (800d58c <tcp_input+0x7dc>)
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	f003 0320 	and.w	r3, r3, #32
 800d452:	2b00      	cmp	r3, #0
 800d454:	d030      	beq.n	800d4b8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d009      	beq.n	800d472 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d45e:	69fb      	ldr	r3, [r7, #28]
 800d460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d462:	7b5a      	ldrb	r2, [r3, #13]
 800d464:	69fb      	ldr	r3, [r7, #28]
 800d466:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d468:	f042 0220 	orr.w	r2, r2, #32
 800d46c:	b2d2      	uxtb	r2, r2
 800d46e:	735a      	strb	r2, [r3, #13]
 800d470:	e022      	b.n	800d4b8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d476:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d47a:	d005      	beq.n	800d488 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d480:	3301      	adds	r3, #1
 800d482:	b29a      	uxth	r2, r3
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00b      	beq.n	800d4aa <tcp_input+0x6fa>
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d498:	69fb      	ldr	r3, [r7, #28]
 800d49a:	6918      	ldr	r0, [r3, #16]
 800d49c:	2300      	movs	r3, #0
 800d49e:	2200      	movs	r2, #0
 800d4a0:	69f9      	ldr	r1, [r7, #28]
 800d4a2:	47a0      	blx	r4
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	74fb      	strb	r3, [r7, #19]
 800d4a8:	e001      	b.n	800d4ae <tcp_input+0x6fe>
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d4ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d4b2:	f113 0f0d 	cmn.w	r3, #13
 800d4b6:	d016      	beq.n	800d4e6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d4b8:	4b33      	ldr	r3, [pc, #204]	; (800d588 <tcp_input+0x7d8>)
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d4be:	69f8      	ldr	r0, [r7, #28]
 800d4c0:	f000 f880 	bl	800d5c4 <tcp_input_delayed_close>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10f      	bne.n	800d4ea <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d4ca:	69f8      	ldr	r0, [r7, #28]
 800d4cc:	f002 ff10 	bl	80102f0 <tcp_output>
 800d4d0:	e00c      	b.n	800d4ec <tcp_input+0x73c>
        goto aborted;
 800d4d2:	bf00      	nop
 800d4d4:	e00a      	b.n	800d4ec <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d4d6:	bf00      	nop
 800d4d8:	e008      	b.n	800d4ec <tcp_input+0x73c>
              goto aborted;
 800d4da:	bf00      	nop
 800d4dc:	e006      	b.n	800d4ec <tcp_input+0x73c>
          goto aborted;
 800d4de:	bf00      	nop
 800d4e0:	e004      	b.n	800d4ec <tcp_input+0x73c>
            goto aborted;
 800d4e2:	bf00      	nop
 800d4e4:	e002      	b.n	800d4ec <tcp_input+0x73c>
              goto aborted;
 800d4e6:	bf00      	nop
 800d4e8:	e000      	b.n	800d4ec <tcp_input+0x73c>
          goto aborted;
 800d4ea:	bf00      	nop
    tcp_input_pcb = NULL;
 800d4ec:	4b26      	ldr	r3, [pc, #152]	; (800d588 <tcp_input+0x7d8>)
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d4f2:	4b29      	ldr	r3, [pc, #164]	; (800d598 <tcp_input+0x7e8>)
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d4f8:	4b2b      	ldr	r3, [pc, #172]	; (800d5a8 <tcp_input+0x7f8>)
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d03f      	beq.n	800d580 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800d500:	4b29      	ldr	r3, [pc, #164]	; (800d5a8 <tcp_input+0x7f8>)
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	4618      	mov	r0, r3
 800d506:	f7fd f909 	bl	800a71c <pbuf_free>
      inseg.p = NULL;
 800d50a:	4b27      	ldr	r3, [pc, #156]	; (800d5a8 <tcp_input+0x7f8>)
 800d50c:	2200      	movs	r2, #0
 800d50e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d510:	e036      	b.n	800d580 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d512:	4b26      	ldr	r3, [pc, #152]	; (800d5ac <tcp_input+0x7fc>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	899b      	ldrh	r3, [r3, #12]
 800d518:	b29b      	uxth	r3, r3
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7fb fb80 	bl	8008c20 <lwip_htons>
 800d520:	4603      	mov	r3, r0
 800d522:	b2db      	uxtb	r3, r3
 800d524:	f003 0304 	and.w	r3, r3, #4
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d118      	bne.n	800d55e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d52c:	4b20      	ldr	r3, [pc, #128]	; (800d5b0 <tcp_input+0x800>)
 800d52e:	6819      	ldr	r1, [r3, #0]
 800d530:	4b20      	ldr	r3, [pc, #128]	; (800d5b4 <tcp_input+0x804>)
 800d532:	881b      	ldrh	r3, [r3, #0]
 800d534:	461a      	mov	r2, r3
 800d536:	4b20      	ldr	r3, [pc, #128]	; (800d5b8 <tcp_input+0x808>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d53c:	4b1b      	ldr	r3, [pc, #108]	; (800d5ac <tcp_input+0x7fc>)
 800d53e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d540:	885b      	ldrh	r3, [r3, #2]
 800d542:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d544:	4a19      	ldr	r2, [pc, #100]	; (800d5ac <tcp_input+0x7fc>)
 800d546:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d548:	8812      	ldrh	r2, [r2, #0]
 800d54a:	b292      	uxth	r2, r2
 800d54c:	9202      	str	r2, [sp, #8]
 800d54e:	9301      	str	r3, [sp, #4]
 800d550:	4b1a      	ldr	r3, [pc, #104]	; (800d5bc <tcp_input+0x80c>)
 800d552:	9300      	str	r3, [sp, #0]
 800d554:	4b1a      	ldr	r3, [pc, #104]	; (800d5c0 <tcp_input+0x810>)
 800d556:	4602      	mov	r2, r0
 800d558:	2000      	movs	r0, #0
 800d55a:	f003 fc7d 	bl	8010e58 <tcp_rst>
    pbuf_free(p);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7fd f8dc 	bl	800a71c <pbuf_free>
  return;
 800d564:	e00c      	b.n	800d580 <tcp_input+0x7d0>
    goto dropped;
 800d566:	bf00      	nop
 800d568:	e006      	b.n	800d578 <tcp_input+0x7c8>
    goto dropped;
 800d56a:	bf00      	nop
 800d56c:	e004      	b.n	800d578 <tcp_input+0x7c8>
    goto dropped;
 800d56e:	bf00      	nop
 800d570:	e002      	b.n	800d578 <tcp_input+0x7c8>
      goto dropped;
 800d572:	bf00      	nop
 800d574:	e000      	b.n	800d578 <tcp_input+0x7c8>
      goto dropped;
 800d576:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f7fd f8cf 	bl	800a71c <pbuf_free>
 800d57e:	e000      	b.n	800d582 <tcp_input+0x7d2>
  return;
 800d580:	bf00      	nop
}
 800d582:	3724      	adds	r7, #36	; 0x24
 800d584:	46bd      	mov	sp, r7
 800d586:	bd90      	pop	{r4, r7, pc}
 800d588:	200075e4 	.word	0x200075e4
 800d58c:	200007b1 	.word	0x200007b1
 800d590:	200075d0 	.word	0x200075d0
 800d594:	200007ac 	.word	0x200007ac
 800d598:	200007b4 	.word	0x200007b4
 800d59c:	08016c14 	.word	0x08016c14
 800d5a0:	08016dc8 	.word	0x08016dc8
 800d5a4:	08016c60 	.word	0x08016c60
 800d5a8:	20000784 	.word	0x20000784
 800d5ac:	20000794 	.word	0x20000794
 800d5b0:	200007a8 	.word	0x200007a8
 800d5b4:	200007ae 	.word	0x200007ae
 800d5b8:	200007a4 	.word	0x200007a4
 800d5bc:	2000408c 	.word	0x2000408c
 800d5c0:	20004090 	.word	0x20004090

0800d5c4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d106      	bne.n	800d5e0 <tcp_input_delayed_close+0x1c>
 800d5d2:	4b17      	ldr	r3, [pc, #92]	; (800d630 <tcp_input_delayed_close+0x6c>)
 800d5d4:	f240 225a 	movw	r2, #602	; 0x25a
 800d5d8:	4916      	ldr	r1, [pc, #88]	; (800d634 <tcp_input_delayed_close+0x70>)
 800d5da:	4817      	ldr	r0, [pc, #92]	; (800d638 <tcp_input_delayed_close+0x74>)
 800d5dc:	f006 fedc 	bl	8014398 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d5e0:	4b16      	ldr	r3, [pc, #88]	; (800d63c <tcp_input_delayed_close+0x78>)
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	f003 0310 	and.w	r3, r3, #16
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d01c      	beq.n	800d626 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	8b5b      	ldrh	r3, [r3, #26]
 800d5f0:	f003 0310 	and.w	r3, r3, #16
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d10d      	bne.n	800d614 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d008      	beq.n	800d614 <tcp_input_delayed_close+0x50>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d608:	687a      	ldr	r2, [r7, #4]
 800d60a:	6912      	ldr	r2, [r2, #16]
 800d60c:	f06f 010e 	mvn.w	r1, #14
 800d610:	4610      	mov	r0, r2
 800d612:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d614:	6879      	ldr	r1, [r7, #4]
 800d616:	480a      	ldr	r0, [pc, #40]	; (800d640 <tcp_input_delayed_close+0x7c>)
 800d618:	f7ff fa52 	bl	800cac0 <tcp_pcb_remove>
    tcp_free(pcb);
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f7fd fc87 	bl	800af30 <tcp_free>
    return 1;
 800d622:	2301      	movs	r3, #1
 800d624:	e000      	b.n	800d628 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d626:	2300      	movs	r3, #0
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	08016c14 	.word	0x08016c14
 800d634:	08016de4 	.word	0x08016de4
 800d638:	08016c60 	.word	0x08016c60
 800d63c:	200007b1 	.word	0x200007b1
 800d640:	200075d0 	.word	0x200075d0

0800d644 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d644:	b590      	push	{r4, r7, lr}
 800d646:	b08b      	sub	sp, #44	; 0x2c
 800d648:	af04      	add	r7, sp, #16
 800d64a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d64c:	4b6f      	ldr	r3, [pc, #444]	; (800d80c <tcp_listen_input+0x1c8>)
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	f003 0304 	and.w	r3, r3, #4
 800d654:	2b00      	cmp	r3, #0
 800d656:	f040 80d2 	bne.w	800d7fe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d106      	bne.n	800d66e <tcp_listen_input+0x2a>
 800d660:	4b6b      	ldr	r3, [pc, #428]	; (800d810 <tcp_listen_input+0x1cc>)
 800d662:	f240 2281 	movw	r2, #641	; 0x281
 800d666:	496b      	ldr	r1, [pc, #428]	; (800d814 <tcp_listen_input+0x1d0>)
 800d668:	486b      	ldr	r0, [pc, #428]	; (800d818 <tcp_listen_input+0x1d4>)
 800d66a:	f006 fe95 	bl	8014398 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d66e:	4b67      	ldr	r3, [pc, #412]	; (800d80c <tcp_listen_input+0x1c8>)
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	f003 0310 	and.w	r3, r3, #16
 800d676:	2b00      	cmp	r3, #0
 800d678:	d019      	beq.n	800d6ae <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d67a:	4b68      	ldr	r3, [pc, #416]	; (800d81c <tcp_listen_input+0x1d8>)
 800d67c:	6819      	ldr	r1, [r3, #0]
 800d67e:	4b68      	ldr	r3, [pc, #416]	; (800d820 <tcp_listen_input+0x1dc>)
 800d680:	881b      	ldrh	r3, [r3, #0]
 800d682:	461a      	mov	r2, r3
 800d684:	4b67      	ldr	r3, [pc, #412]	; (800d824 <tcp_listen_input+0x1e0>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d68a:	4b67      	ldr	r3, [pc, #412]	; (800d828 <tcp_listen_input+0x1e4>)
 800d68c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d68e:	885b      	ldrh	r3, [r3, #2]
 800d690:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d692:	4a65      	ldr	r2, [pc, #404]	; (800d828 <tcp_listen_input+0x1e4>)
 800d694:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d696:	8812      	ldrh	r2, [r2, #0]
 800d698:	b292      	uxth	r2, r2
 800d69a:	9202      	str	r2, [sp, #8]
 800d69c:	9301      	str	r3, [sp, #4]
 800d69e:	4b63      	ldr	r3, [pc, #396]	; (800d82c <tcp_listen_input+0x1e8>)
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	4b63      	ldr	r3, [pc, #396]	; (800d830 <tcp_listen_input+0x1ec>)
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f003 fbd6 	bl	8010e58 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d6ac:	e0a9      	b.n	800d802 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d6ae:	4b57      	ldr	r3, [pc, #348]	; (800d80c <tcp_listen_input+0x1c8>)
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	f003 0302 	and.w	r3, r3, #2
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f000 80a3 	beq.w	800d802 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	7d5b      	ldrb	r3, [r3, #21]
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7ff f861 	bl	800c788 <tcp_alloc>
 800d6c6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d111      	bne.n	800d6f2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	699b      	ldr	r3, [r3, #24]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00a      	beq.n	800d6ec <tcp_listen_input+0xa8>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	699b      	ldr	r3, [r3, #24]
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	6910      	ldr	r0, [r2, #16]
 800d6de:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	4798      	blx	r3
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	73bb      	strb	r3, [r7, #14]
      return;
 800d6ea:	e08b      	b.n	800d804 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d6ec:	23f0      	movs	r3, #240	; 0xf0
 800d6ee:	73bb      	strb	r3, [r7, #14]
      return;
 800d6f0:	e088      	b.n	800d804 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d6f2:	4b50      	ldr	r3, [pc, #320]	; (800d834 <tcp_listen_input+0x1f0>)
 800d6f4:	695a      	ldr	r2, [r3, #20]
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d6fa:	4b4e      	ldr	r3, [pc, #312]	; (800d834 <tcp_listen_input+0x1f0>)
 800d6fc:	691a      	ldr	r2, [r3, #16]
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	8ada      	ldrh	r2, [r3, #22]
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d70a:	4b47      	ldr	r3, [pc, #284]	; (800d828 <tcp_listen_input+0x1e4>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	881b      	ldrh	r3, [r3, #0]
 800d710:	b29a      	uxth	r2, r3
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	2203      	movs	r2, #3
 800d71a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d71c:	4b41      	ldr	r3, [pc, #260]	; (800d824 <tcp_listen_input+0x1e0>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	1c5a      	adds	r2, r3, #1
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d72e:	6978      	ldr	r0, [r7, #20]
 800d730:	f7ff fa5a 	bl	800cbe8 <tcp_next_iss>
 800d734:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	693a      	ldr	r2, [r7, #16]
 800d73a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	693a      	ldr	r2, [r7, #16]
 800d740:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	693a      	ldr	r2, [r7, #16]
 800d746:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	693a      	ldr	r2, [r7, #16]
 800d74c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d74e:	4b35      	ldr	r3, [pc, #212]	; (800d824 <tcp_listen_input+0x1e0>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	1e5a      	subs	r2, r3, #1
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	691a      	ldr	r2, [r3, #16]
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	7a5b      	ldrb	r3, [r3, #9]
 800d76a:	f003 030c 	and.w	r3, r3, #12
 800d76e:	b2da      	uxtb	r2, r3
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	7a1a      	ldrb	r2, [r3, #8]
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d77c:	4b2e      	ldr	r3, [pc, #184]	; (800d838 <tcp_listen_input+0x1f4>)
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	60da      	str	r2, [r3, #12]
 800d784:	4a2c      	ldr	r2, [pc, #176]	; (800d838 <tcp_listen_input+0x1f4>)
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	6013      	str	r3, [r2, #0]
 800d78a:	f003 fd27 	bl	80111dc <tcp_timer_needed>
 800d78e:	4b2b      	ldr	r3, [pc, #172]	; (800d83c <tcp_listen_input+0x1f8>)
 800d790:	2201      	movs	r2, #1
 800d792:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d794:	6978      	ldr	r0, [r7, #20]
 800d796:	f001 fd8d 	bl	800f2b4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d79a:	4b23      	ldr	r3, [pc, #140]	; (800d828 <tcp_listen_input+0x1e4>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	89db      	ldrh	r3, [r3, #14]
 800d7a0:	b29a      	uxth	r2, r3
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	3304      	adds	r3, #4
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f005 fba3 	bl	8012f08 <ip4_route>
 800d7c2:	4601      	mov	r1, r0
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	3304      	adds	r3, #4
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	f7ff fa32 	bl	800cc34 <tcp_eff_send_mss_netif>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d7d8:	2112      	movs	r1, #18
 800d7da:	6978      	ldr	r0, [r7, #20]
 800d7dc:	f002 fc9a 	bl	8010114 <tcp_enqueue_flags>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d7e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d004      	beq.n	800d7f6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d7ec:	2100      	movs	r1, #0
 800d7ee:	6978      	ldr	r0, [r7, #20]
 800d7f0:	f7fd fdc8 	bl	800b384 <tcp_abandon>
      return;
 800d7f4:	e006      	b.n	800d804 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d7f6:	6978      	ldr	r0, [r7, #20]
 800d7f8:	f002 fd7a 	bl	80102f0 <tcp_output>
  return;
 800d7fc:	e001      	b.n	800d802 <tcp_listen_input+0x1be>
    return;
 800d7fe:	bf00      	nop
 800d800:	e000      	b.n	800d804 <tcp_listen_input+0x1c0>
  return;
 800d802:	bf00      	nop
}
 800d804:	371c      	adds	r7, #28
 800d806:	46bd      	mov	sp, r7
 800d808:	bd90      	pop	{r4, r7, pc}
 800d80a:	bf00      	nop
 800d80c:	200007b0 	.word	0x200007b0
 800d810:	08016c14 	.word	0x08016c14
 800d814:	08016e0c 	.word	0x08016e0c
 800d818:	08016c60 	.word	0x08016c60
 800d81c:	200007a8 	.word	0x200007a8
 800d820:	200007ae 	.word	0x200007ae
 800d824:	200007a4 	.word	0x200007a4
 800d828:	20000794 	.word	0x20000794
 800d82c:	2000408c 	.word	0x2000408c
 800d830:	20004090 	.word	0x20004090
 800d834:	2000407c 	.word	0x2000407c
 800d838:	200075d0 	.word	0x200075d0
 800d83c:	200075cc 	.word	0x200075cc

0800d840 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af04      	add	r7, sp, #16
 800d846:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d848:	4b2f      	ldr	r3, [pc, #188]	; (800d908 <tcp_timewait_input+0xc8>)
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	f003 0304 	and.w	r3, r3, #4
 800d850:	2b00      	cmp	r3, #0
 800d852:	d153      	bne.n	800d8fc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d106      	bne.n	800d868 <tcp_timewait_input+0x28>
 800d85a:	4b2c      	ldr	r3, [pc, #176]	; (800d90c <tcp_timewait_input+0xcc>)
 800d85c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d860:	492b      	ldr	r1, [pc, #172]	; (800d910 <tcp_timewait_input+0xd0>)
 800d862:	482c      	ldr	r0, [pc, #176]	; (800d914 <tcp_timewait_input+0xd4>)
 800d864:	f006 fd98 	bl	8014398 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d868:	4b27      	ldr	r3, [pc, #156]	; (800d908 <tcp_timewait_input+0xc8>)
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	f003 0302 	and.w	r3, r3, #2
 800d870:	2b00      	cmp	r3, #0
 800d872:	d02a      	beq.n	800d8ca <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d874:	4b28      	ldr	r3, [pc, #160]	; (800d918 <tcp_timewait_input+0xd8>)
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d87c:	1ad3      	subs	r3, r2, r3
 800d87e:	2b00      	cmp	r3, #0
 800d880:	db2d      	blt.n	800d8de <tcp_timewait_input+0x9e>
 800d882:	4b25      	ldr	r3, [pc, #148]	; (800d918 <tcp_timewait_input+0xd8>)
 800d884:	681a      	ldr	r2, [r3, #0]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d88a:	6879      	ldr	r1, [r7, #4]
 800d88c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d88e:	440b      	add	r3, r1
 800d890:	1ad3      	subs	r3, r2, r3
 800d892:	2b00      	cmp	r3, #0
 800d894:	dc23      	bgt.n	800d8de <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d896:	4b21      	ldr	r3, [pc, #132]	; (800d91c <tcp_timewait_input+0xdc>)
 800d898:	6819      	ldr	r1, [r3, #0]
 800d89a:	4b21      	ldr	r3, [pc, #132]	; (800d920 <tcp_timewait_input+0xe0>)
 800d89c:	881b      	ldrh	r3, [r3, #0]
 800d89e:	461a      	mov	r2, r3
 800d8a0:	4b1d      	ldr	r3, [pc, #116]	; (800d918 <tcp_timewait_input+0xd8>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d8a6:	4b1f      	ldr	r3, [pc, #124]	; (800d924 <tcp_timewait_input+0xe4>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8aa:	885b      	ldrh	r3, [r3, #2]
 800d8ac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d8ae:	4a1d      	ldr	r2, [pc, #116]	; (800d924 <tcp_timewait_input+0xe4>)
 800d8b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8b2:	8812      	ldrh	r2, [r2, #0]
 800d8b4:	b292      	uxth	r2, r2
 800d8b6:	9202      	str	r2, [sp, #8]
 800d8b8:	9301      	str	r3, [sp, #4]
 800d8ba:	4b1b      	ldr	r3, [pc, #108]	; (800d928 <tcp_timewait_input+0xe8>)
 800d8bc:	9300      	str	r3, [sp, #0]
 800d8be:	4b1b      	ldr	r3, [pc, #108]	; (800d92c <tcp_timewait_input+0xec>)
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f003 fac8 	bl	8010e58 <tcp_rst>
      return;
 800d8c8:	e01b      	b.n	800d902 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d8ca:	4b0f      	ldr	r3, [pc, #60]	; (800d908 <tcp_timewait_input+0xc8>)
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	f003 0301 	and.w	r3, r3, #1
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d003      	beq.n	800d8de <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d8d6:	4b16      	ldr	r3, [pc, #88]	; (800d930 <tcp_timewait_input+0xf0>)
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d8de:	4b10      	ldr	r3, [pc, #64]	; (800d920 <tcp_timewait_input+0xe0>)
 800d8e0:	881b      	ldrh	r3, [r3, #0]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00c      	beq.n	800d900 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	8b5b      	ldrh	r3, [r3, #26]
 800d8ea:	f043 0302 	orr.w	r3, r3, #2
 800d8ee:	b29a      	uxth	r2, r3
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f002 fcfb 	bl	80102f0 <tcp_output>
  }
  return;
 800d8fa:	e001      	b.n	800d900 <tcp_timewait_input+0xc0>
    return;
 800d8fc:	bf00      	nop
 800d8fe:	e000      	b.n	800d902 <tcp_timewait_input+0xc2>
  return;
 800d900:	bf00      	nop
}
 800d902:	3708      	adds	r7, #8
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}
 800d908:	200007b0 	.word	0x200007b0
 800d90c:	08016c14 	.word	0x08016c14
 800d910:	08016e2c 	.word	0x08016e2c
 800d914:	08016c60 	.word	0x08016c60
 800d918:	200007a4 	.word	0x200007a4
 800d91c:	200007a8 	.word	0x200007a8
 800d920:	200007ae 	.word	0x200007ae
 800d924:	20000794 	.word	0x20000794
 800d928:	2000408c 	.word	0x2000408c
 800d92c:	20004090 	.word	0x20004090
 800d930:	200075d4 	.word	0x200075d4

0800d934 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d934:	b590      	push	{r4, r7, lr}
 800d936:	b08d      	sub	sp, #52	; 0x34
 800d938:	af04      	add	r7, sp, #16
 800d93a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d93c:	2300      	movs	r3, #0
 800d93e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d940:	2300      	movs	r3, #0
 800d942:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d106      	bne.n	800d958 <tcp_process+0x24>
 800d94a:	4ba5      	ldr	r3, [pc, #660]	; (800dbe0 <tcp_process+0x2ac>)
 800d94c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d950:	49a4      	ldr	r1, [pc, #656]	; (800dbe4 <tcp_process+0x2b0>)
 800d952:	48a5      	ldr	r0, [pc, #660]	; (800dbe8 <tcp_process+0x2b4>)
 800d954:	f006 fd20 	bl	8014398 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d958:	4ba4      	ldr	r3, [pc, #656]	; (800dbec <tcp_process+0x2b8>)
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	f003 0304 	and.w	r3, r3, #4
 800d960:	2b00      	cmp	r3, #0
 800d962:	d04e      	beq.n	800da02 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	7d1b      	ldrb	r3, [r3, #20]
 800d968:	2b02      	cmp	r3, #2
 800d96a:	d108      	bne.n	800d97e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d970:	4b9f      	ldr	r3, [pc, #636]	; (800dbf0 <tcp_process+0x2bc>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	429a      	cmp	r2, r3
 800d976:	d123      	bne.n	800d9c0 <tcp_process+0x8c>
        acceptable = 1;
 800d978:	2301      	movs	r3, #1
 800d97a:	76fb      	strb	r3, [r7, #27]
 800d97c:	e020      	b.n	800d9c0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d982:	4b9c      	ldr	r3, [pc, #624]	; (800dbf4 <tcp_process+0x2c0>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	429a      	cmp	r2, r3
 800d988:	d102      	bne.n	800d990 <tcp_process+0x5c>
        acceptable = 1;
 800d98a:	2301      	movs	r3, #1
 800d98c:	76fb      	strb	r3, [r7, #27]
 800d98e:	e017      	b.n	800d9c0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d990:	4b98      	ldr	r3, [pc, #608]	; (800dbf4 <tcp_process+0x2c0>)
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d998:	1ad3      	subs	r3, r2, r3
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	db10      	blt.n	800d9c0 <tcp_process+0x8c>
 800d99e:	4b95      	ldr	r3, [pc, #596]	; (800dbf4 <tcp_process+0x2c0>)
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a6:	6879      	ldr	r1, [r7, #4]
 800d9a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d9aa:	440b      	add	r3, r1
 800d9ac:	1ad3      	subs	r3, r2, r3
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	dc06      	bgt.n	800d9c0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	8b5b      	ldrh	r3, [r3, #26]
 800d9b6:	f043 0302 	orr.w	r3, r3, #2
 800d9ba:	b29a      	uxth	r2, r3
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d9c0:	7efb      	ldrb	r3, [r7, #27]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d01b      	beq.n	800d9fe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	7d1b      	ldrb	r3, [r3, #20]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d106      	bne.n	800d9dc <tcp_process+0xa8>
 800d9ce:	4b84      	ldr	r3, [pc, #528]	; (800dbe0 <tcp_process+0x2ac>)
 800d9d0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d9d4:	4988      	ldr	r1, [pc, #544]	; (800dbf8 <tcp_process+0x2c4>)
 800d9d6:	4884      	ldr	r0, [pc, #528]	; (800dbe8 <tcp_process+0x2b4>)
 800d9d8:	f006 fcde 	bl	8014398 <iprintf>
      recv_flags |= TF_RESET;
 800d9dc:	4b87      	ldr	r3, [pc, #540]	; (800dbfc <tcp_process+0x2c8>)
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	f043 0308 	orr.w	r3, r3, #8
 800d9e4:	b2da      	uxtb	r2, r3
 800d9e6:	4b85      	ldr	r3, [pc, #532]	; (800dbfc <tcp_process+0x2c8>)
 800d9e8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	8b5b      	ldrh	r3, [r3, #26]
 800d9ee:	f023 0301 	bic.w	r3, r3, #1
 800d9f2:	b29a      	uxth	r2, r3
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d9f8:	f06f 030d 	mvn.w	r3, #13
 800d9fc:	e37a      	b.n	800e0f4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d9fe:	2300      	movs	r3, #0
 800da00:	e378      	b.n	800e0f4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800da02:	4b7a      	ldr	r3, [pc, #488]	; (800dbec <tcp_process+0x2b8>)
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	f003 0302 	and.w	r3, r3, #2
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d010      	beq.n	800da30 <tcp_process+0xfc>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	7d1b      	ldrb	r3, [r3, #20]
 800da12:	2b02      	cmp	r3, #2
 800da14:	d00c      	beq.n	800da30 <tcp_process+0xfc>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	7d1b      	ldrb	r3, [r3, #20]
 800da1a:	2b03      	cmp	r3, #3
 800da1c:	d008      	beq.n	800da30 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	8b5b      	ldrh	r3, [r3, #26]
 800da22:	f043 0302 	orr.w	r3, r3, #2
 800da26:	b29a      	uxth	r2, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800da2c:	2300      	movs	r3, #0
 800da2e:	e361      	b.n	800e0f4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	8b5b      	ldrh	r3, [r3, #26]
 800da34:	f003 0310 	and.w	r3, r3, #16
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d103      	bne.n	800da44 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800da3c:	4b70      	ldr	r3, [pc, #448]	; (800dc00 <tcp_process+0x2cc>)
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2200      	movs	r2, #0
 800da48:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2200      	movs	r2, #0
 800da50:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f001 fc2d 	bl	800f2b4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	7d1b      	ldrb	r3, [r3, #20]
 800da5e:	3b02      	subs	r3, #2
 800da60:	2b07      	cmp	r3, #7
 800da62:	f200 8337 	bhi.w	800e0d4 <tcp_process+0x7a0>
 800da66:	a201      	add	r2, pc, #4	; (adr r2, 800da6c <tcp_process+0x138>)
 800da68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da6c:	0800da8d 	.word	0x0800da8d
 800da70:	0800dcbd 	.word	0x0800dcbd
 800da74:	0800de35 	.word	0x0800de35
 800da78:	0800de5f 	.word	0x0800de5f
 800da7c:	0800df83 	.word	0x0800df83
 800da80:	0800de35 	.word	0x0800de35
 800da84:	0800e00f 	.word	0x0800e00f
 800da88:	0800e09f 	.word	0x0800e09f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800da8c:	4b57      	ldr	r3, [pc, #348]	; (800dbec <tcp_process+0x2b8>)
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	f003 0310 	and.w	r3, r3, #16
 800da94:	2b00      	cmp	r3, #0
 800da96:	f000 80e4 	beq.w	800dc62 <tcp_process+0x32e>
 800da9a:	4b54      	ldr	r3, [pc, #336]	; (800dbec <tcp_process+0x2b8>)
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	f003 0302 	and.w	r3, r3, #2
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f000 80dd 	beq.w	800dc62 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daac:	1c5a      	adds	r2, r3, #1
 800daae:	4b50      	ldr	r3, [pc, #320]	; (800dbf0 <tcp_process+0x2bc>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	f040 80d5 	bne.w	800dc62 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800dab8:	4b4e      	ldr	r3, [pc, #312]	; (800dbf4 <tcp_process+0x2c0>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	1c5a      	adds	r2, r3, #1
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800daca:	4b49      	ldr	r3, [pc, #292]	; (800dbf0 <tcp_process+0x2bc>)
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800dad2:	4b4c      	ldr	r3, [pc, #304]	; (800dc04 <tcp_process+0x2d0>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	89db      	ldrh	r3, [r3, #14]
 800dad8:	b29a      	uxth	r2, r3
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800daec:	4b41      	ldr	r3, [pc, #260]	; (800dbf4 <tcp_process+0x2c0>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	1e5a      	subs	r2, r3, #1
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2204      	movs	r2, #4
 800dafa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	3304      	adds	r3, #4
 800db04:	4618      	mov	r0, r3
 800db06:	f005 f9ff 	bl	8012f08 <ip4_route>
 800db0a:	4601      	mov	r1, r0
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	3304      	adds	r3, #4
 800db10:	461a      	mov	r2, r3
 800db12:	4620      	mov	r0, r4
 800db14:	f7ff f88e 	bl	800cc34 <tcp_eff_send_mss_netif>
 800db18:	4603      	mov	r3, r0
 800db1a:	461a      	mov	r2, r3
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db24:	009a      	lsls	r2, r3, #2
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db2a:	005b      	lsls	r3, r3, #1
 800db2c:	f241 111c 	movw	r1, #4380	; 0x111c
 800db30:	428b      	cmp	r3, r1
 800db32:	bf38      	it	cc
 800db34:	460b      	movcc	r3, r1
 800db36:	429a      	cmp	r2, r3
 800db38:	d204      	bcs.n	800db44 <tcp_process+0x210>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	b29b      	uxth	r3, r3
 800db42:	e00d      	b.n	800db60 <tcp_process+0x22c>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db48:	005b      	lsls	r3, r3, #1
 800db4a:	f241 121c 	movw	r2, #4380	; 0x111c
 800db4e:	4293      	cmp	r3, r2
 800db50:	d904      	bls.n	800db5c <tcp_process+0x228>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db56:	005b      	lsls	r3, r3, #1
 800db58:	b29b      	uxth	r3, r3
 800db5a:	e001      	b.n	800db60 <tcp_process+0x22c>
 800db5c:	f241 131c 	movw	r3, #4380	; 0x111c
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d106      	bne.n	800db7e <tcp_process+0x24a>
 800db70:	4b1b      	ldr	r3, [pc, #108]	; (800dbe0 <tcp_process+0x2ac>)
 800db72:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800db76:	4924      	ldr	r1, [pc, #144]	; (800dc08 <tcp_process+0x2d4>)
 800db78:	481b      	ldr	r0, [pc, #108]	; (800dbe8 <tcp_process+0x2b4>)
 800db7a:	f006 fc0d 	bl	8014398 <iprintf>
        --pcb->snd_queuelen;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db84:	3b01      	subs	r3, #1
 800db86:	b29a      	uxth	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db92:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800db94:	69fb      	ldr	r3, [r7, #28]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d111      	bne.n	800dbbe <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db9e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d106      	bne.n	800dbb4 <tcp_process+0x280>
 800dba6:	4b0e      	ldr	r3, [pc, #56]	; (800dbe0 <tcp_process+0x2ac>)
 800dba8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800dbac:	4917      	ldr	r1, [pc, #92]	; (800dc0c <tcp_process+0x2d8>)
 800dbae:	480e      	ldr	r0, [pc, #56]	; (800dbe8 <tcp_process+0x2b4>)
 800dbb0:	f006 fbf2 	bl	8014398 <iprintf>
          pcb->unsent = rseg->next;
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	66da      	str	r2, [r3, #108]	; 0x6c
 800dbbc:	e003      	b.n	800dbc6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	681a      	ldr	r2, [r3, #0]
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800dbc6:	69f8      	ldr	r0, [r7, #28]
 800dbc8:	f7fe fc57 	bl	800c47a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d11d      	bne.n	800dc10 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbda:	861a      	strh	r2, [r3, #48]	; 0x30
 800dbdc:	e01f      	b.n	800dc1e <tcp_process+0x2ea>
 800dbde:	bf00      	nop
 800dbe0:	08016c14 	.word	0x08016c14
 800dbe4:	08016e4c 	.word	0x08016e4c
 800dbe8:	08016c60 	.word	0x08016c60
 800dbec:	200007b0 	.word	0x200007b0
 800dbf0:	200007a8 	.word	0x200007a8
 800dbf4:	200007a4 	.word	0x200007a4
 800dbf8:	08016e68 	.word	0x08016e68
 800dbfc:	200007b1 	.word	0x200007b1
 800dc00:	200075d4 	.word	0x200075d4
 800dc04:	20000794 	.word	0x20000794
 800dc08:	08016e88 	.word	0x08016e88
 800dc0c:	08016ea0 	.word	0x08016ea0
        } else {
          pcb->rtime = 0;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2200      	movs	r2, #0
 800dc14:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d00a      	beq.n	800dc3e <tcp_process+0x30a>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc2e:	687a      	ldr	r2, [r7, #4]
 800dc30:	6910      	ldr	r0, [r2, #16]
 800dc32:	2200      	movs	r2, #0
 800dc34:	6879      	ldr	r1, [r7, #4]
 800dc36:	4798      	blx	r3
 800dc38:	4603      	mov	r3, r0
 800dc3a:	76bb      	strb	r3, [r7, #26]
 800dc3c:	e001      	b.n	800dc42 <tcp_process+0x30e>
 800dc3e:	2300      	movs	r3, #0
 800dc40:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800dc42:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dc46:	f113 0f0d 	cmn.w	r3, #13
 800dc4a:	d102      	bne.n	800dc52 <tcp_process+0x31e>
          return ERR_ABRT;
 800dc4c:	f06f 030c 	mvn.w	r3, #12
 800dc50:	e250      	b.n	800e0f4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	8b5b      	ldrh	r3, [r3, #26]
 800dc56:	f043 0302 	orr.w	r3, r3, #2
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800dc60:	e23a      	b.n	800e0d8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800dc62:	4b9d      	ldr	r3, [pc, #628]	; (800ded8 <tcp_process+0x5a4>)
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	f003 0310 	and.w	r3, r3, #16
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	f000 8234 	beq.w	800e0d8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc70:	4b9a      	ldr	r3, [pc, #616]	; (800dedc <tcp_process+0x5a8>)
 800dc72:	6819      	ldr	r1, [r3, #0]
 800dc74:	4b9a      	ldr	r3, [pc, #616]	; (800dee0 <tcp_process+0x5ac>)
 800dc76:	881b      	ldrh	r3, [r3, #0]
 800dc78:	461a      	mov	r2, r3
 800dc7a:	4b9a      	ldr	r3, [pc, #616]	; (800dee4 <tcp_process+0x5b0>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dc80:	4b99      	ldr	r3, [pc, #612]	; (800dee8 <tcp_process+0x5b4>)
 800dc82:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc84:	885b      	ldrh	r3, [r3, #2]
 800dc86:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dc88:	4a97      	ldr	r2, [pc, #604]	; (800dee8 <tcp_process+0x5b4>)
 800dc8a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc8c:	8812      	ldrh	r2, [r2, #0]
 800dc8e:	b292      	uxth	r2, r2
 800dc90:	9202      	str	r2, [sp, #8]
 800dc92:	9301      	str	r3, [sp, #4]
 800dc94:	4b95      	ldr	r3, [pc, #596]	; (800deec <tcp_process+0x5b8>)
 800dc96:	9300      	str	r3, [sp, #0]
 800dc98:	4b95      	ldr	r3, [pc, #596]	; (800def0 <tcp_process+0x5bc>)
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f003 f8db 	bl	8010e58 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dca8:	2b05      	cmp	r3, #5
 800dcaa:	f200 8215 	bhi.w	800e0d8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f002 fea5 	bl	8010a04 <tcp_rexmit_rto>
      break;
 800dcba:	e20d      	b.n	800e0d8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800dcbc:	4b86      	ldr	r3, [pc, #536]	; (800ded8 <tcp_process+0x5a4>)
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	f003 0310 	and.w	r3, r3, #16
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	f000 80a1 	beq.w	800de0c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dcca:	4b84      	ldr	r3, [pc, #528]	; (800dedc <tcp_process+0x5a8>)
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcd2:	1ad3      	subs	r3, r2, r3
 800dcd4:	3b01      	subs	r3, #1
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	db7e      	blt.n	800ddd8 <tcp_process+0x4a4>
 800dcda:	4b80      	ldr	r3, [pc, #512]	; (800dedc <tcp_process+0x5a8>)
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dce2:	1ad3      	subs	r3, r2, r3
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	dc77      	bgt.n	800ddd8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2204      	movs	r2, #4
 800dcec:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d102      	bne.n	800dcfc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800dcf6:	23fa      	movs	r3, #250	; 0xfa
 800dcf8:	76bb      	strb	r3, [r7, #26]
 800dcfa:	e01d      	b.n	800dd38 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd00:	699b      	ldr	r3, [r3, #24]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d106      	bne.n	800dd14 <tcp_process+0x3e0>
 800dd06:	4b7b      	ldr	r3, [pc, #492]	; (800def4 <tcp_process+0x5c0>)
 800dd08:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800dd0c:	497a      	ldr	r1, [pc, #488]	; (800def8 <tcp_process+0x5c4>)
 800dd0e:	487b      	ldr	r0, [pc, #492]	; (800defc <tcp_process+0x5c8>)
 800dd10:	f006 fb42 	bl	8014398 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd18:	699b      	ldr	r3, [r3, #24]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00a      	beq.n	800dd34 <tcp_process+0x400>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd22:	699b      	ldr	r3, [r3, #24]
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	6910      	ldr	r0, [r2, #16]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	6879      	ldr	r1, [r7, #4]
 800dd2c:	4798      	blx	r3
 800dd2e:	4603      	mov	r3, r0
 800dd30:	76bb      	strb	r3, [r7, #26]
 800dd32:	e001      	b.n	800dd38 <tcp_process+0x404>
 800dd34:	23f0      	movs	r3, #240	; 0xf0
 800dd36:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800dd38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d00a      	beq.n	800dd56 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800dd40:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dd44:	f113 0f0d 	cmn.w	r3, #13
 800dd48:	d002      	beq.n	800dd50 <tcp_process+0x41c>
              tcp_abort(pcb);
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f7fd fbd8 	bl	800b500 <tcp_abort>
            }
            return ERR_ABRT;
 800dd50:	f06f 030c 	mvn.w	r3, #12
 800dd54:	e1ce      	b.n	800e0f4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 fae0 	bl	800e31c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800dd5c:	4b68      	ldr	r3, [pc, #416]	; (800df00 <tcp_process+0x5cc>)
 800dd5e:	881b      	ldrh	r3, [r3, #0]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d005      	beq.n	800dd70 <tcp_process+0x43c>
            recv_acked--;
 800dd64:	4b66      	ldr	r3, [pc, #408]	; (800df00 <tcp_process+0x5cc>)
 800dd66:	881b      	ldrh	r3, [r3, #0]
 800dd68:	3b01      	subs	r3, #1
 800dd6a:	b29a      	uxth	r2, r3
 800dd6c:	4b64      	ldr	r3, [pc, #400]	; (800df00 <tcp_process+0x5cc>)
 800dd6e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd74:	009a      	lsls	r2, r3, #2
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd7a:	005b      	lsls	r3, r3, #1
 800dd7c:	f241 111c 	movw	r1, #4380	; 0x111c
 800dd80:	428b      	cmp	r3, r1
 800dd82:	bf38      	it	cc
 800dd84:	460b      	movcc	r3, r1
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d204      	bcs.n	800dd94 <tcp_process+0x460>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	e00d      	b.n	800ddb0 <tcp_process+0x47c>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd98:	005b      	lsls	r3, r3, #1
 800dd9a:	f241 121c 	movw	r2, #4380	; 0x111c
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d904      	bls.n	800ddac <tcp_process+0x478>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dda6:	005b      	lsls	r3, r3, #1
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	e001      	b.n	800ddb0 <tcp_process+0x47c>
 800ddac:	f241 131c 	movw	r3, #4380	; 0x111c
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ddb6:	4b53      	ldr	r3, [pc, #332]	; (800df04 <tcp_process+0x5d0>)
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	f003 0320 	and.w	r3, r3, #32
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d037      	beq.n	800de32 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	8b5b      	ldrh	r3, [r3, #26]
 800ddc6:	f043 0302 	orr.w	r3, r3, #2
 800ddca:	b29a      	uxth	r2, r3
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2207      	movs	r2, #7
 800ddd4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ddd6:	e02c      	b.n	800de32 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddd8:	4b40      	ldr	r3, [pc, #256]	; (800dedc <tcp_process+0x5a8>)
 800ddda:	6819      	ldr	r1, [r3, #0]
 800dddc:	4b40      	ldr	r3, [pc, #256]	; (800dee0 <tcp_process+0x5ac>)
 800ddde:	881b      	ldrh	r3, [r3, #0]
 800dde0:	461a      	mov	r2, r3
 800dde2:	4b40      	ldr	r3, [pc, #256]	; (800dee4 <tcp_process+0x5b0>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dde8:	4b3f      	ldr	r3, [pc, #252]	; (800dee8 <tcp_process+0x5b4>)
 800ddea:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddec:	885b      	ldrh	r3, [r3, #2]
 800ddee:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ddf0:	4a3d      	ldr	r2, [pc, #244]	; (800dee8 <tcp_process+0x5b4>)
 800ddf2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddf4:	8812      	ldrh	r2, [r2, #0]
 800ddf6:	b292      	uxth	r2, r2
 800ddf8:	9202      	str	r2, [sp, #8]
 800ddfa:	9301      	str	r3, [sp, #4]
 800ddfc:	4b3b      	ldr	r3, [pc, #236]	; (800deec <tcp_process+0x5b8>)
 800ddfe:	9300      	str	r3, [sp, #0]
 800de00:	4b3b      	ldr	r3, [pc, #236]	; (800def0 <tcp_process+0x5bc>)
 800de02:	4602      	mov	r2, r0
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f003 f827 	bl	8010e58 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800de0a:	e167      	b.n	800e0dc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800de0c:	4b32      	ldr	r3, [pc, #200]	; (800ded8 <tcp_process+0x5a4>)
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	f003 0302 	and.w	r3, r3, #2
 800de14:	2b00      	cmp	r3, #0
 800de16:	f000 8161 	beq.w	800e0dc <tcp_process+0x7a8>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de1e:	1e5a      	subs	r2, r3, #1
 800de20:	4b30      	ldr	r3, [pc, #192]	; (800dee4 <tcp_process+0x5b0>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	429a      	cmp	r2, r3
 800de26:	f040 8159 	bne.w	800e0dc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f002 fe0c 	bl	8010a48 <tcp_rexmit>
      break;
 800de30:	e154      	b.n	800e0dc <tcp_process+0x7a8>
 800de32:	e153      	b.n	800e0dc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f000 fa71 	bl	800e31c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800de3a:	4b32      	ldr	r3, [pc, #200]	; (800df04 <tcp_process+0x5d0>)
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	f003 0320 	and.w	r3, r3, #32
 800de42:	2b00      	cmp	r3, #0
 800de44:	f000 814c 	beq.w	800e0e0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	8b5b      	ldrh	r3, [r3, #26]
 800de4c:	f043 0302 	orr.w	r3, r3, #2
 800de50:	b29a      	uxth	r2, r3
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2207      	movs	r2, #7
 800de5a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800de5c:	e140      	b.n	800e0e0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 fa5c 	bl	800e31c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800de64:	4b27      	ldr	r3, [pc, #156]	; (800df04 <tcp_process+0x5d0>)
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	f003 0320 	and.w	r3, r3, #32
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d071      	beq.n	800df54 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800de70:	4b19      	ldr	r3, [pc, #100]	; (800ded8 <tcp_process+0x5a4>)
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	f003 0310 	and.w	r3, r3, #16
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d060      	beq.n	800df3e <tcp_process+0x60a>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de80:	4b16      	ldr	r3, [pc, #88]	; (800dedc <tcp_process+0x5a8>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	429a      	cmp	r2, r3
 800de86:	d15a      	bne.n	800df3e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d156      	bne.n	800df3e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	8b5b      	ldrh	r3, [r3, #26]
 800de94:	f043 0302 	orr.w	r3, r3, #2
 800de98:	b29a      	uxth	r2, r3
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f7fe fdbe 	bl	800ca20 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800dea4:	4b18      	ldr	r3, [pc, #96]	; (800df08 <tcp_process+0x5d4>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	687a      	ldr	r2, [r7, #4]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d105      	bne.n	800deba <tcp_process+0x586>
 800deae:	4b16      	ldr	r3, [pc, #88]	; (800df08 <tcp_process+0x5d4>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	68db      	ldr	r3, [r3, #12]
 800deb4:	4a14      	ldr	r2, [pc, #80]	; (800df08 <tcp_process+0x5d4>)
 800deb6:	6013      	str	r3, [r2, #0]
 800deb8:	e02e      	b.n	800df18 <tcp_process+0x5e4>
 800deba:	4b13      	ldr	r3, [pc, #76]	; (800df08 <tcp_process+0x5d4>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	617b      	str	r3, [r7, #20]
 800dec0:	e027      	b.n	800df12 <tcp_process+0x5de>
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d11f      	bne.n	800df0c <tcp_process+0x5d8>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	68da      	ldr	r2, [r3, #12]
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	60da      	str	r2, [r3, #12]
 800ded4:	e020      	b.n	800df18 <tcp_process+0x5e4>
 800ded6:	bf00      	nop
 800ded8:	200007b0 	.word	0x200007b0
 800dedc:	200007a8 	.word	0x200007a8
 800dee0:	200007ae 	.word	0x200007ae
 800dee4:	200007a4 	.word	0x200007a4
 800dee8:	20000794 	.word	0x20000794
 800deec:	2000408c 	.word	0x2000408c
 800def0:	20004090 	.word	0x20004090
 800def4:	08016c14 	.word	0x08016c14
 800def8:	08016eb4 	.word	0x08016eb4
 800defc:	08016c60 	.word	0x08016c60
 800df00:	200007ac 	.word	0x200007ac
 800df04:	200007b1 	.word	0x200007b1
 800df08:	200075d0 	.word	0x200075d0
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	617b      	str	r3, [r7, #20]
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d1d4      	bne.n	800dec2 <tcp_process+0x58e>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2200      	movs	r2, #0
 800df1c:	60da      	str	r2, [r3, #12]
 800df1e:	4b77      	ldr	r3, [pc, #476]	; (800e0fc <tcp_process+0x7c8>)
 800df20:	2201      	movs	r2, #1
 800df22:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	220a      	movs	r2, #10
 800df28:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800df2a:	4b75      	ldr	r3, [pc, #468]	; (800e100 <tcp_process+0x7cc>)
 800df2c:	681a      	ldr	r2, [r3, #0]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	60da      	str	r2, [r3, #12]
 800df32:	4a73      	ldr	r2, [pc, #460]	; (800e100 <tcp_process+0x7cc>)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6013      	str	r3, [r2, #0]
 800df38:	f003 f950 	bl	80111dc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800df3c:	e0d2      	b.n	800e0e4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	8b5b      	ldrh	r3, [r3, #26]
 800df42:	f043 0302 	orr.w	r3, r3, #2
 800df46:	b29a      	uxth	r2, r3
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2208      	movs	r2, #8
 800df50:	751a      	strb	r2, [r3, #20]
      break;
 800df52:	e0c7      	b.n	800e0e4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800df54:	4b6b      	ldr	r3, [pc, #428]	; (800e104 <tcp_process+0x7d0>)
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	f003 0310 	and.w	r3, r3, #16
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	f000 80c1 	beq.w	800e0e4 <tcp_process+0x7b0>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df66:	4b68      	ldr	r3, [pc, #416]	; (800e108 <tcp_process+0x7d4>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	f040 80ba 	bne.w	800e0e4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800df74:	2b00      	cmp	r3, #0
 800df76:	f040 80b5 	bne.w	800e0e4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2206      	movs	r2, #6
 800df7e:	751a      	strb	r2, [r3, #20]
      break;
 800df80:	e0b0      	b.n	800e0e4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 f9ca 	bl	800e31c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800df88:	4b60      	ldr	r3, [pc, #384]	; (800e10c <tcp_process+0x7d8>)
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	f003 0320 	and.w	r3, r3, #32
 800df90:	2b00      	cmp	r3, #0
 800df92:	f000 80a9 	beq.w	800e0e8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	8b5b      	ldrh	r3, [r3, #26]
 800df9a:	f043 0302 	orr.w	r3, r3, #2
 800df9e:	b29a      	uxth	r2, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f7fe fd3b 	bl	800ca20 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800dfaa:	4b59      	ldr	r3, [pc, #356]	; (800e110 <tcp_process+0x7dc>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d105      	bne.n	800dfc0 <tcp_process+0x68c>
 800dfb4:	4b56      	ldr	r3, [pc, #344]	; (800e110 <tcp_process+0x7dc>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	68db      	ldr	r3, [r3, #12]
 800dfba:	4a55      	ldr	r2, [pc, #340]	; (800e110 <tcp_process+0x7dc>)
 800dfbc:	6013      	str	r3, [r2, #0]
 800dfbe:	e013      	b.n	800dfe8 <tcp_process+0x6b4>
 800dfc0:	4b53      	ldr	r3, [pc, #332]	; (800e110 <tcp_process+0x7dc>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	613b      	str	r3, [r7, #16]
 800dfc6:	e00c      	b.n	800dfe2 <tcp_process+0x6ae>
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	68db      	ldr	r3, [r3, #12]
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d104      	bne.n	800dfdc <tcp_process+0x6a8>
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	68da      	ldr	r2, [r3, #12]
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	60da      	str	r2, [r3, #12]
 800dfda:	e005      	b.n	800dfe8 <tcp_process+0x6b4>
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	613b      	str	r3, [r7, #16]
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d1ef      	bne.n	800dfc8 <tcp_process+0x694>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2200      	movs	r2, #0
 800dfec:	60da      	str	r2, [r3, #12]
 800dfee:	4b43      	ldr	r3, [pc, #268]	; (800e0fc <tcp_process+0x7c8>)
 800dff0:	2201      	movs	r2, #1
 800dff2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	220a      	movs	r2, #10
 800dff8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800dffa:	4b41      	ldr	r3, [pc, #260]	; (800e100 <tcp_process+0x7cc>)
 800dffc:	681a      	ldr	r2, [r3, #0]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	60da      	str	r2, [r3, #12]
 800e002:	4a3f      	ldr	r2, [pc, #252]	; (800e100 <tcp_process+0x7cc>)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6013      	str	r3, [r2, #0]
 800e008:	f003 f8e8 	bl	80111dc <tcp_timer_needed>
      }
      break;
 800e00c:	e06c      	b.n	800e0e8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 f984 	bl	800e31c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e014:	4b3b      	ldr	r3, [pc, #236]	; (800e104 <tcp_process+0x7d0>)
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	f003 0310 	and.w	r3, r3, #16
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d065      	beq.n	800e0ec <tcp_process+0x7b8>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e024:	4b38      	ldr	r3, [pc, #224]	; (800e108 <tcp_process+0x7d4>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	429a      	cmp	r2, r3
 800e02a:	d15f      	bne.n	800e0ec <tcp_process+0x7b8>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e030:	2b00      	cmp	r3, #0
 800e032:	d15b      	bne.n	800e0ec <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f7fe fcf3 	bl	800ca20 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e03a:	4b35      	ldr	r3, [pc, #212]	; (800e110 <tcp_process+0x7dc>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	429a      	cmp	r2, r3
 800e042:	d105      	bne.n	800e050 <tcp_process+0x71c>
 800e044:	4b32      	ldr	r3, [pc, #200]	; (800e110 <tcp_process+0x7dc>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	4a31      	ldr	r2, [pc, #196]	; (800e110 <tcp_process+0x7dc>)
 800e04c:	6013      	str	r3, [r2, #0]
 800e04e:	e013      	b.n	800e078 <tcp_process+0x744>
 800e050:	4b2f      	ldr	r3, [pc, #188]	; (800e110 <tcp_process+0x7dc>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	60fb      	str	r3, [r7, #12]
 800e056:	e00c      	b.n	800e072 <tcp_process+0x73e>
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d104      	bne.n	800e06c <tcp_process+0x738>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	68da      	ldr	r2, [r3, #12]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	60da      	str	r2, [r3, #12]
 800e06a:	e005      	b.n	800e078 <tcp_process+0x744>
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	68db      	ldr	r3, [r3, #12]
 800e070:	60fb      	str	r3, [r7, #12]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d1ef      	bne.n	800e058 <tcp_process+0x724>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2200      	movs	r2, #0
 800e07c:	60da      	str	r2, [r3, #12]
 800e07e:	4b1f      	ldr	r3, [pc, #124]	; (800e0fc <tcp_process+0x7c8>)
 800e080:	2201      	movs	r2, #1
 800e082:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	220a      	movs	r2, #10
 800e088:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e08a:	4b1d      	ldr	r3, [pc, #116]	; (800e100 <tcp_process+0x7cc>)
 800e08c:	681a      	ldr	r2, [r3, #0]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	60da      	str	r2, [r3, #12]
 800e092:	4a1b      	ldr	r2, [pc, #108]	; (800e100 <tcp_process+0x7cc>)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6013      	str	r3, [r2, #0]
 800e098:	f003 f8a0 	bl	80111dc <tcp_timer_needed>
      }
      break;
 800e09c:	e026      	b.n	800e0ec <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 f93c 	bl	800e31c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e0a4:	4b17      	ldr	r3, [pc, #92]	; (800e104 <tcp_process+0x7d0>)
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	f003 0310 	and.w	r3, r3, #16
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d01f      	beq.n	800e0f0 <tcp_process+0x7bc>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0b4:	4b14      	ldr	r3, [pc, #80]	; (800e108 <tcp_process+0x7d4>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d119      	bne.n	800e0f0 <tcp_process+0x7bc>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d115      	bne.n	800e0f0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e0c4:	4b11      	ldr	r3, [pc, #68]	; (800e10c <tcp_process+0x7d8>)
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	f043 0310 	orr.w	r3, r3, #16
 800e0cc:	b2da      	uxtb	r2, r3
 800e0ce:	4b0f      	ldr	r3, [pc, #60]	; (800e10c <tcp_process+0x7d8>)
 800e0d0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e0d2:	e00d      	b.n	800e0f0 <tcp_process+0x7bc>
    default:
      break;
 800e0d4:	bf00      	nop
 800e0d6:	e00c      	b.n	800e0f2 <tcp_process+0x7be>
      break;
 800e0d8:	bf00      	nop
 800e0da:	e00a      	b.n	800e0f2 <tcp_process+0x7be>
      break;
 800e0dc:	bf00      	nop
 800e0de:	e008      	b.n	800e0f2 <tcp_process+0x7be>
      break;
 800e0e0:	bf00      	nop
 800e0e2:	e006      	b.n	800e0f2 <tcp_process+0x7be>
      break;
 800e0e4:	bf00      	nop
 800e0e6:	e004      	b.n	800e0f2 <tcp_process+0x7be>
      break;
 800e0e8:	bf00      	nop
 800e0ea:	e002      	b.n	800e0f2 <tcp_process+0x7be>
      break;
 800e0ec:	bf00      	nop
 800e0ee:	e000      	b.n	800e0f2 <tcp_process+0x7be>
      break;
 800e0f0:	bf00      	nop
  }
  return ERR_OK;
 800e0f2:	2300      	movs	r3, #0
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3724      	adds	r7, #36	; 0x24
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd90      	pop	{r4, r7, pc}
 800e0fc:	200075cc 	.word	0x200075cc
 800e100:	200075e0 	.word	0x200075e0
 800e104:	200007b0 	.word	0x200007b0
 800e108:	200007a8 	.word	0x200007a8
 800e10c:	200007b1 	.word	0x200007b1
 800e110:	200075d0 	.word	0x200075d0

0800e114 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e114:	b590      	push	{r4, r7, lr}
 800e116:	b085      	sub	sp, #20
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d106      	bne.n	800e132 <tcp_oos_insert_segment+0x1e>
 800e124:	4b3b      	ldr	r3, [pc, #236]	; (800e214 <tcp_oos_insert_segment+0x100>)
 800e126:	f240 421f 	movw	r2, #1055	; 0x41f
 800e12a:	493b      	ldr	r1, [pc, #236]	; (800e218 <tcp_oos_insert_segment+0x104>)
 800e12c:	483b      	ldr	r0, [pc, #236]	; (800e21c <tcp_oos_insert_segment+0x108>)
 800e12e:	f006 f933 	bl	8014398 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	68db      	ldr	r3, [r3, #12]
 800e136:	899b      	ldrh	r3, [r3, #12]
 800e138:	b29b      	uxth	r3, r3
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7fa fd70 	bl	8008c20 <lwip_htons>
 800e140:	4603      	mov	r3, r0
 800e142:	b2db      	uxtb	r3, r3
 800e144:	f003 0301 	and.w	r3, r3, #1
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d028      	beq.n	800e19e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e14c:	6838      	ldr	r0, [r7, #0]
 800e14e:	f7fe f97f 	bl	800c450 <tcp_segs_free>
    next = NULL;
 800e152:	2300      	movs	r3, #0
 800e154:	603b      	str	r3, [r7, #0]
 800e156:	e056      	b.n	800e206 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	68db      	ldr	r3, [r3, #12]
 800e15c:	899b      	ldrh	r3, [r3, #12]
 800e15e:	b29b      	uxth	r3, r3
 800e160:	4618      	mov	r0, r3
 800e162:	f7fa fd5d 	bl	8008c20 <lwip_htons>
 800e166:	4603      	mov	r3, r0
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	f003 0301 	and.w	r3, r3, #1
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00d      	beq.n	800e18e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	68db      	ldr	r3, [r3, #12]
 800e176:	899b      	ldrh	r3, [r3, #12]
 800e178:	b29c      	uxth	r4, r3
 800e17a:	2001      	movs	r0, #1
 800e17c:	f7fa fd50 	bl	8008c20 <lwip_htons>
 800e180:	4603      	mov	r3, r0
 800e182:	461a      	mov	r2, r3
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	68db      	ldr	r3, [r3, #12]
 800e188:	4322      	orrs	r2, r4
 800e18a:	b292      	uxth	r2, r2
 800e18c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e198:	68f8      	ldr	r0, [r7, #12]
 800e19a:	f7fe f96e 	bl	800c47a <tcp_seg_free>
    while (next &&
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d00e      	beq.n	800e1c2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	891b      	ldrh	r3, [r3, #8]
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	4b1d      	ldr	r3, [pc, #116]	; (800e220 <tcp_oos_insert_segment+0x10c>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	441a      	add	r2, r3
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	6839      	ldr	r1, [r7, #0]
 800e1b8:	8909      	ldrh	r1, [r1, #8]
 800e1ba:	440b      	add	r3, r1
 800e1bc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	daca      	bge.n	800e158 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d01e      	beq.n	800e206 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	891b      	ldrh	r3, [r3, #8]
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	4b14      	ldr	r3, [pc, #80]	; (800e220 <tcp_oos_insert_segment+0x10c>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	441a      	add	r2, r3
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	68db      	ldr	r3, [r3, #12]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	dd12      	ble.n	800e206 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	68db      	ldr	r3, [r3, #12]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	b29a      	uxth	r2, r3
 800e1e8:	4b0d      	ldr	r3, [pc, #52]	; (800e220 <tcp_oos_insert_segment+0x10c>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	1ad3      	subs	r3, r2, r3
 800e1f0:	b29a      	uxth	r2, r3
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	685a      	ldr	r2, [r3, #4]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	891b      	ldrh	r3, [r3, #8]
 800e1fe:	4619      	mov	r1, r3
 800e200:	4610      	mov	r0, r2
 800e202:	f7fc f905 	bl	800a410 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	683a      	ldr	r2, [r7, #0]
 800e20a:	601a      	str	r2, [r3, #0]
}
 800e20c:	bf00      	nop
 800e20e:	3714      	adds	r7, #20
 800e210:	46bd      	mov	sp, r7
 800e212:	bd90      	pop	{r4, r7, pc}
 800e214:	08016c14 	.word	0x08016c14
 800e218:	08016ed4 	.word	0x08016ed4
 800e21c:	08016c60 	.word	0x08016c60
 800e220:	200007a4 	.word	0x200007a4

0800e224 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e224:	b5b0      	push	{r4, r5, r7, lr}
 800e226:	b086      	sub	sp, #24
 800e228:	af00      	add	r7, sp, #0
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	607a      	str	r2, [r7, #4]
 800e230:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e232:	e03e      	b.n	800e2b2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	4618      	mov	r0, r3
 800e244:	f7fc faf2 	bl	800a82c <pbuf_clen>
 800e248:	4603      	mov	r3, r0
 800e24a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e252:	8a7a      	ldrh	r2, [r7, #18]
 800e254:	429a      	cmp	r2, r3
 800e256:	d906      	bls.n	800e266 <tcp_free_acked_segments+0x42>
 800e258:	4b2a      	ldr	r3, [pc, #168]	; (800e304 <tcp_free_acked_segments+0xe0>)
 800e25a:	f240 4257 	movw	r2, #1111	; 0x457
 800e25e:	492a      	ldr	r1, [pc, #168]	; (800e308 <tcp_free_acked_segments+0xe4>)
 800e260:	482a      	ldr	r0, [pc, #168]	; (800e30c <tcp_free_acked_segments+0xe8>)
 800e262:	f006 f899 	bl	8014398 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e26c:	8a7b      	ldrh	r3, [r7, #18]
 800e26e:	1ad3      	subs	r3, r2, r3
 800e270:	b29a      	uxth	r2, r3
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	891a      	ldrh	r2, [r3, #8]
 800e27c:	4b24      	ldr	r3, [pc, #144]	; (800e310 <tcp_free_acked_segments+0xec>)
 800e27e:	881b      	ldrh	r3, [r3, #0]
 800e280:	4413      	add	r3, r2
 800e282:	b29a      	uxth	r2, r3
 800e284:	4b22      	ldr	r3, [pc, #136]	; (800e310 <tcp_free_acked_segments+0xec>)
 800e286:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e288:	6978      	ldr	r0, [r7, #20]
 800e28a:	f7fe f8f6 	bl	800c47a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e294:	2b00      	cmp	r3, #0
 800e296:	d00c      	beq.n	800e2b2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d109      	bne.n	800e2b2 <tcp_free_acked_segments+0x8e>
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d106      	bne.n	800e2b2 <tcp_free_acked_segments+0x8e>
 800e2a4:	4b17      	ldr	r3, [pc, #92]	; (800e304 <tcp_free_acked_segments+0xe0>)
 800e2a6:	f240 4261 	movw	r2, #1121	; 0x461
 800e2aa:	491a      	ldr	r1, [pc, #104]	; (800e314 <tcp_free_acked_segments+0xf0>)
 800e2ac:	4817      	ldr	r0, [pc, #92]	; (800e30c <tcp_free_acked_segments+0xe8>)
 800e2ae:	f006 f873 	bl	8014398 <iprintf>
  while (seg_list != NULL &&
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d020      	beq.n	800e2fa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7fa fcc3 	bl	8008c4a <lwip_htonl>
 800e2c4:	4604      	mov	r4, r0
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	891b      	ldrh	r3, [r3, #8]
 800e2ca:	461d      	mov	r5, r3
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	899b      	ldrh	r3, [r3, #12]
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7fa fca3 	bl	8008c20 <lwip_htons>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	b2db      	uxtb	r3, r3
 800e2de:	f003 0303 	and.w	r3, r3, #3
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d001      	beq.n	800e2ea <tcp_free_acked_segments+0xc6>
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	e000      	b.n	800e2ec <tcp_free_acked_segments+0xc8>
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	442b      	add	r3, r5
 800e2ee:	18e2      	adds	r2, r4, r3
 800e2f0:	4b09      	ldr	r3, [pc, #36]	; (800e318 <tcp_free_acked_segments+0xf4>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	dd9c      	ble.n	800e234 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e2fa:	68bb      	ldr	r3, [r7, #8]
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3718      	adds	r7, #24
 800e300:	46bd      	mov	sp, r7
 800e302:	bdb0      	pop	{r4, r5, r7, pc}
 800e304:	08016c14 	.word	0x08016c14
 800e308:	08016efc 	.word	0x08016efc
 800e30c:	08016c60 	.word	0x08016c60
 800e310:	200007ac 	.word	0x200007ac
 800e314:	08016f24 	.word	0x08016f24
 800e318:	200007a8 	.word	0x200007a8

0800e31c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e31c:	b5b0      	push	{r4, r5, r7, lr}
 800e31e:	b094      	sub	sp, #80	; 0x50
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e324:	2300      	movs	r3, #0
 800e326:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d106      	bne.n	800e33c <tcp_receive+0x20>
 800e32e:	4ba6      	ldr	r3, [pc, #664]	; (800e5c8 <tcp_receive+0x2ac>)
 800e330:	f240 427b 	movw	r2, #1147	; 0x47b
 800e334:	49a5      	ldr	r1, [pc, #660]	; (800e5cc <tcp_receive+0x2b0>)
 800e336:	48a6      	ldr	r0, [pc, #664]	; (800e5d0 <tcp_receive+0x2b4>)
 800e338:	f006 f82e 	bl	8014398 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	7d1b      	ldrb	r3, [r3, #20]
 800e340:	2b03      	cmp	r3, #3
 800e342:	d806      	bhi.n	800e352 <tcp_receive+0x36>
 800e344:	4ba0      	ldr	r3, [pc, #640]	; (800e5c8 <tcp_receive+0x2ac>)
 800e346:	f240 427c 	movw	r2, #1148	; 0x47c
 800e34a:	49a2      	ldr	r1, [pc, #648]	; (800e5d4 <tcp_receive+0x2b8>)
 800e34c:	48a0      	ldr	r0, [pc, #640]	; (800e5d0 <tcp_receive+0x2b4>)
 800e34e:	f006 f823 	bl	8014398 <iprintf>

  if (flags & TCP_ACK) {
 800e352:	4ba1      	ldr	r3, [pc, #644]	; (800e5d8 <tcp_receive+0x2bc>)
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	f003 0310 	and.w	r3, r3, #16
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	f000 8263 	beq.w	800e826 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e366:	461a      	mov	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e36c:	4413      	add	r3, r2
 800e36e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e374:	4b99      	ldr	r3, [pc, #612]	; (800e5dc <tcp_receive+0x2c0>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	1ad3      	subs	r3, r2, r3
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	db1b      	blt.n	800e3b6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e382:	4b96      	ldr	r3, [pc, #600]	; (800e5dc <tcp_receive+0x2c0>)
 800e384:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e386:	429a      	cmp	r2, r3
 800e388:	d106      	bne.n	800e398 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e38e:	4b94      	ldr	r3, [pc, #592]	; (800e5e0 <tcp_receive+0x2c4>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	1ad3      	subs	r3, r2, r3
 800e394:	2b00      	cmp	r3, #0
 800e396:	db0e      	blt.n	800e3b6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e39c:	4b90      	ldr	r3, [pc, #576]	; (800e5e0 <tcp_receive+0x2c4>)
 800e39e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d125      	bne.n	800e3f0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e3a4:	4b8f      	ldr	r3, [pc, #572]	; (800e5e4 <tcp_receive+0x2c8>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	89db      	ldrh	r3, [r3, #14]
 800e3aa:	b29a      	uxth	r2, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d91c      	bls.n	800e3f0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e3b6:	4b8b      	ldr	r3, [pc, #556]	; (800e5e4 <tcp_receive+0x2c8>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	89db      	ldrh	r3, [r3, #14]
 800e3bc:	b29a      	uxth	r2, r3
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d205      	bcs.n	800e3e0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e3e0:	4b7e      	ldr	r3, [pc, #504]	; (800e5dc <tcp_receive+0x2c0>)
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e3e8:	4b7d      	ldr	r3, [pc, #500]	; (800e5e0 <tcp_receive+0x2c4>)
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e3f0:	4b7b      	ldr	r3, [pc, #492]	; (800e5e0 <tcp_receive+0x2c4>)
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3f8:	1ad3      	subs	r3, r2, r3
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	dc58      	bgt.n	800e4b0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e3fe:	4b7a      	ldr	r3, [pc, #488]	; (800e5e8 <tcp_receive+0x2cc>)
 800e400:	881b      	ldrh	r3, [r3, #0]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d14b      	bne.n	800e49e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e410:	4413      	add	r3, r2
 800e412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e414:	429a      	cmp	r2, r3
 800e416:	d142      	bne.n	800e49e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e41e:	2b00      	cmp	r3, #0
 800e420:	db3d      	blt.n	800e49e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e426:	4b6e      	ldr	r3, [pc, #440]	; (800e5e0 <tcp_receive+0x2c4>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d137      	bne.n	800e49e <tcp_receive+0x182>
              found_dupack = 1;
 800e42e:	2301      	movs	r3, #1
 800e430:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e438:	2bff      	cmp	r3, #255	; 0xff
 800e43a:	d007      	beq.n	800e44c <tcp_receive+0x130>
                ++pcb->dupacks;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e442:	3301      	adds	r3, #1
 800e444:	b2da      	uxtb	r2, r3
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e452:	2b03      	cmp	r3, #3
 800e454:	d91b      	bls.n	800e48e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e460:	4413      	add	r3, r2
 800e462:	b29a      	uxth	r2, r3
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d30a      	bcc.n	800e484 <tcp_receive+0x168>
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e478:	4413      	add	r3, r2
 800e47a:	b29a      	uxth	r2, r3
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e482:	e004      	b.n	800e48e <tcp_receive+0x172>
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e48a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e494:	2b02      	cmp	r3, #2
 800e496:	d902      	bls.n	800e49e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f002 fb41 	bl	8010b20 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e49e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	f040 8160 	bne.w	800e766 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e4ae:	e15a      	b.n	800e766 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e4b0:	4b4b      	ldr	r3, [pc, #300]	; (800e5e0 <tcp_receive+0x2c4>)
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4b8:	1ad3      	subs	r3, r2, r3
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	f2c0 814d 	blt.w	800e75c <tcp_receive+0x440>
 800e4c2:	4b47      	ldr	r3, [pc, #284]	; (800e5e0 <tcp_receive+0x2c4>)
 800e4c4:	681a      	ldr	r2, [r3, #0]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4ca:	1ad3      	subs	r3, r2, r3
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	f300 8145 	bgt.w	800e75c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	8b5b      	ldrh	r3, [r3, #26]
 800e4d6:	f003 0304 	and.w	r3, r3, #4
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d010      	beq.n	800e500 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	8b5b      	ldrh	r3, [r3, #26]
 800e4e2:	f023 0304 	bic.w	r3, r3, #4
 800e4e6:	b29a      	uxth	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2200      	movs	r2, #0
 800e504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e50e:	10db      	asrs	r3, r3, #3
 800e510:	b21b      	sxth	r3, r3
 800e512:	b29a      	uxth	r2, r3
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	4413      	add	r3, r2
 800e51e:	b29b      	uxth	r3, r3
 800e520:	b21a      	sxth	r2, r3
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e528:	4b2d      	ldr	r3, [pc, #180]	; (800e5e0 <tcp_receive+0x2c4>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	b29a      	uxth	r2, r3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e532:	b29b      	uxth	r3, r3
 800e534:	1ad3      	subs	r3, r2, r3
 800e536:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e540:	4b27      	ldr	r3, [pc, #156]	; (800e5e0 <tcp_receive+0x2c4>)
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	7d1b      	ldrb	r3, [r3, #20]
 800e54c:	2b03      	cmp	r3, #3
 800e54e:	f240 8096 	bls.w	800e67e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e55e:	429a      	cmp	r2, r3
 800e560:	d244      	bcs.n	800e5ec <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	8b5b      	ldrh	r3, [r3, #26]
 800e566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d001      	beq.n	800e572 <tcp_receive+0x256>
 800e56e:	2301      	movs	r3, #1
 800e570:	e000      	b.n	800e574 <tcp_receive+0x258>
 800e572:	2302      	movs	r3, #2
 800e574:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e578:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e57c:	b29a      	uxth	r2, r3
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e582:	fb12 f303 	smulbb	r3, r2, r3
 800e586:	b29b      	uxth	r3, r3
 800e588:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e58a:	4293      	cmp	r3, r2
 800e58c:	bf28      	it	cs
 800e58e:	4613      	movcs	r3, r2
 800e590:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e598:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e59a:	4413      	add	r3, r2
 800e59c:	b29a      	uxth	r2, r3
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d309      	bcc.n	800e5bc <tcp_receive+0x2a0>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e5ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e5b0:	4413      	add	r3, r2
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e5ba:	e060      	b.n	800e67e <tcp_receive+0x362>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e5c6:	e05a      	b.n	800e67e <tcp_receive+0x362>
 800e5c8:	08016c14 	.word	0x08016c14
 800e5cc:	08016f44 	.word	0x08016f44
 800e5d0:	08016c60 	.word	0x08016c60
 800e5d4:	08016f60 	.word	0x08016f60
 800e5d8:	200007b0 	.word	0x200007b0
 800e5dc:	200007a4 	.word	0x200007a4
 800e5e0:	200007a8 	.word	0x200007a8
 800e5e4:	20000794 	.word	0x20000794
 800e5e8:	200007ae 	.word	0x200007ae
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e5f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5f4:	4413      	add	r3, r2
 800e5f6:	b29a      	uxth	r2, r3
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d309      	bcc.n	800e616 <tcp_receive+0x2fa>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e608:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e60a:	4413      	add	r3, r2
 800e60c:	b29a      	uxth	r2, r3
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e614:	e004      	b.n	800e620 <tcp_receive+0x304>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e61c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d326      	bcc.n	800e67e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e63c:	1ad3      	subs	r3, r2, r3
 800e63e:	b29a      	uxth	r2, r3
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e650:	4413      	add	r3, r2
 800e652:	b29a      	uxth	r2, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d30a      	bcc.n	800e674 <tcp_receive+0x358>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e668:	4413      	add	r3, r2
 800e66a:	b29a      	uxth	r2, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e672:	e004      	b.n	800e67e <tcp_receive+0x362>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e67a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e686:	4a98      	ldr	r2, [pc, #608]	; (800e8e8 <tcp_receive+0x5cc>)
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f7ff fdcb 	bl	800e224 <tcp_free_acked_segments>
 800e68e:	4602      	mov	r2, r0
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e69c:	4a93      	ldr	r2, [pc, #588]	; (800e8ec <tcp_receive+0x5d0>)
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7ff fdc0 	bl	800e224 <tcp_free_acked_segments>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d104      	bne.n	800e6bc <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6b8:	861a      	strh	r2, [r3, #48]	; 0x30
 800e6ba:	e002      	b.n	800e6c2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d103      	bne.n	800e6d8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e6de:	4b84      	ldr	r3, [pc, #528]	; (800e8f0 <tcp_receive+0x5d4>)
 800e6e0:	881b      	ldrh	r3, [r3, #0]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	b29a      	uxth	r2, r3
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	8b5b      	ldrh	r3, [r3, #26]
 800e6f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d035      	beq.n	800e764 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d118      	bne.n	800e732 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00c      	beq.n	800e722 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	4618      	mov	r0, r3
 800e716:	f7fa fa98 	bl	8008c4a <lwip_htonl>
 800e71a:	4603      	mov	r3, r0
 800e71c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e71e:	2b00      	cmp	r3, #0
 800e720:	dc20      	bgt.n	800e764 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	8b5b      	ldrh	r3, [r3, #26]
 800e726:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e72a:	b29a      	uxth	r2, r3
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e730:	e018      	b.n	800e764 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	685b      	ldr	r3, [r3, #4]
 800e73e:	4618      	mov	r0, r3
 800e740:	f7fa fa83 	bl	8008c4a <lwip_htonl>
 800e744:	4603      	mov	r3, r0
 800e746:	1ae3      	subs	r3, r4, r3
 800e748:	2b00      	cmp	r3, #0
 800e74a:	dc0b      	bgt.n	800e764 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	8b5b      	ldrh	r3, [r3, #26]
 800e750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e754:	b29a      	uxth	r2, r3
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e75a:	e003      	b.n	800e764 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f002 fbcd 	bl	8010efc <tcp_send_empty_ack>
 800e762:	e000      	b.n	800e766 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e764:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d05b      	beq.n	800e826 <tcp_receive+0x50a>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e772:	4b60      	ldr	r3, [pc, #384]	; (800e8f4 <tcp_receive+0x5d8>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	1ad3      	subs	r3, r2, r3
 800e778:	2b00      	cmp	r3, #0
 800e77a:	da54      	bge.n	800e826 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e77c:	4b5e      	ldr	r3, [pc, #376]	; (800e8f8 <tcp_receive+0x5dc>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	b29a      	uxth	r2, r3
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e786:	b29b      	uxth	r3, r3
 800e788:	1ad3      	subs	r3, r2, r3
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e790:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e79a:	10db      	asrs	r3, r3, #3
 800e79c:	b21b      	sxth	r3, r3
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	1ad3      	subs	r3, r2, r3
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e7ae:	b29a      	uxth	r2, r3
 800e7b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e7b4:	4413      	add	r3, r2
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	b21a      	sxth	r2, r3
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e7be:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	da05      	bge.n	800e7d2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800e7c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e7ca:	425b      	negs	r3, r3
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e7d2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e7dc:	109b      	asrs	r3, r3, #2
 800e7de:	b21b      	sxth	r3, r3
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	1ad3      	subs	r3, r2, r3
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e7f6:	4413      	add	r3, r2
 800e7f8:	b29b      	uxth	r3, r3
 800e7fa:	b21a      	sxth	r2, r3
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e806:	10db      	asrs	r3, r3, #3
 800e808:	b21b      	sxth	r3, r3
 800e80a:	b29a      	uxth	r2, r3
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e812:	b29b      	uxth	r3, r3
 800e814:	4413      	add	r3, r2
 800e816:	b29b      	uxth	r3, r3
 800e818:	b21a      	sxth	r2, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2200      	movs	r2, #0
 800e824:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e826:	4b35      	ldr	r3, [pc, #212]	; (800e8fc <tcp_receive+0x5e0>)
 800e828:	881b      	ldrh	r3, [r3, #0]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	f000 84e1 	beq.w	800f1f2 <tcp_receive+0xed6>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	7d1b      	ldrb	r3, [r3, #20]
 800e834:	2b06      	cmp	r3, #6
 800e836:	f200 84dc 	bhi.w	800f1f2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e83e:	4b30      	ldr	r3, [pc, #192]	; (800e900 <tcp_receive+0x5e4>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	1ad3      	subs	r3, r2, r3
 800e844:	3b01      	subs	r3, #1
 800e846:	2b00      	cmp	r3, #0
 800e848:	f2c0 808e 	blt.w	800e968 <tcp_receive+0x64c>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e850:	4b2a      	ldr	r3, [pc, #168]	; (800e8fc <tcp_receive+0x5e0>)
 800e852:	881b      	ldrh	r3, [r3, #0]
 800e854:	4619      	mov	r1, r3
 800e856:	4b2a      	ldr	r3, [pc, #168]	; (800e900 <tcp_receive+0x5e4>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	440b      	add	r3, r1
 800e85c:	1ad3      	subs	r3, r2, r3
 800e85e:	3301      	adds	r3, #1
 800e860:	2b00      	cmp	r3, #0
 800e862:	f300 8081 	bgt.w	800e968 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e866:	4b27      	ldr	r3, [pc, #156]	; (800e904 <tcp_receive+0x5e8>)
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e870:	4b23      	ldr	r3, [pc, #140]	; (800e900 <tcp_receive+0x5e4>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	1ad3      	subs	r3, r2, r3
 800e876:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e878:	4b22      	ldr	r3, [pc, #136]	; (800e904 <tcp_receive+0x5e8>)
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d106      	bne.n	800e88e <tcp_receive+0x572>
 800e880:	4b21      	ldr	r3, [pc, #132]	; (800e908 <tcp_receive+0x5ec>)
 800e882:	f240 5294 	movw	r2, #1428	; 0x594
 800e886:	4921      	ldr	r1, [pc, #132]	; (800e90c <tcp_receive+0x5f0>)
 800e888:	4821      	ldr	r0, [pc, #132]	; (800e910 <tcp_receive+0x5f4>)
 800e88a:	f005 fd85 	bl	8014398 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e890:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e894:	4293      	cmp	r3, r2
 800e896:	d906      	bls.n	800e8a6 <tcp_receive+0x58a>
 800e898:	4b1b      	ldr	r3, [pc, #108]	; (800e908 <tcp_receive+0x5ec>)
 800e89a:	f240 5295 	movw	r2, #1429	; 0x595
 800e89e:	491d      	ldr	r1, [pc, #116]	; (800e914 <tcp_receive+0x5f8>)
 800e8a0:	481b      	ldr	r0, [pc, #108]	; (800e910 <tcp_receive+0x5f4>)
 800e8a2:	f005 fd79 	bl	8014398 <iprintf>
      off = (u16_t)off32;
 800e8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e8ac:	4b15      	ldr	r3, [pc, #84]	; (800e904 <tcp_receive+0x5e8>)
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	891b      	ldrh	r3, [r3, #8]
 800e8b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d906      	bls.n	800e8c8 <tcp_receive+0x5ac>
 800e8ba:	4b13      	ldr	r3, [pc, #76]	; (800e908 <tcp_receive+0x5ec>)
 800e8bc:	f240 5297 	movw	r2, #1431	; 0x597
 800e8c0:	4915      	ldr	r1, [pc, #84]	; (800e918 <tcp_receive+0x5fc>)
 800e8c2:	4813      	ldr	r0, [pc, #76]	; (800e910 <tcp_receive+0x5f4>)
 800e8c4:	f005 fd68 	bl	8014398 <iprintf>
      inseg.len -= off;
 800e8c8:	4b0e      	ldr	r3, [pc, #56]	; (800e904 <tcp_receive+0x5e8>)
 800e8ca:	891a      	ldrh	r2, [r3, #8]
 800e8cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e8d0:	1ad3      	subs	r3, r2, r3
 800e8d2:	b29a      	uxth	r2, r3
 800e8d4:	4b0b      	ldr	r3, [pc, #44]	; (800e904 <tcp_receive+0x5e8>)
 800e8d6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e8d8:	4b0a      	ldr	r3, [pc, #40]	; (800e904 <tcp_receive+0x5e8>)
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	891a      	ldrh	r2, [r3, #8]
 800e8de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e8e2:	1ad3      	subs	r3, r2, r3
 800e8e4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e8e6:	e029      	b.n	800e93c <tcp_receive+0x620>
 800e8e8:	08016f7c 	.word	0x08016f7c
 800e8ec:	08016f84 	.word	0x08016f84
 800e8f0:	200007ac 	.word	0x200007ac
 800e8f4:	200007a8 	.word	0x200007a8
 800e8f8:	200075d4 	.word	0x200075d4
 800e8fc:	200007ae 	.word	0x200007ae
 800e900:	200007a4 	.word	0x200007a4
 800e904:	20000784 	.word	0x20000784
 800e908:	08016c14 	.word	0x08016c14
 800e90c:	08016f8c 	.word	0x08016f8c
 800e910:	08016c60 	.word	0x08016c60
 800e914:	08016f9c 	.word	0x08016f9c
 800e918:	08016fac 	.word	0x08016fac
        off -= p->len;
 800e91c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e91e:	895b      	ldrh	r3, [r3, #10]
 800e920:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e924:	1ad3      	subs	r3, r2, r3
 800e926:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e92a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e92c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e92e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e932:	2200      	movs	r2, #0
 800e934:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e93c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e93e:	895b      	ldrh	r3, [r3, #10]
 800e940:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e944:	429a      	cmp	r2, r3
 800e946:	d8e9      	bhi.n	800e91c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e948:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e94c:	4619      	mov	r1, r3
 800e94e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e950:	f7fb fe5e 	bl	800a610 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e958:	4a91      	ldr	r2, [pc, #580]	; (800eba0 <tcp_receive+0x884>)
 800e95a:	6013      	str	r3, [r2, #0]
 800e95c:	4b91      	ldr	r3, [pc, #580]	; (800eba4 <tcp_receive+0x888>)
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	4a8f      	ldr	r2, [pc, #572]	; (800eba0 <tcp_receive+0x884>)
 800e962:	6812      	ldr	r2, [r2, #0]
 800e964:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e966:	e00d      	b.n	800e984 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e968:	4b8d      	ldr	r3, [pc, #564]	; (800eba0 <tcp_receive+0x884>)
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e970:	1ad3      	subs	r3, r2, r3
 800e972:	2b00      	cmp	r3, #0
 800e974:	da06      	bge.n	800e984 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	8b5b      	ldrh	r3, [r3, #26]
 800e97a:	f043 0302 	orr.w	r3, r3, #2
 800e97e:	b29a      	uxth	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e984:	4b86      	ldr	r3, [pc, #536]	; (800eba0 <tcp_receive+0x884>)
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e98c:	1ad3      	subs	r3, r2, r3
 800e98e:	2b00      	cmp	r3, #0
 800e990:	f2c0 842a 	blt.w	800f1e8 <tcp_receive+0xecc>
 800e994:	4b82      	ldr	r3, [pc, #520]	; (800eba0 <tcp_receive+0x884>)
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e99c:	6879      	ldr	r1, [r7, #4]
 800e99e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e9a0:	440b      	add	r3, r1
 800e9a2:	1ad3      	subs	r3, r2, r3
 800e9a4:	3301      	adds	r3, #1
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	f300 841e 	bgt.w	800f1e8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9b0:	4b7b      	ldr	r3, [pc, #492]	; (800eba0 <tcp_receive+0x884>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	f040 829a 	bne.w	800eeee <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e9ba:	4b7a      	ldr	r3, [pc, #488]	; (800eba4 <tcp_receive+0x888>)
 800e9bc:	891c      	ldrh	r4, [r3, #8]
 800e9be:	4b79      	ldr	r3, [pc, #484]	; (800eba4 <tcp_receive+0x888>)
 800e9c0:	68db      	ldr	r3, [r3, #12]
 800e9c2:	899b      	ldrh	r3, [r3, #12]
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7fa f92a 	bl	8008c20 <lwip_htons>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	b2db      	uxtb	r3, r3
 800e9d0:	f003 0303 	and.w	r3, r3, #3
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d001      	beq.n	800e9dc <tcp_receive+0x6c0>
 800e9d8:	2301      	movs	r3, #1
 800e9da:	e000      	b.n	800e9de <tcp_receive+0x6c2>
 800e9dc:	2300      	movs	r3, #0
 800e9de:	4423      	add	r3, r4
 800e9e0:	b29a      	uxth	r2, r3
 800e9e2:	4b71      	ldr	r3, [pc, #452]	; (800eba8 <tcp_receive+0x88c>)
 800e9e4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e9ea:	4b6f      	ldr	r3, [pc, #444]	; (800eba8 <tcp_receive+0x88c>)
 800e9ec:	881b      	ldrh	r3, [r3, #0]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d275      	bcs.n	800eade <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e9f2:	4b6c      	ldr	r3, [pc, #432]	; (800eba4 <tcp_receive+0x888>)
 800e9f4:	68db      	ldr	r3, [r3, #12]
 800e9f6:	899b      	ldrh	r3, [r3, #12]
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7fa f910 	bl	8008c20 <lwip_htons>
 800ea00:	4603      	mov	r3, r0
 800ea02:	b2db      	uxtb	r3, r3
 800ea04:	f003 0301 	and.w	r3, r3, #1
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d01f      	beq.n	800ea4c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ea0c:	4b65      	ldr	r3, [pc, #404]	; (800eba4 <tcp_receive+0x888>)
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	899b      	ldrh	r3, [r3, #12]
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	b21b      	sxth	r3, r3
 800ea16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ea1a:	b21c      	sxth	r4, r3
 800ea1c:	4b61      	ldr	r3, [pc, #388]	; (800eba4 <tcp_receive+0x888>)
 800ea1e:	68db      	ldr	r3, [r3, #12]
 800ea20:	899b      	ldrh	r3, [r3, #12]
 800ea22:	b29b      	uxth	r3, r3
 800ea24:	4618      	mov	r0, r3
 800ea26:	f7fa f8fb 	bl	8008c20 <lwip_htons>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	b2db      	uxtb	r3, r3
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ea34:	b29b      	uxth	r3, r3
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7fa f8f2 	bl	8008c20 <lwip_htons>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	b21b      	sxth	r3, r3
 800ea40:	4323      	orrs	r3, r4
 800ea42:	b21a      	sxth	r2, r3
 800ea44:	4b57      	ldr	r3, [pc, #348]	; (800eba4 <tcp_receive+0x888>)
 800ea46:	68db      	ldr	r3, [r3, #12]
 800ea48:	b292      	uxth	r2, r2
 800ea4a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ea50:	4b54      	ldr	r3, [pc, #336]	; (800eba4 <tcp_receive+0x888>)
 800ea52:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ea54:	4b53      	ldr	r3, [pc, #332]	; (800eba4 <tcp_receive+0x888>)
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	899b      	ldrh	r3, [r3, #12]
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7fa f8df 	bl	8008c20 <lwip_htons>
 800ea62:	4603      	mov	r3, r0
 800ea64:	b2db      	uxtb	r3, r3
 800ea66:	f003 0302 	and.w	r3, r3, #2
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d005      	beq.n	800ea7a <tcp_receive+0x75e>
            inseg.len -= 1;
 800ea6e:	4b4d      	ldr	r3, [pc, #308]	; (800eba4 <tcp_receive+0x888>)
 800ea70:	891b      	ldrh	r3, [r3, #8]
 800ea72:	3b01      	subs	r3, #1
 800ea74:	b29a      	uxth	r2, r3
 800ea76:	4b4b      	ldr	r3, [pc, #300]	; (800eba4 <tcp_receive+0x888>)
 800ea78:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ea7a:	4b4a      	ldr	r3, [pc, #296]	; (800eba4 <tcp_receive+0x888>)
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	4a49      	ldr	r2, [pc, #292]	; (800eba4 <tcp_receive+0x888>)
 800ea80:	8912      	ldrh	r2, [r2, #8]
 800ea82:	4611      	mov	r1, r2
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7fb fcc3 	bl	800a410 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ea8a:	4b46      	ldr	r3, [pc, #280]	; (800eba4 <tcp_receive+0x888>)
 800ea8c:	891c      	ldrh	r4, [r3, #8]
 800ea8e:	4b45      	ldr	r3, [pc, #276]	; (800eba4 <tcp_receive+0x888>)
 800ea90:	68db      	ldr	r3, [r3, #12]
 800ea92:	899b      	ldrh	r3, [r3, #12]
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7fa f8c2 	bl	8008c20 <lwip_htons>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	b2db      	uxtb	r3, r3
 800eaa0:	f003 0303 	and.w	r3, r3, #3
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d001      	beq.n	800eaac <tcp_receive+0x790>
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	e000      	b.n	800eaae <tcp_receive+0x792>
 800eaac:	2300      	movs	r3, #0
 800eaae:	4423      	add	r3, r4
 800eab0:	b29a      	uxth	r2, r3
 800eab2:	4b3d      	ldr	r3, [pc, #244]	; (800eba8 <tcp_receive+0x88c>)
 800eab4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800eab6:	4b3c      	ldr	r3, [pc, #240]	; (800eba8 <tcp_receive+0x88c>)
 800eab8:	881b      	ldrh	r3, [r3, #0]
 800eaba:	461a      	mov	r2, r3
 800eabc:	4b38      	ldr	r3, [pc, #224]	; (800eba0 <tcp_receive+0x884>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	441a      	add	r2, r3
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eac6:	6879      	ldr	r1, [r7, #4]
 800eac8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eaca:	440b      	add	r3, r1
 800eacc:	429a      	cmp	r2, r3
 800eace:	d006      	beq.n	800eade <tcp_receive+0x7c2>
 800ead0:	4b36      	ldr	r3, [pc, #216]	; (800ebac <tcp_receive+0x890>)
 800ead2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ead6:	4936      	ldr	r1, [pc, #216]	; (800ebb0 <tcp_receive+0x894>)
 800ead8:	4836      	ldr	r0, [pc, #216]	; (800ebb4 <tcp_receive+0x898>)
 800eada:	f005 fc5d 	bl	8014398 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	f000 80e7 	beq.w	800ecb6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eae8:	4b2e      	ldr	r3, [pc, #184]	; (800eba4 <tcp_receive+0x888>)
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	899b      	ldrh	r3, [r3, #12]
 800eaee:	b29b      	uxth	r3, r3
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7fa f895 	bl	8008c20 <lwip_htons>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	b2db      	uxtb	r3, r3
 800eafa:	f003 0301 	and.w	r3, r3, #1
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d010      	beq.n	800eb24 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800eb02:	e00a      	b.n	800eb1a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb08:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800eb14:	68f8      	ldr	r0, [r7, #12]
 800eb16:	f7fd fcb0 	bl	800c47a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d1f0      	bne.n	800eb04 <tcp_receive+0x7e8>
 800eb22:	e0c8      	b.n	800ecb6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb28:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800eb2a:	e052      	b.n	800ebd2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800eb2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	899b      	ldrh	r3, [r3, #12]
 800eb32:	b29b      	uxth	r3, r3
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7fa f873 	bl	8008c20 <lwip_htons>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	f003 0301 	and.w	r3, r3, #1
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d03d      	beq.n	800ebc2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800eb46:	4b17      	ldr	r3, [pc, #92]	; (800eba4 <tcp_receive+0x888>)
 800eb48:	68db      	ldr	r3, [r3, #12]
 800eb4a:	899b      	ldrh	r3, [r3, #12]
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7fa f866 	bl	8008c20 <lwip_htons>
 800eb54:	4603      	mov	r3, r0
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d130      	bne.n	800ebc2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800eb60:	4b10      	ldr	r3, [pc, #64]	; (800eba4 <tcp_receive+0x888>)
 800eb62:	68db      	ldr	r3, [r3, #12]
 800eb64:	899b      	ldrh	r3, [r3, #12]
 800eb66:	b29c      	uxth	r4, r3
 800eb68:	2001      	movs	r0, #1
 800eb6a:	f7fa f859 	bl	8008c20 <lwip_htons>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	461a      	mov	r2, r3
 800eb72:	4b0c      	ldr	r3, [pc, #48]	; (800eba4 <tcp_receive+0x888>)
 800eb74:	68db      	ldr	r3, [r3, #12]
 800eb76:	4322      	orrs	r2, r4
 800eb78:	b292      	uxth	r2, r2
 800eb7a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800eb7c:	4b09      	ldr	r3, [pc, #36]	; (800eba4 <tcp_receive+0x888>)
 800eb7e:	891c      	ldrh	r4, [r3, #8]
 800eb80:	4b08      	ldr	r3, [pc, #32]	; (800eba4 <tcp_receive+0x888>)
 800eb82:	68db      	ldr	r3, [r3, #12]
 800eb84:	899b      	ldrh	r3, [r3, #12]
 800eb86:	b29b      	uxth	r3, r3
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fa f849 	bl	8008c20 <lwip_htons>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	f003 0303 	and.w	r3, r3, #3
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d00e      	beq.n	800ebb8 <tcp_receive+0x89c>
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e00d      	b.n	800ebba <tcp_receive+0x89e>
 800eb9e:	bf00      	nop
 800eba0:	200007a4 	.word	0x200007a4
 800eba4:	20000784 	.word	0x20000784
 800eba8:	200007ae 	.word	0x200007ae
 800ebac:	08016c14 	.word	0x08016c14
 800ebb0:	08016fbc 	.word	0x08016fbc
 800ebb4:	08016c60 	.word	0x08016c60
 800ebb8:	2300      	movs	r3, #0
 800ebba:	4423      	add	r3, r4
 800ebbc:	b29a      	uxth	r2, r3
 800ebbe:	4b98      	ldr	r3, [pc, #608]	; (800ee20 <tcp_receive+0xb04>)
 800ebc0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ebc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebc4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ebc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ebcc:	6938      	ldr	r0, [r7, #16]
 800ebce:	f7fd fc54 	bl	800c47a <tcp_seg_free>
            while (next &&
 800ebd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00e      	beq.n	800ebf6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ebd8:	4b91      	ldr	r3, [pc, #580]	; (800ee20 <tcp_receive+0xb04>)
 800ebda:	881b      	ldrh	r3, [r3, #0]
 800ebdc:	461a      	mov	r2, r3
 800ebde:	4b91      	ldr	r3, [pc, #580]	; (800ee24 <tcp_receive+0xb08>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	441a      	add	r2, r3
 800ebe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebe6:	68db      	ldr	r3, [r3, #12]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ebec:	8909      	ldrh	r1, [r1, #8]
 800ebee:	440b      	add	r3, r1
 800ebf0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	da9a      	bge.n	800eb2c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ebf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d059      	beq.n	800ecb0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ebfc:	4b88      	ldr	r3, [pc, #544]	; (800ee20 <tcp_receive+0xb04>)
 800ebfe:	881b      	ldrh	r3, [r3, #0]
 800ec00:	461a      	mov	r2, r3
 800ec02:	4b88      	ldr	r3, [pc, #544]	; (800ee24 <tcp_receive+0xb08>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	441a      	add	r2, r3
 800ec08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec0a:	68db      	ldr	r3, [r3, #12]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	dd4d      	ble.n	800ecb0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ec14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec16:	68db      	ldr	r3, [r3, #12]
 800ec18:	685b      	ldr	r3, [r3, #4]
 800ec1a:	b29a      	uxth	r2, r3
 800ec1c:	4b81      	ldr	r3, [pc, #516]	; (800ee24 <tcp_receive+0xb08>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	1ad3      	subs	r3, r2, r3
 800ec24:	b29a      	uxth	r2, r3
 800ec26:	4b80      	ldr	r3, [pc, #512]	; (800ee28 <tcp_receive+0xb0c>)
 800ec28:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ec2a:	4b7f      	ldr	r3, [pc, #508]	; (800ee28 <tcp_receive+0xb0c>)
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	899b      	ldrh	r3, [r3, #12]
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7f9 fff4 	bl	8008c20 <lwip_htons>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	b2db      	uxtb	r3, r3
 800ec3c:	f003 0302 	and.w	r3, r3, #2
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d005      	beq.n	800ec50 <tcp_receive+0x934>
                inseg.len -= 1;
 800ec44:	4b78      	ldr	r3, [pc, #480]	; (800ee28 <tcp_receive+0xb0c>)
 800ec46:	891b      	ldrh	r3, [r3, #8]
 800ec48:	3b01      	subs	r3, #1
 800ec4a:	b29a      	uxth	r2, r3
 800ec4c:	4b76      	ldr	r3, [pc, #472]	; (800ee28 <tcp_receive+0xb0c>)
 800ec4e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ec50:	4b75      	ldr	r3, [pc, #468]	; (800ee28 <tcp_receive+0xb0c>)
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	4a74      	ldr	r2, [pc, #464]	; (800ee28 <tcp_receive+0xb0c>)
 800ec56:	8912      	ldrh	r2, [r2, #8]
 800ec58:	4611      	mov	r1, r2
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7fb fbd8 	bl	800a410 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ec60:	4b71      	ldr	r3, [pc, #452]	; (800ee28 <tcp_receive+0xb0c>)
 800ec62:	891c      	ldrh	r4, [r3, #8]
 800ec64:	4b70      	ldr	r3, [pc, #448]	; (800ee28 <tcp_receive+0xb0c>)
 800ec66:	68db      	ldr	r3, [r3, #12]
 800ec68:	899b      	ldrh	r3, [r3, #12]
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f7f9 ffd7 	bl	8008c20 <lwip_htons>
 800ec72:	4603      	mov	r3, r0
 800ec74:	b2db      	uxtb	r3, r3
 800ec76:	f003 0303 	and.w	r3, r3, #3
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d001      	beq.n	800ec82 <tcp_receive+0x966>
 800ec7e:	2301      	movs	r3, #1
 800ec80:	e000      	b.n	800ec84 <tcp_receive+0x968>
 800ec82:	2300      	movs	r3, #0
 800ec84:	4423      	add	r3, r4
 800ec86:	b29a      	uxth	r2, r3
 800ec88:	4b65      	ldr	r3, [pc, #404]	; (800ee20 <tcp_receive+0xb04>)
 800ec8a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ec8c:	4b64      	ldr	r3, [pc, #400]	; (800ee20 <tcp_receive+0xb04>)
 800ec8e:	881b      	ldrh	r3, [r3, #0]
 800ec90:	461a      	mov	r2, r3
 800ec92:	4b64      	ldr	r3, [pc, #400]	; (800ee24 <tcp_receive+0xb08>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	441a      	add	r2, r3
 800ec98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec9a:	68db      	ldr	r3, [r3, #12]
 800ec9c:	685b      	ldr	r3, [r3, #4]
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d006      	beq.n	800ecb0 <tcp_receive+0x994>
 800eca2:	4b62      	ldr	r3, [pc, #392]	; (800ee2c <tcp_receive+0xb10>)
 800eca4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800eca8:	4961      	ldr	r1, [pc, #388]	; (800ee30 <tcp_receive+0xb14>)
 800ecaa:	4862      	ldr	r0, [pc, #392]	; (800ee34 <tcp_receive+0xb18>)
 800ecac:	f005 fb74 	bl	8014398 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecb4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ecb6:	4b5a      	ldr	r3, [pc, #360]	; (800ee20 <tcp_receive+0xb04>)
 800ecb8:	881b      	ldrh	r3, [r3, #0]
 800ecba:	461a      	mov	r2, r3
 800ecbc:	4b59      	ldr	r3, [pc, #356]	; (800ee24 <tcp_receive+0xb08>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	441a      	add	r2, r3
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ecca:	4b55      	ldr	r3, [pc, #340]	; (800ee20 <tcp_receive+0xb04>)
 800eccc:	881b      	ldrh	r3, [r3, #0]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d206      	bcs.n	800ece0 <tcp_receive+0x9c4>
 800ecd2:	4b56      	ldr	r3, [pc, #344]	; (800ee2c <tcp_receive+0xb10>)
 800ecd4:	f240 6207 	movw	r2, #1543	; 0x607
 800ecd8:	4957      	ldr	r1, [pc, #348]	; (800ee38 <tcp_receive+0xb1c>)
 800ecda:	4856      	ldr	r0, [pc, #344]	; (800ee34 <tcp_receive+0xb18>)
 800ecdc:	f005 fb5c 	bl	8014398 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ece4:	4b4e      	ldr	r3, [pc, #312]	; (800ee20 <tcp_receive+0xb04>)
 800ece6:	881b      	ldrh	r3, [r3, #0]
 800ece8:	1ad3      	subs	r3, r2, r3
 800ecea:	b29a      	uxth	r2, r3
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f7fc fd85 	bl	800b800 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ecf6:	4b4c      	ldr	r3, [pc, #304]	; (800ee28 <tcp_receive+0xb0c>)
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	891b      	ldrh	r3, [r3, #8]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d006      	beq.n	800ed0e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800ed00:	4b49      	ldr	r3, [pc, #292]	; (800ee28 <tcp_receive+0xb0c>)
 800ed02:	685b      	ldr	r3, [r3, #4]
 800ed04:	4a4d      	ldr	r2, [pc, #308]	; (800ee3c <tcp_receive+0xb20>)
 800ed06:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ed08:	4b47      	ldr	r3, [pc, #284]	; (800ee28 <tcp_receive+0xb0c>)
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ed0e:	4b46      	ldr	r3, [pc, #280]	; (800ee28 <tcp_receive+0xb0c>)
 800ed10:	68db      	ldr	r3, [r3, #12]
 800ed12:	899b      	ldrh	r3, [r3, #12]
 800ed14:	b29b      	uxth	r3, r3
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7f9 ff82 	bl	8008c20 <lwip_htons>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	f003 0301 	and.w	r3, r3, #1
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	f000 80b8 	beq.w	800ee9a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ed2a:	4b45      	ldr	r3, [pc, #276]	; (800ee40 <tcp_receive+0xb24>)
 800ed2c:	781b      	ldrb	r3, [r3, #0]
 800ed2e:	f043 0320 	orr.w	r3, r3, #32
 800ed32:	b2da      	uxtb	r2, r3
 800ed34:	4b42      	ldr	r3, [pc, #264]	; (800ee40 <tcp_receive+0xb24>)
 800ed36:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ed38:	e0af      	b.n	800ee9a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed3e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed44:	68db      	ldr	r3, [r3, #12]
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	4a36      	ldr	r2, [pc, #216]	; (800ee24 <tcp_receive+0xb08>)
 800ed4a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	891b      	ldrh	r3, [r3, #8]
 800ed50:	461c      	mov	r4, r3
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	68db      	ldr	r3, [r3, #12]
 800ed56:	899b      	ldrh	r3, [r3, #12]
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7f9 ff60 	bl	8008c20 <lwip_htons>
 800ed60:	4603      	mov	r3, r0
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	f003 0303 	and.w	r3, r3, #3
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d001      	beq.n	800ed70 <tcp_receive+0xa54>
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	e000      	b.n	800ed72 <tcp_receive+0xa56>
 800ed70:	2300      	movs	r3, #0
 800ed72:	191a      	adds	r2, r3, r4
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed78:	441a      	add	r2, r3
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed82:	461c      	mov	r4, r3
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	891b      	ldrh	r3, [r3, #8]
 800ed88:	461d      	mov	r5, r3
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	68db      	ldr	r3, [r3, #12]
 800ed8e:	899b      	ldrh	r3, [r3, #12]
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7f9 ff44 	bl	8008c20 <lwip_htons>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	b2db      	uxtb	r3, r3
 800ed9c:	f003 0303 	and.w	r3, r3, #3
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d001      	beq.n	800eda8 <tcp_receive+0xa8c>
 800eda4:	2301      	movs	r3, #1
 800eda6:	e000      	b.n	800edaa <tcp_receive+0xa8e>
 800eda8:	2300      	movs	r3, #0
 800edaa:	442b      	add	r3, r5
 800edac:	429c      	cmp	r4, r3
 800edae:	d206      	bcs.n	800edbe <tcp_receive+0xaa2>
 800edb0:	4b1e      	ldr	r3, [pc, #120]	; (800ee2c <tcp_receive+0xb10>)
 800edb2:	f240 622b 	movw	r2, #1579	; 0x62b
 800edb6:	4923      	ldr	r1, [pc, #140]	; (800ee44 <tcp_receive+0xb28>)
 800edb8:	481e      	ldr	r0, [pc, #120]	; (800ee34 <tcp_receive+0xb18>)
 800edba:	f005 faed 	bl	8014398 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	891b      	ldrh	r3, [r3, #8]
 800edc2:	461c      	mov	r4, r3
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	68db      	ldr	r3, [r3, #12]
 800edc8:	899b      	ldrh	r3, [r3, #12]
 800edca:	b29b      	uxth	r3, r3
 800edcc:	4618      	mov	r0, r3
 800edce:	f7f9 ff27 	bl	8008c20 <lwip_htons>
 800edd2:	4603      	mov	r3, r0
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	f003 0303 	and.w	r3, r3, #3
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d001      	beq.n	800ede2 <tcp_receive+0xac6>
 800edde:	2301      	movs	r3, #1
 800ede0:	e000      	b.n	800ede4 <tcp_receive+0xac8>
 800ede2:	2300      	movs	r3, #0
 800ede4:	1919      	adds	r1, r3, r4
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800edea:	b28b      	uxth	r3, r1
 800edec:	1ad3      	subs	r3, r2, r3
 800edee:	b29a      	uxth	r2, r3
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f7fc fd03 	bl	800b800 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	891b      	ldrh	r3, [r3, #8]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d028      	beq.n	800ee56 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ee04:	4b0d      	ldr	r3, [pc, #52]	; (800ee3c <tcp_receive+0xb20>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d01d      	beq.n	800ee48 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ee0c:	4b0b      	ldr	r3, [pc, #44]	; (800ee3c <tcp_receive+0xb20>)
 800ee0e:	681a      	ldr	r2, [r3, #0]
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	685b      	ldr	r3, [r3, #4]
 800ee14:	4619      	mov	r1, r3
 800ee16:	4610      	mov	r0, r2
 800ee18:	f7fb fd42 	bl	800a8a0 <pbuf_cat>
 800ee1c:	e018      	b.n	800ee50 <tcp_receive+0xb34>
 800ee1e:	bf00      	nop
 800ee20:	200007ae 	.word	0x200007ae
 800ee24:	200007a4 	.word	0x200007a4
 800ee28:	20000784 	.word	0x20000784
 800ee2c:	08016c14 	.word	0x08016c14
 800ee30:	08016ff4 	.word	0x08016ff4
 800ee34:	08016c60 	.word	0x08016c60
 800ee38:	08017030 	.word	0x08017030
 800ee3c:	200007b4 	.word	0x200007b4
 800ee40:	200007b1 	.word	0x200007b1
 800ee44:	08017050 	.word	0x08017050
            } else {
              recv_data = cseg->p;
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	4a70      	ldr	r2, [pc, #448]	; (800f010 <tcp_receive+0xcf4>)
 800ee4e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	2200      	movs	r2, #0
 800ee54:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	68db      	ldr	r3, [r3, #12]
 800ee5a:	899b      	ldrh	r3, [r3, #12]
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7f9 fede 	bl	8008c20 <lwip_htons>
 800ee64:	4603      	mov	r3, r0
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	f003 0301 	and.w	r3, r3, #1
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d00d      	beq.n	800ee8c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ee70:	4b68      	ldr	r3, [pc, #416]	; (800f014 <tcp_receive+0xcf8>)
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	f043 0320 	orr.w	r3, r3, #32
 800ee78:	b2da      	uxtb	r2, r3
 800ee7a:	4b66      	ldr	r3, [pc, #408]	; (800f014 <tcp_receive+0xcf8>)
 800ee7c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	7d1b      	ldrb	r3, [r3, #20]
 800ee82:	2b04      	cmp	r3, #4
 800ee84:	d102      	bne.n	800ee8c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2207      	movs	r2, #7
 800ee8a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ee94:	68b8      	ldr	r0, [r7, #8]
 800ee96:	f7fd faf0 	bl	800c47a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d008      	beq.n	800eeb4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eea6:	68db      	ldr	r3, [r3, #12]
 800eea8:	685a      	ldr	r2, [r3, #4]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	f43f af43 	beq.w	800ed3a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	8b5b      	ldrh	r3, [r3, #26]
 800eeb8:	f003 0301 	and.w	r3, r3, #1
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d00e      	beq.n	800eede <tcp_receive+0xbc2>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	8b5b      	ldrh	r3, [r3, #26]
 800eec4:	f023 0301 	bic.w	r3, r3, #1
 800eec8:	b29a      	uxth	r2, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	835a      	strh	r2, [r3, #26]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	8b5b      	ldrh	r3, [r3, #26]
 800eed2:	f043 0302 	orr.w	r3, r3, #2
 800eed6:	b29a      	uxth	r2, r3
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800eedc:	e188      	b.n	800f1f0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	8b5b      	ldrh	r3, [r3, #26]
 800eee2:	f043 0301 	orr.w	r3, r3, #1
 800eee6:	b29a      	uxth	r2, r3
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800eeec:	e180      	b.n	800f1f0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d106      	bne.n	800ef04 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800eef6:	4848      	ldr	r0, [pc, #288]	; (800f018 <tcp_receive+0xcfc>)
 800eef8:	f7fd faf6 	bl	800c4e8 <tcp_seg_copy>
 800eefc:	4602      	mov	r2, r0
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	675a      	str	r2, [r3, #116]	; 0x74
 800ef02:	e16d      	b.n	800f1e0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ef04:	2300      	movs	r3, #0
 800ef06:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef0e:	e157      	b.n	800f1c0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800ef10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef12:	68db      	ldr	r3, [r3, #12]
 800ef14:	685a      	ldr	r2, [r3, #4]
 800ef16:	4b41      	ldr	r3, [pc, #260]	; (800f01c <tcp_receive+0xd00>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d11d      	bne.n	800ef5a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ef1e:	4b3e      	ldr	r3, [pc, #248]	; (800f018 <tcp_receive+0xcfc>)
 800ef20:	891a      	ldrh	r2, [r3, #8]
 800ef22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef24:	891b      	ldrh	r3, [r3, #8]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	f240 814f 	bls.w	800f1ca <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ef2c:	483a      	ldr	r0, [pc, #232]	; (800f018 <tcp_receive+0xcfc>)
 800ef2e:	f7fd fadb 	bl	800c4e8 <tcp_seg_copy>
 800ef32:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	f000 8149 	beq.w	800f1ce <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800ef3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d003      	beq.n	800ef4a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ef42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef44:	697a      	ldr	r2, [r7, #20]
 800ef46:	601a      	str	r2, [r3, #0]
 800ef48:	e002      	b.n	800ef50 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	697a      	ldr	r2, [r7, #20]
 800ef4e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ef50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef52:	6978      	ldr	r0, [r7, #20]
 800ef54:	f7ff f8de 	bl	800e114 <tcp_oos_insert_segment>
                }
                break;
 800ef58:	e139      	b.n	800f1ce <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ef5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d117      	bne.n	800ef90 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ef60:	4b2e      	ldr	r3, [pc, #184]	; (800f01c <tcp_receive+0xd00>)
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef66:	68db      	ldr	r3, [r3, #12]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	1ad3      	subs	r3, r2, r3
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	da57      	bge.n	800f020 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ef70:	4829      	ldr	r0, [pc, #164]	; (800f018 <tcp_receive+0xcfc>)
 800ef72:	f7fd fab9 	bl	800c4e8 <tcp_seg_copy>
 800ef76:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f000 8129 	beq.w	800f1d2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	69ba      	ldr	r2, [r7, #24]
 800ef84:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ef86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef88:	69b8      	ldr	r0, [r7, #24]
 800ef8a:	f7ff f8c3 	bl	800e114 <tcp_oos_insert_segment>
                  }
                  break;
 800ef8e:	e120      	b.n	800f1d2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ef90:	4b22      	ldr	r3, [pc, #136]	; (800f01c <tcp_receive+0xd00>)
 800ef92:	681a      	ldr	r2, [r3, #0]
 800ef94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	1ad3      	subs	r3, r2, r3
 800ef9c:	3b01      	subs	r3, #1
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	db3e      	blt.n	800f020 <tcp_receive+0xd04>
 800efa2:	4b1e      	ldr	r3, [pc, #120]	; (800f01c <tcp_receive+0xd00>)
 800efa4:	681a      	ldr	r2, [r3, #0]
 800efa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa8:	68db      	ldr	r3, [r3, #12]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	1ad3      	subs	r3, r2, r3
 800efae:	3301      	adds	r3, #1
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	dc35      	bgt.n	800f020 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800efb4:	4818      	ldr	r0, [pc, #96]	; (800f018 <tcp_receive+0xcfc>)
 800efb6:	f7fd fa97 	bl	800c4e8 <tcp_seg_copy>
 800efba:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	f000 8109 	beq.w	800f1d6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800efc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efcc:	8912      	ldrh	r2, [r2, #8]
 800efce:	441a      	add	r2, r3
 800efd0:	4b12      	ldr	r3, [pc, #72]	; (800f01c <tcp_receive+0xd00>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	1ad3      	subs	r3, r2, r3
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	dd12      	ble.n	800f000 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800efda:	4b10      	ldr	r3, [pc, #64]	; (800f01c <tcp_receive+0xd00>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	b29a      	uxth	r2, r3
 800efe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efe2:	68db      	ldr	r3, [r3, #12]
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	1ad3      	subs	r3, r2, r3
 800efea:	b29a      	uxth	r2, r3
 800efec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800eff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eff2:	685a      	ldr	r2, [r3, #4]
 800eff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eff6:	891b      	ldrh	r3, [r3, #8]
 800eff8:	4619      	mov	r1, r3
 800effa:	4610      	mov	r0, r2
 800effc:	f7fb fa08 	bl	800a410 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f002:	69fa      	ldr	r2, [r7, #28]
 800f004:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f006:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f008:	69f8      	ldr	r0, [r7, #28]
 800f00a:	f7ff f883 	bl	800e114 <tcp_oos_insert_segment>
                  }
                  break;
 800f00e:	e0e2      	b.n	800f1d6 <tcp_receive+0xeba>
 800f010:	200007b4 	.word	0x200007b4
 800f014:	200007b1 	.word	0x200007b1
 800f018:	20000784 	.word	0x20000784
 800f01c:	200007a4 	.word	0x200007a4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f022:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	f040 80c6 	bne.w	800f1ba <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f02e:	4b80      	ldr	r3, [pc, #512]	; (800f230 <tcp_receive+0xf14>)
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f034:	68db      	ldr	r3, [r3, #12]
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	f340 80bd 	ble.w	800f1ba <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f042:	68db      	ldr	r3, [r3, #12]
 800f044:	899b      	ldrh	r3, [r3, #12]
 800f046:	b29b      	uxth	r3, r3
 800f048:	4618      	mov	r0, r3
 800f04a:	f7f9 fde9 	bl	8008c20 <lwip_htons>
 800f04e:	4603      	mov	r3, r0
 800f050:	b2db      	uxtb	r3, r3
 800f052:	f003 0301 	and.w	r3, r3, #1
 800f056:	2b00      	cmp	r3, #0
 800f058:	f040 80bf 	bne.w	800f1da <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f05c:	4875      	ldr	r0, [pc, #468]	; (800f234 <tcp_receive+0xf18>)
 800f05e:	f7fd fa43 	bl	800c4e8 <tcp_seg_copy>
 800f062:	4602      	mov	r2, r0
 800f064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f066:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	f000 80b6 	beq.w	800f1de <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f074:	68db      	ldr	r3, [r3, #12]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f07a:	8912      	ldrh	r2, [r2, #8]
 800f07c:	441a      	add	r2, r3
 800f07e:	4b6c      	ldr	r3, [pc, #432]	; (800f230 <tcp_receive+0xf14>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	1ad3      	subs	r3, r2, r3
 800f084:	2b00      	cmp	r3, #0
 800f086:	dd12      	ble.n	800f0ae <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f088:	4b69      	ldr	r3, [pc, #420]	; (800f230 <tcp_receive+0xf14>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	b29a      	uxth	r2, r3
 800f08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f090:	68db      	ldr	r3, [r3, #12]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	b29b      	uxth	r3, r3
 800f096:	1ad3      	subs	r3, r2, r3
 800f098:	b29a      	uxth	r2, r3
 800f09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a0:	685a      	ldr	r2, [r3, #4]
 800f0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a4:	891b      	ldrh	r3, [r3, #8]
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	4610      	mov	r0, r2
 800f0aa:	f7fb f9b1 	bl	800a410 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f0ae:	4b62      	ldr	r3, [pc, #392]	; (800f238 <tcp_receive+0xf1c>)
 800f0b0:	881b      	ldrh	r3, [r3, #0]
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	4b5e      	ldr	r3, [pc, #376]	; (800f230 <tcp_receive+0xf14>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	441a      	add	r2, r3
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0be:	6879      	ldr	r1, [r7, #4]
 800f0c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f0c2:	440b      	add	r3, r1
 800f0c4:	1ad3      	subs	r3, r2, r3
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	f340 8089 	ble.w	800f1de <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	68db      	ldr	r3, [r3, #12]
 800f0d2:	899b      	ldrh	r3, [r3, #12]
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7f9 fda2 	bl	8008c20 <lwip_htons>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	f003 0301 	and.w	r3, r3, #1
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d022      	beq.n	800f12e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	68db      	ldr	r3, [r3, #12]
 800f0ee:	899b      	ldrh	r3, [r3, #12]
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	b21b      	sxth	r3, r3
 800f0f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f0f8:	b21c      	sxth	r4, r3
 800f0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	68db      	ldr	r3, [r3, #12]
 800f100:	899b      	ldrh	r3, [r3, #12]
 800f102:	b29b      	uxth	r3, r3
 800f104:	4618      	mov	r0, r3
 800f106:	f7f9 fd8b 	bl	8008c20 <lwip_htons>
 800f10a:	4603      	mov	r3, r0
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	b29b      	uxth	r3, r3
 800f110:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f114:	b29b      	uxth	r3, r3
 800f116:	4618      	mov	r0, r3
 800f118:	f7f9 fd82 	bl	8008c20 <lwip_htons>
 800f11c:	4603      	mov	r3, r0
 800f11e:	b21b      	sxth	r3, r3
 800f120:	4323      	orrs	r3, r4
 800f122:	b21a      	sxth	r2, r3
 800f124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	68db      	ldr	r3, [r3, #12]
 800f12a:	b292      	uxth	r2, r2
 800f12c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f132:	b29a      	uxth	r2, r3
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f138:	4413      	add	r3, r2
 800f13a:	b299      	uxth	r1, r3
 800f13c:	4b3c      	ldr	r3, [pc, #240]	; (800f230 <tcp_receive+0xf14>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	b29a      	uxth	r2, r3
 800f142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	1a8a      	subs	r2, r1, r2
 800f148:	b292      	uxth	r2, r2
 800f14a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	685a      	ldr	r2, [r3, #4]
 800f152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	891b      	ldrh	r3, [r3, #8]
 800f158:	4619      	mov	r1, r3
 800f15a:	4610      	mov	r0, r2
 800f15c:	f7fb f958 	bl	800a410 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	891c      	ldrh	r4, [r3, #8]
 800f166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	899b      	ldrh	r3, [r3, #12]
 800f16e:	b29b      	uxth	r3, r3
 800f170:	4618      	mov	r0, r3
 800f172:	f7f9 fd55 	bl	8008c20 <lwip_htons>
 800f176:	4603      	mov	r3, r0
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	f003 0303 	and.w	r3, r3, #3
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d001      	beq.n	800f186 <tcp_receive+0xe6a>
 800f182:	2301      	movs	r3, #1
 800f184:	e000      	b.n	800f188 <tcp_receive+0xe6c>
 800f186:	2300      	movs	r3, #0
 800f188:	4423      	add	r3, r4
 800f18a:	b29a      	uxth	r2, r3
 800f18c:	4b2a      	ldr	r3, [pc, #168]	; (800f238 <tcp_receive+0xf1c>)
 800f18e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f190:	4b29      	ldr	r3, [pc, #164]	; (800f238 <tcp_receive+0xf1c>)
 800f192:	881b      	ldrh	r3, [r3, #0]
 800f194:	461a      	mov	r2, r3
 800f196:	4b26      	ldr	r3, [pc, #152]	; (800f230 <tcp_receive+0xf14>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	441a      	add	r2, r3
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a0:	6879      	ldr	r1, [r7, #4]
 800f1a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f1a4:	440b      	add	r3, r1
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d019      	beq.n	800f1de <tcp_receive+0xec2>
 800f1aa:	4b24      	ldr	r3, [pc, #144]	; (800f23c <tcp_receive+0xf20>)
 800f1ac:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f1b0:	4923      	ldr	r1, [pc, #140]	; (800f240 <tcp_receive+0xf24>)
 800f1b2:	4824      	ldr	r0, [pc, #144]	; (800f244 <tcp_receive+0xf28>)
 800f1b4:	f005 f8f0 	bl	8014398 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f1b8:	e011      	b.n	800f1de <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	f47f aea4 	bne.w	800ef10 <tcp_receive+0xbf4>
 800f1c8:	e00a      	b.n	800f1e0 <tcp_receive+0xec4>
                break;
 800f1ca:	bf00      	nop
 800f1cc:	e008      	b.n	800f1e0 <tcp_receive+0xec4>
                break;
 800f1ce:	bf00      	nop
 800f1d0:	e006      	b.n	800f1e0 <tcp_receive+0xec4>
                  break;
 800f1d2:	bf00      	nop
 800f1d4:	e004      	b.n	800f1e0 <tcp_receive+0xec4>
                  break;
 800f1d6:	bf00      	nop
 800f1d8:	e002      	b.n	800f1e0 <tcp_receive+0xec4>
                  break;
 800f1da:	bf00      	nop
 800f1dc:	e000      	b.n	800f1e0 <tcp_receive+0xec4>
                break;
 800f1de:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f001 fe8b 	bl	8010efc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f1e6:	e003      	b.n	800f1f0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f001 fe87 	bl	8010efc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f1ee:	e01a      	b.n	800f226 <tcp_receive+0xf0a>
 800f1f0:	e019      	b.n	800f226 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f1f2:	4b0f      	ldr	r3, [pc, #60]	; (800f230 <tcp_receive+0xf14>)
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1fa:	1ad3      	subs	r3, r2, r3
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	db0a      	blt.n	800f216 <tcp_receive+0xefa>
 800f200:	4b0b      	ldr	r3, [pc, #44]	; (800f230 <tcp_receive+0xf14>)
 800f202:	681a      	ldr	r2, [r3, #0]
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f208:	6879      	ldr	r1, [r7, #4]
 800f20a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f20c:	440b      	add	r3, r1
 800f20e:	1ad3      	subs	r3, r2, r3
 800f210:	3301      	adds	r3, #1
 800f212:	2b00      	cmp	r3, #0
 800f214:	dd07      	ble.n	800f226 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	8b5b      	ldrh	r3, [r3, #26]
 800f21a:	f043 0302 	orr.w	r3, r3, #2
 800f21e:	b29a      	uxth	r2, r3
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f224:	e7ff      	b.n	800f226 <tcp_receive+0xf0a>
 800f226:	bf00      	nop
 800f228:	3750      	adds	r7, #80	; 0x50
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bdb0      	pop	{r4, r5, r7, pc}
 800f22e:	bf00      	nop
 800f230:	200007a4 	.word	0x200007a4
 800f234:	20000784 	.word	0x20000784
 800f238:	200007ae 	.word	0x200007ae
 800f23c:	08016c14 	.word	0x08016c14
 800f240:	08016fbc 	.word	0x08016fbc
 800f244:	08016c60 	.word	0x08016c60

0800f248 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f248:	b480      	push	{r7}
 800f24a:	b083      	sub	sp, #12
 800f24c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f24e:	4b15      	ldr	r3, [pc, #84]	; (800f2a4 <tcp_get_next_optbyte+0x5c>)
 800f250:	881b      	ldrh	r3, [r3, #0]
 800f252:	1c5a      	adds	r2, r3, #1
 800f254:	b291      	uxth	r1, r2
 800f256:	4a13      	ldr	r2, [pc, #76]	; (800f2a4 <tcp_get_next_optbyte+0x5c>)
 800f258:	8011      	strh	r1, [r2, #0]
 800f25a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f25c:	4b12      	ldr	r3, [pc, #72]	; (800f2a8 <tcp_get_next_optbyte+0x60>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d004      	beq.n	800f26e <tcp_get_next_optbyte+0x26>
 800f264:	4b11      	ldr	r3, [pc, #68]	; (800f2ac <tcp_get_next_optbyte+0x64>)
 800f266:	881b      	ldrh	r3, [r3, #0]
 800f268:	88fa      	ldrh	r2, [r7, #6]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d208      	bcs.n	800f280 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f26e:	4b10      	ldr	r3, [pc, #64]	; (800f2b0 <tcp_get_next_optbyte+0x68>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	3314      	adds	r3, #20
 800f274:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f276:	88fb      	ldrh	r3, [r7, #6]
 800f278:	683a      	ldr	r2, [r7, #0]
 800f27a:	4413      	add	r3, r2
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	e00b      	b.n	800f298 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f280:	88fb      	ldrh	r3, [r7, #6]
 800f282:	b2da      	uxtb	r2, r3
 800f284:	4b09      	ldr	r3, [pc, #36]	; (800f2ac <tcp_get_next_optbyte+0x64>)
 800f286:	881b      	ldrh	r3, [r3, #0]
 800f288:	b2db      	uxtb	r3, r3
 800f28a:	1ad3      	subs	r3, r2, r3
 800f28c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f28e:	4b06      	ldr	r3, [pc, #24]	; (800f2a8 <tcp_get_next_optbyte+0x60>)
 800f290:	681a      	ldr	r2, [r3, #0]
 800f292:	797b      	ldrb	r3, [r7, #5]
 800f294:	4413      	add	r3, r2
 800f296:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f298:	4618      	mov	r0, r3
 800f29a:	370c      	adds	r7, #12
 800f29c:	46bd      	mov	sp, r7
 800f29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a2:	4770      	bx	lr
 800f2a4:	200007a0 	.word	0x200007a0
 800f2a8:	2000079c 	.word	0x2000079c
 800f2ac:	2000079a 	.word	0x2000079a
 800f2b0:	20000794 	.word	0x20000794

0800f2b4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d106      	bne.n	800f2d0 <tcp_parseopt+0x1c>
 800f2c2:	4b32      	ldr	r3, [pc, #200]	; (800f38c <tcp_parseopt+0xd8>)
 800f2c4:	f240 727d 	movw	r2, #1917	; 0x77d
 800f2c8:	4931      	ldr	r1, [pc, #196]	; (800f390 <tcp_parseopt+0xdc>)
 800f2ca:	4832      	ldr	r0, [pc, #200]	; (800f394 <tcp_parseopt+0xe0>)
 800f2cc:	f005 f864 	bl	8014398 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f2d0:	4b31      	ldr	r3, [pc, #196]	; (800f398 <tcp_parseopt+0xe4>)
 800f2d2:	881b      	ldrh	r3, [r3, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d055      	beq.n	800f384 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f2d8:	4b30      	ldr	r3, [pc, #192]	; (800f39c <tcp_parseopt+0xe8>)
 800f2da:	2200      	movs	r2, #0
 800f2dc:	801a      	strh	r2, [r3, #0]
 800f2de:	e045      	b.n	800f36c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f2e0:	f7ff ffb2 	bl	800f248 <tcp_get_next_optbyte>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f2e8:	7bfb      	ldrb	r3, [r7, #15]
 800f2ea:	2b02      	cmp	r3, #2
 800f2ec:	d006      	beq.n	800f2fc <tcp_parseopt+0x48>
 800f2ee:	2b02      	cmp	r3, #2
 800f2f0:	dc2b      	bgt.n	800f34a <tcp_parseopt+0x96>
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d041      	beq.n	800f37a <tcp_parseopt+0xc6>
 800f2f6:	2b01      	cmp	r3, #1
 800f2f8:	d127      	bne.n	800f34a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f2fa:	e037      	b.n	800f36c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f2fc:	f7ff ffa4 	bl	800f248 <tcp_get_next_optbyte>
 800f300:	4603      	mov	r3, r0
 800f302:	2b04      	cmp	r3, #4
 800f304:	d13b      	bne.n	800f37e <tcp_parseopt+0xca>
 800f306:	4b25      	ldr	r3, [pc, #148]	; (800f39c <tcp_parseopt+0xe8>)
 800f308:	881b      	ldrh	r3, [r3, #0]
 800f30a:	3301      	adds	r3, #1
 800f30c:	4a22      	ldr	r2, [pc, #136]	; (800f398 <tcp_parseopt+0xe4>)
 800f30e:	8812      	ldrh	r2, [r2, #0]
 800f310:	4293      	cmp	r3, r2
 800f312:	da34      	bge.n	800f37e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f314:	f7ff ff98 	bl	800f248 <tcp_get_next_optbyte>
 800f318:	4603      	mov	r3, r0
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	021b      	lsls	r3, r3, #8
 800f31e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f320:	f7ff ff92 	bl	800f248 <tcp_get_next_optbyte>
 800f324:	4603      	mov	r3, r0
 800f326:	b29a      	uxth	r2, r3
 800f328:	89bb      	ldrh	r3, [r7, #12]
 800f32a:	4313      	orrs	r3, r2
 800f32c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f32e:	89bb      	ldrh	r3, [r7, #12]
 800f330:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f334:	d804      	bhi.n	800f340 <tcp_parseopt+0x8c>
 800f336:	89bb      	ldrh	r3, [r7, #12]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d001      	beq.n	800f340 <tcp_parseopt+0x8c>
 800f33c:	89ba      	ldrh	r2, [r7, #12]
 800f33e:	e001      	b.n	800f344 <tcp_parseopt+0x90>
 800f340:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f348:	e010      	b.n	800f36c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f34a:	f7ff ff7d 	bl	800f248 <tcp_get_next_optbyte>
 800f34e:	4603      	mov	r3, r0
 800f350:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f352:	7afb      	ldrb	r3, [r7, #11]
 800f354:	2b01      	cmp	r3, #1
 800f356:	d914      	bls.n	800f382 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f358:	7afb      	ldrb	r3, [r7, #11]
 800f35a:	b29a      	uxth	r2, r3
 800f35c:	4b0f      	ldr	r3, [pc, #60]	; (800f39c <tcp_parseopt+0xe8>)
 800f35e:	881b      	ldrh	r3, [r3, #0]
 800f360:	4413      	add	r3, r2
 800f362:	b29b      	uxth	r3, r3
 800f364:	3b02      	subs	r3, #2
 800f366:	b29a      	uxth	r2, r3
 800f368:	4b0c      	ldr	r3, [pc, #48]	; (800f39c <tcp_parseopt+0xe8>)
 800f36a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f36c:	4b0b      	ldr	r3, [pc, #44]	; (800f39c <tcp_parseopt+0xe8>)
 800f36e:	881a      	ldrh	r2, [r3, #0]
 800f370:	4b09      	ldr	r3, [pc, #36]	; (800f398 <tcp_parseopt+0xe4>)
 800f372:	881b      	ldrh	r3, [r3, #0]
 800f374:	429a      	cmp	r2, r3
 800f376:	d3b3      	bcc.n	800f2e0 <tcp_parseopt+0x2c>
 800f378:	e004      	b.n	800f384 <tcp_parseopt+0xd0>
          return;
 800f37a:	bf00      	nop
 800f37c:	e002      	b.n	800f384 <tcp_parseopt+0xd0>
            return;
 800f37e:	bf00      	nop
 800f380:	e000      	b.n	800f384 <tcp_parseopt+0xd0>
            return;
 800f382:	bf00      	nop
      }
    }
  }
}
 800f384:	3710      	adds	r7, #16
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	08016c14 	.word	0x08016c14
 800f390:	08017078 	.word	0x08017078
 800f394:	08016c60 	.word	0x08016c60
 800f398:	20000798 	.word	0x20000798
 800f39c:	200007a0 	.word	0x200007a0

0800f3a0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f3a4:	4b05      	ldr	r3, [pc, #20]	; (800f3bc <tcp_trigger_input_pcb_close+0x1c>)
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	f043 0310 	orr.w	r3, r3, #16
 800f3ac:	b2da      	uxtb	r2, r3
 800f3ae:	4b03      	ldr	r3, [pc, #12]	; (800f3bc <tcp_trigger_input_pcb_close+0x1c>)
 800f3b0:	701a      	strb	r2, [r3, #0]
}
 800f3b2:	bf00      	nop
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr
 800f3bc:	200007b1 	.word	0x200007b1

0800f3c0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b084      	sub	sp, #16
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d00a      	beq.n	800f3e8 <tcp_route+0x28>
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	7a1b      	ldrb	r3, [r3, #8]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d006      	beq.n	800f3e8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	7a1b      	ldrb	r3, [r3, #8]
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fa fe3c 	bl	800a05c <netif_get_by_index>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	e003      	b.n	800f3f0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f003 fd8d 	bl	8012f08 <ip4_route>
 800f3ee:	4603      	mov	r3, r0
  }
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3710      	adds	r7, #16
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f3f8:	b590      	push	{r4, r7, lr}
 800f3fa:	b087      	sub	sp, #28
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	60b9      	str	r1, [r7, #8]
 800f402:	603b      	str	r3, [r7, #0]
 800f404:	4613      	mov	r3, r2
 800f406:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d105      	bne.n	800f41a <tcp_create_segment+0x22>
 800f40e:	4b44      	ldr	r3, [pc, #272]	; (800f520 <tcp_create_segment+0x128>)
 800f410:	22a3      	movs	r2, #163	; 0xa3
 800f412:	4944      	ldr	r1, [pc, #272]	; (800f524 <tcp_create_segment+0x12c>)
 800f414:	4844      	ldr	r0, [pc, #272]	; (800f528 <tcp_create_segment+0x130>)
 800f416:	f004 ffbf 	bl	8014398 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d105      	bne.n	800f42c <tcp_create_segment+0x34>
 800f420:	4b3f      	ldr	r3, [pc, #252]	; (800f520 <tcp_create_segment+0x128>)
 800f422:	22a4      	movs	r2, #164	; 0xa4
 800f424:	4941      	ldr	r1, [pc, #260]	; (800f52c <tcp_create_segment+0x134>)
 800f426:	4840      	ldr	r0, [pc, #256]	; (800f528 <tcp_create_segment+0x130>)
 800f428:	f004 ffb6 	bl	8014398 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f42c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f430:	009b      	lsls	r3, r3, #2
 800f432:	b2db      	uxtb	r3, r3
 800f434:	f003 0304 	and.w	r3, r3, #4
 800f438:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f43a:	2003      	movs	r0, #3
 800f43c:	f7fa fb10 	bl	8009a60 <memp_malloc>
 800f440:	6138      	str	r0, [r7, #16]
 800f442:	693b      	ldr	r3, [r7, #16]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d104      	bne.n	800f452 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f448:	68b8      	ldr	r0, [r7, #8]
 800f44a:	f7fb f967 	bl	800a71c <pbuf_free>
    return NULL;
 800f44e:	2300      	movs	r3, #0
 800f450:	e061      	b.n	800f516 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f458:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	2200      	movs	r2, #0
 800f45e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	68ba      	ldr	r2, [r7, #8]
 800f464:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	891a      	ldrh	r2, [r3, #8]
 800f46a:	7dfb      	ldrb	r3, [r7, #23]
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	429a      	cmp	r2, r3
 800f470:	d205      	bcs.n	800f47e <tcp_create_segment+0x86>
 800f472:	4b2b      	ldr	r3, [pc, #172]	; (800f520 <tcp_create_segment+0x128>)
 800f474:	22b0      	movs	r2, #176	; 0xb0
 800f476:	492e      	ldr	r1, [pc, #184]	; (800f530 <tcp_create_segment+0x138>)
 800f478:	482b      	ldr	r0, [pc, #172]	; (800f528 <tcp_create_segment+0x130>)
 800f47a:	f004 ff8d 	bl	8014398 <iprintf>
  seg->len = p->tot_len - optlen;
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	891a      	ldrh	r2, [r3, #8]
 800f482:	7dfb      	ldrb	r3, [r7, #23]
 800f484:	b29b      	uxth	r3, r3
 800f486:	1ad3      	subs	r3, r2, r3
 800f488:	b29a      	uxth	r2, r3
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f48e:	2114      	movs	r1, #20
 800f490:	68b8      	ldr	r0, [r7, #8]
 800f492:	f7fb f8ad 	bl	800a5f0 <pbuf_add_header>
 800f496:	4603      	mov	r3, r0
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d004      	beq.n	800f4a6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f49c:	6938      	ldr	r0, [r7, #16]
 800f49e:	f7fc ffec 	bl	800c47a <tcp_seg_free>
    return NULL;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	e037      	b.n	800f516 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	685b      	ldr	r3, [r3, #4]
 800f4aa:	685a      	ldr	r2, [r3, #4]
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	8ada      	ldrh	r2, [r3, #22]
 800f4b4:	693b      	ldr	r3, [r7, #16]
 800f4b6:	68dc      	ldr	r4, [r3, #12]
 800f4b8:	4610      	mov	r0, r2
 800f4ba:	f7f9 fbb1 	bl	8008c20 <lwip_htons>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	8b1a      	ldrh	r2, [r3, #24]
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	68dc      	ldr	r4, [r3, #12]
 800f4ca:	4610      	mov	r0, r2
 800f4cc:	f7f9 fba8 	bl	8008c20 <lwip_htons>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	68dc      	ldr	r4, [r3, #12]
 800f4d8:	6838      	ldr	r0, [r7, #0]
 800f4da:	f7f9 fbb6 	bl	8008c4a <lwip_htonl>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f4e2:	7dfb      	ldrb	r3, [r7, #23]
 800f4e4:	089b      	lsrs	r3, r3, #2
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	3305      	adds	r3, #5
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	031b      	lsls	r3, r3, #12
 800f4f0:	b29a      	uxth	r2, r3
 800f4f2:	79fb      	ldrb	r3, [r7, #7]
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	4313      	orrs	r3, r2
 800f4f8:	b29a      	uxth	r2, r3
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	68dc      	ldr	r4, [r3, #12]
 800f4fe:	4610      	mov	r0, r2
 800f500:	f7f9 fb8e 	bl	8008c20 <lwip_htons>
 800f504:	4603      	mov	r3, r0
 800f506:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	68db      	ldr	r3, [r3, #12]
 800f50c:	2200      	movs	r2, #0
 800f50e:	749a      	strb	r2, [r3, #18]
 800f510:	2200      	movs	r2, #0
 800f512:	74da      	strb	r2, [r3, #19]
  return seg;
 800f514:	693b      	ldr	r3, [r7, #16]
}
 800f516:	4618      	mov	r0, r3
 800f518:	371c      	adds	r7, #28
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd90      	pop	{r4, r7, pc}
 800f51e:	bf00      	nop
 800f520:	08017094 	.word	0x08017094
 800f524:	080170c8 	.word	0x080170c8
 800f528:	080170e8 	.word	0x080170e8
 800f52c:	08017110 	.word	0x08017110
 800f530:	08017134 	.word	0x08017134

0800f534 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b086      	sub	sp, #24
 800f538:	af00      	add	r7, sp, #0
 800f53a:	607b      	str	r3, [r7, #4]
 800f53c:	4603      	mov	r3, r0
 800f53e:	73fb      	strb	r3, [r7, #15]
 800f540:	460b      	mov	r3, r1
 800f542:	81bb      	strh	r3, [r7, #12]
 800f544:	4613      	mov	r3, r2
 800f546:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800f548:	89bb      	ldrh	r3, [r7, #12]
 800f54a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d105      	bne.n	800f55e <tcp_pbuf_prealloc+0x2a>
 800f552:	4b30      	ldr	r3, [pc, #192]	; (800f614 <tcp_pbuf_prealloc+0xe0>)
 800f554:	22e8      	movs	r2, #232	; 0xe8
 800f556:	4930      	ldr	r1, [pc, #192]	; (800f618 <tcp_pbuf_prealloc+0xe4>)
 800f558:	4830      	ldr	r0, [pc, #192]	; (800f61c <tcp_pbuf_prealloc+0xe8>)
 800f55a:	f004 ff1d 	bl	8014398 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800f55e:	6a3b      	ldr	r3, [r7, #32]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d105      	bne.n	800f570 <tcp_pbuf_prealloc+0x3c>
 800f564:	4b2b      	ldr	r3, [pc, #172]	; (800f614 <tcp_pbuf_prealloc+0xe0>)
 800f566:	22e9      	movs	r2, #233	; 0xe9
 800f568:	492d      	ldr	r1, [pc, #180]	; (800f620 <tcp_pbuf_prealloc+0xec>)
 800f56a:	482c      	ldr	r0, [pc, #176]	; (800f61c <tcp_pbuf_prealloc+0xe8>)
 800f56c:	f004 ff14 	bl	8014398 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800f570:	89ba      	ldrh	r2, [r7, #12]
 800f572:	897b      	ldrh	r3, [r7, #10]
 800f574:	429a      	cmp	r2, r3
 800f576:	d221      	bcs.n	800f5bc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f578:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f57c:	f003 0302 	and.w	r3, r3, #2
 800f580:	2b00      	cmp	r3, #0
 800f582:	d111      	bne.n	800f5a8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800f584:	6a3b      	ldr	r3, [r7, #32]
 800f586:	8b5b      	ldrh	r3, [r3, #26]
 800f588:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d115      	bne.n	800f5bc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800f590:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f594:	2b00      	cmp	r3, #0
 800f596:	d007      	beq.n	800f5a8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800f598:	6a3b      	ldr	r3, [r7, #32]
 800f59a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d103      	bne.n	800f5a8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800f5a0:	6a3b      	ldr	r3, [r7, #32]
 800f5a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d009      	beq.n	800f5bc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800f5a8:	89bb      	ldrh	r3, [r7, #12]
 800f5aa:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f5ae:	f023 0203 	bic.w	r2, r3, #3
 800f5b2:	897b      	ldrh	r3, [r7, #10]
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	bf28      	it	cs
 800f5b8:	4613      	movcs	r3, r2
 800f5ba:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800f5bc:	8af9      	ldrh	r1, [r7, #22]
 800f5be:	7bfb      	ldrb	r3, [r7, #15]
 800f5c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f7fa fdc5 	bl	800a154 <pbuf_alloc>
 800f5ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d101      	bne.n	800f5d6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	e019      	b.n	800f60a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800f5d6:	693b      	ldr	r3, [r7, #16]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d006      	beq.n	800f5ec <tcp_pbuf_prealloc+0xb8>
 800f5de:	4b0d      	ldr	r3, [pc, #52]	; (800f614 <tcp_pbuf_prealloc+0xe0>)
 800f5e0:	f240 120b 	movw	r2, #267	; 0x10b
 800f5e4:	490f      	ldr	r1, [pc, #60]	; (800f624 <tcp_pbuf_prealloc+0xf0>)
 800f5e6:	480d      	ldr	r0, [pc, #52]	; (800f61c <tcp_pbuf_prealloc+0xe8>)
 800f5e8:	f004 fed6 	bl	8014398 <iprintf>
  *oversize = p->len - length;
 800f5ec:	693b      	ldr	r3, [r7, #16]
 800f5ee:	895a      	ldrh	r2, [r3, #10]
 800f5f0:	89bb      	ldrh	r3, [r7, #12]
 800f5f2:	1ad3      	subs	r3, r2, r3
 800f5f4:	b29a      	uxth	r2, r3
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	89ba      	ldrh	r2, [r7, #12]
 800f5fe:	811a      	strh	r2, [r3, #8]
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	891a      	ldrh	r2, [r3, #8]
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	815a      	strh	r2, [r3, #10]
  return p;
 800f608:	693b      	ldr	r3, [r7, #16]
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	3718      	adds	r7, #24
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop
 800f614:	08017094 	.word	0x08017094
 800f618:	0801714c 	.word	0x0801714c
 800f61c:	080170e8 	.word	0x080170e8
 800f620:	08017170 	.word	0x08017170
 800f624:	08017190 	.word	0x08017190

0800f628 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	460b      	mov	r3, r1
 800f632:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d106      	bne.n	800f648 <tcp_write_checks+0x20>
 800f63a:	4b33      	ldr	r3, [pc, #204]	; (800f708 <tcp_write_checks+0xe0>)
 800f63c:	f240 1233 	movw	r2, #307	; 0x133
 800f640:	4932      	ldr	r1, [pc, #200]	; (800f70c <tcp_write_checks+0xe4>)
 800f642:	4833      	ldr	r0, [pc, #204]	; (800f710 <tcp_write_checks+0xe8>)
 800f644:	f004 fea8 	bl	8014398 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	7d1b      	ldrb	r3, [r3, #20]
 800f64c:	2b04      	cmp	r3, #4
 800f64e:	d00e      	beq.n	800f66e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800f654:	2b07      	cmp	r3, #7
 800f656:	d00a      	beq.n	800f66e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800f65c:	2b02      	cmp	r3, #2
 800f65e:	d006      	beq.n	800f66e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800f664:	2b03      	cmp	r3, #3
 800f666:	d002      	beq.n	800f66e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800f668:	f06f 030a 	mvn.w	r3, #10
 800f66c:	e048      	b.n	800f700 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800f66e:	887b      	ldrh	r3, [r7, #2]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d101      	bne.n	800f678 <tcp_write_checks+0x50>
    return ERR_OK;
 800f674:	2300      	movs	r3, #0
 800f676:	e043      	b.n	800f700 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f67e:	887a      	ldrh	r2, [r7, #2]
 800f680:	429a      	cmp	r2, r3
 800f682:	d909      	bls.n	800f698 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	8b5b      	ldrh	r3, [r3, #26]
 800f688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f68c:	b29a      	uxth	r2, r3
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800f692:	f04f 33ff 	mov.w	r3, #4294967295
 800f696:	e033      	b.n	800f700 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f69e:	2b08      	cmp	r3, #8
 800f6a0:	d909      	bls.n	800f6b6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	8b5b      	ldrh	r3, [r3, #26]
 800f6a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6aa:	b29a      	uxth	r2, r3
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800f6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f6b4:	e024      	b.n	800f700 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d00f      	beq.n	800f6e0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d11a      	bne.n	800f6fe <tcp_write_checks+0xd6>
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d116      	bne.n	800f6fe <tcp_write_checks+0xd6>
 800f6d0:	4b0d      	ldr	r3, [pc, #52]	; (800f708 <tcp_write_checks+0xe0>)
 800f6d2:	f240 1255 	movw	r2, #341	; 0x155
 800f6d6:	490f      	ldr	r1, [pc, #60]	; (800f714 <tcp_write_checks+0xec>)
 800f6d8:	480d      	ldr	r0, [pc, #52]	; (800f710 <tcp_write_checks+0xe8>)
 800f6da:	f004 fe5d 	bl	8014398 <iprintf>
 800f6de:	e00e      	b.n	800f6fe <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d103      	bne.n	800f6f0 <tcp_write_checks+0xc8>
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d006      	beq.n	800f6fe <tcp_write_checks+0xd6>
 800f6f0:	4b05      	ldr	r3, [pc, #20]	; (800f708 <tcp_write_checks+0xe0>)
 800f6f2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800f6f6:	4908      	ldr	r1, [pc, #32]	; (800f718 <tcp_write_checks+0xf0>)
 800f6f8:	4805      	ldr	r0, [pc, #20]	; (800f710 <tcp_write_checks+0xe8>)
 800f6fa:	f004 fe4d 	bl	8014398 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800f6fe:	2300      	movs	r3, #0
}
 800f700:	4618      	mov	r0, r3
 800f702:	3708      	adds	r7, #8
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}
 800f708:	08017094 	.word	0x08017094
 800f70c:	080171a4 	.word	0x080171a4
 800f710:	080170e8 	.word	0x080170e8
 800f714:	080171c4 	.word	0x080171c4
 800f718:	08017200 	.word	0x08017200

0800f71c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800f71c:	b590      	push	{r4, r7, lr}
 800f71e:	b09b      	sub	sp, #108	; 0x6c
 800f720:	af04      	add	r7, sp, #16
 800f722:	60f8      	str	r0, [r7, #12]
 800f724:	60b9      	str	r1, [r7, #8]
 800f726:	4611      	mov	r1, r2
 800f728:	461a      	mov	r2, r3
 800f72a:	460b      	mov	r3, r1
 800f72c:	80fb      	strh	r3, [r7, #6]
 800f72e:	4613      	mov	r3, r2
 800f730:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800f732:	2300      	movs	r3, #0
 800f734:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800f736:	2300      	movs	r3, #0
 800f738:	653b      	str	r3, [r7, #80]	; 0x50
 800f73a:	2300      	movs	r3, #0
 800f73c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f73e:	2300      	movs	r3, #0
 800f740:	64bb      	str	r3, [r7, #72]	; 0x48
 800f742:	2300      	movs	r3, #0
 800f744:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800f746:	2300      	movs	r3, #0
 800f748:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800f74c:	2300      	movs	r3, #0
 800f74e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800f752:	2300      	movs	r3, #0
 800f754:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800f756:	2300      	movs	r3, #0
 800f758:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800f75a:	2300      	movs	r3, #0
 800f75c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d109      	bne.n	800f778 <tcp_write+0x5c>
 800f764:	4ba4      	ldr	r3, [pc, #656]	; (800f9f8 <tcp_write+0x2dc>)
 800f766:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800f76a:	49a4      	ldr	r1, [pc, #656]	; (800f9fc <tcp_write+0x2e0>)
 800f76c:	48a4      	ldr	r0, [pc, #656]	; (800fa00 <tcp_write+0x2e4>)
 800f76e:	f004 fe13 	bl	8014398 <iprintf>
 800f772:	f06f 030f 	mvn.w	r3, #15
 800f776:	e32a      	b.n	800fdce <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f77e:	085b      	lsrs	r3, r3, #1
 800f780:	b29a      	uxth	r2, r3
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f786:	4293      	cmp	r3, r2
 800f788:	bf28      	it	cs
 800f78a:	4613      	movcs	r3, r2
 800f78c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800f78e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f790:	2b00      	cmp	r3, #0
 800f792:	d102      	bne.n	800f79a <tcp_write+0x7e>
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f798:	e000      	b.n	800f79c <tcp_write+0x80>
 800f79a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f79c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d109      	bne.n	800f7b8 <tcp_write+0x9c>
 800f7a4:	4b94      	ldr	r3, [pc, #592]	; (800f9f8 <tcp_write+0x2dc>)
 800f7a6:	f240 12ad 	movw	r2, #429	; 0x1ad
 800f7aa:	4996      	ldr	r1, [pc, #600]	; (800fa04 <tcp_write+0x2e8>)
 800f7ac:	4894      	ldr	r0, [pc, #592]	; (800fa00 <tcp_write+0x2e4>)
 800f7ae:	f004 fdf3 	bl	8014398 <iprintf>
 800f7b2:	f06f 030f 	mvn.w	r3, #15
 800f7b6:	e30a      	b.n	800fdce <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800f7b8:	88fb      	ldrh	r3, [r7, #6]
 800f7ba:	4619      	mov	r1, r3
 800f7bc:	68f8      	ldr	r0, [r7, #12]
 800f7be:	f7ff ff33 	bl	800f628 <tcp_write_checks>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800f7c8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d002      	beq.n	800f7d6 <tcp_write+0xba>
    return err;
 800f7d0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f7d4:	e2fb      	b.n	800fdce <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f7dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	f000 80f6 	beq.w	800f9dc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7f4:	653b      	str	r3, [r7, #80]	; 0x50
 800f7f6:	e002      	b.n	800f7fe <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800f7f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f7fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d1f8      	bne.n	800f7f8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800f806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f808:	7a9b      	ldrb	r3, [r3, #10]
 800f80a:	009b      	lsls	r3, r3, #2
 800f80c:	b29b      	uxth	r3, r3
 800f80e:	f003 0304 	and.w	r3, r3, #4
 800f812:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800f814:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f818:	891b      	ldrh	r3, [r3, #8]
 800f81a:	4619      	mov	r1, r3
 800f81c:	8c3b      	ldrh	r3, [r7, #32]
 800f81e:	440b      	add	r3, r1
 800f820:	429a      	cmp	r2, r3
 800f822:	da06      	bge.n	800f832 <tcp_write+0x116>
 800f824:	4b74      	ldr	r3, [pc, #464]	; (800f9f8 <tcp_write+0x2dc>)
 800f826:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f82a:	4977      	ldr	r1, [pc, #476]	; (800fa08 <tcp_write+0x2ec>)
 800f82c:	4874      	ldr	r0, [pc, #464]	; (800fa00 <tcp_write+0x2e4>)
 800f82e:	f004 fdb3 	bl	8014398 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800f832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f834:	891a      	ldrh	r2, [r3, #8]
 800f836:	8c3b      	ldrh	r3, [r7, #32]
 800f838:	4413      	add	r3, r2
 800f83a:	b29b      	uxth	r3, r3
 800f83c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f83e:	1ad3      	subs	r3, r2, r3
 800f840:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f848:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800f84a:	8a7b      	ldrh	r3, [r7, #18]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d026      	beq.n	800f89e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800f850:	8a7b      	ldrh	r3, [r7, #18]
 800f852:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f854:	429a      	cmp	r2, r3
 800f856:	d206      	bcs.n	800f866 <tcp_write+0x14a>
 800f858:	4b67      	ldr	r3, [pc, #412]	; (800f9f8 <tcp_write+0x2dc>)
 800f85a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800f85e:	496b      	ldr	r1, [pc, #428]	; (800fa0c <tcp_write+0x2f0>)
 800f860:	4867      	ldr	r0, [pc, #412]	; (800fa00 <tcp_write+0x2e4>)
 800f862:	f004 fd99 	bl	8014398 <iprintf>
      seg = last_unsent;
 800f866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f868:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800f86a:	8a7b      	ldrh	r3, [r7, #18]
 800f86c:	88fa      	ldrh	r2, [r7, #6]
 800f86e:	4293      	cmp	r3, r2
 800f870:	bf28      	it	cs
 800f872:	4613      	movcs	r3, r2
 800f874:	b29b      	uxth	r3, r3
 800f876:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f878:	4293      	cmp	r3, r2
 800f87a:	bf28      	it	cs
 800f87c:	4613      	movcs	r3, r2
 800f87e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800f880:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f884:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f886:	4413      	add	r3, r2
 800f888:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800f88c:	8a7a      	ldrh	r2, [r7, #18]
 800f88e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f890:	1ad3      	subs	r3, r2, r3
 800f892:	b29b      	uxth	r3, r3
 800f894:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800f896:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f898:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f89a:	1ad3      	subs	r3, r2, r3
 800f89c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800f89e:	8a7b      	ldrh	r3, [r7, #18]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d00b      	beq.n	800f8bc <tcp_write+0x1a0>
 800f8a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f8a8:	88fb      	ldrh	r3, [r7, #6]
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d006      	beq.n	800f8bc <tcp_write+0x1a0>
 800f8ae:	4b52      	ldr	r3, [pc, #328]	; (800f9f8 <tcp_write+0x2dc>)
 800f8b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f8b4:	4956      	ldr	r1, [pc, #344]	; (800fa10 <tcp_write+0x2f4>)
 800f8b6:	4852      	ldr	r0, [pc, #328]	; (800fa00 <tcp_write+0x2e4>)
 800f8b8:	f004 fd6e 	bl	8014398 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800f8bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f8c0:	88fb      	ldrh	r3, [r7, #6]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	f080 8167 	bcs.w	800fb96 <tcp_write+0x47a>
 800f8c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	f000 8163 	beq.w	800fb96 <tcp_write+0x47a>
 800f8d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8d2:	891b      	ldrh	r3, [r3, #8]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	f000 815e 	beq.w	800fb96 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800f8da:	88fa      	ldrh	r2, [r7, #6]
 800f8dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f8e0:	1ad2      	subs	r2, r2, r3
 800f8e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f8e4:	4293      	cmp	r3, r2
 800f8e6:	bfa8      	it	ge
 800f8e8:	4613      	movge	r3, r2
 800f8ea:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800f8ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8ee:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f8f0:	797b      	ldrb	r3, [r7, #5]
 800f8f2:	f003 0301 	and.w	r3, r3, #1
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d027      	beq.n	800f94a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800f8fa:	f107 0012 	add.w	r0, r7, #18
 800f8fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f900:	8bf9      	ldrh	r1, [r7, #30]
 800f902:	2301      	movs	r3, #1
 800f904:	9302      	str	r3, [sp, #8]
 800f906:	797b      	ldrb	r3, [r7, #5]
 800f908:	9301      	str	r3, [sp, #4]
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	9300      	str	r3, [sp, #0]
 800f90e:	4603      	mov	r3, r0
 800f910:	2000      	movs	r0, #0
 800f912:	f7ff fe0f 	bl	800f534 <tcp_pbuf_prealloc>
 800f916:	6578      	str	r0, [r7, #84]	; 0x54
 800f918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	f000 8225 	beq.w	800fd6a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800f920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f922:	6858      	ldr	r0, [r3, #4]
 800f924:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f928:	68ba      	ldr	r2, [r7, #8]
 800f92a:	4413      	add	r3, r2
 800f92c:	8bfa      	ldrh	r2, [r7, #30]
 800f92e:	4619      	mov	r1, r3
 800f930:	f004 fd02 	bl	8014338 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800f934:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f936:	f7fa ff79 	bl	800a82c <pbuf_clen>
 800f93a:	4603      	mov	r3, r0
 800f93c:	461a      	mov	r2, r3
 800f93e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f942:	4413      	add	r3, r2
 800f944:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f948:	e041      	b.n	800f9ce <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800f94a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	637b      	str	r3, [r7, #52]	; 0x34
 800f950:	e002      	b.n	800f958 <tcp_write+0x23c>
 800f952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	637b      	str	r3, [r7, #52]	; 0x34
 800f958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d1f8      	bne.n	800f952 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f962:	7b1b      	ldrb	r3, [r3, #12]
 800f964:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d115      	bne.n	800f998 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800f96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f972:	8952      	ldrh	r2, [r2, #10]
 800f974:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f976:	68ba      	ldr	r2, [r7, #8]
 800f978:	429a      	cmp	r2, r3
 800f97a:	d10d      	bne.n	800f998 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800f97c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f980:	2b00      	cmp	r3, #0
 800f982:	d006      	beq.n	800f992 <tcp_write+0x276>
 800f984:	4b1c      	ldr	r3, [pc, #112]	; (800f9f8 <tcp_write+0x2dc>)
 800f986:	f240 2231 	movw	r2, #561	; 0x231
 800f98a:	4922      	ldr	r1, [pc, #136]	; (800fa14 <tcp_write+0x2f8>)
 800f98c:	481c      	ldr	r0, [pc, #112]	; (800fa00 <tcp_write+0x2e4>)
 800f98e:	f004 fd03 	bl	8014398 <iprintf>
          extendlen = seglen;
 800f992:	8bfb      	ldrh	r3, [r7, #30]
 800f994:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f996:	e01a      	b.n	800f9ce <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800f998:	8bfb      	ldrh	r3, [r7, #30]
 800f99a:	2201      	movs	r2, #1
 800f99c:	4619      	mov	r1, r3
 800f99e:	2000      	movs	r0, #0
 800f9a0:	f7fa fbd8 	bl	800a154 <pbuf_alloc>
 800f9a4:	6578      	str	r0, [r7, #84]	; 0x54
 800f9a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	f000 81e0 	beq.w	800fd6e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800f9ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f9b2:	68ba      	ldr	r2, [r7, #8]
 800f9b4:	441a      	add	r2, r3
 800f9b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9b8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800f9ba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f9bc:	f7fa ff36 	bl	800a82c <pbuf_clen>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f9c8:	4413      	add	r3, r2
 800f9ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800f9ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f9d2:	8bfb      	ldrh	r3, [r7, #30]
 800f9d4:	4413      	add	r3, r2
 800f9d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f9da:	e0dc      	b.n	800fb96 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	f000 80d7 	beq.w	800fb96 <tcp_write+0x47a>
 800f9e8:	4b03      	ldr	r3, [pc, #12]	; (800f9f8 <tcp_write+0x2dc>)
 800f9ea:	f240 224a 	movw	r2, #586	; 0x24a
 800f9ee:	490a      	ldr	r1, [pc, #40]	; (800fa18 <tcp_write+0x2fc>)
 800f9f0:	4803      	ldr	r0, [pc, #12]	; (800fa00 <tcp_write+0x2e4>)
 800f9f2:	f004 fcd1 	bl	8014398 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800f9f6:	e0ce      	b.n	800fb96 <tcp_write+0x47a>
 800f9f8:	08017094 	.word	0x08017094
 800f9fc:	08017234 	.word	0x08017234
 800fa00:	080170e8 	.word	0x080170e8
 800fa04:	0801724c 	.word	0x0801724c
 800fa08:	08017280 	.word	0x08017280
 800fa0c:	08017298 	.word	0x08017298
 800fa10:	080172b8 	.word	0x080172b8
 800fa14:	080172d8 	.word	0x080172d8
 800fa18:	08017304 	.word	0x08017304
    struct pbuf *p;
    u16_t left = len - pos;
 800fa1c:	88fa      	ldrh	r2, [r7, #6]
 800fa1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fa22:	1ad3      	subs	r3, r2, r3
 800fa24:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800fa26:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fa2a:	b29b      	uxth	r3, r3
 800fa2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fa2e:	1ad3      	subs	r3, r2, r3
 800fa30:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800fa32:	8b7a      	ldrh	r2, [r7, #26]
 800fa34:	8bbb      	ldrh	r3, [r7, #28]
 800fa36:	4293      	cmp	r3, r2
 800fa38:	bf28      	it	cs
 800fa3a:	4613      	movcs	r3, r2
 800fa3c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800fa3e:	797b      	ldrb	r3, [r7, #5]
 800fa40:	f003 0301 	and.w	r3, r3, #1
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d036      	beq.n	800fab6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800fa48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fa4c:	b29a      	uxth	r2, r3
 800fa4e:	8b3b      	ldrh	r3, [r7, #24]
 800fa50:	4413      	add	r3, r2
 800fa52:	b299      	uxth	r1, r3
 800fa54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	bf0c      	ite	eq
 800fa5a:	2301      	moveq	r3, #1
 800fa5c:	2300      	movne	r3, #0
 800fa5e:	b2db      	uxtb	r3, r3
 800fa60:	f107 0012 	add.w	r0, r7, #18
 800fa64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fa66:	9302      	str	r3, [sp, #8]
 800fa68:	797b      	ldrb	r3, [r7, #5]
 800fa6a:	9301      	str	r3, [sp, #4]
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	9300      	str	r3, [sp, #0]
 800fa70:	4603      	mov	r3, r0
 800fa72:	2036      	movs	r0, #54	; 0x36
 800fa74:	f7ff fd5e 	bl	800f534 <tcp_pbuf_prealloc>
 800fa78:	6338      	str	r0, [r7, #48]	; 0x30
 800fa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	f000 8178 	beq.w	800fd72 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800fa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa84:	895b      	ldrh	r3, [r3, #10]
 800fa86:	8b3a      	ldrh	r2, [r7, #24]
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d906      	bls.n	800fa9a <tcp_write+0x37e>
 800fa8c:	4b8c      	ldr	r3, [pc, #560]	; (800fcc0 <tcp_write+0x5a4>)
 800fa8e:	f240 2266 	movw	r2, #614	; 0x266
 800fa92:	498c      	ldr	r1, [pc, #560]	; (800fcc4 <tcp_write+0x5a8>)
 800fa94:	488c      	ldr	r0, [pc, #560]	; (800fcc8 <tcp_write+0x5ac>)
 800fa96:	f004 fc7f 	bl	8014398 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800fa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa9c:	685a      	ldr	r2, [r3, #4]
 800fa9e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800faa2:	18d0      	adds	r0, r2, r3
 800faa4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800faa8:	68ba      	ldr	r2, [r7, #8]
 800faaa:	4413      	add	r3, r2
 800faac:	8b3a      	ldrh	r2, [r7, #24]
 800faae:	4619      	mov	r1, r3
 800fab0:	f004 fc42 	bl	8014338 <memcpy>
 800fab4:	e02f      	b.n	800fb16 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800fab6:	8a7b      	ldrh	r3, [r7, #18]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d006      	beq.n	800faca <tcp_write+0x3ae>
 800fabc:	4b80      	ldr	r3, [pc, #512]	; (800fcc0 <tcp_write+0x5a4>)
 800fabe:	f240 2271 	movw	r2, #625	; 0x271
 800fac2:	4982      	ldr	r1, [pc, #520]	; (800fccc <tcp_write+0x5b0>)
 800fac4:	4880      	ldr	r0, [pc, #512]	; (800fcc8 <tcp_write+0x5ac>)
 800fac6:	f004 fc67 	bl	8014398 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800faca:	8b3b      	ldrh	r3, [r7, #24]
 800facc:	2201      	movs	r2, #1
 800face:	4619      	mov	r1, r3
 800fad0:	2036      	movs	r0, #54	; 0x36
 800fad2:	f7fa fb3f 	bl	800a154 <pbuf_alloc>
 800fad6:	6178      	str	r0, [r7, #20]
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	f000 814b 	beq.w	800fd76 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800fae0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fae4:	68ba      	ldr	r2, [r7, #8]
 800fae6:	441a      	add	r2, r3
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800faec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800faf0:	b29b      	uxth	r3, r3
 800faf2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800faf6:	4619      	mov	r1, r3
 800faf8:	2036      	movs	r0, #54	; 0x36
 800fafa:	f7fa fb2b 	bl	800a154 <pbuf_alloc>
 800fafe:	6338      	str	r0, [r7, #48]	; 0x30
 800fb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d103      	bne.n	800fb0e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800fb06:	6978      	ldr	r0, [r7, #20]
 800fb08:	f7fa fe08 	bl	800a71c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800fb0c:	e136      	b.n	800fd7c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800fb0e:	6979      	ldr	r1, [r7, #20]
 800fb10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb12:	f7fa fec5 	bl	800a8a0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800fb16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb18:	f7fa fe88 	bl	800a82c <pbuf_clen>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	461a      	mov	r2, r3
 800fb20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fb24:	4413      	add	r3, r2
 800fb26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800fb2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fb2e:	2b09      	cmp	r3, #9
 800fb30:	d903      	bls.n	800fb3a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800fb32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb34:	f7fa fdf2 	bl	800a71c <pbuf_free>
      goto memerr;
 800fb38:	e120      	b.n	800fd7c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fb3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fb42:	441a      	add	r2, r3
 800fb44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb48:	9300      	str	r3, [sp, #0]
 800fb4a:	4613      	mov	r3, r2
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fb50:	68f8      	ldr	r0, [r7, #12]
 800fb52:	f7ff fc51 	bl	800f3f8 <tcp_create_segment>
 800fb56:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fb58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	f000 810d 	beq.w	800fd7a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800fb60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d102      	bne.n	800fb6c <tcp_write+0x450>
      queue = seg;
 800fb66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb68:	647b      	str	r3, [r7, #68]	; 0x44
 800fb6a:	e00c      	b.n	800fb86 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800fb6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d106      	bne.n	800fb80 <tcp_write+0x464>
 800fb72:	4b53      	ldr	r3, [pc, #332]	; (800fcc0 <tcp_write+0x5a4>)
 800fb74:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fb78:	4955      	ldr	r1, [pc, #340]	; (800fcd0 <tcp_write+0x5b4>)
 800fb7a:	4853      	ldr	r0, [pc, #332]	; (800fcc8 <tcp_write+0x5ac>)
 800fb7c:	f004 fc0c 	bl	8014398 <iprintf>
      prev_seg->next = seg;
 800fb80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fb84:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800fb86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb88:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800fb8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fb8e:	8b3b      	ldrh	r3, [r7, #24]
 800fb90:	4413      	add	r3, r2
 800fb92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800fb96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fb9a:	88fb      	ldrh	r3, [r7, #6]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	f4ff af3d 	bcc.w	800fa1c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800fba2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d02c      	beq.n	800fc02 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800fba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbaa:	685b      	ldr	r3, [r3, #4]
 800fbac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbae:	e01e      	b.n	800fbee <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800fbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb2:	891a      	ldrh	r2, [r3, #8]
 800fbb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fbb6:	4413      	add	r3, r2
 800fbb8:	b29a      	uxth	r2, r3
 800fbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbbc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800fbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d110      	bne.n	800fbe8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800fbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbcc:	8952      	ldrh	r2, [r2, #10]
 800fbce:	4413      	add	r3, r2
 800fbd0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fbd2:	68b9      	ldr	r1, [r7, #8]
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f004 fbaf 	bl	8014338 <memcpy>
        p->len += oversize_used;
 800fbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbdc:	895a      	ldrh	r2, [r3, #10]
 800fbde:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fbe0:	4413      	add	r3, r2
 800fbe2:	b29a      	uxth	r2, r3
 800fbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800fbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d1dd      	bne.n	800fbb0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800fbf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbf6:	891a      	ldrh	r2, [r3, #8]
 800fbf8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fbfa:	4413      	add	r3, r2
 800fbfc:	b29a      	uxth	r2, r3
 800fbfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc00:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800fc02:	8a7a      	ldrh	r2, [r7, #18]
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800fc0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d018      	beq.n	800fc42 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800fc10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d106      	bne.n	800fc24 <tcp_write+0x508>
 800fc16:	4b2a      	ldr	r3, [pc, #168]	; (800fcc0 <tcp_write+0x5a4>)
 800fc18:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800fc1c:	492d      	ldr	r1, [pc, #180]	; (800fcd4 <tcp_write+0x5b8>)
 800fc1e:	482a      	ldr	r0, [pc, #168]	; (800fcc8 <tcp_write+0x5ac>)
 800fc20:	f004 fbba 	bl	8014398 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800fc24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc26:	685b      	ldr	r3, [r3, #4]
 800fc28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7fa fe38 	bl	800a8a0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800fc30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc32:	891a      	ldrh	r2, [r3, #8]
 800fc34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc36:	891b      	ldrh	r3, [r3, #8]
 800fc38:	4413      	add	r3, r2
 800fc3a:	b29a      	uxth	r2, r3
 800fc3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc3e:	811a      	strh	r2, [r3, #8]
 800fc40:	e037      	b.n	800fcb2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800fc42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d034      	beq.n	800fcb2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800fc48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d003      	beq.n	800fc56 <tcp_write+0x53a>
 800fc4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc50:	685b      	ldr	r3, [r3, #4]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d106      	bne.n	800fc64 <tcp_write+0x548>
 800fc56:	4b1a      	ldr	r3, [pc, #104]	; (800fcc0 <tcp_write+0x5a4>)
 800fc58:	f240 22e6 	movw	r2, #742	; 0x2e6
 800fc5c:	491e      	ldr	r1, [pc, #120]	; (800fcd8 <tcp_write+0x5bc>)
 800fc5e:	481a      	ldr	r0, [pc, #104]	; (800fcc8 <tcp_write+0x5ac>)
 800fc60:	f004 fb9a 	bl	8014398 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fc64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc6a:	e009      	b.n	800fc80 <tcp_write+0x564>
      p->tot_len += extendlen;
 800fc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc6e:	891a      	ldrh	r2, [r3, #8]
 800fc70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc72:	4413      	add	r3, r2
 800fc74:	b29a      	uxth	r2, r3
 800fc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc78:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d1f1      	bne.n	800fc6c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800fc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc8a:	891a      	ldrh	r2, [r3, #8]
 800fc8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc8e:	4413      	add	r3, r2
 800fc90:	b29a      	uxth	r2, r3
 800fc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc94:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800fc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc98:	895a      	ldrh	r2, [r3, #10]
 800fc9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc9c:	4413      	add	r3, r2
 800fc9e:	b29a      	uxth	r2, r3
 800fca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800fca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fca6:	891a      	ldrh	r2, [r3, #8]
 800fca8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fcaa:	4413      	add	r3, r2
 800fcac:	b29a      	uxth	r2, r3
 800fcae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcb0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800fcb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d111      	bne.n	800fcdc <tcp_write+0x5c0>
    pcb->unsent = queue;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fcbc:	66da      	str	r2, [r3, #108]	; 0x6c
 800fcbe:	e010      	b.n	800fce2 <tcp_write+0x5c6>
 800fcc0:	08017094 	.word	0x08017094
 800fcc4:	08017334 	.word	0x08017334
 800fcc8:	080170e8 	.word	0x080170e8
 800fccc:	08017374 	.word	0x08017374
 800fcd0:	08017384 	.word	0x08017384
 800fcd4:	08017398 	.word	0x08017398
 800fcd8:	080173d0 	.word	0x080173d0
  } else {
    last_unsent->next = queue;
 800fcdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fce0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fce6:	88fb      	ldrh	r3, [r7, #6]
 800fce8:	441a      	add	r2, r3
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fcf4:	88fb      	ldrh	r3, [r7, #6]
 800fcf6:	1ad3      	subs	r3, r2, r3
 800fcf8:	b29a      	uxth	r2, r3
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800fd06:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d00e      	beq.n	800fd32 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d10a      	bne.n	800fd32 <tcp_write+0x616>
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d106      	bne.n	800fd32 <tcp_write+0x616>
 800fd24:	4b2c      	ldr	r3, [pc, #176]	; (800fdd8 <tcp_write+0x6bc>)
 800fd26:	f240 3212 	movw	r2, #786	; 0x312
 800fd2a:	492c      	ldr	r1, [pc, #176]	; (800fddc <tcp_write+0x6c0>)
 800fd2c:	482c      	ldr	r0, [pc, #176]	; (800fde0 <tcp_write+0x6c4>)
 800fd2e:	f004 fb33 	bl	8014398 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800fd32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d016      	beq.n	800fd66 <tcp_write+0x64a>
 800fd38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd3a:	68db      	ldr	r3, [r3, #12]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d012      	beq.n	800fd66 <tcp_write+0x64a>
 800fd40:	797b      	ldrb	r3, [r7, #5]
 800fd42:	f003 0302 	and.w	r3, r3, #2
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d10d      	bne.n	800fd66 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800fd4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd4c:	68db      	ldr	r3, [r3, #12]
 800fd4e:	899b      	ldrh	r3, [r3, #12]
 800fd50:	b29c      	uxth	r4, r3
 800fd52:	2008      	movs	r0, #8
 800fd54:	f7f8 ff64 	bl	8008c20 <lwip_htons>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd5e:	68db      	ldr	r3, [r3, #12]
 800fd60:	4322      	orrs	r2, r4
 800fd62:	b292      	uxth	r2, r2
 800fd64:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800fd66:	2300      	movs	r3, #0
 800fd68:	e031      	b.n	800fdce <tcp_write+0x6b2>
          goto memerr;
 800fd6a:	bf00      	nop
 800fd6c:	e006      	b.n	800fd7c <tcp_write+0x660>
            goto memerr;
 800fd6e:	bf00      	nop
 800fd70:	e004      	b.n	800fd7c <tcp_write+0x660>
        goto memerr;
 800fd72:	bf00      	nop
 800fd74:	e002      	b.n	800fd7c <tcp_write+0x660>
        goto memerr;
 800fd76:	bf00      	nop
 800fd78:	e000      	b.n	800fd7c <tcp_write+0x660>
      goto memerr;
 800fd7a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	8b5b      	ldrh	r3, [r3, #26]
 800fd80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd84:	b29a      	uxth	r2, r3
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800fd8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d002      	beq.n	800fd96 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800fd90:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fd92:	f7fa fcc3 	bl	800a71c <pbuf_free>
  }
  if (queue != NULL) {
 800fd96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d002      	beq.n	800fda2 <tcp_write+0x686>
    tcp_segs_free(queue);
 800fd9c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fd9e:	f7fc fb57 	bl	800c450 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d00e      	beq.n	800fdca <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d10a      	bne.n	800fdca <tcp_write+0x6ae>
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d106      	bne.n	800fdca <tcp_write+0x6ae>
 800fdbc:	4b06      	ldr	r3, [pc, #24]	; (800fdd8 <tcp_write+0x6bc>)
 800fdbe:	f240 3227 	movw	r2, #807	; 0x327
 800fdc2:	4906      	ldr	r1, [pc, #24]	; (800fddc <tcp_write+0x6c0>)
 800fdc4:	4806      	ldr	r0, [pc, #24]	; (800fde0 <tcp_write+0x6c4>)
 800fdc6:	f004 fae7 	bl	8014398 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800fdca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	375c      	adds	r7, #92	; 0x5c
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	bd90      	pop	{r4, r7, pc}
 800fdd6:	bf00      	nop
 800fdd8:	08017094 	.word	0x08017094
 800fddc:	08017408 	.word	0x08017408
 800fde0:	080170e8 	.word	0x080170e8

0800fde4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fde4:	b590      	push	{r4, r7, lr}
 800fde6:	b08b      	sub	sp, #44	; 0x2c
 800fde8:	af02      	add	r7, sp, #8
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	460b      	mov	r3, r1
 800fdee:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	61fb      	str	r3, [r7, #28]
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d106      	bne.n	800fe10 <tcp_split_unsent_seg+0x2c>
 800fe02:	4b95      	ldr	r3, [pc, #596]	; (8010058 <tcp_split_unsent_seg+0x274>)
 800fe04:	f240 324b 	movw	r2, #843	; 0x34b
 800fe08:	4994      	ldr	r1, [pc, #592]	; (801005c <tcp_split_unsent_seg+0x278>)
 800fe0a:	4895      	ldr	r0, [pc, #596]	; (8010060 <tcp_split_unsent_seg+0x27c>)
 800fe0c:	f004 fac4 	bl	8014398 <iprintf>

  useg = pcb->unsent;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe14:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d102      	bne.n	800fe22 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fe1c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe20:	e116      	b.n	8010050 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fe22:	887b      	ldrh	r3, [r7, #2]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d109      	bne.n	800fe3c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fe28:	4b8b      	ldr	r3, [pc, #556]	; (8010058 <tcp_split_unsent_seg+0x274>)
 800fe2a:	f240 3253 	movw	r2, #851	; 0x353
 800fe2e:	498d      	ldr	r1, [pc, #564]	; (8010064 <tcp_split_unsent_seg+0x280>)
 800fe30:	488b      	ldr	r0, [pc, #556]	; (8010060 <tcp_split_unsent_seg+0x27c>)
 800fe32:	f004 fab1 	bl	8014398 <iprintf>
    return ERR_VAL;
 800fe36:	f06f 0305 	mvn.w	r3, #5
 800fe3a:	e109      	b.n	8010050 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	891b      	ldrh	r3, [r3, #8]
 800fe40:	887a      	ldrh	r2, [r7, #2]
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d301      	bcc.n	800fe4a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fe46:	2300      	movs	r3, #0
 800fe48:	e102      	b.n	8010050 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe4e:	887a      	ldrh	r2, [r7, #2]
 800fe50:	429a      	cmp	r2, r3
 800fe52:	d906      	bls.n	800fe62 <tcp_split_unsent_seg+0x7e>
 800fe54:	4b80      	ldr	r3, [pc, #512]	; (8010058 <tcp_split_unsent_seg+0x274>)
 800fe56:	f240 325b 	movw	r2, #859	; 0x35b
 800fe5a:	4983      	ldr	r1, [pc, #524]	; (8010068 <tcp_split_unsent_seg+0x284>)
 800fe5c:	4880      	ldr	r0, [pc, #512]	; (8010060 <tcp_split_unsent_seg+0x27c>)
 800fe5e:	f004 fa9b 	bl	8014398 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	891b      	ldrh	r3, [r3, #8]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d106      	bne.n	800fe78 <tcp_split_unsent_seg+0x94>
 800fe6a:	4b7b      	ldr	r3, [pc, #492]	; (8010058 <tcp_split_unsent_seg+0x274>)
 800fe6c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800fe70:	497e      	ldr	r1, [pc, #504]	; (801006c <tcp_split_unsent_seg+0x288>)
 800fe72:	487b      	ldr	r0, [pc, #492]	; (8010060 <tcp_split_unsent_seg+0x27c>)
 800fe74:	f004 fa90 	bl	8014398 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	7a9b      	ldrb	r3, [r3, #10]
 800fe7c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fe7e:	7bfb      	ldrb	r3, [r7, #15]
 800fe80:	009b      	lsls	r3, r3, #2
 800fe82:	b2db      	uxtb	r3, r3
 800fe84:	f003 0304 	and.w	r3, r3, #4
 800fe88:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	891a      	ldrh	r2, [r3, #8]
 800fe8e:	887b      	ldrh	r3, [r7, #2]
 800fe90:	1ad3      	subs	r3, r2, r3
 800fe92:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fe94:	7bbb      	ldrb	r3, [r7, #14]
 800fe96:	b29a      	uxth	r2, r3
 800fe98:	89bb      	ldrh	r3, [r7, #12]
 800fe9a:	4413      	add	r3, r2
 800fe9c:	b29b      	uxth	r3, r3
 800fe9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fea2:	4619      	mov	r1, r3
 800fea4:	2036      	movs	r0, #54	; 0x36
 800fea6:	f7fa f955 	bl	800a154 <pbuf_alloc>
 800feaa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	f000 80b7 	beq.w	8010022 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	891a      	ldrh	r2, [r3, #8]
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	891b      	ldrh	r3, [r3, #8]
 800febe:	1ad3      	subs	r3, r2, r3
 800fec0:	b29a      	uxth	r2, r3
 800fec2:	887b      	ldrh	r3, [r7, #2]
 800fec4:	4413      	add	r3, r2
 800fec6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	6858      	ldr	r0, [r3, #4]
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	685a      	ldr	r2, [r3, #4]
 800fed0:	7bbb      	ldrb	r3, [r7, #14]
 800fed2:	18d1      	adds	r1, r2, r3
 800fed4:	897b      	ldrh	r3, [r7, #10]
 800fed6:	89ba      	ldrh	r2, [r7, #12]
 800fed8:	f7fa fe1a 	bl	800ab10 <pbuf_copy_partial>
 800fedc:	4603      	mov	r3, r0
 800fede:	461a      	mov	r2, r3
 800fee0:	89bb      	ldrh	r3, [r7, #12]
 800fee2:	4293      	cmp	r3, r2
 800fee4:	f040 809f 	bne.w	8010026 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	68db      	ldr	r3, [r3, #12]
 800feec:	899b      	ldrh	r3, [r3, #12]
 800feee:	b29b      	uxth	r3, r3
 800fef0:	4618      	mov	r0, r3
 800fef2:	f7f8 fe95 	bl	8008c20 <lwip_htons>
 800fef6:	4603      	mov	r3, r0
 800fef8:	b2db      	uxtb	r3, r3
 800fefa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fefe:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ff00:	2300      	movs	r3, #0
 800ff02:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ff04:	7efb      	ldrb	r3, [r7, #27]
 800ff06:	f003 0308 	and.w	r3, r3, #8
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d007      	beq.n	800ff1e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ff0e:	7efb      	ldrb	r3, [r7, #27]
 800ff10:	f023 0308 	bic.w	r3, r3, #8
 800ff14:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ff16:	7ebb      	ldrb	r3, [r7, #26]
 800ff18:	f043 0308 	orr.w	r3, r3, #8
 800ff1c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ff1e:	7efb      	ldrb	r3, [r7, #27]
 800ff20:	f003 0301 	and.w	r3, r3, #1
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d007      	beq.n	800ff38 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ff28:	7efb      	ldrb	r3, [r7, #27]
 800ff2a:	f023 0301 	bic.w	r3, r3, #1
 800ff2e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ff30:	7ebb      	ldrb	r3, [r7, #26]
 800ff32:	f043 0301 	orr.w	r3, r3, #1
 800ff36:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	68db      	ldr	r3, [r3, #12]
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7f8 fe83 	bl	8008c4a <lwip_htonl>
 800ff44:	4602      	mov	r2, r0
 800ff46:	887b      	ldrh	r3, [r7, #2]
 800ff48:	18d1      	adds	r1, r2, r3
 800ff4a:	7eba      	ldrb	r2, [r7, #26]
 800ff4c:	7bfb      	ldrb	r3, [r7, #15]
 800ff4e:	9300      	str	r3, [sp, #0]
 800ff50:	460b      	mov	r3, r1
 800ff52:	6939      	ldr	r1, [r7, #16]
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f7ff fa4f 	bl	800f3f8 <tcp_create_segment>
 800ff5a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d063      	beq.n	801002a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7fa fc60 	bl	800a82c <pbuf_clen>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	461a      	mov	r2, r3
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ff76:	1a9b      	subs	r3, r3, r2
 800ff78:	b29a      	uxth	r2, r3
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	6858      	ldr	r0, [r3, #4]
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	891a      	ldrh	r2, [r3, #8]
 800ff8a:	89bb      	ldrh	r3, [r7, #12]
 800ff8c:	1ad3      	subs	r3, r2, r3
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	4619      	mov	r1, r3
 800ff92:	f7fa fa3d 	bl	800a410 <pbuf_realloc>
  useg->len -= remainder;
 800ff96:	697b      	ldr	r3, [r7, #20]
 800ff98:	891a      	ldrh	r2, [r3, #8]
 800ff9a:	89bb      	ldrh	r3, [r7, #12]
 800ff9c:	1ad3      	subs	r3, r2, r3
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	68db      	ldr	r3, [r3, #12]
 800ffa8:	899b      	ldrh	r3, [r3, #12]
 800ffaa:	b29c      	uxth	r4, r3
 800ffac:	7efb      	ldrb	r3, [r7, #27]
 800ffae:	b29b      	uxth	r3, r3
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7f8 fe35 	bl	8008c20 <lwip_htons>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	461a      	mov	r2, r3
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	4322      	orrs	r2, r4
 800ffc0:	b292      	uxth	r2, r2
 800ffc2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7fa fc2f 	bl	800a82c <pbuf_clen>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	461a      	mov	r2, r3
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffd8:	4413      	add	r3, r2
 800ffda:	b29a      	uxth	r2, r3
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ffe2:	69fb      	ldr	r3, [r7, #28]
 800ffe4:	685b      	ldr	r3, [r3, #4]
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7fa fc20 	bl	800a82c <pbuf_clen>
 800ffec:	4603      	mov	r3, r0
 800ffee:	461a      	mov	r2, r3
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fff6:	4413      	add	r3, r2
 800fff8:	b29a      	uxth	r2, r3
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	681a      	ldr	r2, [r3, #0]
 8010004:	69fb      	ldr	r3, [r7, #28]
 8010006:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	69fa      	ldr	r2, [r7, #28]
 801000c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801000e:	69fb      	ldr	r3, [r7, #28]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d103      	bne.n	801001e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2200      	movs	r2, #0
 801001a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801001e:	2300      	movs	r3, #0
 8010020:	e016      	b.n	8010050 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010022:	bf00      	nop
 8010024:	e002      	b.n	801002c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010026:	bf00      	nop
 8010028:	e000      	b.n	801002c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801002a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801002c:	69fb      	ldr	r3, [r7, #28]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d006      	beq.n	8010040 <tcp_split_unsent_seg+0x25c>
 8010032:	4b09      	ldr	r3, [pc, #36]	; (8010058 <tcp_split_unsent_seg+0x274>)
 8010034:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010038:	490d      	ldr	r1, [pc, #52]	; (8010070 <tcp_split_unsent_seg+0x28c>)
 801003a:	4809      	ldr	r0, [pc, #36]	; (8010060 <tcp_split_unsent_seg+0x27c>)
 801003c:	f004 f9ac 	bl	8014398 <iprintf>
  if (p != NULL) {
 8010040:	693b      	ldr	r3, [r7, #16]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d002      	beq.n	801004c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010046:	6938      	ldr	r0, [r7, #16]
 8010048:	f7fa fb68 	bl	800a71c <pbuf_free>
  }

  return ERR_MEM;
 801004c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010050:	4618      	mov	r0, r3
 8010052:	3724      	adds	r7, #36	; 0x24
 8010054:	46bd      	mov	sp, r7
 8010056:	bd90      	pop	{r4, r7, pc}
 8010058:	08017094 	.word	0x08017094
 801005c:	08017428 	.word	0x08017428
 8010060:	080170e8 	.word	0x080170e8
 8010064:	0801744c 	.word	0x0801744c
 8010068:	08017470 	.word	0x08017470
 801006c:	08017480 	.word	0x08017480
 8010070:	08017490 	.word	0x08017490

08010074 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010074:	b590      	push	{r4, r7, lr}
 8010076:	b085      	sub	sp, #20
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d106      	bne.n	8010090 <tcp_send_fin+0x1c>
 8010082:	4b21      	ldr	r3, [pc, #132]	; (8010108 <tcp_send_fin+0x94>)
 8010084:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010088:	4920      	ldr	r1, [pc, #128]	; (801010c <tcp_send_fin+0x98>)
 801008a:	4821      	ldr	r0, [pc, #132]	; (8010110 <tcp_send_fin+0x9c>)
 801008c:	f004 f984 	bl	8014398 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010094:	2b00      	cmp	r3, #0
 8010096:	d02e      	beq.n	80100f6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801009c:	60fb      	str	r3, [r7, #12]
 801009e:	e002      	b.n	80100a6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d1f8      	bne.n	80100a0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	68db      	ldr	r3, [r3, #12]
 80100b2:	899b      	ldrh	r3, [r3, #12]
 80100b4:	b29b      	uxth	r3, r3
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7f8 fdb2 	bl	8008c20 <lwip_htons>
 80100bc:	4603      	mov	r3, r0
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	f003 0307 	and.w	r3, r3, #7
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d116      	bne.n	80100f6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	68db      	ldr	r3, [r3, #12]
 80100cc:	899b      	ldrh	r3, [r3, #12]
 80100ce:	b29c      	uxth	r4, r3
 80100d0:	2001      	movs	r0, #1
 80100d2:	f7f8 fda5 	bl	8008c20 <lwip_htons>
 80100d6:	4603      	mov	r3, r0
 80100d8:	461a      	mov	r2, r3
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	68db      	ldr	r3, [r3, #12]
 80100de:	4322      	orrs	r2, r4
 80100e0:	b292      	uxth	r2, r2
 80100e2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	8b5b      	ldrh	r3, [r3, #26]
 80100e8:	f043 0320 	orr.w	r3, r3, #32
 80100ec:	b29a      	uxth	r2, r3
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80100f2:	2300      	movs	r3, #0
 80100f4:	e004      	b.n	8010100 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80100f6:	2101      	movs	r1, #1
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f000 f80b 	bl	8010114 <tcp_enqueue_flags>
 80100fe:	4603      	mov	r3, r0
}
 8010100:	4618      	mov	r0, r3
 8010102:	3714      	adds	r7, #20
 8010104:	46bd      	mov	sp, r7
 8010106:	bd90      	pop	{r4, r7, pc}
 8010108:	08017094 	.word	0x08017094
 801010c:	0801749c 	.word	0x0801749c
 8010110:	080170e8 	.word	0x080170e8

08010114 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b08a      	sub	sp, #40	; 0x28
 8010118:	af02      	add	r7, sp, #8
 801011a:	6078      	str	r0, [r7, #4]
 801011c:	460b      	mov	r3, r1
 801011e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010120:	2300      	movs	r3, #0
 8010122:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010124:	2300      	movs	r3, #0
 8010126:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010128:	78fb      	ldrb	r3, [r7, #3]
 801012a:	f003 0303 	and.w	r3, r3, #3
 801012e:	2b00      	cmp	r3, #0
 8010130:	d106      	bne.n	8010140 <tcp_enqueue_flags+0x2c>
 8010132:	4b67      	ldr	r3, [pc, #412]	; (80102d0 <tcp_enqueue_flags+0x1bc>)
 8010134:	f240 4211 	movw	r2, #1041	; 0x411
 8010138:	4966      	ldr	r1, [pc, #408]	; (80102d4 <tcp_enqueue_flags+0x1c0>)
 801013a:	4867      	ldr	r0, [pc, #412]	; (80102d8 <tcp_enqueue_flags+0x1c4>)
 801013c:	f004 f92c 	bl	8014398 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d106      	bne.n	8010154 <tcp_enqueue_flags+0x40>
 8010146:	4b62      	ldr	r3, [pc, #392]	; (80102d0 <tcp_enqueue_flags+0x1bc>)
 8010148:	f240 4213 	movw	r2, #1043	; 0x413
 801014c:	4963      	ldr	r1, [pc, #396]	; (80102dc <tcp_enqueue_flags+0x1c8>)
 801014e:	4862      	ldr	r0, [pc, #392]	; (80102d8 <tcp_enqueue_flags+0x1c4>)
 8010150:	f004 f922 	bl	8014398 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010154:	78fb      	ldrb	r3, [r7, #3]
 8010156:	f003 0302 	and.w	r3, r3, #2
 801015a:	2b00      	cmp	r3, #0
 801015c:	d001      	beq.n	8010162 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801015e:	2301      	movs	r3, #1
 8010160:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010162:	7ffb      	ldrb	r3, [r7, #31]
 8010164:	009b      	lsls	r3, r3, #2
 8010166:	b2db      	uxtb	r3, r3
 8010168:	f003 0304 	and.w	r3, r3, #4
 801016c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801016e:	7dfb      	ldrb	r3, [r7, #23]
 8010170:	b29b      	uxth	r3, r3
 8010172:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010176:	4619      	mov	r1, r3
 8010178:	2036      	movs	r0, #54	; 0x36
 801017a:	f7f9 ffeb 	bl	800a154 <pbuf_alloc>
 801017e:	6138      	str	r0, [r7, #16]
 8010180:	693b      	ldr	r3, [r7, #16]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d109      	bne.n	801019a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	8b5b      	ldrh	r3, [r3, #26]
 801018a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801018e:	b29a      	uxth	r2, r3
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010194:	f04f 33ff 	mov.w	r3, #4294967295
 8010198:	e095      	b.n	80102c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	895a      	ldrh	r2, [r3, #10]
 801019e:	7dfb      	ldrb	r3, [r7, #23]
 80101a0:	b29b      	uxth	r3, r3
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d206      	bcs.n	80101b4 <tcp_enqueue_flags+0xa0>
 80101a6:	4b4a      	ldr	r3, [pc, #296]	; (80102d0 <tcp_enqueue_flags+0x1bc>)
 80101a8:	f240 4239 	movw	r2, #1081	; 0x439
 80101ac:	494c      	ldr	r1, [pc, #304]	; (80102e0 <tcp_enqueue_flags+0x1cc>)
 80101ae:	484a      	ldr	r0, [pc, #296]	; (80102d8 <tcp_enqueue_flags+0x1c4>)
 80101b0:	f004 f8f2 	bl	8014398 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80101b8:	78fa      	ldrb	r2, [r7, #3]
 80101ba:	7ffb      	ldrb	r3, [r7, #31]
 80101bc:	9300      	str	r3, [sp, #0]
 80101be:	460b      	mov	r3, r1
 80101c0:	6939      	ldr	r1, [r7, #16]
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f7ff f918 	bl	800f3f8 <tcp_create_segment>
 80101c8:	60f8      	str	r0, [r7, #12]
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d109      	bne.n	80101e4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	8b5b      	ldrh	r3, [r3, #26]
 80101d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101d8:	b29a      	uxth	r2, r3
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80101de:	f04f 33ff 	mov.w	r3, #4294967295
 80101e2:	e070      	b.n	80102c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	f003 0303 	and.w	r3, r3, #3
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d006      	beq.n	80101fe <tcp_enqueue_flags+0xea>
 80101f0:	4b37      	ldr	r3, [pc, #220]	; (80102d0 <tcp_enqueue_flags+0x1bc>)
 80101f2:	f240 4242 	movw	r2, #1090	; 0x442
 80101f6:	493b      	ldr	r1, [pc, #236]	; (80102e4 <tcp_enqueue_flags+0x1d0>)
 80101f8:	4837      	ldr	r0, [pc, #220]	; (80102d8 <tcp_enqueue_flags+0x1c4>)
 80101fa:	f004 f8cd 	bl	8014398 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	891b      	ldrh	r3, [r3, #8]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d006      	beq.n	8010214 <tcp_enqueue_flags+0x100>
 8010206:	4b32      	ldr	r3, [pc, #200]	; (80102d0 <tcp_enqueue_flags+0x1bc>)
 8010208:	f240 4243 	movw	r2, #1091	; 0x443
 801020c:	4936      	ldr	r1, [pc, #216]	; (80102e8 <tcp_enqueue_flags+0x1d4>)
 801020e:	4832      	ldr	r0, [pc, #200]	; (80102d8 <tcp_enqueue_flags+0x1c4>)
 8010210:	f004 f8c2 	bl	8014398 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010218:	2b00      	cmp	r3, #0
 801021a:	d103      	bne.n	8010224 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	68fa      	ldr	r2, [r7, #12]
 8010220:	66da      	str	r2, [r3, #108]	; 0x6c
 8010222:	e00d      	b.n	8010240 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010228:	61bb      	str	r3, [r7, #24]
 801022a:	e002      	b.n	8010232 <tcp_enqueue_flags+0x11e>
 801022c:	69bb      	ldr	r3, [r7, #24]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	61bb      	str	r3, [r7, #24]
 8010232:	69bb      	ldr	r3, [r7, #24]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d1f8      	bne.n	801022c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801023a:	69bb      	ldr	r3, [r7, #24]
 801023c:	68fa      	ldr	r2, [r7, #12]
 801023e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2200      	movs	r2, #0
 8010244:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010248:	78fb      	ldrb	r3, [r7, #3]
 801024a:	f003 0302 	and.w	r3, r3, #2
 801024e:	2b00      	cmp	r3, #0
 8010250:	d104      	bne.n	801025c <tcp_enqueue_flags+0x148>
 8010252:	78fb      	ldrb	r3, [r7, #3]
 8010254:	f003 0301 	and.w	r3, r3, #1
 8010258:	2b00      	cmp	r3, #0
 801025a:	d004      	beq.n	8010266 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010260:	1c5a      	adds	r2, r3, #1
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010266:	78fb      	ldrb	r3, [r7, #3]
 8010268:	f003 0301 	and.w	r3, r3, #1
 801026c:	2b00      	cmp	r3, #0
 801026e:	d006      	beq.n	801027e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	8b5b      	ldrh	r3, [r3, #26]
 8010274:	f043 0320 	orr.w	r3, r3, #32
 8010278:	b29a      	uxth	r2, r3
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	685b      	ldr	r3, [r3, #4]
 8010282:	4618      	mov	r0, r3
 8010284:	f7fa fad2 	bl	800a82c <pbuf_clen>
 8010288:	4603      	mov	r3, r0
 801028a:	461a      	mov	r2, r3
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010292:	4413      	add	r3, r2
 8010294:	b29a      	uxth	r2, r3
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d00e      	beq.n	80102c4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d10a      	bne.n	80102c4 <tcp_enqueue_flags+0x1b0>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d106      	bne.n	80102c4 <tcp_enqueue_flags+0x1b0>
 80102b6:	4b06      	ldr	r3, [pc, #24]	; (80102d0 <tcp_enqueue_flags+0x1bc>)
 80102b8:	f240 4265 	movw	r2, #1125	; 0x465
 80102bc:	490b      	ldr	r1, [pc, #44]	; (80102ec <tcp_enqueue_flags+0x1d8>)
 80102be:	4806      	ldr	r0, [pc, #24]	; (80102d8 <tcp_enqueue_flags+0x1c4>)
 80102c0:	f004 f86a 	bl	8014398 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80102c4:	2300      	movs	r3, #0
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	3720      	adds	r7, #32
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}
 80102ce:	bf00      	nop
 80102d0:	08017094 	.word	0x08017094
 80102d4:	080174b8 	.word	0x080174b8
 80102d8:	080170e8 	.word	0x080170e8
 80102dc:	08017510 	.word	0x08017510
 80102e0:	08017530 	.word	0x08017530
 80102e4:	0801756c 	.word	0x0801756c
 80102e8:	08017584 	.word	0x08017584
 80102ec:	080175b0 	.word	0x080175b0

080102f0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80102f0:	b5b0      	push	{r4, r5, r7, lr}
 80102f2:	b08a      	sub	sp, #40	; 0x28
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d106      	bne.n	801030c <tcp_output+0x1c>
 80102fe:	4b9e      	ldr	r3, [pc, #632]	; (8010578 <tcp_output+0x288>)
 8010300:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010304:	499d      	ldr	r1, [pc, #628]	; (801057c <tcp_output+0x28c>)
 8010306:	489e      	ldr	r0, [pc, #632]	; (8010580 <tcp_output+0x290>)
 8010308:	f004 f846 	bl	8014398 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	7d1b      	ldrb	r3, [r3, #20]
 8010310:	2b01      	cmp	r3, #1
 8010312:	d106      	bne.n	8010322 <tcp_output+0x32>
 8010314:	4b98      	ldr	r3, [pc, #608]	; (8010578 <tcp_output+0x288>)
 8010316:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801031a:	499a      	ldr	r1, [pc, #616]	; (8010584 <tcp_output+0x294>)
 801031c:	4898      	ldr	r0, [pc, #608]	; (8010580 <tcp_output+0x290>)
 801031e:	f004 f83b 	bl	8014398 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010322:	4b99      	ldr	r3, [pc, #612]	; (8010588 <tcp_output+0x298>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	687a      	ldr	r2, [r7, #4]
 8010328:	429a      	cmp	r2, r3
 801032a:	d101      	bne.n	8010330 <tcp_output+0x40>
    return ERR_OK;
 801032c:	2300      	movs	r3, #0
 801032e:	e1ce      	b.n	80106ce <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801033c:	4293      	cmp	r3, r2
 801033e:	bf28      	it	cs
 8010340:	4613      	movcs	r3, r2
 8010342:	b29b      	uxth	r3, r3
 8010344:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801034a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801034c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801034e:	2b00      	cmp	r3, #0
 8010350:	d10b      	bne.n	801036a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	8b5b      	ldrh	r3, [r3, #26]
 8010356:	f003 0302 	and.w	r3, r3, #2
 801035a:	2b00      	cmp	r3, #0
 801035c:	f000 81aa 	beq.w	80106b4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f000 fdcb 	bl	8010efc <tcp_send_empty_ack>
 8010366:	4603      	mov	r3, r0
 8010368:	e1b1      	b.n	80106ce <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801036a:	6879      	ldr	r1, [r7, #4]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	3304      	adds	r3, #4
 8010370:	461a      	mov	r2, r3
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f7ff f824 	bl	800f3c0 <tcp_route>
 8010378:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d102      	bne.n	8010386 <tcp_output+0x96>
    return ERR_RTE;
 8010380:	f06f 0303 	mvn.w	r3, #3
 8010384:	e1a3      	b.n	80106ce <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d003      	beq.n	8010394 <tcp_output+0xa4>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d111      	bne.n	80103b8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d002      	beq.n	80103a0 <tcp_output+0xb0>
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	3304      	adds	r3, #4
 801039e:	e000      	b.n	80103a2 <tcp_output+0xb2>
 80103a0:	2300      	movs	r3, #0
 80103a2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d102      	bne.n	80103b0 <tcp_output+0xc0>
      return ERR_RTE;
 80103aa:	f06f 0303 	mvn.w	r3, #3
 80103ae:	e18e      	b.n	80106ce <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	681a      	ldr	r2, [r3, #0]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80103b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ba:	68db      	ldr	r3, [r3, #12]
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	4618      	mov	r0, r3
 80103c0:	f7f8 fc43 	bl	8008c4a <lwip_htonl>
 80103c4:	4602      	mov	r2, r0
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103ca:	1ad3      	subs	r3, r2, r3
 80103cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103ce:	8912      	ldrh	r2, [r2, #8]
 80103d0:	4413      	add	r3, r2
 80103d2:	69ba      	ldr	r2, [r7, #24]
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d227      	bcs.n	8010428 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80103de:	461a      	mov	r2, r3
 80103e0:	69bb      	ldr	r3, [r7, #24]
 80103e2:	4293      	cmp	r3, r2
 80103e4:	d114      	bne.n	8010410 <tcp_output+0x120>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d110      	bne.n	8010410 <tcp_output+0x120>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d10b      	bne.n	8010410 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2200      	movs	r2, #0
 80103fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2201      	movs	r2, #1
 8010404:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2200      	movs	r2, #0
 801040c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	8b5b      	ldrh	r3, [r3, #26]
 8010414:	f003 0302 	and.w	r3, r3, #2
 8010418:	2b00      	cmp	r3, #0
 801041a:	f000 814d 	beq.w	80106b8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f000 fd6c 	bl	8010efc <tcp_send_empty_ack>
 8010424:	4603      	mov	r3, r0
 8010426:	e152      	b.n	80106ce <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2200      	movs	r2, #0
 801042c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010434:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010436:	6a3b      	ldr	r3, [r7, #32]
 8010438:	2b00      	cmp	r3, #0
 801043a:	f000 811c 	beq.w	8010676 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801043e:	e002      	b.n	8010446 <tcp_output+0x156>
 8010440:	6a3b      	ldr	r3, [r7, #32]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	623b      	str	r3, [r7, #32]
 8010446:	6a3b      	ldr	r3, [r7, #32]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d1f8      	bne.n	8010440 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801044e:	e112      	b.n	8010676 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010452:	68db      	ldr	r3, [r3, #12]
 8010454:	899b      	ldrh	r3, [r3, #12]
 8010456:	b29b      	uxth	r3, r3
 8010458:	4618      	mov	r0, r3
 801045a:	f7f8 fbe1 	bl	8008c20 <lwip_htons>
 801045e:	4603      	mov	r3, r0
 8010460:	b2db      	uxtb	r3, r3
 8010462:	f003 0304 	and.w	r3, r3, #4
 8010466:	2b00      	cmp	r3, #0
 8010468:	d006      	beq.n	8010478 <tcp_output+0x188>
 801046a:	4b43      	ldr	r3, [pc, #268]	; (8010578 <tcp_output+0x288>)
 801046c:	f240 5236 	movw	r2, #1334	; 0x536
 8010470:	4946      	ldr	r1, [pc, #280]	; (801058c <tcp_output+0x29c>)
 8010472:	4843      	ldr	r0, [pc, #268]	; (8010580 <tcp_output+0x290>)
 8010474:	f003 ff90 	bl	8014398 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801047c:	2b00      	cmp	r3, #0
 801047e:	d01f      	beq.n	80104c0 <tcp_output+0x1d0>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	8b5b      	ldrh	r3, [r3, #26]
 8010484:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010488:	2b00      	cmp	r3, #0
 801048a:	d119      	bne.n	80104c0 <tcp_output+0x1d0>
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010490:	2b00      	cmp	r3, #0
 8010492:	d00b      	beq.n	80104ac <tcp_output+0x1bc>
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d110      	bne.n	80104c0 <tcp_output+0x1d0>
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104a2:	891a      	ldrh	r2, [r3, #8]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d209      	bcs.n	80104c0 <tcp_output+0x1d0>
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d004      	beq.n	80104c0 <tcp_output+0x1d0>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104bc:	2b08      	cmp	r3, #8
 80104be:	d901      	bls.n	80104c4 <tcp_output+0x1d4>
 80104c0:	2301      	movs	r3, #1
 80104c2:	e000      	b.n	80104c6 <tcp_output+0x1d6>
 80104c4:	2300      	movs	r3, #0
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d106      	bne.n	80104d8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	8b5b      	ldrh	r3, [r3, #26]
 80104ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	f000 80e4 	beq.w	80106a0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	7d1b      	ldrb	r3, [r3, #20]
 80104dc:	2b02      	cmp	r3, #2
 80104de:	d00d      	beq.n	80104fc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80104e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e2:	68db      	ldr	r3, [r3, #12]
 80104e4:	899b      	ldrh	r3, [r3, #12]
 80104e6:	b29c      	uxth	r4, r3
 80104e8:	2010      	movs	r0, #16
 80104ea:	f7f8 fb99 	bl	8008c20 <lwip_htons>
 80104ee:	4603      	mov	r3, r0
 80104f0:	461a      	mov	r2, r3
 80104f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f4:	68db      	ldr	r3, [r3, #12]
 80104f6:	4322      	orrs	r2, r4
 80104f8:	b292      	uxth	r2, r2
 80104fa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80104fc:	697a      	ldr	r2, [r7, #20]
 80104fe:	6879      	ldr	r1, [r7, #4]
 8010500:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010502:	f000 f909 	bl	8010718 <tcp_output_segment>
 8010506:	4603      	mov	r3, r0
 8010508:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801050a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d009      	beq.n	8010526 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	8b5b      	ldrh	r3, [r3, #26]
 8010516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801051a:	b29a      	uxth	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	835a      	strh	r2, [r3, #26]
      return err;
 8010520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010524:	e0d3      	b.n	80106ce <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	7d1b      	ldrb	r3, [r3, #20]
 8010532:	2b02      	cmp	r3, #2
 8010534:	d006      	beq.n	8010544 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	8b5b      	ldrh	r3, [r3, #26]
 801053a:	f023 0303 	bic.w	r3, r3, #3
 801053e:	b29a      	uxth	r2, r3
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010546:	68db      	ldr	r3, [r3, #12]
 8010548:	685b      	ldr	r3, [r3, #4]
 801054a:	4618      	mov	r0, r3
 801054c:	f7f8 fb7d 	bl	8008c4a <lwip_htonl>
 8010550:	4604      	mov	r4, r0
 8010552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010554:	891b      	ldrh	r3, [r3, #8]
 8010556:	461d      	mov	r5, r3
 8010558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801055a:	68db      	ldr	r3, [r3, #12]
 801055c:	899b      	ldrh	r3, [r3, #12]
 801055e:	b29b      	uxth	r3, r3
 8010560:	4618      	mov	r0, r3
 8010562:	f7f8 fb5d 	bl	8008c20 <lwip_htons>
 8010566:	4603      	mov	r3, r0
 8010568:	b2db      	uxtb	r3, r3
 801056a:	f003 0303 	and.w	r3, r3, #3
 801056e:	2b00      	cmp	r3, #0
 8010570:	d00e      	beq.n	8010590 <tcp_output+0x2a0>
 8010572:	2301      	movs	r3, #1
 8010574:	e00d      	b.n	8010592 <tcp_output+0x2a2>
 8010576:	bf00      	nop
 8010578:	08017094 	.word	0x08017094
 801057c:	080175d8 	.word	0x080175d8
 8010580:	080170e8 	.word	0x080170e8
 8010584:	080175f0 	.word	0x080175f0
 8010588:	200075e4 	.word	0x200075e4
 801058c:	08017618 	.word	0x08017618
 8010590:	2300      	movs	r3, #0
 8010592:	442b      	add	r3, r5
 8010594:	4423      	add	r3, r4
 8010596:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	1ad3      	subs	r3, r2, r3
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	da02      	bge.n	80105aa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	68ba      	ldr	r2, [r7, #8]
 80105a8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80105aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ac:	891b      	ldrh	r3, [r3, #8]
 80105ae:	461c      	mov	r4, r3
 80105b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b2:	68db      	ldr	r3, [r3, #12]
 80105b4:	899b      	ldrh	r3, [r3, #12]
 80105b6:	b29b      	uxth	r3, r3
 80105b8:	4618      	mov	r0, r3
 80105ba:	f7f8 fb31 	bl	8008c20 <lwip_htons>
 80105be:	4603      	mov	r3, r0
 80105c0:	b2db      	uxtb	r3, r3
 80105c2:	f003 0303 	and.w	r3, r3, #3
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d001      	beq.n	80105ce <tcp_output+0x2de>
 80105ca:	2301      	movs	r3, #1
 80105cc:	e000      	b.n	80105d0 <tcp_output+0x2e0>
 80105ce:	2300      	movs	r3, #0
 80105d0:	4423      	add	r3, r4
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d049      	beq.n	801066a <tcp_output+0x37a>
      seg->next = NULL;
 80105d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d8:	2200      	movs	r2, #0
 80105da:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d105      	bne.n	80105f0 <tcp_output+0x300>
        pcb->unacked = seg;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105e8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80105ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ec:	623b      	str	r3, [r7, #32]
 80105ee:	e03f      	b.n	8010670 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80105f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f2:	68db      	ldr	r3, [r3, #12]
 80105f4:	685b      	ldr	r3, [r3, #4]
 80105f6:	4618      	mov	r0, r3
 80105f8:	f7f8 fb27 	bl	8008c4a <lwip_htonl>
 80105fc:	4604      	mov	r4, r0
 80105fe:	6a3b      	ldr	r3, [r7, #32]
 8010600:	68db      	ldr	r3, [r3, #12]
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	4618      	mov	r0, r3
 8010606:	f7f8 fb20 	bl	8008c4a <lwip_htonl>
 801060a:	4603      	mov	r3, r0
 801060c:	1ae3      	subs	r3, r4, r3
 801060e:	2b00      	cmp	r3, #0
 8010610:	da24      	bge.n	801065c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	3370      	adds	r3, #112	; 0x70
 8010616:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010618:	e002      	b.n	8010620 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010620:	69fb      	ldr	r3, [r7, #28]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d011      	beq.n	801064c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	68db      	ldr	r3, [r3, #12]
 801062e:	685b      	ldr	r3, [r3, #4]
 8010630:	4618      	mov	r0, r3
 8010632:	f7f8 fb0a 	bl	8008c4a <lwip_htonl>
 8010636:	4604      	mov	r4, r0
 8010638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801063a:	68db      	ldr	r3, [r3, #12]
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	4618      	mov	r0, r3
 8010640:	f7f8 fb03 	bl	8008c4a <lwip_htonl>
 8010644:	4603      	mov	r3, r0
 8010646:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010648:	2b00      	cmp	r3, #0
 801064a:	dbe6      	blt.n	801061a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801064c:	69fb      	ldr	r3, [r7, #28]
 801064e:	681a      	ldr	r2, [r3, #0]
 8010650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010652:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010654:	69fb      	ldr	r3, [r7, #28]
 8010656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010658:	601a      	str	r2, [r3, #0]
 801065a:	e009      	b.n	8010670 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801065c:	6a3b      	ldr	r3, [r7, #32]
 801065e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010660:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010662:	6a3b      	ldr	r3, [r7, #32]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	623b      	str	r3, [r7, #32]
 8010668:	e002      	b.n	8010670 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801066a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801066c:	f7fb ff05 	bl	800c47a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010674:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010678:	2b00      	cmp	r3, #0
 801067a:	d012      	beq.n	80106a2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801067c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067e:	68db      	ldr	r3, [r3, #12]
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	4618      	mov	r0, r3
 8010684:	f7f8 fae1 	bl	8008c4a <lwip_htonl>
 8010688:	4602      	mov	r2, r0
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801068e:	1ad3      	subs	r3, r2, r3
 8010690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010692:	8912      	ldrh	r2, [r2, #8]
 8010694:	4413      	add	r3, r2
  while (seg != NULL &&
 8010696:	69ba      	ldr	r2, [r7, #24]
 8010698:	429a      	cmp	r2, r3
 801069a:	f4bf aed9 	bcs.w	8010450 <tcp_output+0x160>
 801069e:	e000      	b.n	80106a2 <tcp_output+0x3b2>
      break;
 80106a0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d108      	bne.n	80106bc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2200      	movs	r2, #0
 80106ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80106b2:	e004      	b.n	80106be <tcp_output+0x3ce>
    goto output_done;
 80106b4:	bf00      	nop
 80106b6:	e002      	b.n	80106be <tcp_output+0x3ce>
    goto output_done;
 80106b8:	bf00      	nop
 80106ba:	e000      	b.n	80106be <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80106bc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	8b5b      	ldrh	r3, [r3, #26]
 80106c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80106c6:	b29a      	uxth	r2, r3
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80106cc:	2300      	movs	r3, #0
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3728      	adds	r7, #40	; 0x28
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bdb0      	pop	{r4, r5, r7, pc}
 80106d6:	bf00      	nop

080106d8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d106      	bne.n	80106f4 <tcp_output_segment_busy+0x1c>
 80106e6:	4b09      	ldr	r3, [pc, #36]	; (801070c <tcp_output_segment_busy+0x34>)
 80106e8:	f240 529a 	movw	r2, #1434	; 0x59a
 80106ec:	4908      	ldr	r1, [pc, #32]	; (8010710 <tcp_output_segment_busy+0x38>)
 80106ee:	4809      	ldr	r0, [pc, #36]	; (8010714 <tcp_output_segment_busy+0x3c>)
 80106f0:	f003 fe52 	bl	8014398 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	7b9b      	ldrb	r3, [r3, #14]
 80106fa:	2b01      	cmp	r3, #1
 80106fc:	d001      	beq.n	8010702 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80106fe:	2301      	movs	r3, #1
 8010700:	e000      	b.n	8010704 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010702:	2300      	movs	r3, #0
}
 8010704:	4618      	mov	r0, r3
 8010706:	3708      	adds	r7, #8
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}
 801070c:	08017094 	.word	0x08017094
 8010710:	08017630 	.word	0x08017630
 8010714:	080170e8 	.word	0x080170e8

08010718 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010718:	b5b0      	push	{r4, r5, r7, lr}
 801071a:	b08c      	sub	sp, #48	; 0x30
 801071c:	af04      	add	r7, sp, #16
 801071e:	60f8      	str	r0, [r7, #12]
 8010720:	60b9      	str	r1, [r7, #8]
 8010722:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d106      	bne.n	8010738 <tcp_output_segment+0x20>
 801072a:	4b63      	ldr	r3, [pc, #396]	; (80108b8 <tcp_output_segment+0x1a0>)
 801072c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010730:	4962      	ldr	r1, [pc, #392]	; (80108bc <tcp_output_segment+0x1a4>)
 8010732:	4863      	ldr	r0, [pc, #396]	; (80108c0 <tcp_output_segment+0x1a8>)
 8010734:	f003 fe30 	bl	8014398 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d106      	bne.n	801074c <tcp_output_segment+0x34>
 801073e:	4b5e      	ldr	r3, [pc, #376]	; (80108b8 <tcp_output_segment+0x1a0>)
 8010740:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010744:	495f      	ldr	r1, [pc, #380]	; (80108c4 <tcp_output_segment+0x1ac>)
 8010746:	485e      	ldr	r0, [pc, #376]	; (80108c0 <tcp_output_segment+0x1a8>)
 8010748:	f003 fe26 	bl	8014398 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d106      	bne.n	8010760 <tcp_output_segment+0x48>
 8010752:	4b59      	ldr	r3, [pc, #356]	; (80108b8 <tcp_output_segment+0x1a0>)
 8010754:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010758:	495b      	ldr	r1, [pc, #364]	; (80108c8 <tcp_output_segment+0x1b0>)
 801075a:	4859      	ldr	r0, [pc, #356]	; (80108c0 <tcp_output_segment+0x1a8>)
 801075c:	f003 fe1c 	bl	8014398 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010760:	68f8      	ldr	r0, [r7, #12]
 8010762:	f7ff ffb9 	bl	80106d8 <tcp_output_segment_busy>
 8010766:	4603      	mov	r3, r0
 8010768:	2b00      	cmp	r3, #0
 801076a:	d001      	beq.n	8010770 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801076c:	2300      	movs	r3, #0
 801076e:	e09f      	b.n	80108b0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	68dc      	ldr	r4, [r3, #12]
 8010778:	4610      	mov	r0, r2
 801077a:	f7f8 fa66 	bl	8008c4a <lwip_htonl>
 801077e:	4603      	mov	r3, r0
 8010780:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	68dc      	ldr	r4, [r3, #12]
 801078a:	4610      	mov	r0, r2
 801078c:	f7f8 fa48 	bl	8008c20 <lwip_htons>
 8010790:	4603      	mov	r3, r0
 8010792:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010798:	68ba      	ldr	r2, [r7, #8]
 801079a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801079c:	441a      	add	r2, r3
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	68db      	ldr	r3, [r3, #12]
 80107a6:	3314      	adds	r3, #20
 80107a8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	7a9b      	ldrb	r3, [r3, #10]
 80107ae:	f003 0301 	and.w	r3, r3, #1
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d015      	beq.n	80107e2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	3304      	adds	r3, #4
 80107ba:	461a      	mov	r2, r3
 80107bc:	6879      	ldr	r1, [r7, #4]
 80107be:	f44f 7006 	mov.w	r0, #536	; 0x218
 80107c2:	f7fc fa37 	bl	800cc34 <tcp_eff_send_mss_netif>
 80107c6:	4603      	mov	r3, r0
 80107c8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80107ca:	8b7b      	ldrh	r3, [r7, #26]
 80107cc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80107d0:	4618      	mov	r0, r3
 80107d2:	f7f8 fa3a 	bl	8008c4a <lwip_htonl>
 80107d6:	4602      	mov	r2, r0
 80107d8:	69fb      	ldr	r3, [r7, #28]
 80107da:	601a      	str	r2, [r3, #0]
    opts += 1;
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	3304      	adds	r3, #4
 80107e0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	da02      	bge.n	80107f2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	2200      	movs	r2, #0
 80107f0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d10c      	bne.n	8010814 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80107fa:	4b34      	ldr	r3, [pc, #208]	; (80108cc <tcp_output_segment+0x1b4>)
 80107fc:	681a      	ldr	r2, [r3, #0]
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	68db      	ldr	r3, [r3, #12]
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	4618      	mov	r0, r3
 801080a:	f7f8 fa1e 	bl	8008c4a <lwip_htonl>
 801080e:	4602      	mov	r2, r0
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	68da      	ldr	r2, [r3, #12]
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	685b      	ldr	r3, [r3, #4]
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	1ad3      	subs	r3, r2, r3
 8010820:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	685b      	ldr	r3, [r3, #4]
 8010826:	8959      	ldrh	r1, [r3, #10]
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	685b      	ldr	r3, [r3, #4]
 801082c:	8b3a      	ldrh	r2, [r7, #24]
 801082e:	1a8a      	subs	r2, r1, r2
 8010830:	b292      	uxth	r2, r2
 8010832:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	685b      	ldr	r3, [r3, #4]
 8010838:	8919      	ldrh	r1, [r3, #8]
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	8b3a      	ldrh	r2, [r7, #24]
 8010840:	1a8a      	subs	r2, r1, r2
 8010842:	b292      	uxth	r2, r2
 8010844:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	685b      	ldr	r3, [r3, #4]
 801084a:	68fa      	ldr	r2, [r7, #12]
 801084c:	68d2      	ldr	r2, [r2, #12]
 801084e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	68db      	ldr	r3, [r3, #12]
 8010854:	2200      	movs	r2, #0
 8010856:	741a      	strb	r2, [r3, #16]
 8010858:	2200      	movs	r2, #0
 801085a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	68db      	ldr	r3, [r3, #12]
 8010860:	f103 0214 	add.w	r2, r3, #20
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	7a9b      	ldrb	r3, [r3, #10]
 8010868:	009b      	lsls	r3, r3, #2
 801086a:	f003 0304 	and.w	r3, r3, #4
 801086e:	4413      	add	r3, r2
 8010870:	69fa      	ldr	r2, [r7, #28]
 8010872:	429a      	cmp	r2, r3
 8010874:	d006      	beq.n	8010884 <tcp_output_segment+0x16c>
 8010876:	4b10      	ldr	r3, [pc, #64]	; (80108b8 <tcp_output_segment+0x1a0>)
 8010878:	f240 621c 	movw	r2, #1564	; 0x61c
 801087c:	4914      	ldr	r1, [pc, #80]	; (80108d0 <tcp_output_segment+0x1b8>)
 801087e:	4810      	ldr	r0, [pc, #64]	; (80108c0 <tcp_output_segment+0x1a8>)
 8010880:	f003 fd8a 	bl	8014398 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	6858      	ldr	r0, [r3, #4]
 8010888:	68b9      	ldr	r1, [r7, #8]
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	1d1c      	adds	r4, r3, #4
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	7add      	ldrb	r5, [r3, #11]
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	7a9b      	ldrb	r3, [r3, #10]
 8010896:	687a      	ldr	r2, [r7, #4]
 8010898:	9202      	str	r2, [sp, #8]
 801089a:	2206      	movs	r2, #6
 801089c:	9201      	str	r2, [sp, #4]
 801089e:	9300      	str	r3, [sp, #0]
 80108a0:	462b      	mov	r3, r5
 80108a2:	4622      	mov	r2, r4
 80108a4:	f002 fcee 	bl	8013284 <ip4_output_if>
 80108a8:	4603      	mov	r3, r0
 80108aa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80108ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80108b0:	4618      	mov	r0, r3
 80108b2:	3720      	adds	r7, #32
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bdb0      	pop	{r4, r5, r7, pc}
 80108b8:	08017094 	.word	0x08017094
 80108bc:	08017658 	.word	0x08017658
 80108c0:	080170e8 	.word	0x080170e8
 80108c4:	08017678 	.word	0x08017678
 80108c8:	08017698 	.word	0x08017698
 80108cc:	200075d4 	.word	0x200075d4
 80108d0:	080176bc 	.word	0x080176bc

080108d4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80108d4:	b5b0      	push	{r4, r5, r7, lr}
 80108d6:	b084      	sub	sp, #16
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d106      	bne.n	80108f0 <tcp_rexmit_rto_prepare+0x1c>
 80108e2:	4b31      	ldr	r3, [pc, #196]	; (80109a8 <tcp_rexmit_rto_prepare+0xd4>)
 80108e4:	f240 6263 	movw	r2, #1635	; 0x663
 80108e8:	4930      	ldr	r1, [pc, #192]	; (80109ac <tcp_rexmit_rto_prepare+0xd8>)
 80108ea:	4831      	ldr	r0, [pc, #196]	; (80109b0 <tcp_rexmit_rto_prepare+0xdc>)
 80108ec:	f003 fd54 	bl	8014398 <iprintf>

  if (pcb->unacked == NULL) {
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d102      	bne.n	80108fe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80108f8:	f06f 0305 	mvn.w	r3, #5
 80108fc:	e050      	b.n	80109a0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010902:	60fb      	str	r3, [r7, #12]
 8010904:	e00b      	b.n	801091e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010906:	68f8      	ldr	r0, [r7, #12]
 8010908:	f7ff fee6 	bl	80106d8 <tcp_output_segment_busy>
 801090c:	4603      	mov	r3, r0
 801090e:	2b00      	cmp	r3, #0
 8010910:	d002      	beq.n	8010918 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010912:	f06f 0305 	mvn.w	r3, #5
 8010916:	e043      	b.n	80109a0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	60fb      	str	r3, [r7, #12]
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d1ef      	bne.n	8010906 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010926:	68f8      	ldr	r0, [r7, #12]
 8010928:	f7ff fed6 	bl	80106d8 <tcp_output_segment_busy>
 801092c:	4603      	mov	r3, r0
 801092e:	2b00      	cmp	r3, #0
 8010930:	d002      	beq.n	8010938 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010932:	f06f 0305 	mvn.w	r3, #5
 8010936:	e033      	b.n	80109a0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2200      	movs	r2, #0
 801094c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	8b5b      	ldrh	r3, [r3, #26]
 8010952:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010956:	b29a      	uxth	r2, r3
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	68db      	ldr	r3, [r3, #12]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	4618      	mov	r0, r3
 8010964:	f7f8 f971 	bl	8008c4a <lwip_htonl>
 8010968:	4604      	mov	r4, r0
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	891b      	ldrh	r3, [r3, #8]
 801096e:	461d      	mov	r5, r3
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	899b      	ldrh	r3, [r3, #12]
 8010976:	b29b      	uxth	r3, r3
 8010978:	4618      	mov	r0, r3
 801097a:	f7f8 f951 	bl	8008c20 <lwip_htons>
 801097e:	4603      	mov	r3, r0
 8010980:	b2db      	uxtb	r3, r3
 8010982:	f003 0303 	and.w	r3, r3, #3
 8010986:	2b00      	cmp	r3, #0
 8010988:	d001      	beq.n	801098e <tcp_rexmit_rto_prepare+0xba>
 801098a:	2301      	movs	r3, #1
 801098c:	e000      	b.n	8010990 <tcp_rexmit_rto_prepare+0xbc>
 801098e:	2300      	movs	r3, #0
 8010990:	442b      	add	r3, r5
 8010992:	18e2      	adds	r2, r4, r3
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2200      	movs	r2, #0
 801099c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801099e:	2300      	movs	r3, #0
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3710      	adds	r7, #16
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bdb0      	pop	{r4, r5, r7, pc}
 80109a8:	08017094 	.word	0x08017094
 80109ac:	080176d0 	.word	0x080176d0
 80109b0:	080170e8 	.word	0x080170e8

080109b4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d106      	bne.n	80109d0 <tcp_rexmit_rto_commit+0x1c>
 80109c2:	4b0d      	ldr	r3, [pc, #52]	; (80109f8 <tcp_rexmit_rto_commit+0x44>)
 80109c4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80109c8:	490c      	ldr	r1, [pc, #48]	; (80109fc <tcp_rexmit_rto_commit+0x48>)
 80109ca:	480d      	ldr	r0, [pc, #52]	; (8010a00 <tcp_rexmit_rto_commit+0x4c>)
 80109cc:	f003 fce4 	bl	8014398 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80109d6:	2bff      	cmp	r3, #255	; 0xff
 80109d8:	d007      	beq.n	80109ea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80109e0:	3301      	adds	r3, #1
 80109e2:	b2da      	uxtb	r2, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f7ff fc80 	bl	80102f0 <tcp_output>
}
 80109f0:	bf00      	nop
 80109f2:	3708      	adds	r7, #8
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}
 80109f8:	08017094 	.word	0x08017094
 80109fc:	080176f4 	.word	0x080176f4
 8010a00:	080170e8 	.word	0x080170e8

08010a04 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b082      	sub	sp, #8
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d106      	bne.n	8010a20 <tcp_rexmit_rto+0x1c>
 8010a12:	4b0a      	ldr	r3, [pc, #40]	; (8010a3c <tcp_rexmit_rto+0x38>)
 8010a14:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010a18:	4909      	ldr	r1, [pc, #36]	; (8010a40 <tcp_rexmit_rto+0x3c>)
 8010a1a:	480a      	ldr	r0, [pc, #40]	; (8010a44 <tcp_rexmit_rto+0x40>)
 8010a1c:	f003 fcbc 	bl	8014398 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f7ff ff57 	bl	80108d4 <tcp_rexmit_rto_prepare>
 8010a26:	4603      	mov	r3, r0
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d102      	bne.n	8010a32 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f7ff ffc1 	bl	80109b4 <tcp_rexmit_rto_commit>
  }
}
 8010a32:	bf00      	nop
 8010a34:	3708      	adds	r7, #8
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	08017094 	.word	0x08017094
 8010a40:	08017718 	.word	0x08017718
 8010a44:	080170e8 	.word	0x080170e8

08010a48 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010a48:	b590      	push	{r4, r7, lr}
 8010a4a:	b085      	sub	sp, #20
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d106      	bne.n	8010a64 <tcp_rexmit+0x1c>
 8010a56:	4b2f      	ldr	r3, [pc, #188]	; (8010b14 <tcp_rexmit+0xcc>)
 8010a58:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010a5c:	492e      	ldr	r1, [pc, #184]	; (8010b18 <tcp_rexmit+0xd0>)
 8010a5e:	482f      	ldr	r0, [pc, #188]	; (8010b1c <tcp_rexmit+0xd4>)
 8010a60:	f003 fc9a 	bl	8014398 <iprintf>

  if (pcb->unacked == NULL) {
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d102      	bne.n	8010a72 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010a6c:	f06f 0305 	mvn.w	r3, #5
 8010a70:	e04c      	b.n	8010b0c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a76:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010a78:	68b8      	ldr	r0, [r7, #8]
 8010a7a:	f7ff fe2d 	bl	80106d8 <tcp_output_segment_busy>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d002      	beq.n	8010a8a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010a84:	f06f 0305 	mvn.w	r3, #5
 8010a88:	e040      	b.n	8010b0c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	681a      	ldr	r2, [r3, #0]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	336c      	adds	r3, #108	; 0x6c
 8010a96:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010a98:	e002      	b.n	8010aa0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d011      	beq.n	8010acc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	68db      	ldr	r3, [r3, #12]
 8010aae:	685b      	ldr	r3, [r3, #4]
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7f8 f8ca 	bl	8008c4a <lwip_htonl>
 8010ab6:	4604      	mov	r4, r0
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	68db      	ldr	r3, [r3, #12]
 8010abc:	685b      	ldr	r3, [r3, #4]
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7f8 f8c3 	bl	8008c4a <lwip_htonl>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	dbe6      	blt.n	8010a9a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681a      	ldr	r2, [r3, #0]
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	68ba      	ldr	r2, [r7, #8]
 8010ad8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d103      	bne.n	8010aea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010af0:	2bff      	cmp	r3, #255	; 0xff
 8010af2:	d007      	beq.n	8010b04 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010afa:	3301      	adds	r3, #1
 8010afc:	b2da      	uxtb	r2, r3
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2200      	movs	r2, #0
 8010b08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010b0a:	2300      	movs	r3, #0
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3714      	adds	r7, #20
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd90      	pop	{r4, r7, pc}
 8010b14:	08017094 	.word	0x08017094
 8010b18:	08017734 	.word	0x08017734
 8010b1c:	080170e8 	.word	0x080170e8

08010b20 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d106      	bne.n	8010b3c <tcp_rexmit_fast+0x1c>
 8010b2e:	4b2a      	ldr	r3, [pc, #168]	; (8010bd8 <tcp_rexmit_fast+0xb8>)
 8010b30:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010b34:	4929      	ldr	r1, [pc, #164]	; (8010bdc <tcp_rexmit_fast+0xbc>)
 8010b36:	482a      	ldr	r0, [pc, #168]	; (8010be0 <tcp_rexmit_fast+0xc0>)
 8010b38:	f003 fc2e 	bl	8014398 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d045      	beq.n	8010bd0 <tcp_rexmit_fast+0xb0>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	8b5b      	ldrh	r3, [r3, #26]
 8010b48:	f003 0304 	and.w	r3, r3, #4
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d13f      	bne.n	8010bd0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f7ff ff79 	bl	8010a48 <tcp_rexmit>
 8010b56:	4603      	mov	r3, r0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d139      	bne.n	8010bd0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	bf28      	it	cs
 8010b6c:	4613      	movcs	r3, r2
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	da00      	bge.n	8010b76 <tcp_rexmit_fast+0x56>
 8010b74:	3301      	adds	r3, #1
 8010b76:	105b      	asrs	r3, r3, #1
 8010b78:	b29a      	uxth	r2, r3
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010b86:	461a      	mov	r2, r3
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b8c:	005b      	lsls	r3, r3, #1
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d206      	bcs.n	8010ba0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b96:	005b      	lsls	r3, r3, #1
 8010b98:	b29a      	uxth	r2, r3
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010baa:	4619      	mov	r1, r3
 8010bac:	0049      	lsls	r1, r1, #1
 8010bae:	440b      	add	r3, r1
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	4413      	add	r3, r2
 8010bb4:	b29a      	uxth	r2, r3
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	8b5b      	ldrh	r3, [r3, #26]
 8010bc0:	f043 0304 	orr.w	r3, r3, #4
 8010bc4:	b29a      	uxth	r2, r3
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2200      	movs	r2, #0
 8010bce:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010bd0:	bf00      	nop
 8010bd2:	3708      	adds	r7, #8
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}
 8010bd8:	08017094 	.word	0x08017094
 8010bdc:	0801774c 	.word	0x0801774c
 8010be0:	080170e8 	.word	0x080170e8

08010be4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b086      	sub	sp, #24
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	60f8      	str	r0, [r7, #12]
 8010bec:	607b      	str	r3, [r7, #4]
 8010bee:	460b      	mov	r3, r1
 8010bf0:	817b      	strh	r3, [r7, #10]
 8010bf2:	4613      	mov	r3, r2
 8010bf4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010bf6:	897a      	ldrh	r2, [r7, #10]
 8010bf8:	893b      	ldrh	r3, [r7, #8]
 8010bfa:	4413      	add	r3, r2
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	3314      	adds	r3, #20
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c06:	4619      	mov	r1, r3
 8010c08:	2022      	movs	r0, #34	; 0x22
 8010c0a:	f7f9 faa3 	bl	800a154 <pbuf_alloc>
 8010c0e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d04d      	beq.n	8010cb2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010c16:	897b      	ldrh	r3, [r7, #10]
 8010c18:	3313      	adds	r3, #19
 8010c1a:	697a      	ldr	r2, [r7, #20]
 8010c1c:	8952      	ldrh	r2, [r2, #10]
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	db06      	blt.n	8010c30 <tcp_output_alloc_header_common+0x4c>
 8010c22:	4b26      	ldr	r3, [pc, #152]	; (8010cbc <tcp_output_alloc_header_common+0xd8>)
 8010c24:	f240 7223 	movw	r2, #1827	; 0x723
 8010c28:	4925      	ldr	r1, [pc, #148]	; (8010cc0 <tcp_output_alloc_header_common+0xdc>)
 8010c2a:	4826      	ldr	r0, [pc, #152]	; (8010cc4 <tcp_output_alloc_header_common+0xe0>)
 8010c2c:	f003 fbb4 	bl	8014398 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	685b      	ldr	r3, [r3, #4]
 8010c34:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010c36:	8c3b      	ldrh	r3, [r7, #32]
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7f7 fff1 	bl	8008c20 <lwip_htons>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	461a      	mov	r2, r3
 8010c42:	693b      	ldr	r3, [r7, #16]
 8010c44:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010c46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7f7 ffe9 	bl	8008c20 <lwip_htons>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	461a      	mov	r2, r3
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	687a      	ldr	r2, [r7, #4]
 8010c5a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010c5c:	68f8      	ldr	r0, [r7, #12]
 8010c5e:	f7f7 fff4 	bl	8008c4a <lwip_htonl>
 8010c62:	4602      	mov	r2, r0
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010c68:	897b      	ldrh	r3, [r7, #10]
 8010c6a:	089b      	lsrs	r3, r3, #2
 8010c6c:	b29b      	uxth	r3, r3
 8010c6e:	3305      	adds	r3, #5
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	031b      	lsls	r3, r3, #12
 8010c74:	b29a      	uxth	r2, r3
 8010c76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	4313      	orrs	r3, r2
 8010c7e:	b29b      	uxth	r3, r3
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7f7 ffcd 	bl	8008c20 <lwip_htons>
 8010c86:	4603      	mov	r3, r0
 8010c88:	461a      	mov	r2, r3
 8010c8a:	693b      	ldr	r3, [r7, #16]
 8010c8c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010c8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010c90:	4618      	mov	r0, r3
 8010c92:	f7f7 ffc5 	bl	8008c20 <lwip_htons>
 8010c96:	4603      	mov	r3, r0
 8010c98:	461a      	mov	r2, r3
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	741a      	strb	r2, [r3, #16]
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010ca8:	693b      	ldr	r3, [r7, #16]
 8010caa:	2200      	movs	r2, #0
 8010cac:	749a      	strb	r2, [r3, #18]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010cb2:	697b      	ldr	r3, [r7, #20]
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3718      	adds	r7, #24
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	08017094 	.word	0x08017094
 8010cc0:	0801776c 	.word	0x0801776c
 8010cc4:	080170e8 	.word	0x080170e8

08010cc8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010cc8:	b5b0      	push	{r4, r5, r7, lr}
 8010cca:	b08a      	sub	sp, #40	; 0x28
 8010ccc:	af04      	add	r7, sp, #16
 8010cce:	60f8      	str	r0, [r7, #12]
 8010cd0:	607b      	str	r3, [r7, #4]
 8010cd2:	460b      	mov	r3, r1
 8010cd4:	817b      	strh	r3, [r7, #10]
 8010cd6:	4613      	mov	r3, r2
 8010cd8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d106      	bne.n	8010cee <tcp_output_alloc_header+0x26>
 8010ce0:	4b15      	ldr	r3, [pc, #84]	; (8010d38 <tcp_output_alloc_header+0x70>)
 8010ce2:	f240 7242 	movw	r2, #1858	; 0x742
 8010ce6:	4915      	ldr	r1, [pc, #84]	; (8010d3c <tcp_output_alloc_header+0x74>)
 8010ce8:	4815      	ldr	r0, [pc, #84]	; (8010d40 <tcp_output_alloc_header+0x78>)
 8010cea:	f003 fb55 	bl	8014398 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	8adb      	ldrh	r3, [r3, #22]
 8010cf6:	68fa      	ldr	r2, [r7, #12]
 8010cf8:	8b12      	ldrh	r2, [r2, #24]
 8010cfa:	68f9      	ldr	r1, [r7, #12]
 8010cfc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010cfe:	893d      	ldrh	r5, [r7, #8]
 8010d00:	897c      	ldrh	r4, [r7, #10]
 8010d02:	9103      	str	r1, [sp, #12]
 8010d04:	2110      	movs	r1, #16
 8010d06:	9102      	str	r1, [sp, #8]
 8010d08:	9201      	str	r2, [sp, #4]
 8010d0a:	9300      	str	r3, [sp, #0]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	462a      	mov	r2, r5
 8010d10:	4621      	mov	r1, r4
 8010d12:	f7ff ff67 	bl	8010be4 <tcp_output_alloc_header_common>
 8010d16:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d006      	beq.n	8010d2c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d22:	68fa      	ldr	r2, [r7, #12]
 8010d24:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010d26:	441a      	add	r2, r3
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010d2c:	697b      	ldr	r3, [r7, #20]
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3718      	adds	r7, #24
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bdb0      	pop	{r4, r5, r7, pc}
 8010d36:	bf00      	nop
 8010d38:	08017094 	.word	0x08017094
 8010d3c:	0801779c 	.word	0x0801779c
 8010d40:	080170e8 	.word	0x080170e8

08010d44 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b088      	sub	sp, #32
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	60b9      	str	r1, [r7, #8]
 8010d4e:	4611      	mov	r1, r2
 8010d50:	461a      	mov	r2, r3
 8010d52:	460b      	mov	r3, r1
 8010d54:	71fb      	strb	r3, [r7, #7]
 8010d56:	4613      	mov	r3, r2
 8010d58:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d106      	bne.n	8010d72 <tcp_output_fill_options+0x2e>
 8010d64:	4b13      	ldr	r3, [pc, #76]	; (8010db4 <tcp_output_fill_options+0x70>)
 8010d66:	f240 7256 	movw	r2, #1878	; 0x756
 8010d6a:	4913      	ldr	r1, [pc, #76]	; (8010db8 <tcp_output_fill_options+0x74>)
 8010d6c:	4813      	ldr	r0, [pc, #76]	; (8010dbc <tcp_output_fill_options+0x78>)
 8010d6e:	f003 fb13 	bl	8014398 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010d78:	69bb      	ldr	r3, [r7, #24]
 8010d7a:	3314      	adds	r3, #20
 8010d7c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010d7e:	69bb      	ldr	r3, [r7, #24]
 8010d80:	f103 0214 	add.w	r2, r3, #20
 8010d84:	8bfb      	ldrh	r3, [r7, #30]
 8010d86:	009b      	lsls	r3, r3, #2
 8010d88:	4619      	mov	r1, r3
 8010d8a:	79fb      	ldrb	r3, [r7, #7]
 8010d8c:	009b      	lsls	r3, r3, #2
 8010d8e:	f003 0304 	and.w	r3, r3, #4
 8010d92:	440b      	add	r3, r1
 8010d94:	4413      	add	r3, r2
 8010d96:	697a      	ldr	r2, [r7, #20]
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	d006      	beq.n	8010daa <tcp_output_fill_options+0x66>
 8010d9c:	4b05      	ldr	r3, [pc, #20]	; (8010db4 <tcp_output_fill_options+0x70>)
 8010d9e:	f240 7275 	movw	r2, #1909	; 0x775
 8010da2:	4907      	ldr	r1, [pc, #28]	; (8010dc0 <tcp_output_fill_options+0x7c>)
 8010da4:	4805      	ldr	r0, [pc, #20]	; (8010dbc <tcp_output_fill_options+0x78>)
 8010da6:	f003 faf7 	bl	8014398 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010daa:	bf00      	nop
 8010dac:	3720      	adds	r7, #32
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}
 8010db2:	bf00      	nop
 8010db4:	08017094 	.word	0x08017094
 8010db8:	080177c4 	.word	0x080177c4
 8010dbc:	080170e8 	.word	0x080170e8
 8010dc0:	080176bc 	.word	0x080176bc

08010dc4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b08a      	sub	sp, #40	; 0x28
 8010dc8:	af04      	add	r7, sp, #16
 8010dca:	60f8      	str	r0, [r7, #12]
 8010dcc:	60b9      	str	r1, [r7, #8]
 8010dce:	607a      	str	r2, [r7, #4]
 8010dd0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d106      	bne.n	8010de6 <tcp_output_control_segment+0x22>
 8010dd8:	4b1c      	ldr	r3, [pc, #112]	; (8010e4c <tcp_output_control_segment+0x88>)
 8010dda:	f240 7287 	movw	r2, #1927	; 0x787
 8010dde:	491c      	ldr	r1, [pc, #112]	; (8010e50 <tcp_output_control_segment+0x8c>)
 8010de0:	481c      	ldr	r0, [pc, #112]	; (8010e54 <tcp_output_control_segment+0x90>)
 8010de2:	f003 fad9 	bl	8014398 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010de6:	683a      	ldr	r2, [r7, #0]
 8010de8:	6879      	ldr	r1, [r7, #4]
 8010dea:	68f8      	ldr	r0, [r7, #12]
 8010dec:	f7fe fae8 	bl	800f3c0 <tcp_route>
 8010df0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d102      	bne.n	8010dfe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010df8:	23fc      	movs	r3, #252	; 0xfc
 8010dfa:	75fb      	strb	r3, [r7, #23]
 8010dfc:	e01c      	b.n	8010e38 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d006      	beq.n	8010e12 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	7adb      	ldrb	r3, [r3, #11]
 8010e08:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	7a9b      	ldrb	r3, [r3, #10]
 8010e0e:	757b      	strb	r3, [r7, #21]
 8010e10:	e003      	b.n	8010e1a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010e12:	23ff      	movs	r3, #255	; 0xff
 8010e14:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010e16:	2300      	movs	r3, #0
 8010e18:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010e1a:	7dba      	ldrb	r2, [r7, #22]
 8010e1c:	693b      	ldr	r3, [r7, #16]
 8010e1e:	9302      	str	r3, [sp, #8]
 8010e20:	2306      	movs	r3, #6
 8010e22:	9301      	str	r3, [sp, #4]
 8010e24:	7d7b      	ldrb	r3, [r7, #21]
 8010e26:	9300      	str	r3, [sp, #0]
 8010e28:	4613      	mov	r3, r2
 8010e2a:	683a      	ldr	r2, [r7, #0]
 8010e2c:	6879      	ldr	r1, [r7, #4]
 8010e2e:	68b8      	ldr	r0, [r7, #8]
 8010e30:	f002 fa28 	bl	8013284 <ip4_output_if>
 8010e34:	4603      	mov	r3, r0
 8010e36:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010e38:	68b8      	ldr	r0, [r7, #8]
 8010e3a:	f7f9 fc6f 	bl	800a71c <pbuf_free>
  return err;
 8010e3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3718      	adds	r7, #24
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}
 8010e4a:	bf00      	nop
 8010e4c:	08017094 	.word	0x08017094
 8010e50:	080177ec 	.word	0x080177ec
 8010e54:	080170e8 	.word	0x080170e8

08010e58 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010e58:	b590      	push	{r4, r7, lr}
 8010e5a:	b08b      	sub	sp, #44	; 0x2c
 8010e5c:	af04      	add	r7, sp, #16
 8010e5e:	60f8      	str	r0, [r7, #12]
 8010e60:	60b9      	str	r1, [r7, #8]
 8010e62:	607a      	str	r2, [r7, #4]
 8010e64:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d106      	bne.n	8010e7a <tcp_rst+0x22>
 8010e6c:	4b1f      	ldr	r3, [pc, #124]	; (8010eec <tcp_rst+0x94>)
 8010e6e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010e72:	491f      	ldr	r1, [pc, #124]	; (8010ef0 <tcp_rst+0x98>)
 8010e74:	481f      	ldr	r0, [pc, #124]	; (8010ef4 <tcp_rst+0x9c>)
 8010e76:	f003 fa8f 	bl	8014398 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d106      	bne.n	8010e8e <tcp_rst+0x36>
 8010e80:	4b1a      	ldr	r3, [pc, #104]	; (8010eec <tcp_rst+0x94>)
 8010e82:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010e86:	491c      	ldr	r1, [pc, #112]	; (8010ef8 <tcp_rst+0xa0>)
 8010e88:	481a      	ldr	r0, [pc, #104]	; (8010ef4 <tcp_rst+0x9c>)
 8010e8a:	f003 fa85 	bl	8014398 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010e8e:	2300      	movs	r3, #0
 8010e90:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010e92:	f246 0308 	movw	r3, #24584	; 0x6008
 8010e96:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010e98:	7dfb      	ldrb	r3, [r7, #23]
 8010e9a:	b29c      	uxth	r4, r3
 8010e9c:	68b8      	ldr	r0, [r7, #8]
 8010e9e:	f7f7 fed4 	bl	8008c4a <lwip_htonl>
 8010ea2:	4602      	mov	r2, r0
 8010ea4:	8abb      	ldrh	r3, [r7, #20]
 8010ea6:	9303      	str	r3, [sp, #12]
 8010ea8:	2314      	movs	r3, #20
 8010eaa:	9302      	str	r3, [sp, #8]
 8010eac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010eae:	9301      	str	r3, [sp, #4]
 8010eb0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010eb2:	9300      	str	r3, [sp, #0]
 8010eb4:	4613      	mov	r3, r2
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	4621      	mov	r1, r4
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f7ff fe92 	bl	8010be4 <tcp_output_alloc_header_common>
 8010ec0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d00c      	beq.n	8010ee2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010ec8:	7dfb      	ldrb	r3, [r7, #23]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	6939      	ldr	r1, [r7, #16]
 8010ece:	68f8      	ldr	r0, [r7, #12]
 8010ed0:	f7ff ff38 	bl	8010d44 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ed6:	683a      	ldr	r2, [r7, #0]
 8010ed8:	6939      	ldr	r1, [r7, #16]
 8010eda:	68f8      	ldr	r0, [r7, #12]
 8010edc:	f7ff ff72 	bl	8010dc4 <tcp_output_control_segment>
 8010ee0:	e000      	b.n	8010ee4 <tcp_rst+0x8c>
    return;
 8010ee2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010ee4:	371c      	adds	r7, #28
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd90      	pop	{r4, r7, pc}
 8010eea:	bf00      	nop
 8010eec:	08017094 	.word	0x08017094
 8010ef0:	08017818 	.word	0x08017818
 8010ef4:	080170e8 	.word	0x080170e8
 8010ef8:	08017834 	.word	0x08017834

08010efc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010efc:	b590      	push	{r4, r7, lr}
 8010efe:	b087      	sub	sp, #28
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010f04:	2300      	movs	r3, #0
 8010f06:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d106      	bne.n	8010f20 <tcp_send_empty_ack+0x24>
 8010f12:	4b28      	ldr	r3, [pc, #160]	; (8010fb4 <tcp_send_empty_ack+0xb8>)
 8010f14:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010f18:	4927      	ldr	r1, [pc, #156]	; (8010fb8 <tcp_send_empty_ack+0xbc>)
 8010f1a:	4828      	ldr	r0, [pc, #160]	; (8010fbc <tcp_send_empty_ack+0xc0>)
 8010f1c:	f003 fa3c 	bl	8014398 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010f20:	7dfb      	ldrb	r3, [r7, #23]
 8010f22:	009b      	lsls	r3, r3, #2
 8010f24:	b2db      	uxtb	r3, r3
 8010f26:	f003 0304 	and.w	r3, r3, #4
 8010f2a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010f2c:	7d7b      	ldrb	r3, [r7, #21]
 8010f2e:	b29c      	uxth	r4, r3
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f34:	4618      	mov	r0, r3
 8010f36:	f7f7 fe88 	bl	8008c4a <lwip_htonl>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	4621      	mov	r1, r4
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f7ff fec1 	bl	8010cc8 <tcp_output_alloc_header>
 8010f46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d109      	bne.n	8010f62 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	8b5b      	ldrh	r3, [r3, #26]
 8010f52:	f043 0303 	orr.w	r3, r3, #3
 8010f56:	b29a      	uxth	r2, r3
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010f5c:	f06f 0301 	mvn.w	r3, #1
 8010f60:	e023      	b.n	8010faa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010f62:	7dbb      	ldrb	r3, [r7, #22]
 8010f64:	7dfa      	ldrb	r2, [r7, #23]
 8010f66:	6939      	ldr	r1, [r7, #16]
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f7ff feeb 	bl	8010d44 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010f6e:	687a      	ldr	r2, [r7, #4]
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	3304      	adds	r3, #4
 8010f74:	6939      	ldr	r1, [r7, #16]
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f7ff ff24 	bl	8010dc4 <tcp_output_control_segment>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d007      	beq.n	8010f98 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	8b5b      	ldrh	r3, [r3, #26]
 8010f8c:	f043 0303 	orr.w	r3, r3, #3
 8010f90:	b29a      	uxth	r2, r3
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	835a      	strh	r2, [r3, #26]
 8010f96:	e006      	b.n	8010fa6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	8b5b      	ldrh	r3, [r3, #26]
 8010f9c:	f023 0303 	bic.w	r3, r3, #3
 8010fa0:	b29a      	uxth	r2, r3
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	371c      	adds	r7, #28
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd90      	pop	{r4, r7, pc}
 8010fb2:	bf00      	nop
 8010fb4:	08017094 	.word	0x08017094
 8010fb8:	08017850 	.word	0x08017850
 8010fbc:	080170e8 	.word	0x080170e8

08010fc0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010fc0:	b590      	push	{r4, r7, lr}
 8010fc2:	b087      	sub	sp, #28
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010fc8:	2300      	movs	r3, #0
 8010fca:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d106      	bne.n	8010fe0 <tcp_keepalive+0x20>
 8010fd2:	4b18      	ldr	r3, [pc, #96]	; (8011034 <tcp_keepalive+0x74>)
 8010fd4:	f640 0224 	movw	r2, #2084	; 0x824
 8010fd8:	4917      	ldr	r1, [pc, #92]	; (8011038 <tcp_keepalive+0x78>)
 8010fda:	4818      	ldr	r0, [pc, #96]	; (801103c <tcp_keepalive+0x7c>)
 8010fdc:	f003 f9dc 	bl	8014398 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010fe0:	7dfb      	ldrb	r3, [r7, #23]
 8010fe2:	b29c      	uxth	r4, r3
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fe8:	3b01      	subs	r3, #1
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7f7 fe2d 	bl	8008c4a <lwip_htonl>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	4621      	mov	r1, r4
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f7ff fe66 	bl	8010cc8 <tcp_output_alloc_header>
 8010ffc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d102      	bne.n	801100a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011004:	f04f 33ff 	mov.w	r3, #4294967295
 8011008:	e010      	b.n	801102c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801100a:	7dfb      	ldrb	r3, [r7, #23]
 801100c:	2200      	movs	r2, #0
 801100e:	6939      	ldr	r1, [r7, #16]
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f7ff fe97 	bl	8010d44 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011016:	687a      	ldr	r2, [r7, #4]
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	3304      	adds	r3, #4
 801101c:	6939      	ldr	r1, [r7, #16]
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f7ff fed0 	bl	8010dc4 <tcp_output_control_segment>
 8011024:	4603      	mov	r3, r0
 8011026:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011028:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801102c:	4618      	mov	r0, r3
 801102e:	371c      	adds	r7, #28
 8011030:	46bd      	mov	sp, r7
 8011032:	bd90      	pop	{r4, r7, pc}
 8011034:	08017094 	.word	0x08017094
 8011038:	08017870 	.word	0x08017870
 801103c:	080170e8 	.word	0x080170e8

08011040 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011040:	b590      	push	{r4, r7, lr}
 8011042:	b08b      	sub	sp, #44	; 0x2c
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011048:	2300      	movs	r3, #0
 801104a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d106      	bne.n	8011062 <tcp_zero_window_probe+0x22>
 8011054:	4b4c      	ldr	r3, [pc, #304]	; (8011188 <tcp_zero_window_probe+0x148>)
 8011056:	f640 024f 	movw	r2, #2127	; 0x84f
 801105a:	494c      	ldr	r1, [pc, #304]	; (801118c <tcp_zero_window_probe+0x14c>)
 801105c:	484c      	ldr	r0, [pc, #304]	; (8011190 <tcp_zero_window_probe+0x150>)
 801105e:	f003 f99b 	bl	8014398 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011066:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011068:	6a3b      	ldr	r3, [r7, #32]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d101      	bne.n	8011072 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801106e:	2300      	movs	r3, #0
 8011070:	e086      	b.n	8011180 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011078:	2bff      	cmp	r3, #255	; 0xff
 801107a:	d007      	beq.n	801108c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011082:	3301      	adds	r3, #1
 8011084:	b2da      	uxtb	r2, r3
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801108c:	6a3b      	ldr	r3, [r7, #32]
 801108e:	68db      	ldr	r3, [r3, #12]
 8011090:	899b      	ldrh	r3, [r3, #12]
 8011092:	b29b      	uxth	r3, r3
 8011094:	4618      	mov	r0, r3
 8011096:	f7f7 fdc3 	bl	8008c20 <lwip_htons>
 801109a:	4603      	mov	r3, r0
 801109c:	b2db      	uxtb	r3, r3
 801109e:	f003 0301 	and.w	r3, r3, #1
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d005      	beq.n	80110b2 <tcp_zero_window_probe+0x72>
 80110a6:	6a3b      	ldr	r3, [r7, #32]
 80110a8:	891b      	ldrh	r3, [r3, #8]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d101      	bne.n	80110b2 <tcp_zero_window_probe+0x72>
 80110ae:	2301      	movs	r3, #1
 80110b0:	e000      	b.n	80110b4 <tcp_zero_window_probe+0x74>
 80110b2:	2300      	movs	r3, #0
 80110b4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80110b6:	7ffb      	ldrb	r3, [r7, #31]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	bf0c      	ite	eq
 80110bc:	2301      	moveq	r3, #1
 80110be:	2300      	movne	r3, #0
 80110c0:	b2db      	uxtb	r3, r3
 80110c2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80110c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110c8:	b299      	uxth	r1, r3
 80110ca:	6a3b      	ldr	r3, [r7, #32]
 80110cc:	68db      	ldr	r3, [r3, #12]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	8bba      	ldrh	r2, [r7, #28]
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f7ff fdf8 	bl	8010cc8 <tcp_output_alloc_header>
 80110d8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80110da:	69bb      	ldr	r3, [r7, #24]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d102      	bne.n	80110e6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80110e0:	f04f 33ff 	mov.w	r3, #4294967295
 80110e4:	e04c      	b.n	8011180 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80110e6:	69bb      	ldr	r3, [r7, #24]
 80110e8:	685b      	ldr	r3, [r3, #4]
 80110ea:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80110ec:	7ffb      	ldrb	r3, [r7, #31]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d011      	beq.n	8011116 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80110f2:	697b      	ldr	r3, [r7, #20]
 80110f4:	899b      	ldrh	r3, [r3, #12]
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	b21b      	sxth	r3, r3
 80110fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80110fe:	b21c      	sxth	r4, r3
 8011100:	2011      	movs	r0, #17
 8011102:	f7f7 fd8d 	bl	8008c20 <lwip_htons>
 8011106:	4603      	mov	r3, r0
 8011108:	b21b      	sxth	r3, r3
 801110a:	4323      	orrs	r3, r4
 801110c:	b21b      	sxth	r3, r3
 801110e:	b29a      	uxth	r2, r3
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	819a      	strh	r2, [r3, #12]
 8011114:	e010      	b.n	8011138 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011116:	69bb      	ldr	r3, [r7, #24]
 8011118:	685b      	ldr	r3, [r3, #4]
 801111a:	3314      	adds	r3, #20
 801111c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801111e:	6a3b      	ldr	r3, [r7, #32]
 8011120:	6858      	ldr	r0, [r3, #4]
 8011122:	6a3b      	ldr	r3, [r7, #32]
 8011124:	685b      	ldr	r3, [r3, #4]
 8011126:	891a      	ldrh	r2, [r3, #8]
 8011128:	6a3b      	ldr	r3, [r7, #32]
 801112a:	891b      	ldrh	r3, [r3, #8]
 801112c:	1ad3      	subs	r3, r2, r3
 801112e:	b29b      	uxth	r3, r3
 8011130:	2201      	movs	r2, #1
 8011132:	6939      	ldr	r1, [r7, #16]
 8011134:	f7f9 fcec 	bl	800ab10 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011138:	6a3b      	ldr	r3, [r7, #32]
 801113a:	68db      	ldr	r3, [r3, #12]
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	4618      	mov	r0, r3
 8011140:	f7f7 fd83 	bl	8008c4a <lwip_htonl>
 8011144:	4603      	mov	r3, r0
 8011146:	3301      	adds	r3, #1
 8011148:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	1ad3      	subs	r3, r2, r3
 8011152:	2b00      	cmp	r3, #0
 8011154:	da02      	bge.n	801115c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	68fa      	ldr	r2, [r7, #12]
 801115a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801115c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011160:	2200      	movs	r2, #0
 8011162:	69b9      	ldr	r1, [r7, #24]
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f7ff fded 	bl	8010d44 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801116a:	687a      	ldr	r2, [r7, #4]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	3304      	adds	r3, #4
 8011170:	69b9      	ldr	r1, [r7, #24]
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f7ff fe26 	bl	8010dc4 <tcp_output_control_segment>
 8011178:	4603      	mov	r3, r0
 801117a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801117c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011180:	4618      	mov	r0, r3
 8011182:	372c      	adds	r7, #44	; 0x2c
 8011184:	46bd      	mov	sp, r7
 8011186:	bd90      	pop	{r4, r7, pc}
 8011188:	08017094 	.word	0x08017094
 801118c:	0801788c 	.word	0x0801788c
 8011190:	080170e8 	.word	0x080170e8

08011194 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b082      	sub	sp, #8
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801119c:	f7f9 ff00 	bl	800afa0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80111a0:	4b0a      	ldr	r3, [pc, #40]	; (80111cc <tcpip_tcp_timer+0x38>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d103      	bne.n	80111b0 <tcpip_tcp_timer+0x1c>
 80111a8:	4b09      	ldr	r3, [pc, #36]	; (80111d0 <tcpip_tcp_timer+0x3c>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d005      	beq.n	80111bc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80111b0:	2200      	movs	r2, #0
 80111b2:	4908      	ldr	r1, [pc, #32]	; (80111d4 <tcpip_tcp_timer+0x40>)
 80111b4:	20fa      	movs	r0, #250	; 0xfa
 80111b6:	f000 f8f3 	bl	80113a0 <sys_timeout>
 80111ba:	e003      	b.n	80111c4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80111bc:	4b06      	ldr	r3, [pc, #24]	; (80111d8 <tcpip_tcp_timer+0x44>)
 80111be:	2200      	movs	r2, #0
 80111c0:	601a      	str	r2, [r3, #0]
  }
}
 80111c2:	bf00      	nop
 80111c4:	bf00      	nop
 80111c6:	3708      	adds	r7, #8
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}
 80111cc:	200075d0 	.word	0x200075d0
 80111d0:	200075e0 	.word	0x200075e0
 80111d4:	08011195 	.word	0x08011195
 80111d8:	200007c0 	.word	0x200007c0

080111dc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80111e0:	4b0a      	ldr	r3, [pc, #40]	; (801120c <tcp_timer_needed+0x30>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d10f      	bne.n	8011208 <tcp_timer_needed+0x2c>
 80111e8:	4b09      	ldr	r3, [pc, #36]	; (8011210 <tcp_timer_needed+0x34>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d103      	bne.n	80111f8 <tcp_timer_needed+0x1c>
 80111f0:	4b08      	ldr	r3, [pc, #32]	; (8011214 <tcp_timer_needed+0x38>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d007      	beq.n	8011208 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80111f8:	4b04      	ldr	r3, [pc, #16]	; (801120c <tcp_timer_needed+0x30>)
 80111fa:	2201      	movs	r2, #1
 80111fc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80111fe:	2200      	movs	r2, #0
 8011200:	4905      	ldr	r1, [pc, #20]	; (8011218 <tcp_timer_needed+0x3c>)
 8011202:	20fa      	movs	r0, #250	; 0xfa
 8011204:	f000 f8cc 	bl	80113a0 <sys_timeout>
  }
}
 8011208:	bf00      	nop
 801120a:	bd80      	pop	{r7, pc}
 801120c:	200007c0 	.word	0x200007c0
 8011210:	200075d0 	.word	0x200075d0
 8011214:	200075e0 	.word	0x200075e0
 8011218:	08011195 	.word	0x08011195

0801121c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b086      	sub	sp, #24
 8011220:	af00      	add	r7, sp, #0
 8011222:	60f8      	str	r0, [r7, #12]
 8011224:	60b9      	str	r1, [r7, #8]
 8011226:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011228:	2006      	movs	r0, #6
 801122a:	f7f8 fc19 	bl	8009a60 <memp_malloc>
 801122e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d109      	bne.n	801124a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d151      	bne.n	80112e0 <sys_timeout_abs+0xc4>
 801123c:	4b2a      	ldr	r3, [pc, #168]	; (80112e8 <sys_timeout_abs+0xcc>)
 801123e:	22be      	movs	r2, #190	; 0xbe
 8011240:	492a      	ldr	r1, [pc, #168]	; (80112ec <sys_timeout_abs+0xd0>)
 8011242:	482b      	ldr	r0, [pc, #172]	; (80112f0 <sys_timeout_abs+0xd4>)
 8011244:	f003 f8a8 	bl	8014398 <iprintf>
    return;
 8011248:	e04a      	b.n	80112e0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	2200      	movs	r2, #0
 801124e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	68ba      	ldr	r2, [r7, #8]
 8011254:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011256:	693b      	ldr	r3, [r7, #16]
 8011258:	687a      	ldr	r2, [r7, #4]
 801125a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	68fa      	ldr	r2, [r7, #12]
 8011260:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011262:	4b24      	ldr	r3, [pc, #144]	; (80112f4 <sys_timeout_abs+0xd8>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d103      	bne.n	8011272 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801126a:	4a22      	ldr	r2, [pc, #136]	; (80112f4 <sys_timeout_abs+0xd8>)
 801126c:	693b      	ldr	r3, [r7, #16]
 801126e:	6013      	str	r3, [r2, #0]
    return;
 8011270:	e037      	b.n	80112e2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	685a      	ldr	r2, [r3, #4]
 8011276:	4b1f      	ldr	r3, [pc, #124]	; (80112f4 <sys_timeout_abs+0xd8>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	685b      	ldr	r3, [r3, #4]
 801127c:	1ad3      	subs	r3, r2, r3
 801127e:	0fdb      	lsrs	r3, r3, #31
 8011280:	f003 0301 	and.w	r3, r3, #1
 8011284:	b2db      	uxtb	r3, r3
 8011286:	2b00      	cmp	r3, #0
 8011288:	d007      	beq.n	801129a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801128a:	4b1a      	ldr	r3, [pc, #104]	; (80112f4 <sys_timeout_abs+0xd8>)
 801128c:	681a      	ldr	r2, [r3, #0]
 801128e:	693b      	ldr	r3, [r7, #16]
 8011290:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011292:	4a18      	ldr	r2, [pc, #96]	; (80112f4 <sys_timeout_abs+0xd8>)
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	6013      	str	r3, [r2, #0]
 8011298:	e023      	b.n	80112e2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801129a:	4b16      	ldr	r3, [pc, #88]	; (80112f4 <sys_timeout_abs+0xd8>)
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	617b      	str	r3, [r7, #20]
 80112a0:	e01a      	b.n	80112d8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d00b      	beq.n	80112c2 <sys_timeout_abs+0xa6>
 80112aa:	693b      	ldr	r3, [r7, #16]
 80112ac:	685a      	ldr	r2, [r3, #4]
 80112ae:	697b      	ldr	r3, [r7, #20]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	685b      	ldr	r3, [r3, #4]
 80112b4:	1ad3      	subs	r3, r2, r3
 80112b6:	0fdb      	lsrs	r3, r3, #31
 80112b8:	f003 0301 	and.w	r3, r3, #1
 80112bc:	b2db      	uxtb	r3, r3
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d007      	beq.n	80112d2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	681a      	ldr	r2, [r3, #0]
 80112c6:	693b      	ldr	r3, [r7, #16]
 80112c8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	693a      	ldr	r2, [r7, #16]
 80112ce:	601a      	str	r2, [r3, #0]
        break;
 80112d0:	e007      	b.n	80112e2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	617b      	str	r3, [r7, #20]
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d1e1      	bne.n	80112a2 <sys_timeout_abs+0x86>
 80112de:	e000      	b.n	80112e2 <sys_timeout_abs+0xc6>
    return;
 80112e0:	bf00      	nop
      }
    }
  }
}
 80112e2:	3718      	adds	r7, #24
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}
 80112e8:	080178b0 	.word	0x080178b0
 80112ec:	080178e4 	.word	0x080178e4
 80112f0:	08017924 	.word	0x08017924
 80112f4:	200007b8 	.word	0x200007b8

080112f8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b086      	sub	sp, #24
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011304:	697b      	ldr	r3, [r7, #20]
 8011306:	685b      	ldr	r3, [r3, #4]
 8011308:	4798      	blx	r3

  now = sys_now();
 801130a:	f7f7 fbfb 	bl	8008b04 <sys_now>
 801130e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	681a      	ldr	r2, [r3, #0]
 8011314:	4b0f      	ldr	r3, [pc, #60]	; (8011354 <lwip_cyclic_timer+0x5c>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	4413      	add	r3, r2
 801131a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801131c:	68fa      	ldr	r2, [r7, #12]
 801131e:	693b      	ldr	r3, [r7, #16]
 8011320:	1ad3      	subs	r3, r2, r3
 8011322:	0fdb      	lsrs	r3, r3, #31
 8011324:	f003 0301 	and.w	r3, r3, #1
 8011328:	b2db      	uxtb	r3, r3
 801132a:	2b00      	cmp	r3, #0
 801132c:	d009      	beq.n	8011342 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	681a      	ldr	r2, [r3, #0]
 8011332:	693b      	ldr	r3, [r7, #16]
 8011334:	4413      	add	r3, r2
 8011336:	687a      	ldr	r2, [r7, #4]
 8011338:	4907      	ldr	r1, [pc, #28]	; (8011358 <lwip_cyclic_timer+0x60>)
 801133a:	4618      	mov	r0, r3
 801133c:	f7ff ff6e 	bl	801121c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011340:	e004      	b.n	801134c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011342:	687a      	ldr	r2, [r7, #4]
 8011344:	4904      	ldr	r1, [pc, #16]	; (8011358 <lwip_cyclic_timer+0x60>)
 8011346:	68f8      	ldr	r0, [r7, #12]
 8011348:	f7ff ff68 	bl	801121c <sys_timeout_abs>
}
 801134c:	bf00      	nop
 801134e:	3718      	adds	r7, #24
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}
 8011354:	200007bc 	.word	0x200007bc
 8011358:	080112f9 	.word	0x080112f9

0801135c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011362:	2301      	movs	r3, #1
 8011364:	607b      	str	r3, [r7, #4]
 8011366:	e00e      	b.n	8011386 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011368:	4a0b      	ldr	r2, [pc, #44]	; (8011398 <sys_timeouts_init+0x3c>)
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	00db      	lsls	r3, r3, #3
 8011374:	4a08      	ldr	r2, [pc, #32]	; (8011398 <sys_timeouts_init+0x3c>)
 8011376:	4413      	add	r3, r2
 8011378:	461a      	mov	r2, r3
 801137a:	4908      	ldr	r1, [pc, #32]	; (801139c <sys_timeouts_init+0x40>)
 801137c:	f000 f810 	bl	80113a0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	3301      	adds	r3, #1
 8011384:	607b      	str	r3, [r7, #4]
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2b03      	cmp	r3, #3
 801138a:	d9ed      	bls.n	8011368 <sys_timeouts_init+0xc>
  }
}
 801138c:	bf00      	nop
 801138e:	bf00      	nop
 8011390:	3708      	adds	r7, #8
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}
 8011396:	bf00      	nop
 8011398:	08059b50 	.word	0x08059b50
 801139c:	080112f9 	.word	0x080112f9

080113a0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b086      	sub	sp, #24
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	60f8      	str	r0, [r7, #12]
 80113a8:	60b9      	str	r1, [r7, #8]
 80113aa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113b2:	d306      	bcc.n	80113c2 <sys_timeout+0x22>
 80113b4:	4b0a      	ldr	r3, [pc, #40]	; (80113e0 <sys_timeout+0x40>)
 80113b6:	f240 1229 	movw	r2, #297	; 0x129
 80113ba:	490a      	ldr	r1, [pc, #40]	; (80113e4 <sys_timeout+0x44>)
 80113bc:	480a      	ldr	r0, [pc, #40]	; (80113e8 <sys_timeout+0x48>)
 80113be:	f002 ffeb 	bl	8014398 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80113c2:	f7f7 fb9f 	bl	8008b04 <sys_now>
 80113c6:	4602      	mov	r2, r0
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	4413      	add	r3, r2
 80113cc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80113ce:	687a      	ldr	r2, [r7, #4]
 80113d0:	68b9      	ldr	r1, [r7, #8]
 80113d2:	6978      	ldr	r0, [r7, #20]
 80113d4:	f7ff ff22 	bl	801121c <sys_timeout_abs>
#endif
}
 80113d8:	bf00      	nop
 80113da:	3718      	adds	r7, #24
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}
 80113e0:	080178b0 	.word	0x080178b0
 80113e4:	0801794c 	.word	0x0801794c
 80113e8:	08017924 	.word	0x08017924

080113ec <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b084      	sub	sp, #16
 80113f0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80113f2:	f7f7 fb87 	bl	8008b04 <sys_now>
 80113f6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80113f8:	4b1a      	ldr	r3, [pc, #104]	; (8011464 <sys_check_timeouts+0x78>)
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	b2db      	uxtb	r3, r3
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d001      	beq.n	8011406 <sys_check_timeouts+0x1a>
 8011402:	f7f8 fe51 	bl	800a0a8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8011406:	4b18      	ldr	r3, [pc, #96]	; (8011468 <sys_check_timeouts+0x7c>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d022      	beq.n	8011458 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	68fa      	ldr	r2, [r7, #12]
 8011418:	1ad3      	subs	r3, r2, r3
 801141a:	0fdb      	lsrs	r3, r3, #31
 801141c:	f003 0301 	and.w	r3, r3, #1
 8011420:	b2db      	uxtb	r3, r3
 8011422:	2b00      	cmp	r3, #0
 8011424:	d11a      	bne.n	801145c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	4a0f      	ldr	r2, [pc, #60]	; (8011468 <sys_check_timeouts+0x7c>)
 801142c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	689b      	ldr	r3, [r3, #8]
 8011432:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	68db      	ldr	r3, [r3, #12]
 8011438:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	4a0b      	ldr	r2, [pc, #44]	; (801146c <sys_check_timeouts+0x80>)
 8011440:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011442:	68b9      	ldr	r1, [r7, #8]
 8011444:	2006      	movs	r0, #6
 8011446:	f7f8 fb57 	bl	8009af8 <memp_free>
    if (handler != NULL) {
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d0d3      	beq.n	80113f8 <sys_check_timeouts+0xc>
      handler(arg);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6838      	ldr	r0, [r7, #0]
 8011454:	4798      	blx	r3
  do {
 8011456:	e7cf      	b.n	80113f8 <sys_check_timeouts+0xc>
      return;
 8011458:	bf00      	nop
 801145a:	e000      	b.n	801145e <sys_check_timeouts+0x72>
      return;
 801145c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801145e:	3710      	adds	r7, #16
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}
 8011464:	200075c8 	.word	0x200075c8
 8011468:	200007b8 	.word	0x200007b8
 801146c:	200007bc 	.word	0x200007bc

08011470 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011474:	f003 f81e 	bl	80144b4 <rand>
 8011478:	4603      	mov	r3, r0
 801147a:	b29b      	uxth	r3, r3
 801147c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011480:	b29b      	uxth	r3, r3
 8011482:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011486:	b29a      	uxth	r2, r3
 8011488:	4b01      	ldr	r3, [pc, #4]	; (8011490 <udp_init+0x20>)
 801148a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801148c:	bf00      	nop
 801148e:	bd80      	pop	{r7, pc}
 8011490:	20000044 	.word	0x20000044

08011494 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011494:	b480      	push	{r7}
 8011496:	b083      	sub	sp, #12
 8011498:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801149a:	2300      	movs	r3, #0
 801149c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801149e:	4b17      	ldr	r3, [pc, #92]	; (80114fc <udp_new_port+0x68>)
 80114a0:	881b      	ldrh	r3, [r3, #0]
 80114a2:	1c5a      	adds	r2, r3, #1
 80114a4:	b291      	uxth	r1, r2
 80114a6:	4a15      	ldr	r2, [pc, #84]	; (80114fc <udp_new_port+0x68>)
 80114a8:	8011      	strh	r1, [r2, #0]
 80114aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80114ae:	4293      	cmp	r3, r2
 80114b0:	d103      	bne.n	80114ba <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80114b2:	4b12      	ldr	r3, [pc, #72]	; (80114fc <udp_new_port+0x68>)
 80114b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80114b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80114ba:	4b11      	ldr	r3, [pc, #68]	; (8011500 <udp_new_port+0x6c>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	603b      	str	r3, [r7, #0]
 80114c0:	e011      	b.n	80114e6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	8a5a      	ldrh	r2, [r3, #18]
 80114c6:	4b0d      	ldr	r3, [pc, #52]	; (80114fc <udp_new_port+0x68>)
 80114c8:	881b      	ldrh	r3, [r3, #0]
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d108      	bne.n	80114e0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80114ce:	88fb      	ldrh	r3, [r7, #6]
 80114d0:	3301      	adds	r3, #1
 80114d2:	80fb      	strh	r3, [r7, #6]
 80114d4:	88fb      	ldrh	r3, [r7, #6]
 80114d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80114da:	d3e0      	bcc.n	801149e <udp_new_port+0xa>
        return 0;
 80114dc:	2300      	movs	r3, #0
 80114de:	e007      	b.n	80114f0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	68db      	ldr	r3, [r3, #12]
 80114e4:	603b      	str	r3, [r7, #0]
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d1ea      	bne.n	80114c2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80114ec:	4b03      	ldr	r3, [pc, #12]	; (80114fc <udp_new_port+0x68>)
 80114ee:	881b      	ldrh	r3, [r3, #0]
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	370c      	adds	r7, #12
 80114f4:	46bd      	mov	sp, r7
 80114f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fa:	4770      	bx	lr
 80114fc:	20000044 	.word	0x20000044
 8011500:	200075e8 	.word	0x200075e8

08011504 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b084      	sub	sp, #16
 8011508:	af00      	add	r7, sp, #0
 801150a:	60f8      	str	r0, [r7, #12]
 801150c:	60b9      	str	r1, [r7, #8]
 801150e:	4613      	mov	r3, r2
 8011510:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d105      	bne.n	8011524 <udp_input_local_match+0x20>
 8011518:	4b27      	ldr	r3, [pc, #156]	; (80115b8 <udp_input_local_match+0xb4>)
 801151a:	2287      	movs	r2, #135	; 0x87
 801151c:	4927      	ldr	r1, [pc, #156]	; (80115bc <udp_input_local_match+0xb8>)
 801151e:	4828      	ldr	r0, [pc, #160]	; (80115c0 <udp_input_local_match+0xbc>)
 8011520:	f002 ff3a 	bl	8014398 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d105      	bne.n	8011536 <udp_input_local_match+0x32>
 801152a:	4b23      	ldr	r3, [pc, #140]	; (80115b8 <udp_input_local_match+0xb4>)
 801152c:	2288      	movs	r2, #136	; 0x88
 801152e:	4925      	ldr	r1, [pc, #148]	; (80115c4 <udp_input_local_match+0xc0>)
 8011530:	4823      	ldr	r0, [pc, #140]	; (80115c0 <udp_input_local_match+0xbc>)
 8011532:	f002 ff31 	bl	8014398 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	7a1b      	ldrb	r3, [r3, #8]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d00b      	beq.n	8011556 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	7a1a      	ldrb	r2, [r3, #8]
 8011542:	4b21      	ldr	r3, [pc, #132]	; (80115c8 <udp_input_local_match+0xc4>)
 8011544:	685b      	ldr	r3, [r3, #4]
 8011546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801154a:	3301      	adds	r3, #1
 801154c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801154e:	429a      	cmp	r2, r3
 8011550:	d001      	beq.n	8011556 <udp_input_local_match+0x52>
    return 0;
 8011552:	2300      	movs	r3, #0
 8011554:	e02b      	b.n	80115ae <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011556:	79fb      	ldrb	r3, [r7, #7]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d018      	beq.n	801158e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d013      	beq.n	801158a <udp_input_local_match+0x86>
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d00f      	beq.n	801158a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801156a:	4b17      	ldr	r3, [pc, #92]	; (80115c8 <udp_input_local_match+0xc4>)
 801156c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801156e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011572:	d00a      	beq.n	801158a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	681a      	ldr	r2, [r3, #0]
 8011578:	4b13      	ldr	r3, [pc, #76]	; (80115c8 <udp_input_local_match+0xc4>)
 801157a:	695b      	ldr	r3, [r3, #20]
 801157c:	405a      	eors	r2, r3
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	3308      	adds	r3, #8
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011586:	2b00      	cmp	r3, #0
 8011588:	d110      	bne.n	80115ac <udp_input_local_match+0xa8>
          return 1;
 801158a:	2301      	movs	r3, #1
 801158c:	e00f      	b.n	80115ae <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d009      	beq.n	80115a8 <udp_input_local_match+0xa4>
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d005      	beq.n	80115a8 <udp_input_local_match+0xa4>
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	681a      	ldr	r2, [r3, #0]
 80115a0:	4b09      	ldr	r3, [pc, #36]	; (80115c8 <udp_input_local_match+0xc4>)
 80115a2:	695b      	ldr	r3, [r3, #20]
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d101      	bne.n	80115ac <udp_input_local_match+0xa8>
        return 1;
 80115a8:	2301      	movs	r3, #1
 80115aa:	e000      	b.n	80115ae <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80115ac:	2300      	movs	r3, #0
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3710      	adds	r7, #16
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}
 80115b6:	bf00      	nop
 80115b8:	08017998 	.word	0x08017998
 80115bc:	080179c8 	.word	0x080179c8
 80115c0:	080179ec 	.word	0x080179ec
 80115c4:	08017a14 	.word	0x08017a14
 80115c8:	2000407c 	.word	0x2000407c

080115cc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80115cc:	b590      	push	{r4, r7, lr}
 80115ce:	b08d      	sub	sp, #52	; 0x34
 80115d0:	af02      	add	r7, sp, #8
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80115d6:	2300      	movs	r3, #0
 80115d8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d105      	bne.n	80115ec <udp_input+0x20>
 80115e0:	4b7c      	ldr	r3, [pc, #496]	; (80117d4 <udp_input+0x208>)
 80115e2:	22cf      	movs	r2, #207	; 0xcf
 80115e4:	497c      	ldr	r1, [pc, #496]	; (80117d8 <udp_input+0x20c>)
 80115e6:	487d      	ldr	r0, [pc, #500]	; (80117dc <udp_input+0x210>)
 80115e8:	f002 fed6 	bl	8014398 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d105      	bne.n	80115fe <udp_input+0x32>
 80115f2:	4b78      	ldr	r3, [pc, #480]	; (80117d4 <udp_input+0x208>)
 80115f4:	22d0      	movs	r2, #208	; 0xd0
 80115f6:	497a      	ldr	r1, [pc, #488]	; (80117e0 <udp_input+0x214>)
 80115f8:	4878      	ldr	r0, [pc, #480]	; (80117dc <udp_input+0x210>)
 80115fa:	f002 fecd 	bl	8014398 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	895b      	ldrh	r3, [r3, #10]
 8011602:	2b07      	cmp	r3, #7
 8011604:	d803      	bhi.n	801160e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f7f9 f888 	bl	800a71c <pbuf_free>
    goto end;
 801160c:	e0de      	b.n	80117cc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	685b      	ldr	r3, [r3, #4]
 8011612:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011614:	4b73      	ldr	r3, [pc, #460]	; (80117e4 <udp_input+0x218>)
 8011616:	695b      	ldr	r3, [r3, #20]
 8011618:	4a72      	ldr	r2, [pc, #456]	; (80117e4 <udp_input+0x218>)
 801161a:	6812      	ldr	r2, [r2, #0]
 801161c:	4611      	mov	r1, r2
 801161e:	4618      	mov	r0, r3
 8011620:	f001 ff08 	bl	8013434 <ip4_addr_isbroadcast_u32>
 8011624:	4603      	mov	r3, r0
 8011626:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011628:	697b      	ldr	r3, [r7, #20]
 801162a:	881b      	ldrh	r3, [r3, #0]
 801162c:	b29b      	uxth	r3, r3
 801162e:	4618      	mov	r0, r3
 8011630:	f7f7 faf6 	bl	8008c20 <lwip_htons>
 8011634:	4603      	mov	r3, r0
 8011636:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	885b      	ldrh	r3, [r3, #2]
 801163c:	b29b      	uxth	r3, r3
 801163e:	4618      	mov	r0, r3
 8011640:	f7f7 faee 	bl	8008c20 <lwip_htons>
 8011644:	4603      	mov	r3, r0
 8011646:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011648:	2300      	movs	r3, #0
 801164a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801164c:	2300      	movs	r3, #0
 801164e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011650:	2300      	movs	r3, #0
 8011652:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011654:	4b64      	ldr	r3, [pc, #400]	; (80117e8 <udp_input+0x21c>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	627b      	str	r3, [r7, #36]	; 0x24
 801165a:	e054      	b.n	8011706 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801165e:	8a5b      	ldrh	r3, [r3, #18]
 8011660:	89fa      	ldrh	r2, [r7, #14]
 8011662:	429a      	cmp	r2, r3
 8011664:	d14a      	bne.n	80116fc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011666:	7cfb      	ldrb	r3, [r7, #19]
 8011668:	461a      	mov	r2, r3
 801166a:	6839      	ldr	r1, [r7, #0]
 801166c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801166e:	f7ff ff49 	bl	8011504 <udp_input_local_match>
 8011672:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011674:	2b00      	cmp	r3, #0
 8011676:	d041      	beq.n	80116fc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801167a:	7c1b      	ldrb	r3, [r3, #16]
 801167c:	f003 0304 	and.w	r3, r3, #4
 8011680:	2b00      	cmp	r3, #0
 8011682:	d11d      	bne.n	80116c0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011684:	69fb      	ldr	r3, [r7, #28]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d102      	bne.n	8011690 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801168c:	61fb      	str	r3, [r7, #28]
 801168e:	e017      	b.n	80116c0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011690:	7cfb      	ldrb	r3, [r7, #19]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d014      	beq.n	80116c0 <udp_input+0xf4>
 8011696:	4b53      	ldr	r3, [pc, #332]	; (80117e4 <udp_input+0x218>)
 8011698:	695b      	ldr	r3, [r3, #20]
 801169a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801169e:	d10f      	bne.n	80116c0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80116a0:	69fb      	ldr	r3, [r7, #28]
 80116a2:	681a      	ldr	r2, [r3, #0]
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	3304      	adds	r3, #4
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d008      	beq.n	80116c0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80116ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	3304      	adds	r3, #4
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	429a      	cmp	r2, r3
 80116ba:	d101      	bne.n	80116c0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80116bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116be:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80116c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c2:	8a9b      	ldrh	r3, [r3, #20]
 80116c4:	8a3a      	ldrh	r2, [r7, #16]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d118      	bne.n	80116fc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80116ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116cc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d005      	beq.n	80116de <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80116d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d4:	685a      	ldr	r2, [r3, #4]
 80116d6:	4b43      	ldr	r3, [pc, #268]	; (80117e4 <udp_input+0x218>)
 80116d8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80116da:	429a      	cmp	r2, r3
 80116dc:	d10e      	bne.n	80116fc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80116de:	6a3b      	ldr	r3, [r7, #32]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d014      	beq.n	801170e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80116e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e6:	68da      	ldr	r2, [r3, #12]
 80116e8:	6a3b      	ldr	r3, [r7, #32]
 80116ea:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80116ec:	4b3e      	ldr	r3, [pc, #248]	; (80117e8 <udp_input+0x21c>)
 80116ee:	681a      	ldr	r2, [r3, #0]
 80116f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80116f4:	4a3c      	ldr	r2, [pc, #240]	; (80117e8 <udp_input+0x21c>)
 80116f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80116fa:	e008      	b.n	801170e <udp_input+0x142>
      }
    }

    prev = pcb;
 80116fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fe:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011702:	68db      	ldr	r3, [r3, #12]
 8011704:	627b      	str	r3, [r7, #36]	; 0x24
 8011706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011708:	2b00      	cmp	r3, #0
 801170a:	d1a7      	bne.n	801165c <udp_input+0x90>
 801170c:	e000      	b.n	8011710 <udp_input+0x144>
        break;
 801170e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011712:	2b00      	cmp	r3, #0
 8011714:	d101      	bne.n	801171a <udp_input+0x14e>
    pcb = uncon_pcb;
 8011716:	69fb      	ldr	r3, [r7, #28]
 8011718:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801171c:	2b00      	cmp	r3, #0
 801171e:	d002      	beq.n	8011726 <udp_input+0x15a>
    for_us = 1;
 8011720:	2301      	movs	r3, #1
 8011722:	76fb      	strb	r3, [r7, #27]
 8011724:	e00a      	b.n	801173c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	3304      	adds	r3, #4
 801172a:	681a      	ldr	r2, [r3, #0]
 801172c:	4b2d      	ldr	r3, [pc, #180]	; (80117e4 <udp_input+0x218>)
 801172e:	695b      	ldr	r3, [r3, #20]
 8011730:	429a      	cmp	r2, r3
 8011732:	bf0c      	ite	eq
 8011734:	2301      	moveq	r3, #1
 8011736:	2300      	movne	r3, #0
 8011738:	b2db      	uxtb	r3, r3
 801173a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801173c:	7efb      	ldrb	r3, [r7, #27]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d041      	beq.n	80117c6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011742:	2108      	movs	r1, #8
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f7f8 ff63 	bl	800a610 <pbuf_remove_header>
 801174a:	4603      	mov	r3, r0
 801174c:	2b00      	cmp	r3, #0
 801174e:	d00a      	beq.n	8011766 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011750:	4b20      	ldr	r3, [pc, #128]	; (80117d4 <udp_input+0x208>)
 8011752:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011756:	4925      	ldr	r1, [pc, #148]	; (80117ec <udp_input+0x220>)
 8011758:	4820      	ldr	r0, [pc, #128]	; (80117dc <udp_input+0x210>)
 801175a:	f002 fe1d 	bl	8014398 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	f7f8 ffdc 	bl	800a71c <pbuf_free>
      goto end;
 8011764:	e032      	b.n	80117cc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011768:	2b00      	cmp	r3, #0
 801176a:	d012      	beq.n	8011792 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176e:	699b      	ldr	r3, [r3, #24]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d00a      	beq.n	801178a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011776:	699c      	ldr	r4, [r3, #24]
 8011778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801177a:	69d8      	ldr	r0, [r3, #28]
 801177c:	8a3b      	ldrh	r3, [r7, #16]
 801177e:	9300      	str	r3, [sp, #0]
 8011780:	4b1b      	ldr	r3, [pc, #108]	; (80117f0 <udp_input+0x224>)
 8011782:	687a      	ldr	r2, [r7, #4]
 8011784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011786:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011788:	e021      	b.n	80117ce <udp_input+0x202>
        pbuf_free(p);
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f7f8 ffc6 	bl	800a71c <pbuf_free>
        goto end;
 8011790:	e01c      	b.n	80117cc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011792:	7cfb      	ldrb	r3, [r7, #19]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d112      	bne.n	80117be <udp_input+0x1f2>
 8011798:	4b12      	ldr	r3, [pc, #72]	; (80117e4 <udp_input+0x218>)
 801179a:	695b      	ldr	r3, [r3, #20]
 801179c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80117a0:	2be0      	cmp	r3, #224	; 0xe0
 80117a2:	d00c      	beq.n	80117be <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80117a4:	4b0f      	ldr	r3, [pc, #60]	; (80117e4 <udp_input+0x218>)
 80117a6:	899b      	ldrh	r3, [r3, #12]
 80117a8:	3308      	adds	r3, #8
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	b21b      	sxth	r3, r3
 80117ae:	4619      	mov	r1, r3
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f7f8 ffa0 	bl	800a6f6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80117b6:	2103      	movs	r1, #3
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f001 fb1b 	bl	8012df4 <icmp_dest_unreach>
      pbuf_free(p);
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f7f8 ffac 	bl	800a71c <pbuf_free>
  return;
 80117c4:	e003      	b.n	80117ce <udp_input+0x202>
    pbuf_free(p);
 80117c6:	6878      	ldr	r0, [r7, #4]
 80117c8:	f7f8 ffa8 	bl	800a71c <pbuf_free>
  return;
 80117cc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80117ce:	372c      	adds	r7, #44	; 0x2c
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd90      	pop	{r4, r7, pc}
 80117d4:	08017998 	.word	0x08017998
 80117d8:	08017a3c 	.word	0x08017a3c
 80117dc:	080179ec 	.word	0x080179ec
 80117e0:	08017a54 	.word	0x08017a54
 80117e4:	2000407c 	.word	0x2000407c
 80117e8:	200075e8 	.word	0x200075e8
 80117ec:	08017a70 	.word	0x08017a70
 80117f0:	2000408c 	.word	0x2000408c

080117f4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b088      	sub	sp, #32
 80117f8:	af02      	add	r7, sp, #8
 80117fa:	60f8      	str	r0, [r7, #12]
 80117fc:	60b9      	str	r1, [r7, #8]
 80117fe:	607a      	str	r2, [r7, #4]
 8011800:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d109      	bne.n	801181c <udp_sendto+0x28>
 8011808:	4b23      	ldr	r3, [pc, #140]	; (8011898 <udp_sendto+0xa4>)
 801180a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801180e:	4923      	ldr	r1, [pc, #140]	; (801189c <udp_sendto+0xa8>)
 8011810:	4823      	ldr	r0, [pc, #140]	; (80118a0 <udp_sendto+0xac>)
 8011812:	f002 fdc1 	bl	8014398 <iprintf>
 8011816:	f06f 030f 	mvn.w	r3, #15
 801181a:	e038      	b.n	801188e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801181c:	68bb      	ldr	r3, [r7, #8]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d109      	bne.n	8011836 <udp_sendto+0x42>
 8011822:	4b1d      	ldr	r3, [pc, #116]	; (8011898 <udp_sendto+0xa4>)
 8011824:	f240 2219 	movw	r2, #537	; 0x219
 8011828:	491e      	ldr	r1, [pc, #120]	; (80118a4 <udp_sendto+0xb0>)
 801182a:	481d      	ldr	r0, [pc, #116]	; (80118a0 <udp_sendto+0xac>)
 801182c:	f002 fdb4 	bl	8014398 <iprintf>
 8011830:	f06f 030f 	mvn.w	r3, #15
 8011834:	e02b      	b.n	801188e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d109      	bne.n	8011850 <udp_sendto+0x5c>
 801183c:	4b16      	ldr	r3, [pc, #88]	; (8011898 <udp_sendto+0xa4>)
 801183e:	f240 221a 	movw	r2, #538	; 0x21a
 8011842:	4919      	ldr	r1, [pc, #100]	; (80118a8 <udp_sendto+0xb4>)
 8011844:	4816      	ldr	r0, [pc, #88]	; (80118a0 <udp_sendto+0xac>)
 8011846:	f002 fda7 	bl	8014398 <iprintf>
 801184a:	f06f 030f 	mvn.w	r3, #15
 801184e:	e01e      	b.n	801188e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	7a1b      	ldrb	r3, [r3, #8]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d006      	beq.n	8011866 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	7a1b      	ldrb	r3, [r3, #8]
 801185c:	4618      	mov	r0, r3
 801185e:	f7f8 fbfd 	bl	800a05c <netif_get_by_index>
 8011862:	6178      	str	r0, [r7, #20]
 8011864:	e003      	b.n	801186e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8011866:	6878      	ldr	r0, [r7, #4]
 8011868:	f001 fb4e 	bl	8012f08 <ip4_route>
 801186c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d102      	bne.n	801187a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8011874:	f06f 0303 	mvn.w	r3, #3
 8011878:	e009      	b.n	801188e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801187a:	887a      	ldrh	r2, [r7, #2]
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	9300      	str	r3, [sp, #0]
 8011880:	4613      	mov	r3, r2
 8011882:	687a      	ldr	r2, [r7, #4]
 8011884:	68b9      	ldr	r1, [r7, #8]
 8011886:	68f8      	ldr	r0, [r7, #12]
 8011888:	f000 f810 	bl	80118ac <udp_sendto_if>
 801188c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801188e:	4618      	mov	r0, r3
 8011890:	3718      	adds	r7, #24
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}
 8011896:	bf00      	nop
 8011898:	08017998 	.word	0x08017998
 801189c:	08017abc 	.word	0x08017abc
 80118a0:	080179ec 	.word	0x080179ec
 80118a4:	08017ad4 	.word	0x08017ad4
 80118a8:	08017af0 	.word	0x08017af0

080118ac <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b088      	sub	sp, #32
 80118b0:	af02      	add	r7, sp, #8
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	607a      	str	r2, [r7, #4]
 80118b8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d109      	bne.n	80118d4 <udp_sendto_if+0x28>
 80118c0:	4b2e      	ldr	r3, [pc, #184]	; (801197c <udp_sendto_if+0xd0>)
 80118c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80118c6:	492e      	ldr	r1, [pc, #184]	; (8011980 <udp_sendto_if+0xd4>)
 80118c8:	482e      	ldr	r0, [pc, #184]	; (8011984 <udp_sendto_if+0xd8>)
 80118ca:	f002 fd65 	bl	8014398 <iprintf>
 80118ce:	f06f 030f 	mvn.w	r3, #15
 80118d2:	e04f      	b.n	8011974 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d109      	bne.n	80118ee <udp_sendto_if+0x42>
 80118da:	4b28      	ldr	r3, [pc, #160]	; (801197c <udp_sendto_if+0xd0>)
 80118dc:	f240 2281 	movw	r2, #641	; 0x281
 80118e0:	4929      	ldr	r1, [pc, #164]	; (8011988 <udp_sendto_if+0xdc>)
 80118e2:	4828      	ldr	r0, [pc, #160]	; (8011984 <udp_sendto_if+0xd8>)
 80118e4:	f002 fd58 	bl	8014398 <iprintf>
 80118e8:	f06f 030f 	mvn.w	r3, #15
 80118ec:	e042      	b.n	8011974 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d109      	bne.n	8011908 <udp_sendto_if+0x5c>
 80118f4:	4b21      	ldr	r3, [pc, #132]	; (801197c <udp_sendto_if+0xd0>)
 80118f6:	f240 2282 	movw	r2, #642	; 0x282
 80118fa:	4924      	ldr	r1, [pc, #144]	; (801198c <udp_sendto_if+0xe0>)
 80118fc:	4821      	ldr	r0, [pc, #132]	; (8011984 <udp_sendto_if+0xd8>)
 80118fe:	f002 fd4b 	bl	8014398 <iprintf>
 8011902:	f06f 030f 	mvn.w	r3, #15
 8011906:	e035      	b.n	8011974 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011908:	6a3b      	ldr	r3, [r7, #32]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d109      	bne.n	8011922 <udp_sendto_if+0x76>
 801190e:	4b1b      	ldr	r3, [pc, #108]	; (801197c <udp_sendto_if+0xd0>)
 8011910:	f240 2283 	movw	r2, #643	; 0x283
 8011914:	491e      	ldr	r1, [pc, #120]	; (8011990 <udp_sendto_if+0xe4>)
 8011916:	481b      	ldr	r0, [pc, #108]	; (8011984 <udp_sendto_if+0xd8>)
 8011918:	f002 fd3e 	bl	8014398 <iprintf>
 801191c:	f06f 030f 	mvn.w	r3, #15
 8011920:	e028      	b.n	8011974 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d009      	beq.n	801193c <udp_sendto_if+0x90>
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d005      	beq.n	801193c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011938:	2be0      	cmp	r3, #224	; 0xe0
 801193a:	d103      	bne.n	8011944 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801193c:	6a3b      	ldr	r3, [r7, #32]
 801193e:	3304      	adds	r3, #4
 8011940:	617b      	str	r3, [r7, #20]
 8011942:	e00b      	b.n	801195c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	681a      	ldr	r2, [r3, #0]
 8011948:	6a3b      	ldr	r3, [r7, #32]
 801194a:	3304      	adds	r3, #4
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	429a      	cmp	r2, r3
 8011950:	d002      	beq.n	8011958 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8011952:	f06f 0303 	mvn.w	r3, #3
 8011956:	e00d      	b.n	8011974 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801195c:	887a      	ldrh	r2, [r7, #2]
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	9301      	str	r3, [sp, #4]
 8011962:	6a3b      	ldr	r3, [r7, #32]
 8011964:	9300      	str	r3, [sp, #0]
 8011966:	4613      	mov	r3, r2
 8011968:	687a      	ldr	r2, [r7, #4]
 801196a:	68b9      	ldr	r1, [r7, #8]
 801196c:	68f8      	ldr	r0, [r7, #12]
 801196e:	f000 f811 	bl	8011994 <udp_sendto_if_src>
 8011972:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011974:	4618      	mov	r0, r3
 8011976:	3718      	adds	r7, #24
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}
 801197c:	08017998 	.word	0x08017998
 8011980:	08017b0c 	.word	0x08017b0c
 8011984:	080179ec 	.word	0x080179ec
 8011988:	08017b28 	.word	0x08017b28
 801198c:	08017b44 	.word	0x08017b44
 8011990:	08017b64 	.word	0x08017b64

08011994 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b08c      	sub	sp, #48	; 0x30
 8011998:	af04      	add	r7, sp, #16
 801199a:	60f8      	str	r0, [r7, #12]
 801199c:	60b9      	str	r1, [r7, #8]
 801199e:	607a      	str	r2, [r7, #4]
 80119a0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d109      	bne.n	80119bc <udp_sendto_if_src+0x28>
 80119a8:	4b65      	ldr	r3, [pc, #404]	; (8011b40 <udp_sendto_if_src+0x1ac>)
 80119aa:	f240 22d1 	movw	r2, #721	; 0x2d1
 80119ae:	4965      	ldr	r1, [pc, #404]	; (8011b44 <udp_sendto_if_src+0x1b0>)
 80119b0:	4865      	ldr	r0, [pc, #404]	; (8011b48 <udp_sendto_if_src+0x1b4>)
 80119b2:	f002 fcf1 	bl	8014398 <iprintf>
 80119b6:	f06f 030f 	mvn.w	r3, #15
 80119ba:	e0bc      	b.n	8011b36 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d109      	bne.n	80119d6 <udp_sendto_if_src+0x42>
 80119c2:	4b5f      	ldr	r3, [pc, #380]	; (8011b40 <udp_sendto_if_src+0x1ac>)
 80119c4:	f240 22d2 	movw	r2, #722	; 0x2d2
 80119c8:	4960      	ldr	r1, [pc, #384]	; (8011b4c <udp_sendto_if_src+0x1b8>)
 80119ca:	485f      	ldr	r0, [pc, #380]	; (8011b48 <udp_sendto_if_src+0x1b4>)
 80119cc:	f002 fce4 	bl	8014398 <iprintf>
 80119d0:	f06f 030f 	mvn.w	r3, #15
 80119d4:	e0af      	b.n	8011b36 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d109      	bne.n	80119f0 <udp_sendto_if_src+0x5c>
 80119dc:	4b58      	ldr	r3, [pc, #352]	; (8011b40 <udp_sendto_if_src+0x1ac>)
 80119de:	f240 22d3 	movw	r2, #723	; 0x2d3
 80119e2:	495b      	ldr	r1, [pc, #364]	; (8011b50 <udp_sendto_if_src+0x1bc>)
 80119e4:	4858      	ldr	r0, [pc, #352]	; (8011b48 <udp_sendto_if_src+0x1b4>)
 80119e6:	f002 fcd7 	bl	8014398 <iprintf>
 80119ea:	f06f 030f 	mvn.w	r3, #15
 80119ee:	e0a2      	b.n	8011b36 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80119f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d109      	bne.n	8011a0a <udp_sendto_if_src+0x76>
 80119f6:	4b52      	ldr	r3, [pc, #328]	; (8011b40 <udp_sendto_if_src+0x1ac>)
 80119f8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80119fc:	4955      	ldr	r1, [pc, #340]	; (8011b54 <udp_sendto_if_src+0x1c0>)
 80119fe:	4852      	ldr	r0, [pc, #328]	; (8011b48 <udp_sendto_if_src+0x1b4>)
 8011a00:	f002 fcca 	bl	8014398 <iprintf>
 8011a04:	f06f 030f 	mvn.w	r3, #15
 8011a08:	e095      	b.n	8011b36 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d109      	bne.n	8011a24 <udp_sendto_if_src+0x90>
 8011a10:	4b4b      	ldr	r3, [pc, #300]	; (8011b40 <udp_sendto_if_src+0x1ac>)
 8011a12:	f240 22d5 	movw	r2, #725	; 0x2d5
 8011a16:	4950      	ldr	r1, [pc, #320]	; (8011b58 <udp_sendto_if_src+0x1c4>)
 8011a18:	484b      	ldr	r0, [pc, #300]	; (8011b48 <udp_sendto_if_src+0x1b4>)
 8011a1a:	f002 fcbd 	bl	8014398 <iprintf>
 8011a1e:	f06f 030f 	mvn.w	r3, #15
 8011a22:	e088      	b.n	8011b36 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	8a5b      	ldrh	r3, [r3, #18]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d10f      	bne.n	8011a4c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011a2c:	68f9      	ldr	r1, [r7, #12]
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	8a5b      	ldrh	r3, [r3, #18]
 8011a32:	461a      	mov	r2, r3
 8011a34:	68f8      	ldr	r0, [r7, #12]
 8011a36:	f000 f893 	bl	8011b60 <udp_bind>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011a3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d002      	beq.n	8011a4c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011a46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011a4a:	e074      	b.n	8011b36 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	891b      	ldrh	r3, [r3, #8]
 8011a50:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011a54:	4293      	cmp	r3, r2
 8011a56:	d902      	bls.n	8011a5e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011a58:	f04f 33ff 	mov.w	r3, #4294967295
 8011a5c:	e06b      	b.n	8011b36 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011a5e:	2108      	movs	r1, #8
 8011a60:	68b8      	ldr	r0, [r7, #8]
 8011a62:	f7f8 fdc5 	bl	800a5f0 <pbuf_add_header>
 8011a66:	4603      	mov	r3, r0
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d015      	beq.n	8011a98 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011a6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a70:	2108      	movs	r1, #8
 8011a72:	2022      	movs	r0, #34	; 0x22
 8011a74:	f7f8 fb6e 	bl	800a154 <pbuf_alloc>
 8011a78:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011a7a:	69fb      	ldr	r3, [r7, #28]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d102      	bne.n	8011a86 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011a80:	f04f 33ff 	mov.w	r3, #4294967295
 8011a84:	e057      	b.n	8011b36 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	891b      	ldrh	r3, [r3, #8]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d006      	beq.n	8011a9c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011a8e:	68b9      	ldr	r1, [r7, #8]
 8011a90:	69f8      	ldr	r0, [r7, #28]
 8011a92:	f7f8 ff5b 	bl	800a94c <pbuf_chain>
 8011a96:	e001      	b.n	8011a9c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011a9c:	69fb      	ldr	r3, [r7, #28]
 8011a9e:	895b      	ldrh	r3, [r3, #10]
 8011aa0:	2b07      	cmp	r3, #7
 8011aa2:	d806      	bhi.n	8011ab2 <udp_sendto_if_src+0x11e>
 8011aa4:	4b26      	ldr	r3, [pc, #152]	; (8011b40 <udp_sendto_if_src+0x1ac>)
 8011aa6:	f240 320d 	movw	r2, #781	; 0x30d
 8011aaa:	492c      	ldr	r1, [pc, #176]	; (8011b5c <udp_sendto_if_src+0x1c8>)
 8011aac:	4826      	ldr	r0, [pc, #152]	; (8011b48 <udp_sendto_if_src+0x1b4>)
 8011aae:	f002 fc73 	bl	8014398 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011ab2:	69fb      	ldr	r3, [r7, #28]
 8011ab4:	685b      	ldr	r3, [r3, #4]
 8011ab6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	8a5b      	ldrh	r3, [r3, #18]
 8011abc:	4618      	mov	r0, r3
 8011abe:	f7f7 f8af 	bl	8008c20 <lwip_htons>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	461a      	mov	r2, r3
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011aca:	887b      	ldrh	r3, [r7, #2]
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7f7 f8a7 	bl	8008c20 <lwip_htons>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	461a      	mov	r2, r3
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	2200      	movs	r2, #0
 8011ade:	719a      	strb	r2, [r3, #6]
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011ae4:	69fb      	ldr	r3, [r7, #28]
 8011ae6:	891b      	ldrh	r3, [r3, #8]
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7f7 f899 	bl	8008c20 <lwip_htons>
 8011aee:	4603      	mov	r3, r0
 8011af0:	461a      	mov	r2, r3
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011af6:	2311      	movs	r3, #17
 8011af8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	7adb      	ldrb	r3, [r3, #11]
 8011afe:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	7a9b      	ldrb	r3, [r3, #10]
 8011b04:	7cb9      	ldrb	r1, [r7, #18]
 8011b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b08:	9202      	str	r2, [sp, #8]
 8011b0a:	7cfa      	ldrb	r2, [r7, #19]
 8011b0c:	9201      	str	r2, [sp, #4]
 8011b0e:	9300      	str	r3, [sp, #0]
 8011b10:	460b      	mov	r3, r1
 8011b12:	687a      	ldr	r2, [r7, #4]
 8011b14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b16:	69f8      	ldr	r0, [r7, #28]
 8011b18:	f001 fbde 	bl	80132d8 <ip4_output_if_src>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011b20:	69fa      	ldr	r2, [r7, #28]
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d004      	beq.n	8011b32 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011b28:	69f8      	ldr	r0, [r7, #28]
 8011b2a:	f7f8 fdf7 	bl	800a71c <pbuf_free>
    q = NULL;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011b32:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	3720      	adds	r7, #32
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}
 8011b3e:	bf00      	nop
 8011b40:	08017998 	.word	0x08017998
 8011b44:	08017b84 	.word	0x08017b84
 8011b48:	080179ec 	.word	0x080179ec
 8011b4c:	08017ba4 	.word	0x08017ba4
 8011b50:	08017bc4 	.word	0x08017bc4
 8011b54:	08017be8 	.word	0x08017be8
 8011b58:	08017c0c 	.word	0x08017c0c
 8011b5c:	08017c30 	.word	0x08017c30

08011b60 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b086      	sub	sp, #24
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	60f8      	str	r0, [r7, #12]
 8011b68:	60b9      	str	r1, [r7, #8]
 8011b6a:	4613      	mov	r3, r2
 8011b6c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011b6e:	68bb      	ldr	r3, [r7, #8]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d101      	bne.n	8011b78 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011b74:	4b39      	ldr	r3, [pc, #228]	; (8011c5c <udp_bind+0xfc>)
 8011b76:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d109      	bne.n	8011b92 <udp_bind+0x32>
 8011b7e:	4b38      	ldr	r3, [pc, #224]	; (8011c60 <udp_bind+0x100>)
 8011b80:	f240 32b7 	movw	r2, #951	; 0x3b7
 8011b84:	4937      	ldr	r1, [pc, #220]	; (8011c64 <udp_bind+0x104>)
 8011b86:	4838      	ldr	r0, [pc, #224]	; (8011c68 <udp_bind+0x108>)
 8011b88:	f002 fc06 	bl	8014398 <iprintf>
 8011b8c:	f06f 030f 	mvn.w	r3, #15
 8011b90:	e060      	b.n	8011c54 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011b92:	2300      	movs	r3, #0
 8011b94:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011b96:	4b35      	ldr	r3, [pc, #212]	; (8011c6c <udp_bind+0x10c>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	617b      	str	r3, [r7, #20]
 8011b9c:	e009      	b.n	8011bb2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011b9e:	68fa      	ldr	r2, [r7, #12]
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d102      	bne.n	8011bac <udp_bind+0x4c>
      rebind = 1;
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	74fb      	strb	r3, [r7, #19]
      break;
 8011baa:	e005      	b.n	8011bb8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011bac:	697b      	ldr	r3, [r7, #20]
 8011bae:	68db      	ldr	r3, [r3, #12]
 8011bb0:	617b      	str	r3, [r7, #20]
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d1f2      	bne.n	8011b9e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011bb8:	88fb      	ldrh	r3, [r7, #6]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d109      	bne.n	8011bd2 <udp_bind+0x72>
    port = udp_new_port();
 8011bbe:	f7ff fc69 	bl	8011494 <udp_new_port>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011bc6:	88fb      	ldrh	r3, [r7, #6]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d12c      	bne.n	8011c26 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011bcc:	f06f 0307 	mvn.w	r3, #7
 8011bd0:	e040      	b.n	8011c54 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011bd2:	4b26      	ldr	r3, [pc, #152]	; (8011c6c <udp_bind+0x10c>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	617b      	str	r3, [r7, #20]
 8011bd8:	e022      	b.n	8011c20 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011bda:	68fa      	ldr	r2, [r7, #12]
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d01b      	beq.n	8011c1a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	8a5b      	ldrh	r3, [r3, #18]
 8011be6:	88fa      	ldrh	r2, [r7, #6]
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d116      	bne.n	8011c1a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011bec:	697b      	ldr	r3, [r7, #20]
 8011bee:	681a      	ldr	r2, [r3, #0]
 8011bf0:	68bb      	ldr	r3, [r7, #8]
 8011bf2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d00d      	beq.n	8011c14 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d00a      	beq.n	8011c14 <udp_bind+0xb4>
 8011bfe:	68bb      	ldr	r3, [r7, #8]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d006      	beq.n	8011c14 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011c06:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d003      	beq.n	8011c14 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d102      	bne.n	8011c1a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011c14:	f06f 0307 	mvn.w	r3, #7
 8011c18:	e01c      	b.n	8011c54 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	68db      	ldr	r3, [r3, #12]
 8011c1e:	617b      	str	r3, [r7, #20]
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d1d9      	bne.n	8011bda <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011c26:	68bb      	ldr	r3, [r7, #8]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d002      	beq.n	8011c32 <udp_bind+0xd2>
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	e000      	b.n	8011c34 <udp_bind+0xd4>
 8011c32:	2300      	movs	r3, #0
 8011c34:	68fa      	ldr	r2, [r7, #12]
 8011c36:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	88fa      	ldrh	r2, [r7, #6]
 8011c3c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011c3e:	7cfb      	ldrb	r3, [r7, #19]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d106      	bne.n	8011c52 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011c44:	4b09      	ldr	r3, [pc, #36]	; (8011c6c <udp_bind+0x10c>)
 8011c46:	681a      	ldr	r2, [r3, #0]
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011c4c:	4a07      	ldr	r2, [pc, #28]	; (8011c6c <udp_bind+0x10c>)
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011c52:	2300      	movs	r3, #0
}
 8011c54:	4618      	mov	r0, r3
 8011c56:	3718      	adds	r7, #24
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd80      	pop	{r7, pc}
 8011c5c:	08059b70 	.word	0x08059b70
 8011c60:	08017998 	.word	0x08017998
 8011c64:	08017c60 	.word	0x08017c60
 8011c68:	080179ec 	.word	0x080179ec
 8011c6c:	200075e8 	.word	0x200075e8

08011c70 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b084      	sub	sp, #16
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d107      	bne.n	8011c8e <udp_remove+0x1e>
 8011c7e:	4b19      	ldr	r3, [pc, #100]	; (8011ce4 <udp_remove+0x74>)
 8011c80:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011c84:	4918      	ldr	r1, [pc, #96]	; (8011ce8 <udp_remove+0x78>)
 8011c86:	4819      	ldr	r0, [pc, #100]	; (8011cec <udp_remove+0x7c>)
 8011c88:	f002 fb86 	bl	8014398 <iprintf>
 8011c8c:	e026      	b.n	8011cdc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011c8e:	4b18      	ldr	r3, [pc, #96]	; (8011cf0 <udp_remove+0x80>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	687a      	ldr	r2, [r7, #4]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d105      	bne.n	8011ca4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011c98:	4b15      	ldr	r3, [pc, #84]	; (8011cf0 <udp_remove+0x80>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	68db      	ldr	r3, [r3, #12]
 8011c9e:	4a14      	ldr	r2, [pc, #80]	; (8011cf0 <udp_remove+0x80>)
 8011ca0:	6013      	str	r3, [r2, #0]
 8011ca2:	e017      	b.n	8011cd4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011ca4:	4b12      	ldr	r3, [pc, #72]	; (8011cf0 <udp_remove+0x80>)
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	60fb      	str	r3, [r7, #12]
 8011caa:	e010      	b.n	8011cce <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	68db      	ldr	r3, [r3, #12]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d009      	beq.n	8011cc8 <udp_remove+0x58>
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	68db      	ldr	r3, [r3, #12]
 8011cb8:	687a      	ldr	r2, [r7, #4]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d104      	bne.n	8011cc8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	68da      	ldr	r2, [r3, #12]
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	60da      	str	r2, [r3, #12]
        break;
 8011cc6:	e005      	b.n	8011cd4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	68db      	ldr	r3, [r3, #12]
 8011ccc:	60fb      	str	r3, [r7, #12]
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d1eb      	bne.n	8011cac <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011cd4:	6879      	ldr	r1, [r7, #4]
 8011cd6:	2000      	movs	r0, #0
 8011cd8:	f7f7 ff0e 	bl	8009af8 <memp_free>
}
 8011cdc:	3710      	adds	r7, #16
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	08017998 	.word	0x08017998
 8011ce8:	08017ce4 	.word	0x08017ce4
 8011cec:	080179ec 	.word	0x080179ec
 8011cf0:	200075e8 	.word	0x200075e8

08011cf4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011cf4:	b480      	push	{r7}
 8011cf6:	b085      	sub	sp, #20
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d01e      	beq.n	8011d42 <udp_netif_ip_addr_changed+0x4e>
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d01a      	beq.n	8011d42 <udp_netif_ip_addr_changed+0x4e>
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d017      	beq.n	8011d42 <udp_netif_ip_addr_changed+0x4e>
 8011d12:	683b      	ldr	r3, [r7, #0]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d013      	beq.n	8011d42 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011d1a:	4b0d      	ldr	r3, [pc, #52]	; (8011d50 <udp_netif_ip_addr_changed+0x5c>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	60fb      	str	r3, [r7, #12]
 8011d20:	e00c      	b.n	8011d3c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	681a      	ldr	r2, [r3, #0]
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d103      	bne.n	8011d36 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	681a      	ldr	r2, [r3, #0]
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	68db      	ldr	r3, [r3, #12]
 8011d3a:	60fb      	str	r3, [r7, #12]
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d1ef      	bne.n	8011d22 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011d42:	bf00      	nop
 8011d44:	3714      	adds	r7, #20
 8011d46:	46bd      	mov	sp, r7
 8011d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4c:	4770      	bx	lr
 8011d4e:	bf00      	nop
 8011d50:	200075e8 	.word	0x200075e8

08011d54 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b082      	sub	sp, #8
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011d5c:	4915      	ldr	r1, [pc, #84]	; (8011db4 <etharp_free_entry+0x60>)
 8011d5e:	687a      	ldr	r2, [r7, #4]
 8011d60:	4613      	mov	r3, r2
 8011d62:	005b      	lsls	r3, r3, #1
 8011d64:	4413      	add	r3, r2
 8011d66:	00db      	lsls	r3, r3, #3
 8011d68:	440b      	add	r3, r1
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d013      	beq.n	8011d98 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011d70:	4910      	ldr	r1, [pc, #64]	; (8011db4 <etharp_free_entry+0x60>)
 8011d72:	687a      	ldr	r2, [r7, #4]
 8011d74:	4613      	mov	r3, r2
 8011d76:	005b      	lsls	r3, r3, #1
 8011d78:	4413      	add	r3, r2
 8011d7a:	00db      	lsls	r3, r3, #3
 8011d7c:	440b      	add	r3, r1
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7f8 fccb 	bl	800a71c <pbuf_free>
    arp_table[i].q = NULL;
 8011d86:	490b      	ldr	r1, [pc, #44]	; (8011db4 <etharp_free_entry+0x60>)
 8011d88:	687a      	ldr	r2, [r7, #4]
 8011d8a:	4613      	mov	r3, r2
 8011d8c:	005b      	lsls	r3, r3, #1
 8011d8e:	4413      	add	r3, r2
 8011d90:	00db      	lsls	r3, r3, #3
 8011d92:	440b      	add	r3, r1
 8011d94:	2200      	movs	r2, #0
 8011d96:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011d98:	4906      	ldr	r1, [pc, #24]	; (8011db4 <etharp_free_entry+0x60>)
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	4613      	mov	r3, r2
 8011d9e:	005b      	lsls	r3, r3, #1
 8011da0:	4413      	add	r3, r2
 8011da2:	00db      	lsls	r3, r3, #3
 8011da4:	440b      	add	r3, r1
 8011da6:	3314      	adds	r3, #20
 8011da8:	2200      	movs	r2, #0
 8011daa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011dac:	bf00      	nop
 8011dae:	3708      	adds	r7, #8
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}
 8011db4:	200007c4 	.word	0x200007c4

08011db8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b082      	sub	sp, #8
 8011dbc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	607b      	str	r3, [r7, #4]
 8011dc2:	e096      	b.n	8011ef2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011dc4:	494f      	ldr	r1, [pc, #316]	; (8011f04 <etharp_tmr+0x14c>)
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	4613      	mov	r3, r2
 8011dca:	005b      	lsls	r3, r3, #1
 8011dcc:	4413      	add	r3, r2
 8011dce:	00db      	lsls	r3, r3, #3
 8011dd0:	440b      	add	r3, r1
 8011dd2:	3314      	adds	r3, #20
 8011dd4:	781b      	ldrb	r3, [r3, #0]
 8011dd6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011dd8:	78fb      	ldrb	r3, [r7, #3]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	f000 8086 	beq.w	8011eec <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011de0:	4948      	ldr	r1, [pc, #288]	; (8011f04 <etharp_tmr+0x14c>)
 8011de2:	687a      	ldr	r2, [r7, #4]
 8011de4:	4613      	mov	r3, r2
 8011de6:	005b      	lsls	r3, r3, #1
 8011de8:	4413      	add	r3, r2
 8011dea:	00db      	lsls	r3, r3, #3
 8011dec:	440b      	add	r3, r1
 8011dee:	3312      	adds	r3, #18
 8011df0:	881b      	ldrh	r3, [r3, #0]
 8011df2:	3301      	adds	r3, #1
 8011df4:	b298      	uxth	r0, r3
 8011df6:	4943      	ldr	r1, [pc, #268]	; (8011f04 <etharp_tmr+0x14c>)
 8011df8:	687a      	ldr	r2, [r7, #4]
 8011dfa:	4613      	mov	r3, r2
 8011dfc:	005b      	lsls	r3, r3, #1
 8011dfe:	4413      	add	r3, r2
 8011e00:	00db      	lsls	r3, r3, #3
 8011e02:	440b      	add	r3, r1
 8011e04:	3312      	adds	r3, #18
 8011e06:	4602      	mov	r2, r0
 8011e08:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011e0a:	493e      	ldr	r1, [pc, #248]	; (8011f04 <etharp_tmr+0x14c>)
 8011e0c:	687a      	ldr	r2, [r7, #4]
 8011e0e:	4613      	mov	r3, r2
 8011e10:	005b      	lsls	r3, r3, #1
 8011e12:	4413      	add	r3, r2
 8011e14:	00db      	lsls	r3, r3, #3
 8011e16:	440b      	add	r3, r1
 8011e18:	3312      	adds	r3, #18
 8011e1a:	881b      	ldrh	r3, [r3, #0]
 8011e1c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011e20:	d215      	bcs.n	8011e4e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011e22:	4938      	ldr	r1, [pc, #224]	; (8011f04 <etharp_tmr+0x14c>)
 8011e24:	687a      	ldr	r2, [r7, #4]
 8011e26:	4613      	mov	r3, r2
 8011e28:	005b      	lsls	r3, r3, #1
 8011e2a:	4413      	add	r3, r2
 8011e2c:	00db      	lsls	r3, r3, #3
 8011e2e:	440b      	add	r3, r1
 8011e30:	3314      	adds	r3, #20
 8011e32:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011e34:	2b01      	cmp	r3, #1
 8011e36:	d10e      	bne.n	8011e56 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011e38:	4932      	ldr	r1, [pc, #200]	; (8011f04 <etharp_tmr+0x14c>)
 8011e3a:	687a      	ldr	r2, [r7, #4]
 8011e3c:	4613      	mov	r3, r2
 8011e3e:	005b      	lsls	r3, r3, #1
 8011e40:	4413      	add	r3, r2
 8011e42:	00db      	lsls	r3, r3, #3
 8011e44:	440b      	add	r3, r1
 8011e46:	3312      	adds	r3, #18
 8011e48:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011e4a:	2b04      	cmp	r3, #4
 8011e4c:	d903      	bls.n	8011e56 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f7ff ff80 	bl	8011d54 <etharp_free_entry>
 8011e54:	e04a      	b.n	8011eec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011e56:	492b      	ldr	r1, [pc, #172]	; (8011f04 <etharp_tmr+0x14c>)
 8011e58:	687a      	ldr	r2, [r7, #4]
 8011e5a:	4613      	mov	r3, r2
 8011e5c:	005b      	lsls	r3, r3, #1
 8011e5e:	4413      	add	r3, r2
 8011e60:	00db      	lsls	r3, r3, #3
 8011e62:	440b      	add	r3, r1
 8011e64:	3314      	adds	r3, #20
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	2b03      	cmp	r3, #3
 8011e6a:	d10a      	bne.n	8011e82 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011e6c:	4925      	ldr	r1, [pc, #148]	; (8011f04 <etharp_tmr+0x14c>)
 8011e6e:	687a      	ldr	r2, [r7, #4]
 8011e70:	4613      	mov	r3, r2
 8011e72:	005b      	lsls	r3, r3, #1
 8011e74:	4413      	add	r3, r2
 8011e76:	00db      	lsls	r3, r3, #3
 8011e78:	440b      	add	r3, r1
 8011e7a:	3314      	adds	r3, #20
 8011e7c:	2204      	movs	r2, #4
 8011e7e:	701a      	strb	r2, [r3, #0]
 8011e80:	e034      	b.n	8011eec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011e82:	4920      	ldr	r1, [pc, #128]	; (8011f04 <etharp_tmr+0x14c>)
 8011e84:	687a      	ldr	r2, [r7, #4]
 8011e86:	4613      	mov	r3, r2
 8011e88:	005b      	lsls	r3, r3, #1
 8011e8a:	4413      	add	r3, r2
 8011e8c:	00db      	lsls	r3, r3, #3
 8011e8e:	440b      	add	r3, r1
 8011e90:	3314      	adds	r3, #20
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	2b04      	cmp	r3, #4
 8011e96:	d10a      	bne.n	8011eae <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011e98:	491a      	ldr	r1, [pc, #104]	; (8011f04 <etharp_tmr+0x14c>)
 8011e9a:	687a      	ldr	r2, [r7, #4]
 8011e9c:	4613      	mov	r3, r2
 8011e9e:	005b      	lsls	r3, r3, #1
 8011ea0:	4413      	add	r3, r2
 8011ea2:	00db      	lsls	r3, r3, #3
 8011ea4:	440b      	add	r3, r1
 8011ea6:	3314      	adds	r3, #20
 8011ea8:	2202      	movs	r2, #2
 8011eaa:	701a      	strb	r2, [r3, #0]
 8011eac:	e01e      	b.n	8011eec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011eae:	4915      	ldr	r1, [pc, #84]	; (8011f04 <etharp_tmr+0x14c>)
 8011eb0:	687a      	ldr	r2, [r7, #4]
 8011eb2:	4613      	mov	r3, r2
 8011eb4:	005b      	lsls	r3, r3, #1
 8011eb6:	4413      	add	r3, r2
 8011eb8:	00db      	lsls	r3, r3, #3
 8011eba:	440b      	add	r3, r1
 8011ebc:	3314      	adds	r3, #20
 8011ebe:	781b      	ldrb	r3, [r3, #0]
 8011ec0:	2b01      	cmp	r3, #1
 8011ec2:	d113      	bne.n	8011eec <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011ec4:	490f      	ldr	r1, [pc, #60]	; (8011f04 <etharp_tmr+0x14c>)
 8011ec6:	687a      	ldr	r2, [r7, #4]
 8011ec8:	4613      	mov	r3, r2
 8011eca:	005b      	lsls	r3, r3, #1
 8011ecc:	4413      	add	r3, r2
 8011ece:	00db      	lsls	r3, r3, #3
 8011ed0:	440b      	add	r3, r1
 8011ed2:	3308      	adds	r3, #8
 8011ed4:	6818      	ldr	r0, [r3, #0]
 8011ed6:	687a      	ldr	r2, [r7, #4]
 8011ed8:	4613      	mov	r3, r2
 8011eda:	005b      	lsls	r3, r3, #1
 8011edc:	4413      	add	r3, r2
 8011ede:	00db      	lsls	r3, r3, #3
 8011ee0:	4a08      	ldr	r2, [pc, #32]	; (8011f04 <etharp_tmr+0x14c>)
 8011ee2:	4413      	add	r3, r2
 8011ee4:	3304      	adds	r3, #4
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	f000 fe6e 	bl	8012bc8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	3301      	adds	r3, #1
 8011ef0:	607b      	str	r3, [r7, #4]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	2b09      	cmp	r3, #9
 8011ef6:	f77f af65 	ble.w	8011dc4 <etharp_tmr+0xc>
      }
    }
  }
}
 8011efa:	bf00      	nop
 8011efc:	bf00      	nop
 8011efe:	3708      	adds	r7, #8
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}
 8011f04:	200007c4 	.word	0x200007c4

08011f08 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b08a      	sub	sp, #40	; 0x28
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	60f8      	str	r0, [r7, #12]
 8011f10:	460b      	mov	r3, r1
 8011f12:	607a      	str	r2, [r7, #4]
 8011f14:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011f16:	230a      	movs	r3, #10
 8011f18:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011f1a:	230a      	movs	r3, #10
 8011f1c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011f1e:	230a      	movs	r3, #10
 8011f20:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011f22:	2300      	movs	r3, #0
 8011f24:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011f26:	230a      	movs	r3, #10
 8011f28:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	83bb      	strh	r3, [r7, #28]
 8011f2e:	2300      	movs	r3, #0
 8011f30:	837b      	strh	r3, [r7, #26]
 8011f32:	2300      	movs	r3, #0
 8011f34:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011f36:	2300      	movs	r3, #0
 8011f38:	843b      	strh	r3, [r7, #32]
 8011f3a:	e0ae      	b.n	801209a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011f3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f40:	49a6      	ldr	r1, [pc, #664]	; (80121dc <etharp_find_entry+0x2d4>)
 8011f42:	4613      	mov	r3, r2
 8011f44:	005b      	lsls	r3, r3, #1
 8011f46:	4413      	add	r3, r2
 8011f48:	00db      	lsls	r3, r3, #3
 8011f4a:	440b      	add	r3, r1
 8011f4c:	3314      	adds	r3, #20
 8011f4e:	781b      	ldrb	r3, [r3, #0]
 8011f50:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011f52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011f56:	2b0a      	cmp	r3, #10
 8011f58:	d105      	bne.n	8011f66 <etharp_find_entry+0x5e>
 8011f5a:	7dfb      	ldrb	r3, [r7, #23]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d102      	bne.n	8011f66 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011f60:	8c3b      	ldrh	r3, [r7, #32]
 8011f62:	847b      	strh	r3, [r7, #34]	; 0x22
 8011f64:	e095      	b.n	8012092 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011f66:	7dfb      	ldrb	r3, [r7, #23]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	f000 8092 	beq.w	8012092 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011f6e:	7dfb      	ldrb	r3, [r7, #23]
 8011f70:	2b01      	cmp	r3, #1
 8011f72:	d009      	beq.n	8011f88 <etharp_find_entry+0x80>
 8011f74:	7dfb      	ldrb	r3, [r7, #23]
 8011f76:	2b01      	cmp	r3, #1
 8011f78:	d806      	bhi.n	8011f88 <etharp_find_entry+0x80>
 8011f7a:	4b99      	ldr	r3, [pc, #612]	; (80121e0 <etharp_find_entry+0x2d8>)
 8011f7c:	f240 1223 	movw	r2, #291	; 0x123
 8011f80:	4998      	ldr	r1, [pc, #608]	; (80121e4 <etharp_find_entry+0x2dc>)
 8011f82:	4899      	ldr	r0, [pc, #612]	; (80121e8 <etharp_find_entry+0x2e0>)
 8011f84:	f002 fa08 	bl	8014398 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d020      	beq.n	8011fd0 <etharp_find_entry+0xc8>
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	6819      	ldr	r1, [r3, #0]
 8011f92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f96:	4891      	ldr	r0, [pc, #580]	; (80121dc <etharp_find_entry+0x2d4>)
 8011f98:	4613      	mov	r3, r2
 8011f9a:	005b      	lsls	r3, r3, #1
 8011f9c:	4413      	add	r3, r2
 8011f9e:	00db      	lsls	r3, r3, #3
 8011fa0:	4403      	add	r3, r0
 8011fa2:	3304      	adds	r3, #4
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	4299      	cmp	r1, r3
 8011fa8:	d112      	bne.n	8011fd0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d00c      	beq.n	8011fca <etharp_find_entry+0xc2>
 8011fb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011fb4:	4989      	ldr	r1, [pc, #548]	; (80121dc <etharp_find_entry+0x2d4>)
 8011fb6:	4613      	mov	r3, r2
 8011fb8:	005b      	lsls	r3, r3, #1
 8011fba:	4413      	add	r3, r2
 8011fbc:	00db      	lsls	r3, r3, #3
 8011fbe:	440b      	add	r3, r1
 8011fc0:	3308      	adds	r3, #8
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	687a      	ldr	r2, [r7, #4]
 8011fc6:	429a      	cmp	r2, r3
 8011fc8:	d102      	bne.n	8011fd0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011fca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011fce:	e100      	b.n	80121d2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011fd0:	7dfb      	ldrb	r3, [r7, #23]
 8011fd2:	2b01      	cmp	r3, #1
 8011fd4:	d140      	bne.n	8012058 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011fd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011fda:	4980      	ldr	r1, [pc, #512]	; (80121dc <etharp_find_entry+0x2d4>)
 8011fdc:	4613      	mov	r3, r2
 8011fde:	005b      	lsls	r3, r3, #1
 8011fe0:	4413      	add	r3, r2
 8011fe2:	00db      	lsls	r3, r3, #3
 8011fe4:	440b      	add	r3, r1
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d01a      	beq.n	8012022 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011fec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ff0:	497a      	ldr	r1, [pc, #488]	; (80121dc <etharp_find_entry+0x2d4>)
 8011ff2:	4613      	mov	r3, r2
 8011ff4:	005b      	lsls	r3, r3, #1
 8011ff6:	4413      	add	r3, r2
 8011ff8:	00db      	lsls	r3, r3, #3
 8011ffa:	440b      	add	r3, r1
 8011ffc:	3312      	adds	r3, #18
 8011ffe:	881b      	ldrh	r3, [r3, #0]
 8012000:	8bba      	ldrh	r2, [r7, #28]
 8012002:	429a      	cmp	r2, r3
 8012004:	d845      	bhi.n	8012092 <etharp_find_entry+0x18a>
            old_queue = i;
 8012006:	8c3b      	ldrh	r3, [r7, #32]
 8012008:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801200a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801200e:	4973      	ldr	r1, [pc, #460]	; (80121dc <etharp_find_entry+0x2d4>)
 8012010:	4613      	mov	r3, r2
 8012012:	005b      	lsls	r3, r3, #1
 8012014:	4413      	add	r3, r2
 8012016:	00db      	lsls	r3, r3, #3
 8012018:	440b      	add	r3, r1
 801201a:	3312      	adds	r3, #18
 801201c:	881b      	ldrh	r3, [r3, #0]
 801201e:	83bb      	strh	r3, [r7, #28]
 8012020:	e037      	b.n	8012092 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012022:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012026:	496d      	ldr	r1, [pc, #436]	; (80121dc <etharp_find_entry+0x2d4>)
 8012028:	4613      	mov	r3, r2
 801202a:	005b      	lsls	r3, r3, #1
 801202c:	4413      	add	r3, r2
 801202e:	00db      	lsls	r3, r3, #3
 8012030:	440b      	add	r3, r1
 8012032:	3312      	adds	r3, #18
 8012034:	881b      	ldrh	r3, [r3, #0]
 8012036:	8b7a      	ldrh	r2, [r7, #26]
 8012038:	429a      	cmp	r2, r3
 801203a:	d82a      	bhi.n	8012092 <etharp_find_entry+0x18a>
            old_pending = i;
 801203c:	8c3b      	ldrh	r3, [r7, #32]
 801203e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012040:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012044:	4965      	ldr	r1, [pc, #404]	; (80121dc <etharp_find_entry+0x2d4>)
 8012046:	4613      	mov	r3, r2
 8012048:	005b      	lsls	r3, r3, #1
 801204a:	4413      	add	r3, r2
 801204c:	00db      	lsls	r3, r3, #3
 801204e:	440b      	add	r3, r1
 8012050:	3312      	adds	r3, #18
 8012052:	881b      	ldrh	r3, [r3, #0]
 8012054:	837b      	strh	r3, [r7, #26]
 8012056:	e01c      	b.n	8012092 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012058:	7dfb      	ldrb	r3, [r7, #23]
 801205a:	2b01      	cmp	r3, #1
 801205c:	d919      	bls.n	8012092 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801205e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012062:	495e      	ldr	r1, [pc, #376]	; (80121dc <etharp_find_entry+0x2d4>)
 8012064:	4613      	mov	r3, r2
 8012066:	005b      	lsls	r3, r3, #1
 8012068:	4413      	add	r3, r2
 801206a:	00db      	lsls	r3, r3, #3
 801206c:	440b      	add	r3, r1
 801206e:	3312      	adds	r3, #18
 8012070:	881b      	ldrh	r3, [r3, #0]
 8012072:	8b3a      	ldrh	r2, [r7, #24]
 8012074:	429a      	cmp	r2, r3
 8012076:	d80c      	bhi.n	8012092 <etharp_find_entry+0x18a>
            old_stable = i;
 8012078:	8c3b      	ldrh	r3, [r7, #32]
 801207a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801207c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012080:	4956      	ldr	r1, [pc, #344]	; (80121dc <etharp_find_entry+0x2d4>)
 8012082:	4613      	mov	r3, r2
 8012084:	005b      	lsls	r3, r3, #1
 8012086:	4413      	add	r3, r2
 8012088:	00db      	lsls	r3, r3, #3
 801208a:	440b      	add	r3, r1
 801208c:	3312      	adds	r3, #18
 801208e:	881b      	ldrh	r3, [r3, #0]
 8012090:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012092:	8c3b      	ldrh	r3, [r7, #32]
 8012094:	3301      	adds	r3, #1
 8012096:	b29b      	uxth	r3, r3
 8012098:	843b      	strh	r3, [r7, #32]
 801209a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801209e:	2b09      	cmp	r3, #9
 80120a0:	f77f af4c 	ble.w	8011f3c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80120a4:	7afb      	ldrb	r3, [r7, #11]
 80120a6:	f003 0302 	and.w	r3, r3, #2
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d108      	bne.n	80120c0 <etharp_find_entry+0x1b8>
 80120ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80120b2:	2b0a      	cmp	r3, #10
 80120b4:	d107      	bne.n	80120c6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80120b6:	7afb      	ldrb	r3, [r7, #11]
 80120b8:	f003 0301 	and.w	r3, r3, #1
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d102      	bne.n	80120c6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80120c0:	f04f 33ff 	mov.w	r3, #4294967295
 80120c4:	e085      	b.n	80121d2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80120c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80120ca:	2b09      	cmp	r3, #9
 80120cc:	dc02      	bgt.n	80120d4 <etharp_find_entry+0x1cc>
    i = empty;
 80120ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80120d0:	843b      	strh	r3, [r7, #32]
 80120d2:	e039      	b.n	8012148 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80120d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80120d8:	2b09      	cmp	r3, #9
 80120da:	dc14      	bgt.n	8012106 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80120dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80120de:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80120e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80120e4:	493d      	ldr	r1, [pc, #244]	; (80121dc <etharp_find_entry+0x2d4>)
 80120e6:	4613      	mov	r3, r2
 80120e8:	005b      	lsls	r3, r3, #1
 80120ea:	4413      	add	r3, r2
 80120ec:	00db      	lsls	r3, r3, #3
 80120ee:	440b      	add	r3, r1
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d018      	beq.n	8012128 <etharp_find_entry+0x220>
 80120f6:	4b3a      	ldr	r3, [pc, #232]	; (80121e0 <etharp_find_entry+0x2d8>)
 80120f8:	f240 126d 	movw	r2, #365	; 0x16d
 80120fc:	493b      	ldr	r1, [pc, #236]	; (80121ec <etharp_find_entry+0x2e4>)
 80120fe:	483a      	ldr	r0, [pc, #232]	; (80121e8 <etharp_find_entry+0x2e0>)
 8012100:	f002 f94a 	bl	8014398 <iprintf>
 8012104:	e010      	b.n	8012128 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012106:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801210a:	2b09      	cmp	r3, #9
 801210c:	dc02      	bgt.n	8012114 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801210e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012110:	843b      	strh	r3, [r7, #32]
 8012112:	e009      	b.n	8012128 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012114:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012118:	2b09      	cmp	r3, #9
 801211a:	dc02      	bgt.n	8012122 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801211c:	8bfb      	ldrh	r3, [r7, #30]
 801211e:	843b      	strh	r3, [r7, #32]
 8012120:	e002      	b.n	8012128 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012122:	f04f 33ff 	mov.w	r3, #4294967295
 8012126:	e054      	b.n	80121d2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012128:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801212c:	2b09      	cmp	r3, #9
 801212e:	dd06      	ble.n	801213e <etharp_find_entry+0x236>
 8012130:	4b2b      	ldr	r3, [pc, #172]	; (80121e0 <etharp_find_entry+0x2d8>)
 8012132:	f240 127f 	movw	r2, #383	; 0x17f
 8012136:	492e      	ldr	r1, [pc, #184]	; (80121f0 <etharp_find_entry+0x2e8>)
 8012138:	482b      	ldr	r0, [pc, #172]	; (80121e8 <etharp_find_entry+0x2e0>)
 801213a:	f002 f92d 	bl	8014398 <iprintf>
    etharp_free_entry(i);
 801213e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012142:	4618      	mov	r0, r3
 8012144:	f7ff fe06 	bl	8011d54 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012148:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801214c:	2b09      	cmp	r3, #9
 801214e:	dd06      	ble.n	801215e <etharp_find_entry+0x256>
 8012150:	4b23      	ldr	r3, [pc, #140]	; (80121e0 <etharp_find_entry+0x2d8>)
 8012152:	f240 1283 	movw	r2, #387	; 0x183
 8012156:	4926      	ldr	r1, [pc, #152]	; (80121f0 <etharp_find_entry+0x2e8>)
 8012158:	4823      	ldr	r0, [pc, #140]	; (80121e8 <etharp_find_entry+0x2e0>)
 801215a:	f002 f91d 	bl	8014398 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801215e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012162:	491e      	ldr	r1, [pc, #120]	; (80121dc <etharp_find_entry+0x2d4>)
 8012164:	4613      	mov	r3, r2
 8012166:	005b      	lsls	r3, r3, #1
 8012168:	4413      	add	r3, r2
 801216a:	00db      	lsls	r3, r3, #3
 801216c:	440b      	add	r3, r1
 801216e:	3314      	adds	r3, #20
 8012170:	781b      	ldrb	r3, [r3, #0]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d006      	beq.n	8012184 <etharp_find_entry+0x27c>
 8012176:	4b1a      	ldr	r3, [pc, #104]	; (80121e0 <etharp_find_entry+0x2d8>)
 8012178:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801217c:	491d      	ldr	r1, [pc, #116]	; (80121f4 <etharp_find_entry+0x2ec>)
 801217e:	481a      	ldr	r0, [pc, #104]	; (80121e8 <etharp_find_entry+0x2e0>)
 8012180:	f002 f90a 	bl	8014398 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d00b      	beq.n	80121a2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801218a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	6819      	ldr	r1, [r3, #0]
 8012192:	4812      	ldr	r0, [pc, #72]	; (80121dc <etharp_find_entry+0x2d4>)
 8012194:	4613      	mov	r3, r2
 8012196:	005b      	lsls	r3, r3, #1
 8012198:	4413      	add	r3, r2
 801219a:	00db      	lsls	r3, r3, #3
 801219c:	4403      	add	r3, r0
 801219e:	3304      	adds	r3, #4
 80121a0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80121a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121a6:	490d      	ldr	r1, [pc, #52]	; (80121dc <etharp_find_entry+0x2d4>)
 80121a8:	4613      	mov	r3, r2
 80121aa:	005b      	lsls	r3, r3, #1
 80121ac:	4413      	add	r3, r2
 80121ae:	00db      	lsls	r3, r3, #3
 80121b0:	440b      	add	r3, r1
 80121b2:	3312      	adds	r3, #18
 80121b4:	2200      	movs	r2, #0
 80121b6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80121b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121bc:	4907      	ldr	r1, [pc, #28]	; (80121dc <etharp_find_entry+0x2d4>)
 80121be:	4613      	mov	r3, r2
 80121c0:	005b      	lsls	r3, r3, #1
 80121c2:	4413      	add	r3, r2
 80121c4:	00db      	lsls	r3, r3, #3
 80121c6:	440b      	add	r3, r1
 80121c8:	3308      	adds	r3, #8
 80121ca:	687a      	ldr	r2, [r7, #4]
 80121cc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80121ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80121d2:	4618      	mov	r0, r3
 80121d4:	3728      	adds	r7, #40	; 0x28
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}
 80121da:	bf00      	nop
 80121dc:	200007c4 	.word	0x200007c4
 80121e0:	08017cfc 	.word	0x08017cfc
 80121e4:	08017d34 	.word	0x08017d34
 80121e8:	08017d74 	.word	0x08017d74
 80121ec:	08017d9c 	.word	0x08017d9c
 80121f0:	08017db4 	.word	0x08017db4
 80121f4:	08017dc8 	.word	0x08017dc8

080121f8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b088      	sub	sp, #32
 80121fc:	af02      	add	r7, sp, #8
 80121fe:	60f8      	str	r0, [r7, #12]
 8012200:	60b9      	str	r1, [r7, #8]
 8012202:	607a      	str	r2, [r7, #4]
 8012204:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801220c:	2b06      	cmp	r3, #6
 801220e:	d006      	beq.n	801221e <etharp_update_arp_entry+0x26>
 8012210:	4b48      	ldr	r3, [pc, #288]	; (8012334 <etharp_update_arp_entry+0x13c>)
 8012212:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012216:	4948      	ldr	r1, [pc, #288]	; (8012338 <etharp_update_arp_entry+0x140>)
 8012218:	4848      	ldr	r0, [pc, #288]	; (801233c <etharp_update_arp_entry+0x144>)
 801221a:	f002 f8bd 	bl	8014398 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d012      	beq.n	801224a <etharp_update_arp_entry+0x52>
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d00e      	beq.n	801224a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801222c:	68bb      	ldr	r3, [r7, #8]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	68f9      	ldr	r1, [r7, #12]
 8012232:	4618      	mov	r0, r3
 8012234:	f001 f8fe 	bl	8013434 <ip4_addr_isbroadcast_u32>
 8012238:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801223a:	2b00      	cmp	r3, #0
 801223c:	d105      	bne.n	801224a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012246:	2be0      	cmp	r3, #224	; 0xe0
 8012248:	d102      	bne.n	8012250 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801224a:	f06f 030f 	mvn.w	r3, #15
 801224e:	e06c      	b.n	801232a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012250:	78fb      	ldrb	r3, [r7, #3]
 8012252:	68fa      	ldr	r2, [r7, #12]
 8012254:	4619      	mov	r1, r3
 8012256:	68b8      	ldr	r0, [r7, #8]
 8012258:	f7ff fe56 	bl	8011f08 <etharp_find_entry>
 801225c:	4603      	mov	r3, r0
 801225e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012260:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012264:	2b00      	cmp	r3, #0
 8012266:	da02      	bge.n	801226e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012268:	8afb      	ldrh	r3, [r7, #22]
 801226a:	b25b      	sxtb	r3, r3
 801226c:	e05d      	b.n	801232a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801226e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012272:	4933      	ldr	r1, [pc, #204]	; (8012340 <etharp_update_arp_entry+0x148>)
 8012274:	4613      	mov	r3, r2
 8012276:	005b      	lsls	r3, r3, #1
 8012278:	4413      	add	r3, r2
 801227a:	00db      	lsls	r3, r3, #3
 801227c:	440b      	add	r3, r1
 801227e:	3314      	adds	r3, #20
 8012280:	2202      	movs	r2, #2
 8012282:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012284:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012288:	492d      	ldr	r1, [pc, #180]	; (8012340 <etharp_update_arp_entry+0x148>)
 801228a:	4613      	mov	r3, r2
 801228c:	005b      	lsls	r3, r3, #1
 801228e:	4413      	add	r3, r2
 8012290:	00db      	lsls	r3, r3, #3
 8012292:	440b      	add	r3, r1
 8012294:	3308      	adds	r3, #8
 8012296:	68fa      	ldr	r2, [r7, #12]
 8012298:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801229a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801229e:	4613      	mov	r3, r2
 80122a0:	005b      	lsls	r3, r3, #1
 80122a2:	4413      	add	r3, r2
 80122a4:	00db      	lsls	r3, r3, #3
 80122a6:	3308      	adds	r3, #8
 80122a8:	4a25      	ldr	r2, [pc, #148]	; (8012340 <etharp_update_arp_entry+0x148>)
 80122aa:	4413      	add	r3, r2
 80122ac:	3304      	adds	r3, #4
 80122ae:	2206      	movs	r2, #6
 80122b0:	6879      	ldr	r1, [r7, #4]
 80122b2:	4618      	mov	r0, r3
 80122b4:	f002 f840 	bl	8014338 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80122b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80122bc:	4920      	ldr	r1, [pc, #128]	; (8012340 <etharp_update_arp_entry+0x148>)
 80122be:	4613      	mov	r3, r2
 80122c0:	005b      	lsls	r3, r3, #1
 80122c2:	4413      	add	r3, r2
 80122c4:	00db      	lsls	r3, r3, #3
 80122c6:	440b      	add	r3, r1
 80122c8:	3312      	adds	r3, #18
 80122ca:	2200      	movs	r2, #0
 80122cc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80122ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80122d2:	491b      	ldr	r1, [pc, #108]	; (8012340 <etharp_update_arp_entry+0x148>)
 80122d4:	4613      	mov	r3, r2
 80122d6:	005b      	lsls	r3, r3, #1
 80122d8:	4413      	add	r3, r2
 80122da:	00db      	lsls	r3, r3, #3
 80122dc:	440b      	add	r3, r1
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d021      	beq.n	8012328 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80122e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80122e8:	4915      	ldr	r1, [pc, #84]	; (8012340 <etharp_update_arp_entry+0x148>)
 80122ea:	4613      	mov	r3, r2
 80122ec:	005b      	lsls	r3, r3, #1
 80122ee:	4413      	add	r3, r2
 80122f0:	00db      	lsls	r3, r3, #3
 80122f2:	440b      	add	r3, r1
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80122f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80122fc:	4910      	ldr	r1, [pc, #64]	; (8012340 <etharp_update_arp_entry+0x148>)
 80122fe:	4613      	mov	r3, r2
 8012300:	005b      	lsls	r3, r3, #1
 8012302:	4413      	add	r3, r2
 8012304:	00db      	lsls	r3, r3, #3
 8012306:	440b      	add	r3, r1
 8012308:	2200      	movs	r2, #0
 801230a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012312:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012316:	9300      	str	r3, [sp, #0]
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6939      	ldr	r1, [r7, #16]
 801231c:	68f8      	ldr	r0, [r7, #12]
 801231e:	f001 ff91 	bl	8014244 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012322:	6938      	ldr	r0, [r7, #16]
 8012324:	f7f8 f9fa 	bl	800a71c <pbuf_free>
  }
  return ERR_OK;
 8012328:	2300      	movs	r3, #0
}
 801232a:	4618      	mov	r0, r3
 801232c:	3718      	adds	r7, #24
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}
 8012332:	bf00      	nop
 8012334:	08017cfc 	.word	0x08017cfc
 8012338:	08017df4 	.word	0x08017df4
 801233c:	08017d74 	.word	0x08017d74
 8012340:	200007c4 	.word	0x200007c4

08012344 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b084      	sub	sp, #16
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801234c:	2300      	movs	r3, #0
 801234e:	60fb      	str	r3, [r7, #12]
 8012350:	e01e      	b.n	8012390 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012352:	4913      	ldr	r1, [pc, #76]	; (80123a0 <etharp_cleanup_netif+0x5c>)
 8012354:	68fa      	ldr	r2, [r7, #12]
 8012356:	4613      	mov	r3, r2
 8012358:	005b      	lsls	r3, r3, #1
 801235a:	4413      	add	r3, r2
 801235c:	00db      	lsls	r3, r3, #3
 801235e:	440b      	add	r3, r1
 8012360:	3314      	adds	r3, #20
 8012362:	781b      	ldrb	r3, [r3, #0]
 8012364:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012366:	7afb      	ldrb	r3, [r7, #11]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d00e      	beq.n	801238a <etharp_cleanup_netif+0x46>
 801236c:	490c      	ldr	r1, [pc, #48]	; (80123a0 <etharp_cleanup_netif+0x5c>)
 801236e:	68fa      	ldr	r2, [r7, #12]
 8012370:	4613      	mov	r3, r2
 8012372:	005b      	lsls	r3, r3, #1
 8012374:	4413      	add	r3, r2
 8012376:	00db      	lsls	r3, r3, #3
 8012378:	440b      	add	r3, r1
 801237a:	3308      	adds	r3, #8
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	687a      	ldr	r2, [r7, #4]
 8012380:	429a      	cmp	r2, r3
 8012382:	d102      	bne.n	801238a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012384:	68f8      	ldr	r0, [r7, #12]
 8012386:	f7ff fce5 	bl	8011d54 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	3301      	adds	r3, #1
 801238e:	60fb      	str	r3, [r7, #12]
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	2b09      	cmp	r3, #9
 8012394:	dddd      	ble.n	8012352 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012396:	bf00      	nop
 8012398:	bf00      	nop
 801239a:	3710      	adds	r7, #16
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}
 80123a0:	200007c4 	.word	0x200007c4

080123a4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80123a4:	b5b0      	push	{r4, r5, r7, lr}
 80123a6:	b08a      	sub	sp, #40	; 0x28
 80123a8:	af04      	add	r7, sp, #16
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d107      	bne.n	80123c4 <etharp_input+0x20>
 80123b4:	4b3d      	ldr	r3, [pc, #244]	; (80124ac <etharp_input+0x108>)
 80123b6:	f240 228a 	movw	r2, #650	; 0x28a
 80123ba:	493d      	ldr	r1, [pc, #244]	; (80124b0 <etharp_input+0x10c>)
 80123bc:	483d      	ldr	r0, [pc, #244]	; (80124b4 <etharp_input+0x110>)
 80123be:	f001 ffeb 	bl	8014398 <iprintf>
 80123c2:	e06f      	b.n	80124a4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	685b      	ldr	r3, [r3, #4]
 80123c8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80123ca:	693b      	ldr	r3, [r7, #16]
 80123cc:	881b      	ldrh	r3, [r3, #0]
 80123ce:	b29b      	uxth	r3, r3
 80123d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80123d4:	d10c      	bne.n	80123f0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80123d6:	693b      	ldr	r3, [r7, #16]
 80123d8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80123da:	2b06      	cmp	r3, #6
 80123dc:	d108      	bne.n	80123f0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80123de:	693b      	ldr	r3, [r7, #16]
 80123e0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80123e2:	2b04      	cmp	r3, #4
 80123e4:	d104      	bne.n	80123f0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80123e6:	693b      	ldr	r3, [r7, #16]
 80123e8:	885b      	ldrh	r3, [r3, #2]
 80123ea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80123ec:	2b08      	cmp	r3, #8
 80123ee:	d003      	beq.n	80123f8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f7f8 f993 	bl	800a71c <pbuf_free>
    return;
 80123f6:	e055      	b.n	80124a4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80123f8:	693b      	ldr	r3, [r7, #16]
 80123fa:	330e      	adds	r3, #14
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	3318      	adds	r3, #24
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	3304      	adds	r3, #4
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d102      	bne.n	8012418 <etharp_input+0x74>
    for_us = 0;
 8012412:	2300      	movs	r3, #0
 8012414:	75fb      	strb	r3, [r7, #23]
 8012416:	e009      	b.n	801242c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012418:	68ba      	ldr	r2, [r7, #8]
 801241a:	683b      	ldr	r3, [r7, #0]
 801241c:	3304      	adds	r3, #4
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	429a      	cmp	r2, r3
 8012422:	bf0c      	ite	eq
 8012424:	2301      	moveq	r3, #1
 8012426:	2300      	movne	r3, #0
 8012428:	b2db      	uxtb	r3, r3
 801242a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801242c:	693b      	ldr	r3, [r7, #16]
 801242e:	f103 0208 	add.w	r2, r3, #8
 8012432:	7dfb      	ldrb	r3, [r7, #23]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d001      	beq.n	801243c <etharp_input+0x98>
 8012438:	2301      	movs	r3, #1
 801243a:	e000      	b.n	801243e <etharp_input+0x9a>
 801243c:	2302      	movs	r3, #2
 801243e:	f107 010c 	add.w	r1, r7, #12
 8012442:	6838      	ldr	r0, [r7, #0]
 8012444:	f7ff fed8 	bl	80121f8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012448:	693b      	ldr	r3, [r7, #16]
 801244a:	88db      	ldrh	r3, [r3, #6]
 801244c:	b29b      	uxth	r3, r3
 801244e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012452:	d003      	beq.n	801245c <etharp_input+0xb8>
 8012454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012458:	d01e      	beq.n	8012498 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801245a:	e020      	b.n	801249e <etharp_input+0xfa>
      if (for_us) {
 801245c:	7dfb      	ldrb	r3, [r7, #23]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d01c      	beq.n	801249c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012468:	693b      	ldr	r3, [r7, #16]
 801246a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012478:	693a      	ldr	r2, [r7, #16]
 801247a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801247c:	2102      	movs	r1, #2
 801247e:	9103      	str	r1, [sp, #12]
 8012480:	f107 010c 	add.w	r1, r7, #12
 8012484:	9102      	str	r1, [sp, #8]
 8012486:	9201      	str	r2, [sp, #4]
 8012488:	9300      	str	r3, [sp, #0]
 801248a:	462b      	mov	r3, r5
 801248c:	4622      	mov	r2, r4
 801248e:	4601      	mov	r1, r0
 8012490:	6838      	ldr	r0, [r7, #0]
 8012492:	f000 faeb 	bl	8012a6c <etharp_raw>
      break;
 8012496:	e001      	b.n	801249c <etharp_input+0xf8>
      break;
 8012498:	bf00      	nop
 801249a:	e000      	b.n	801249e <etharp_input+0xfa>
      break;
 801249c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f7f8 f93c 	bl	800a71c <pbuf_free>
}
 80124a4:	3718      	adds	r7, #24
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bdb0      	pop	{r4, r5, r7, pc}
 80124aa:	bf00      	nop
 80124ac:	08017cfc 	.word	0x08017cfc
 80124b0:	08017e4c 	.word	0x08017e4c
 80124b4:	08017d74 	.word	0x08017d74

080124b8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b086      	sub	sp, #24
 80124bc:	af02      	add	r7, sp, #8
 80124be:	60f8      	str	r0, [r7, #12]
 80124c0:	60b9      	str	r1, [r7, #8]
 80124c2:	4613      	mov	r3, r2
 80124c4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80124c6:	79fa      	ldrb	r2, [r7, #7]
 80124c8:	4944      	ldr	r1, [pc, #272]	; (80125dc <etharp_output_to_arp_index+0x124>)
 80124ca:	4613      	mov	r3, r2
 80124cc:	005b      	lsls	r3, r3, #1
 80124ce:	4413      	add	r3, r2
 80124d0:	00db      	lsls	r3, r3, #3
 80124d2:	440b      	add	r3, r1
 80124d4:	3314      	adds	r3, #20
 80124d6:	781b      	ldrb	r3, [r3, #0]
 80124d8:	2b01      	cmp	r3, #1
 80124da:	d806      	bhi.n	80124ea <etharp_output_to_arp_index+0x32>
 80124dc:	4b40      	ldr	r3, [pc, #256]	; (80125e0 <etharp_output_to_arp_index+0x128>)
 80124de:	f240 22ee 	movw	r2, #750	; 0x2ee
 80124e2:	4940      	ldr	r1, [pc, #256]	; (80125e4 <etharp_output_to_arp_index+0x12c>)
 80124e4:	4840      	ldr	r0, [pc, #256]	; (80125e8 <etharp_output_to_arp_index+0x130>)
 80124e6:	f001 ff57 	bl	8014398 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80124ea:	79fa      	ldrb	r2, [r7, #7]
 80124ec:	493b      	ldr	r1, [pc, #236]	; (80125dc <etharp_output_to_arp_index+0x124>)
 80124ee:	4613      	mov	r3, r2
 80124f0:	005b      	lsls	r3, r3, #1
 80124f2:	4413      	add	r3, r2
 80124f4:	00db      	lsls	r3, r3, #3
 80124f6:	440b      	add	r3, r1
 80124f8:	3314      	adds	r3, #20
 80124fa:	781b      	ldrb	r3, [r3, #0]
 80124fc:	2b02      	cmp	r3, #2
 80124fe:	d153      	bne.n	80125a8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012500:	79fa      	ldrb	r2, [r7, #7]
 8012502:	4936      	ldr	r1, [pc, #216]	; (80125dc <etharp_output_to_arp_index+0x124>)
 8012504:	4613      	mov	r3, r2
 8012506:	005b      	lsls	r3, r3, #1
 8012508:	4413      	add	r3, r2
 801250a:	00db      	lsls	r3, r3, #3
 801250c:	440b      	add	r3, r1
 801250e:	3312      	adds	r3, #18
 8012510:	881b      	ldrh	r3, [r3, #0]
 8012512:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012516:	d919      	bls.n	801254c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012518:	79fa      	ldrb	r2, [r7, #7]
 801251a:	4613      	mov	r3, r2
 801251c:	005b      	lsls	r3, r3, #1
 801251e:	4413      	add	r3, r2
 8012520:	00db      	lsls	r3, r3, #3
 8012522:	4a2e      	ldr	r2, [pc, #184]	; (80125dc <etharp_output_to_arp_index+0x124>)
 8012524:	4413      	add	r3, r2
 8012526:	3304      	adds	r3, #4
 8012528:	4619      	mov	r1, r3
 801252a:	68f8      	ldr	r0, [r7, #12]
 801252c:	f000 fb4c 	bl	8012bc8 <etharp_request>
 8012530:	4603      	mov	r3, r0
 8012532:	2b00      	cmp	r3, #0
 8012534:	d138      	bne.n	80125a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012536:	79fa      	ldrb	r2, [r7, #7]
 8012538:	4928      	ldr	r1, [pc, #160]	; (80125dc <etharp_output_to_arp_index+0x124>)
 801253a:	4613      	mov	r3, r2
 801253c:	005b      	lsls	r3, r3, #1
 801253e:	4413      	add	r3, r2
 8012540:	00db      	lsls	r3, r3, #3
 8012542:	440b      	add	r3, r1
 8012544:	3314      	adds	r3, #20
 8012546:	2203      	movs	r2, #3
 8012548:	701a      	strb	r2, [r3, #0]
 801254a:	e02d      	b.n	80125a8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801254c:	79fa      	ldrb	r2, [r7, #7]
 801254e:	4923      	ldr	r1, [pc, #140]	; (80125dc <etharp_output_to_arp_index+0x124>)
 8012550:	4613      	mov	r3, r2
 8012552:	005b      	lsls	r3, r3, #1
 8012554:	4413      	add	r3, r2
 8012556:	00db      	lsls	r3, r3, #3
 8012558:	440b      	add	r3, r1
 801255a:	3312      	adds	r3, #18
 801255c:	881b      	ldrh	r3, [r3, #0]
 801255e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012562:	d321      	bcc.n	80125a8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012564:	79fa      	ldrb	r2, [r7, #7]
 8012566:	4613      	mov	r3, r2
 8012568:	005b      	lsls	r3, r3, #1
 801256a:	4413      	add	r3, r2
 801256c:	00db      	lsls	r3, r3, #3
 801256e:	4a1b      	ldr	r2, [pc, #108]	; (80125dc <etharp_output_to_arp_index+0x124>)
 8012570:	4413      	add	r3, r2
 8012572:	1d19      	adds	r1, r3, #4
 8012574:	79fa      	ldrb	r2, [r7, #7]
 8012576:	4613      	mov	r3, r2
 8012578:	005b      	lsls	r3, r3, #1
 801257a:	4413      	add	r3, r2
 801257c:	00db      	lsls	r3, r3, #3
 801257e:	3308      	adds	r3, #8
 8012580:	4a16      	ldr	r2, [pc, #88]	; (80125dc <etharp_output_to_arp_index+0x124>)
 8012582:	4413      	add	r3, r2
 8012584:	3304      	adds	r3, #4
 8012586:	461a      	mov	r2, r3
 8012588:	68f8      	ldr	r0, [r7, #12]
 801258a:	f000 fafb 	bl	8012b84 <etharp_request_dst>
 801258e:	4603      	mov	r3, r0
 8012590:	2b00      	cmp	r3, #0
 8012592:	d109      	bne.n	80125a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012594:	79fa      	ldrb	r2, [r7, #7]
 8012596:	4911      	ldr	r1, [pc, #68]	; (80125dc <etharp_output_to_arp_index+0x124>)
 8012598:	4613      	mov	r3, r2
 801259a:	005b      	lsls	r3, r3, #1
 801259c:	4413      	add	r3, r2
 801259e:	00db      	lsls	r3, r3, #3
 80125a0:	440b      	add	r3, r1
 80125a2:	3314      	adds	r3, #20
 80125a4:	2203      	movs	r2, #3
 80125a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80125ae:	79fa      	ldrb	r2, [r7, #7]
 80125b0:	4613      	mov	r3, r2
 80125b2:	005b      	lsls	r3, r3, #1
 80125b4:	4413      	add	r3, r2
 80125b6:	00db      	lsls	r3, r3, #3
 80125b8:	3308      	adds	r3, #8
 80125ba:	4a08      	ldr	r2, [pc, #32]	; (80125dc <etharp_output_to_arp_index+0x124>)
 80125bc:	4413      	add	r3, r2
 80125be:	3304      	adds	r3, #4
 80125c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80125c4:	9200      	str	r2, [sp, #0]
 80125c6:	460a      	mov	r2, r1
 80125c8:	68b9      	ldr	r1, [r7, #8]
 80125ca:	68f8      	ldr	r0, [r7, #12]
 80125cc:	f001 fe3a 	bl	8014244 <ethernet_output>
 80125d0:	4603      	mov	r3, r0
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	3710      	adds	r7, #16
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}
 80125da:	bf00      	nop
 80125dc:	200007c4 	.word	0x200007c4
 80125e0:	08017cfc 	.word	0x08017cfc
 80125e4:	08017e6c 	.word	0x08017e6c
 80125e8:	08017d74 	.word	0x08017d74

080125ec <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b08a      	sub	sp, #40	; 0x28
 80125f0:	af02      	add	r7, sp, #8
 80125f2:	60f8      	str	r0, [r7, #12]
 80125f4:	60b9      	str	r1, [r7, #8]
 80125f6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d106      	bne.n	8012610 <etharp_output+0x24>
 8012602:	4b73      	ldr	r3, [pc, #460]	; (80127d0 <etharp_output+0x1e4>)
 8012604:	f240 321e 	movw	r2, #798	; 0x31e
 8012608:	4972      	ldr	r1, [pc, #456]	; (80127d4 <etharp_output+0x1e8>)
 801260a:	4873      	ldr	r0, [pc, #460]	; (80127d8 <etharp_output+0x1ec>)
 801260c:	f001 fec4 	bl	8014398 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012610:	68bb      	ldr	r3, [r7, #8]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d106      	bne.n	8012624 <etharp_output+0x38>
 8012616:	4b6e      	ldr	r3, [pc, #440]	; (80127d0 <etharp_output+0x1e4>)
 8012618:	f240 321f 	movw	r2, #799	; 0x31f
 801261c:	496f      	ldr	r1, [pc, #444]	; (80127dc <etharp_output+0x1f0>)
 801261e:	486e      	ldr	r0, [pc, #440]	; (80127d8 <etharp_output+0x1ec>)
 8012620:	f001 feba 	bl	8014398 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d106      	bne.n	8012638 <etharp_output+0x4c>
 801262a:	4b69      	ldr	r3, [pc, #420]	; (80127d0 <etharp_output+0x1e4>)
 801262c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012630:	496b      	ldr	r1, [pc, #428]	; (80127e0 <etharp_output+0x1f4>)
 8012632:	4869      	ldr	r0, [pc, #420]	; (80127d8 <etharp_output+0x1ec>)
 8012634:	f001 feb0 	bl	8014398 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	68f9      	ldr	r1, [r7, #12]
 801263e:	4618      	mov	r0, r3
 8012640:	f000 fef8 	bl	8013434 <ip4_addr_isbroadcast_u32>
 8012644:	4603      	mov	r3, r0
 8012646:	2b00      	cmp	r3, #0
 8012648:	d002      	beq.n	8012650 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801264a:	4b66      	ldr	r3, [pc, #408]	; (80127e4 <etharp_output+0x1f8>)
 801264c:	61fb      	str	r3, [r7, #28]
 801264e:	e0af      	b.n	80127b0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012658:	2be0      	cmp	r3, #224	; 0xe0
 801265a:	d118      	bne.n	801268e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801265c:	2301      	movs	r3, #1
 801265e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012660:	2300      	movs	r3, #0
 8012662:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012664:	235e      	movs	r3, #94	; 0x5e
 8012666:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	3301      	adds	r3, #1
 801266c:	781b      	ldrb	r3, [r3, #0]
 801266e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012672:	b2db      	uxtb	r3, r3
 8012674:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	3302      	adds	r3, #2
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	3303      	adds	r3, #3
 8012682:	781b      	ldrb	r3, [r3, #0]
 8012684:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012686:	f107 0310 	add.w	r3, r7, #16
 801268a:	61fb      	str	r3, [r7, #28]
 801268c:	e090      	b.n	80127b0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681a      	ldr	r2, [r3, #0]
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	3304      	adds	r3, #4
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	405a      	eors	r2, r3
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	3308      	adds	r3, #8
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	4013      	ands	r3, r2
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d012      	beq.n	80126cc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80126ac:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80126b0:	4293      	cmp	r3, r2
 80126b2:	d00b      	beq.n	80126cc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	330c      	adds	r3, #12
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d003      	beq.n	80126c6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	330c      	adds	r3, #12
 80126c2:	61bb      	str	r3, [r7, #24]
 80126c4:	e002      	b.n	80126cc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80126c6:	f06f 0303 	mvn.w	r3, #3
 80126ca:	e07d      	b.n	80127c8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80126cc:	4b46      	ldr	r3, [pc, #280]	; (80127e8 <etharp_output+0x1fc>)
 80126ce:	781b      	ldrb	r3, [r3, #0]
 80126d0:	4619      	mov	r1, r3
 80126d2:	4a46      	ldr	r2, [pc, #280]	; (80127ec <etharp_output+0x200>)
 80126d4:	460b      	mov	r3, r1
 80126d6:	005b      	lsls	r3, r3, #1
 80126d8:	440b      	add	r3, r1
 80126da:	00db      	lsls	r3, r3, #3
 80126dc:	4413      	add	r3, r2
 80126de:	3314      	adds	r3, #20
 80126e0:	781b      	ldrb	r3, [r3, #0]
 80126e2:	2b01      	cmp	r3, #1
 80126e4:	d925      	bls.n	8012732 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80126e6:	4b40      	ldr	r3, [pc, #256]	; (80127e8 <etharp_output+0x1fc>)
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	4619      	mov	r1, r3
 80126ec:	4a3f      	ldr	r2, [pc, #252]	; (80127ec <etharp_output+0x200>)
 80126ee:	460b      	mov	r3, r1
 80126f0:	005b      	lsls	r3, r3, #1
 80126f2:	440b      	add	r3, r1
 80126f4:	00db      	lsls	r3, r3, #3
 80126f6:	4413      	add	r3, r2
 80126f8:	3308      	adds	r3, #8
 80126fa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80126fc:	68fa      	ldr	r2, [r7, #12]
 80126fe:	429a      	cmp	r2, r3
 8012700:	d117      	bne.n	8012732 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012702:	69bb      	ldr	r3, [r7, #24]
 8012704:	681a      	ldr	r2, [r3, #0]
 8012706:	4b38      	ldr	r3, [pc, #224]	; (80127e8 <etharp_output+0x1fc>)
 8012708:	781b      	ldrb	r3, [r3, #0]
 801270a:	4618      	mov	r0, r3
 801270c:	4937      	ldr	r1, [pc, #220]	; (80127ec <etharp_output+0x200>)
 801270e:	4603      	mov	r3, r0
 8012710:	005b      	lsls	r3, r3, #1
 8012712:	4403      	add	r3, r0
 8012714:	00db      	lsls	r3, r3, #3
 8012716:	440b      	add	r3, r1
 8012718:	3304      	adds	r3, #4
 801271a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801271c:	429a      	cmp	r2, r3
 801271e:	d108      	bne.n	8012732 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012720:	4b31      	ldr	r3, [pc, #196]	; (80127e8 <etharp_output+0x1fc>)
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	461a      	mov	r2, r3
 8012726:	68b9      	ldr	r1, [r7, #8]
 8012728:	68f8      	ldr	r0, [r7, #12]
 801272a:	f7ff fec5 	bl	80124b8 <etharp_output_to_arp_index>
 801272e:	4603      	mov	r3, r0
 8012730:	e04a      	b.n	80127c8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012732:	2300      	movs	r3, #0
 8012734:	75fb      	strb	r3, [r7, #23]
 8012736:	e031      	b.n	801279c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012738:	7dfa      	ldrb	r2, [r7, #23]
 801273a:	492c      	ldr	r1, [pc, #176]	; (80127ec <etharp_output+0x200>)
 801273c:	4613      	mov	r3, r2
 801273e:	005b      	lsls	r3, r3, #1
 8012740:	4413      	add	r3, r2
 8012742:	00db      	lsls	r3, r3, #3
 8012744:	440b      	add	r3, r1
 8012746:	3314      	adds	r3, #20
 8012748:	781b      	ldrb	r3, [r3, #0]
 801274a:	2b01      	cmp	r3, #1
 801274c:	d923      	bls.n	8012796 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801274e:	7dfa      	ldrb	r2, [r7, #23]
 8012750:	4926      	ldr	r1, [pc, #152]	; (80127ec <etharp_output+0x200>)
 8012752:	4613      	mov	r3, r2
 8012754:	005b      	lsls	r3, r3, #1
 8012756:	4413      	add	r3, r2
 8012758:	00db      	lsls	r3, r3, #3
 801275a:	440b      	add	r3, r1
 801275c:	3308      	adds	r3, #8
 801275e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012760:	68fa      	ldr	r2, [r7, #12]
 8012762:	429a      	cmp	r2, r3
 8012764:	d117      	bne.n	8012796 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012766:	69bb      	ldr	r3, [r7, #24]
 8012768:	6819      	ldr	r1, [r3, #0]
 801276a:	7dfa      	ldrb	r2, [r7, #23]
 801276c:	481f      	ldr	r0, [pc, #124]	; (80127ec <etharp_output+0x200>)
 801276e:	4613      	mov	r3, r2
 8012770:	005b      	lsls	r3, r3, #1
 8012772:	4413      	add	r3, r2
 8012774:	00db      	lsls	r3, r3, #3
 8012776:	4403      	add	r3, r0
 8012778:	3304      	adds	r3, #4
 801277a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801277c:	4299      	cmp	r1, r3
 801277e:	d10a      	bne.n	8012796 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012780:	4a19      	ldr	r2, [pc, #100]	; (80127e8 <etharp_output+0x1fc>)
 8012782:	7dfb      	ldrb	r3, [r7, #23]
 8012784:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012786:	7dfb      	ldrb	r3, [r7, #23]
 8012788:	461a      	mov	r2, r3
 801278a:	68b9      	ldr	r1, [r7, #8]
 801278c:	68f8      	ldr	r0, [r7, #12]
 801278e:	f7ff fe93 	bl	80124b8 <etharp_output_to_arp_index>
 8012792:	4603      	mov	r3, r0
 8012794:	e018      	b.n	80127c8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012796:	7dfb      	ldrb	r3, [r7, #23]
 8012798:	3301      	adds	r3, #1
 801279a:	75fb      	strb	r3, [r7, #23]
 801279c:	7dfb      	ldrb	r3, [r7, #23]
 801279e:	2b09      	cmp	r3, #9
 80127a0:	d9ca      	bls.n	8012738 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80127a2:	68ba      	ldr	r2, [r7, #8]
 80127a4:	69b9      	ldr	r1, [r7, #24]
 80127a6:	68f8      	ldr	r0, [r7, #12]
 80127a8:	f000 f822 	bl	80127f0 <etharp_query>
 80127ac:	4603      	mov	r3, r0
 80127ae:	e00b      	b.n	80127c8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80127b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80127ba:	9300      	str	r3, [sp, #0]
 80127bc:	69fb      	ldr	r3, [r7, #28]
 80127be:	68b9      	ldr	r1, [r7, #8]
 80127c0:	68f8      	ldr	r0, [r7, #12]
 80127c2:	f001 fd3f 	bl	8014244 <ethernet_output>
 80127c6:	4603      	mov	r3, r0
}
 80127c8:	4618      	mov	r0, r3
 80127ca:	3720      	adds	r7, #32
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}
 80127d0:	08017cfc 	.word	0x08017cfc
 80127d4:	08017e4c 	.word	0x08017e4c
 80127d8:	08017d74 	.word	0x08017d74
 80127dc:	08017e9c 	.word	0x08017e9c
 80127e0:	08017e3c 	.word	0x08017e3c
 80127e4:	08059b74 	.word	0x08059b74
 80127e8:	200008b4 	.word	0x200008b4
 80127ec:	200007c4 	.word	0x200007c4

080127f0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b08c      	sub	sp, #48	; 0x30
 80127f4:	af02      	add	r7, sp, #8
 80127f6:	60f8      	str	r0, [r7, #12]
 80127f8:	60b9      	str	r1, [r7, #8]
 80127fa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	3326      	adds	r3, #38	; 0x26
 8012800:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012802:	23ff      	movs	r3, #255	; 0xff
 8012804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012808:	2300      	movs	r3, #0
 801280a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	68f9      	ldr	r1, [r7, #12]
 8012812:	4618      	mov	r0, r3
 8012814:	f000 fe0e 	bl	8013434 <ip4_addr_isbroadcast_u32>
 8012818:	4603      	mov	r3, r0
 801281a:	2b00      	cmp	r3, #0
 801281c:	d10c      	bne.n	8012838 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012826:	2be0      	cmp	r3, #224	; 0xe0
 8012828:	d006      	beq.n	8012838 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d003      	beq.n	8012838 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012830:	68bb      	ldr	r3, [r7, #8]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d102      	bne.n	801283e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012838:	f06f 030f 	mvn.w	r3, #15
 801283c:	e101      	b.n	8012a42 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801283e:	68fa      	ldr	r2, [r7, #12]
 8012840:	2101      	movs	r1, #1
 8012842:	68b8      	ldr	r0, [r7, #8]
 8012844:	f7ff fb60 	bl	8011f08 <etharp_find_entry>
 8012848:	4603      	mov	r3, r0
 801284a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801284c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012850:	2b00      	cmp	r3, #0
 8012852:	da02      	bge.n	801285a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012854:	8a7b      	ldrh	r3, [r7, #18]
 8012856:	b25b      	sxtb	r3, r3
 8012858:	e0f3      	b.n	8012a42 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801285a:	8a7b      	ldrh	r3, [r7, #18]
 801285c:	2b7e      	cmp	r3, #126	; 0x7e
 801285e:	d906      	bls.n	801286e <etharp_query+0x7e>
 8012860:	4b7a      	ldr	r3, [pc, #488]	; (8012a4c <etharp_query+0x25c>)
 8012862:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012866:	497a      	ldr	r1, [pc, #488]	; (8012a50 <etharp_query+0x260>)
 8012868:	487a      	ldr	r0, [pc, #488]	; (8012a54 <etharp_query+0x264>)
 801286a:	f001 fd95 	bl	8014398 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801286e:	8a7b      	ldrh	r3, [r7, #18]
 8012870:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012872:	7c7a      	ldrb	r2, [r7, #17]
 8012874:	4978      	ldr	r1, [pc, #480]	; (8012a58 <etharp_query+0x268>)
 8012876:	4613      	mov	r3, r2
 8012878:	005b      	lsls	r3, r3, #1
 801287a:	4413      	add	r3, r2
 801287c:	00db      	lsls	r3, r3, #3
 801287e:	440b      	add	r3, r1
 8012880:	3314      	adds	r3, #20
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d115      	bne.n	80128b4 <etharp_query+0xc4>
    is_new_entry = 1;
 8012888:	2301      	movs	r3, #1
 801288a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801288c:	7c7a      	ldrb	r2, [r7, #17]
 801288e:	4972      	ldr	r1, [pc, #456]	; (8012a58 <etharp_query+0x268>)
 8012890:	4613      	mov	r3, r2
 8012892:	005b      	lsls	r3, r3, #1
 8012894:	4413      	add	r3, r2
 8012896:	00db      	lsls	r3, r3, #3
 8012898:	440b      	add	r3, r1
 801289a:	3314      	adds	r3, #20
 801289c:	2201      	movs	r2, #1
 801289e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80128a0:	7c7a      	ldrb	r2, [r7, #17]
 80128a2:	496d      	ldr	r1, [pc, #436]	; (8012a58 <etharp_query+0x268>)
 80128a4:	4613      	mov	r3, r2
 80128a6:	005b      	lsls	r3, r3, #1
 80128a8:	4413      	add	r3, r2
 80128aa:	00db      	lsls	r3, r3, #3
 80128ac:	440b      	add	r3, r1
 80128ae:	3308      	adds	r3, #8
 80128b0:	68fa      	ldr	r2, [r7, #12]
 80128b2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80128b4:	7c7a      	ldrb	r2, [r7, #17]
 80128b6:	4968      	ldr	r1, [pc, #416]	; (8012a58 <etharp_query+0x268>)
 80128b8:	4613      	mov	r3, r2
 80128ba:	005b      	lsls	r3, r3, #1
 80128bc:	4413      	add	r3, r2
 80128be:	00db      	lsls	r3, r3, #3
 80128c0:	440b      	add	r3, r1
 80128c2:	3314      	adds	r3, #20
 80128c4:	781b      	ldrb	r3, [r3, #0]
 80128c6:	2b01      	cmp	r3, #1
 80128c8:	d011      	beq.n	80128ee <etharp_query+0xfe>
 80128ca:	7c7a      	ldrb	r2, [r7, #17]
 80128cc:	4962      	ldr	r1, [pc, #392]	; (8012a58 <etharp_query+0x268>)
 80128ce:	4613      	mov	r3, r2
 80128d0:	005b      	lsls	r3, r3, #1
 80128d2:	4413      	add	r3, r2
 80128d4:	00db      	lsls	r3, r3, #3
 80128d6:	440b      	add	r3, r1
 80128d8:	3314      	adds	r3, #20
 80128da:	781b      	ldrb	r3, [r3, #0]
 80128dc:	2b01      	cmp	r3, #1
 80128de:	d806      	bhi.n	80128ee <etharp_query+0xfe>
 80128e0:	4b5a      	ldr	r3, [pc, #360]	; (8012a4c <etharp_query+0x25c>)
 80128e2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80128e6:	495d      	ldr	r1, [pc, #372]	; (8012a5c <etharp_query+0x26c>)
 80128e8:	485a      	ldr	r0, [pc, #360]	; (8012a54 <etharp_query+0x264>)
 80128ea:	f001 fd55 	bl	8014398 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80128ee:	6a3b      	ldr	r3, [r7, #32]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d102      	bne.n	80128fa <etharp_query+0x10a>
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d10c      	bne.n	8012914 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80128fa:	68b9      	ldr	r1, [r7, #8]
 80128fc:	68f8      	ldr	r0, [r7, #12]
 80128fe:	f000 f963 	bl	8012bc8 <etharp_request>
 8012902:	4603      	mov	r3, r0
 8012904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d102      	bne.n	8012914 <etharp_query+0x124>
      return result;
 801290e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012912:	e096      	b.n	8012a42 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d106      	bne.n	8012928 <etharp_query+0x138>
 801291a:	4b4c      	ldr	r3, [pc, #304]	; (8012a4c <etharp_query+0x25c>)
 801291c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012920:	494f      	ldr	r1, [pc, #316]	; (8012a60 <etharp_query+0x270>)
 8012922:	484c      	ldr	r0, [pc, #304]	; (8012a54 <etharp_query+0x264>)
 8012924:	f001 fd38 	bl	8014398 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012928:	7c7a      	ldrb	r2, [r7, #17]
 801292a:	494b      	ldr	r1, [pc, #300]	; (8012a58 <etharp_query+0x268>)
 801292c:	4613      	mov	r3, r2
 801292e:	005b      	lsls	r3, r3, #1
 8012930:	4413      	add	r3, r2
 8012932:	00db      	lsls	r3, r3, #3
 8012934:	440b      	add	r3, r1
 8012936:	3314      	adds	r3, #20
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	2b01      	cmp	r3, #1
 801293c:	d917      	bls.n	801296e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801293e:	4a49      	ldr	r2, [pc, #292]	; (8012a64 <etharp_query+0x274>)
 8012940:	7c7b      	ldrb	r3, [r7, #17]
 8012942:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012944:	7c7a      	ldrb	r2, [r7, #17]
 8012946:	4613      	mov	r3, r2
 8012948:	005b      	lsls	r3, r3, #1
 801294a:	4413      	add	r3, r2
 801294c:	00db      	lsls	r3, r3, #3
 801294e:	3308      	adds	r3, #8
 8012950:	4a41      	ldr	r2, [pc, #260]	; (8012a58 <etharp_query+0x268>)
 8012952:	4413      	add	r3, r2
 8012954:	3304      	adds	r3, #4
 8012956:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801295a:	9200      	str	r2, [sp, #0]
 801295c:	697a      	ldr	r2, [r7, #20]
 801295e:	6879      	ldr	r1, [r7, #4]
 8012960:	68f8      	ldr	r0, [r7, #12]
 8012962:	f001 fc6f 	bl	8014244 <ethernet_output>
 8012966:	4603      	mov	r3, r0
 8012968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801296c:	e067      	b.n	8012a3e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801296e:	7c7a      	ldrb	r2, [r7, #17]
 8012970:	4939      	ldr	r1, [pc, #228]	; (8012a58 <etharp_query+0x268>)
 8012972:	4613      	mov	r3, r2
 8012974:	005b      	lsls	r3, r3, #1
 8012976:	4413      	add	r3, r2
 8012978:	00db      	lsls	r3, r3, #3
 801297a:	440b      	add	r3, r1
 801297c:	3314      	adds	r3, #20
 801297e:	781b      	ldrb	r3, [r3, #0]
 8012980:	2b01      	cmp	r3, #1
 8012982:	d15c      	bne.n	8012a3e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012984:	2300      	movs	r3, #0
 8012986:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801298c:	e01c      	b.n	80129c8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801298e:	69fb      	ldr	r3, [r7, #28]
 8012990:	895a      	ldrh	r2, [r3, #10]
 8012992:	69fb      	ldr	r3, [r7, #28]
 8012994:	891b      	ldrh	r3, [r3, #8]
 8012996:	429a      	cmp	r2, r3
 8012998:	d10a      	bne.n	80129b0 <etharp_query+0x1c0>
 801299a:	69fb      	ldr	r3, [r7, #28]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d006      	beq.n	80129b0 <etharp_query+0x1c0>
 80129a2:	4b2a      	ldr	r3, [pc, #168]	; (8012a4c <etharp_query+0x25c>)
 80129a4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80129a8:	492f      	ldr	r1, [pc, #188]	; (8012a68 <etharp_query+0x278>)
 80129aa:	482a      	ldr	r0, [pc, #168]	; (8012a54 <etharp_query+0x264>)
 80129ac:	f001 fcf4 	bl	8014398 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80129b0:	69fb      	ldr	r3, [r7, #28]
 80129b2:	7b1b      	ldrb	r3, [r3, #12]
 80129b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d002      	beq.n	80129c2 <etharp_query+0x1d2>
        copy_needed = 1;
 80129bc:	2301      	movs	r3, #1
 80129be:	61bb      	str	r3, [r7, #24]
        break;
 80129c0:	e005      	b.n	80129ce <etharp_query+0x1de>
      }
      p = p->next;
 80129c2:	69fb      	ldr	r3, [r7, #28]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80129c8:	69fb      	ldr	r3, [r7, #28]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d1df      	bne.n	801298e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80129ce:	69bb      	ldr	r3, [r7, #24]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d007      	beq.n	80129e4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80129d4:	687a      	ldr	r2, [r7, #4]
 80129d6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80129da:	200e      	movs	r0, #14
 80129dc:	f7f8 fa42 	bl	800ae64 <pbuf_clone>
 80129e0:	61f8      	str	r0, [r7, #28]
 80129e2:	e004      	b.n	80129ee <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80129e8:	69f8      	ldr	r0, [r7, #28]
 80129ea:	f7f7 ff37 	bl	800a85c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80129ee:	69fb      	ldr	r3, [r7, #28]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d021      	beq.n	8012a38 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80129f4:	7c7a      	ldrb	r2, [r7, #17]
 80129f6:	4918      	ldr	r1, [pc, #96]	; (8012a58 <etharp_query+0x268>)
 80129f8:	4613      	mov	r3, r2
 80129fa:	005b      	lsls	r3, r3, #1
 80129fc:	4413      	add	r3, r2
 80129fe:	00db      	lsls	r3, r3, #3
 8012a00:	440b      	add	r3, r1
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d00a      	beq.n	8012a1e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012a08:	7c7a      	ldrb	r2, [r7, #17]
 8012a0a:	4913      	ldr	r1, [pc, #76]	; (8012a58 <etharp_query+0x268>)
 8012a0c:	4613      	mov	r3, r2
 8012a0e:	005b      	lsls	r3, r3, #1
 8012a10:	4413      	add	r3, r2
 8012a12:	00db      	lsls	r3, r3, #3
 8012a14:	440b      	add	r3, r1
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f7f7 fe7f 	bl	800a71c <pbuf_free>
      }
      arp_table[i].q = p;
 8012a1e:	7c7a      	ldrb	r2, [r7, #17]
 8012a20:	490d      	ldr	r1, [pc, #52]	; (8012a58 <etharp_query+0x268>)
 8012a22:	4613      	mov	r3, r2
 8012a24:	005b      	lsls	r3, r3, #1
 8012a26:	4413      	add	r3, r2
 8012a28:	00db      	lsls	r3, r3, #3
 8012a2a:	440b      	add	r3, r1
 8012a2c:	69fa      	ldr	r2, [r7, #28]
 8012a2e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012a30:	2300      	movs	r3, #0
 8012a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012a36:	e002      	b.n	8012a3e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012a38:	23ff      	movs	r3, #255	; 0xff
 8012a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012a3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3728      	adds	r7, #40	; 0x28
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
 8012a4a:	bf00      	nop
 8012a4c:	08017cfc 	.word	0x08017cfc
 8012a50:	08017ea8 	.word	0x08017ea8
 8012a54:	08017d74 	.word	0x08017d74
 8012a58:	200007c4 	.word	0x200007c4
 8012a5c:	08017eb8 	.word	0x08017eb8
 8012a60:	08017e9c 	.word	0x08017e9c
 8012a64:	200008b4 	.word	0x200008b4
 8012a68:	08017ee0 	.word	0x08017ee0

08012a6c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b08a      	sub	sp, #40	; 0x28
 8012a70:	af02      	add	r7, sp, #8
 8012a72:	60f8      	str	r0, [r7, #12]
 8012a74:	60b9      	str	r1, [r7, #8]
 8012a76:	607a      	str	r2, [r7, #4]
 8012a78:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d106      	bne.n	8012a92 <etharp_raw+0x26>
 8012a84:	4b3a      	ldr	r3, [pc, #232]	; (8012b70 <etharp_raw+0x104>)
 8012a86:	f240 4257 	movw	r2, #1111	; 0x457
 8012a8a:	493a      	ldr	r1, [pc, #232]	; (8012b74 <etharp_raw+0x108>)
 8012a8c:	483a      	ldr	r0, [pc, #232]	; (8012b78 <etharp_raw+0x10c>)
 8012a8e:	f001 fc83 	bl	8014398 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012a92:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a96:	211c      	movs	r1, #28
 8012a98:	200e      	movs	r0, #14
 8012a9a:	f7f7 fb5b 	bl	800a154 <pbuf_alloc>
 8012a9e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012aa0:	69bb      	ldr	r3, [r7, #24]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d102      	bne.n	8012aac <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8012aaa:	e05d      	b.n	8012b68 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012aac:	69bb      	ldr	r3, [r7, #24]
 8012aae:	895b      	ldrh	r3, [r3, #10]
 8012ab0:	2b1b      	cmp	r3, #27
 8012ab2:	d806      	bhi.n	8012ac2 <etharp_raw+0x56>
 8012ab4:	4b2e      	ldr	r3, [pc, #184]	; (8012b70 <etharp_raw+0x104>)
 8012ab6:	f240 4262 	movw	r2, #1122	; 0x462
 8012aba:	4930      	ldr	r1, [pc, #192]	; (8012b7c <etharp_raw+0x110>)
 8012abc:	482e      	ldr	r0, [pc, #184]	; (8012b78 <etharp_raw+0x10c>)
 8012abe:	f001 fc6b 	bl	8014398 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012ac2:	69bb      	ldr	r3, [r7, #24]
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012ac8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012aca:	4618      	mov	r0, r3
 8012acc:	f7f6 f8a8 	bl	8008c20 <lwip_htons>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012ade:	2b06      	cmp	r3, #6
 8012ae0:	d006      	beq.n	8012af0 <etharp_raw+0x84>
 8012ae2:	4b23      	ldr	r3, [pc, #140]	; (8012b70 <etharp_raw+0x104>)
 8012ae4:	f240 4269 	movw	r2, #1129	; 0x469
 8012ae8:	4925      	ldr	r1, [pc, #148]	; (8012b80 <etharp_raw+0x114>)
 8012aea:	4823      	ldr	r0, [pc, #140]	; (8012b78 <etharp_raw+0x10c>)
 8012aec:	f001 fc54 	bl	8014398 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	3308      	adds	r3, #8
 8012af4:	2206      	movs	r2, #6
 8012af6:	6839      	ldr	r1, [r7, #0]
 8012af8:	4618      	mov	r0, r3
 8012afa:	f001 fc1d 	bl	8014338 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	3312      	adds	r3, #18
 8012b02:	2206      	movs	r2, #6
 8012b04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012b06:	4618      	mov	r0, r3
 8012b08:	f001 fc16 	bl	8014338 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	330e      	adds	r3, #14
 8012b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b12:	6812      	ldr	r2, [r2, #0]
 8012b14:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	3318      	adds	r3, #24
 8012b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b1c:	6812      	ldr	r2, [r2, #0]
 8012b1e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012b20:	697b      	ldr	r3, [r7, #20]
 8012b22:	2200      	movs	r2, #0
 8012b24:	701a      	strb	r2, [r3, #0]
 8012b26:	2200      	movs	r2, #0
 8012b28:	f042 0201 	orr.w	r2, r2, #1
 8012b2c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	2200      	movs	r2, #0
 8012b32:	f042 0208 	orr.w	r2, r2, #8
 8012b36:	709a      	strb	r2, [r3, #2]
 8012b38:	2200      	movs	r2, #0
 8012b3a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	2206      	movs	r2, #6
 8012b40:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	2204      	movs	r2, #4
 8012b46:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012b48:	f640 0306 	movw	r3, #2054	; 0x806
 8012b4c:	9300      	str	r3, [sp, #0]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	68ba      	ldr	r2, [r7, #8]
 8012b52:	69b9      	ldr	r1, [r7, #24]
 8012b54:	68f8      	ldr	r0, [r7, #12]
 8012b56:	f001 fb75 	bl	8014244 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012b5a:	69b8      	ldr	r0, [r7, #24]
 8012b5c:	f7f7 fdde 	bl	800a71c <pbuf_free>
  p = NULL;
 8012b60:	2300      	movs	r3, #0
 8012b62:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012b64:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3720      	adds	r7, #32
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}
 8012b70:	08017cfc 	.word	0x08017cfc
 8012b74:	08017e4c 	.word	0x08017e4c
 8012b78:	08017d74 	.word	0x08017d74
 8012b7c:	08017efc 	.word	0x08017efc
 8012b80:	08017f30 	.word	0x08017f30

08012b84 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b088      	sub	sp, #32
 8012b88:	af04      	add	r7, sp, #16
 8012b8a:	60f8      	str	r0, [r7, #12]
 8012b8c:	60b9      	str	r1, [r7, #8]
 8012b8e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012ba0:	2201      	movs	r2, #1
 8012ba2:	9203      	str	r2, [sp, #12]
 8012ba4:	68ba      	ldr	r2, [r7, #8]
 8012ba6:	9202      	str	r2, [sp, #8]
 8012ba8:	4a06      	ldr	r2, [pc, #24]	; (8012bc4 <etharp_request_dst+0x40>)
 8012baa:	9201      	str	r2, [sp, #4]
 8012bac:	9300      	str	r3, [sp, #0]
 8012bae:	4603      	mov	r3, r0
 8012bb0:	687a      	ldr	r2, [r7, #4]
 8012bb2:	68f8      	ldr	r0, [r7, #12]
 8012bb4:	f7ff ff5a 	bl	8012a6c <etharp_raw>
 8012bb8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3710      	adds	r7, #16
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}
 8012bc2:	bf00      	nop
 8012bc4:	08059b7c 	.word	0x08059b7c

08012bc8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b082      	sub	sp, #8
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
 8012bd0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012bd2:	4a05      	ldr	r2, [pc, #20]	; (8012be8 <etharp_request+0x20>)
 8012bd4:	6839      	ldr	r1, [r7, #0]
 8012bd6:	6878      	ldr	r0, [r7, #4]
 8012bd8:	f7ff ffd4 	bl	8012b84 <etharp_request_dst>
 8012bdc:	4603      	mov	r3, r0
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	3708      	adds	r7, #8
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bd80      	pop	{r7, pc}
 8012be6:	bf00      	nop
 8012be8:	08059b74 	.word	0x08059b74

08012bec <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b08e      	sub	sp, #56	; 0x38
 8012bf0:	af04      	add	r7, sp, #16
 8012bf2:	6078      	str	r0, [r7, #4]
 8012bf4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012bf6:	4b79      	ldr	r3, [pc, #484]	; (8012ddc <icmp_input+0x1f0>)
 8012bf8:	689b      	ldr	r3, [r3, #8]
 8012bfa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	f003 030f 	and.w	r3, r3, #15
 8012c04:	b2db      	uxtb	r3, r3
 8012c06:	009b      	lsls	r3, r3, #2
 8012c08:	b2db      	uxtb	r3, r3
 8012c0a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012c0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012c0e:	2b13      	cmp	r3, #19
 8012c10:	f240 80cd 	bls.w	8012dae <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	895b      	ldrh	r3, [r3, #10]
 8012c18:	2b03      	cmp	r3, #3
 8012c1a:	f240 80ca 	bls.w	8012db2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	685b      	ldr	r3, [r3, #4]
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012c28:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	f000 80b7 	beq.w	8012da0 <icmp_input+0x1b4>
 8012c32:	2b08      	cmp	r3, #8
 8012c34:	f040 80b7 	bne.w	8012da6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012c38:	4b69      	ldr	r3, [pc, #420]	; (8012de0 <icmp_input+0x1f4>)
 8012c3a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012c3c:	4b67      	ldr	r3, [pc, #412]	; (8012ddc <icmp_input+0x1f0>)
 8012c3e:	695b      	ldr	r3, [r3, #20]
 8012c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012c44:	2be0      	cmp	r3, #224	; 0xe0
 8012c46:	f000 80bb 	beq.w	8012dc0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012c4a:	4b64      	ldr	r3, [pc, #400]	; (8012ddc <icmp_input+0x1f0>)
 8012c4c:	695b      	ldr	r3, [r3, #20]
 8012c4e:	4a63      	ldr	r2, [pc, #396]	; (8012ddc <icmp_input+0x1f0>)
 8012c50:	6812      	ldr	r2, [r2, #0]
 8012c52:	4611      	mov	r1, r2
 8012c54:	4618      	mov	r0, r3
 8012c56:	f000 fbed 	bl	8013434 <ip4_addr_isbroadcast_u32>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	f040 80b1 	bne.w	8012dc4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	891b      	ldrh	r3, [r3, #8]
 8012c66:	2b07      	cmp	r3, #7
 8012c68:	f240 80a5 	bls.w	8012db6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012c6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012c6e:	330e      	adds	r3, #14
 8012c70:	4619      	mov	r1, r3
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f7f7 fcbc 	bl	800a5f0 <pbuf_add_header>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d04b      	beq.n	8012d16 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	891a      	ldrh	r2, [r3, #8]
 8012c82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012c84:	4413      	add	r3, r2
 8012c86:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	891b      	ldrh	r3, [r3, #8]
 8012c8c:	8b7a      	ldrh	r2, [r7, #26]
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	f0c0 809a 	bcc.w	8012dc8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012c94:	8b7b      	ldrh	r3, [r7, #26]
 8012c96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c9a:	4619      	mov	r1, r3
 8012c9c:	200e      	movs	r0, #14
 8012c9e:	f7f7 fa59 	bl	800a154 <pbuf_alloc>
 8012ca2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012ca4:	697b      	ldr	r3, [r7, #20]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	f000 8090 	beq.w	8012dcc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	895b      	ldrh	r3, [r3, #10]
 8012cb0:	461a      	mov	r2, r3
 8012cb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012cb4:	3308      	adds	r3, #8
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	d203      	bcs.n	8012cc2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012cba:	6978      	ldr	r0, [r7, #20]
 8012cbc:	f7f7 fd2e 	bl	800a71c <pbuf_free>
          goto icmperr;
 8012cc0:	e085      	b.n	8012dce <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012cc2:	697b      	ldr	r3, [r7, #20]
 8012cc4:	685b      	ldr	r3, [r3, #4]
 8012cc6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012cc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f001 fb34 	bl	8014338 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012cd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012cd2:	4619      	mov	r1, r3
 8012cd4:	6978      	ldr	r0, [r7, #20]
 8012cd6:	f7f7 fc9b 	bl	800a610 <pbuf_remove_header>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d009      	beq.n	8012cf4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012ce0:	4b40      	ldr	r3, [pc, #256]	; (8012de4 <icmp_input+0x1f8>)
 8012ce2:	22b6      	movs	r2, #182	; 0xb6
 8012ce4:	4940      	ldr	r1, [pc, #256]	; (8012de8 <icmp_input+0x1fc>)
 8012ce6:	4841      	ldr	r0, [pc, #260]	; (8012dec <icmp_input+0x200>)
 8012ce8:	f001 fb56 	bl	8014398 <iprintf>
          pbuf_free(r);
 8012cec:	6978      	ldr	r0, [r7, #20]
 8012cee:	f7f7 fd15 	bl	800a71c <pbuf_free>
          goto icmperr;
 8012cf2:	e06c      	b.n	8012dce <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012cf4:	6879      	ldr	r1, [r7, #4]
 8012cf6:	6978      	ldr	r0, [r7, #20]
 8012cf8:	f7f7 fe38 	bl	800a96c <pbuf_copy>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d003      	beq.n	8012d0a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012d02:	6978      	ldr	r0, [r7, #20]
 8012d04:	f7f7 fd0a 	bl	800a71c <pbuf_free>
          goto icmperr;
 8012d08:	e061      	b.n	8012dce <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f7f7 fd06 	bl	800a71c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	607b      	str	r3, [r7, #4]
 8012d14:	e00f      	b.n	8012d36 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012d16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d18:	330e      	adds	r3, #14
 8012d1a:	4619      	mov	r1, r3
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f7f7 fc77 	bl	800a610 <pbuf_remove_header>
 8012d22:	4603      	mov	r3, r0
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d006      	beq.n	8012d36 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012d28:	4b2e      	ldr	r3, [pc, #184]	; (8012de4 <icmp_input+0x1f8>)
 8012d2a:	22c7      	movs	r2, #199	; 0xc7
 8012d2c:	4930      	ldr	r1, [pc, #192]	; (8012df0 <icmp_input+0x204>)
 8012d2e:	482f      	ldr	r0, [pc, #188]	; (8012dec <icmp_input+0x200>)
 8012d30:	f001 fb32 	bl	8014398 <iprintf>
          goto icmperr;
 8012d34:	e04b      	b.n	8012dce <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	685b      	ldr	r3, [r3, #4]
 8012d3a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012d3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d3e:	4619      	mov	r1, r3
 8012d40:	6878      	ldr	r0, [r7, #4]
 8012d42:	f7f7 fc55 	bl	800a5f0 <pbuf_add_header>
 8012d46:	4603      	mov	r3, r0
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d12b      	bne.n	8012da4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012d52:	69fb      	ldr	r3, [r7, #28]
 8012d54:	681a      	ldr	r2, [r3, #0]
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012d5a:	4b20      	ldr	r3, [pc, #128]	; (8012ddc <icmp_input+0x1f0>)
 8012d5c:	691a      	ldr	r2, [r3, #16]
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	2200      	movs	r2, #0
 8012d66:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	709a      	strb	r2, [r3, #2]
 8012d6e:	2200      	movs	r2, #0
 8012d70:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	22ff      	movs	r2, #255	; 0xff
 8012d76:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	729a      	strb	r2, [r3, #10]
 8012d7e:	2200      	movs	r2, #0
 8012d80:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	9302      	str	r3, [sp, #8]
 8012d86:	2301      	movs	r3, #1
 8012d88:	9301      	str	r3, [sp, #4]
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	9300      	str	r3, [sp, #0]
 8012d8e:	23ff      	movs	r3, #255	; 0xff
 8012d90:	2200      	movs	r2, #0
 8012d92:	69f9      	ldr	r1, [r7, #28]
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f000 fa75 	bl	8013284 <ip4_output_if>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012d9e:	e001      	b.n	8012da4 <icmp_input+0x1b8>
      break;
 8012da0:	bf00      	nop
 8012da2:	e000      	b.n	8012da6 <icmp_input+0x1ba>
      break;
 8012da4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012da6:	6878      	ldr	r0, [r7, #4]
 8012da8:	f7f7 fcb8 	bl	800a71c <pbuf_free>
  return;
 8012dac:	e013      	b.n	8012dd6 <icmp_input+0x1ea>
    goto lenerr;
 8012dae:	bf00      	nop
 8012db0:	e002      	b.n	8012db8 <icmp_input+0x1cc>
    goto lenerr;
 8012db2:	bf00      	nop
 8012db4:	e000      	b.n	8012db8 <icmp_input+0x1cc>
        goto lenerr;
 8012db6:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f7f7 fcaf 	bl	800a71c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012dbe:	e00a      	b.n	8012dd6 <icmp_input+0x1ea>
        goto icmperr;
 8012dc0:	bf00      	nop
 8012dc2:	e004      	b.n	8012dce <icmp_input+0x1e2>
        goto icmperr;
 8012dc4:	bf00      	nop
 8012dc6:	e002      	b.n	8012dce <icmp_input+0x1e2>
          goto icmperr;
 8012dc8:	bf00      	nop
 8012dca:	e000      	b.n	8012dce <icmp_input+0x1e2>
          goto icmperr;
 8012dcc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012dce:	6878      	ldr	r0, [r7, #4]
 8012dd0:	f7f7 fca4 	bl	800a71c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012dd4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012dd6:	3728      	adds	r7, #40	; 0x28
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}
 8012ddc:	2000407c 	.word	0x2000407c
 8012de0:	20004090 	.word	0x20004090
 8012de4:	08017f74 	.word	0x08017f74
 8012de8:	08017fac 	.word	0x08017fac
 8012dec:	08017fe4 	.word	0x08017fe4
 8012df0:	0801800c 	.word	0x0801800c

08012df4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b082      	sub	sp, #8
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
 8012dfc:	460b      	mov	r3, r1
 8012dfe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012e00:	78fb      	ldrb	r3, [r7, #3]
 8012e02:	461a      	mov	r2, r3
 8012e04:	2103      	movs	r1, #3
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	f000 f814 	bl	8012e34 <icmp_send_response>
}
 8012e0c:	bf00      	nop
 8012e0e:	3708      	adds	r7, #8
 8012e10:	46bd      	mov	sp, r7
 8012e12:	bd80      	pop	{r7, pc}

08012e14 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b082      	sub	sp, #8
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
 8012e1c:	460b      	mov	r3, r1
 8012e1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012e20:	78fb      	ldrb	r3, [r7, #3]
 8012e22:	461a      	mov	r2, r3
 8012e24:	210b      	movs	r1, #11
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	f000 f804 	bl	8012e34 <icmp_send_response>
}
 8012e2c:	bf00      	nop
 8012e2e:	3708      	adds	r7, #8
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}

08012e34 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b08c      	sub	sp, #48	; 0x30
 8012e38:	af04      	add	r7, sp, #16
 8012e3a:	6078      	str	r0, [r7, #4]
 8012e3c:	460b      	mov	r3, r1
 8012e3e:	70fb      	strb	r3, [r7, #3]
 8012e40:	4613      	mov	r3, r2
 8012e42:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012e44:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e48:	2124      	movs	r1, #36	; 0x24
 8012e4a:	2022      	movs	r0, #34	; 0x22
 8012e4c:	f7f7 f982 	bl	800a154 <pbuf_alloc>
 8012e50:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012e52:	69fb      	ldr	r3, [r7, #28]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d04c      	beq.n	8012ef2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012e58:	69fb      	ldr	r3, [r7, #28]
 8012e5a:	895b      	ldrh	r3, [r3, #10]
 8012e5c:	2b23      	cmp	r3, #35	; 0x23
 8012e5e:	d806      	bhi.n	8012e6e <icmp_send_response+0x3a>
 8012e60:	4b26      	ldr	r3, [pc, #152]	; (8012efc <icmp_send_response+0xc8>)
 8012e62:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012e66:	4926      	ldr	r1, [pc, #152]	; (8012f00 <icmp_send_response+0xcc>)
 8012e68:	4826      	ldr	r0, [pc, #152]	; (8012f04 <icmp_send_response+0xd0>)
 8012e6a:	f001 fa95 	bl	8014398 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	685b      	ldr	r3, [r3, #4]
 8012e72:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012e74:	69fb      	ldr	r3, [r7, #28]
 8012e76:	685b      	ldr	r3, [r3, #4]
 8012e78:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	78fa      	ldrb	r2, [r7, #3]
 8012e7e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012e80:	697b      	ldr	r3, [r7, #20]
 8012e82:	78ba      	ldrb	r2, [r7, #2]
 8012e84:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012e86:	697b      	ldr	r3, [r7, #20]
 8012e88:	2200      	movs	r2, #0
 8012e8a:	711a      	strb	r2, [r3, #4]
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	2200      	movs	r2, #0
 8012e94:	719a      	strb	r2, [r3, #6]
 8012e96:	2200      	movs	r2, #0
 8012e98:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012e9a:	69fb      	ldr	r3, [r7, #28]
 8012e9c:	685b      	ldr	r3, [r3, #4]
 8012e9e:	f103 0008 	add.w	r0, r3, #8
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	685b      	ldr	r3, [r3, #4]
 8012ea6:	221c      	movs	r2, #28
 8012ea8:	4619      	mov	r1, r3
 8012eaa:	f001 fa45 	bl	8014338 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012eae:	69bb      	ldr	r3, [r7, #24]
 8012eb0:	68db      	ldr	r3, [r3, #12]
 8012eb2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012eb4:	f107 030c 	add.w	r3, r7, #12
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f000 f825 	bl	8012f08 <ip4_route>
 8012ebe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d011      	beq.n	8012eea <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012ec6:	697b      	ldr	r3, [r7, #20]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	709a      	strb	r2, [r3, #2]
 8012ecc:	2200      	movs	r2, #0
 8012ece:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012ed0:	f107 020c 	add.w	r2, r7, #12
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	9302      	str	r3, [sp, #8]
 8012ed8:	2301      	movs	r3, #1
 8012eda:	9301      	str	r3, [sp, #4]
 8012edc:	2300      	movs	r3, #0
 8012ede:	9300      	str	r3, [sp, #0]
 8012ee0:	23ff      	movs	r3, #255	; 0xff
 8012ee2:	2100      	movs	r1, #0
 8012ee4:	69f8      	ldr	r0, [r7, #28]
 8012ee6:	f000 f9cd 	bl	8013284 <ip4_output_if>
  }
  pbuf_free(q);
 8012eea:	69f8      	ldr	r0, [r7, #28]
 8012eec:	f7f7 fc16 	bl	800a71c <pbuf_free>
 8012ef0:	e000      	b.n	8012ef4 <icmp_send_response+0xc0>
    return;
 8012ef2:	bf00      	nop
}
 8012ef4:	3720      	adds	r7, #32
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}
 8012efa:	bf00      	nop
 8012efc:	08017f74 	.word	0x08017f74
 8012f00:	08018040 	.word	0x08018040
 8012f04:	08017fe4 	.word	0x08017fe4

08012f08 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012f08:	b480      	push	{r7}
 8012f0a:	b085      	sub	sp, #20
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012f10:	4b33      	ldr	r3, [pc, #204]	; (8012fe0 <ip4_route+0xd8>)
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	60fb      	str	r3, [r7, #12]
 8012f16:	e036      	b.n	8012f86 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f1e:	f003 0301 	and.w	r3, r3, #1
 8012f22:	b2db      	uxtb	r3, r3
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d02b      	beq.n	8012f80 <ip4_route+0x78>
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f2e:	089b      	lsrs	r3, r3, #2
 8012f30:	f003 0301 	and.w	r3, r3, #1
 8012f34:	b2db      	uxtb	r3, r3
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d022      	beq.n	8012f80 <ip4_route+0x78>
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	3304      	adds	r3, #4
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d01d      	beq.n	8012f80 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681a      	ldr	r2, [r3, #0]
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	3304      	adds	r3, #4
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	405a      	eors	r2, r3
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	3308      	adds	r3, #8
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	4013      	ands	r3, r2
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d101      	bne.n	8012f60 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	e038      	b.n	8012fd2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f66:	f003 0302 	and.w	r3, r3, #2
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d108      	bne.n	8012f80 <ip4_route+0x78>
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	681a      	ldr	r2, [r3, #0]
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	330c      	adds	r3, #12
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	429a      	cmp	r2, r3
 8012f7a:	d101      	bne.n	8012f80 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	e028      	b.n	8012fd2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	60fb      	str	r3, [r7, #12]
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d1c5      	bne.n	8012f18 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012f8c:	4b15      	ldr	r3, [pc, #84]	; (8012fe4 <ip4_route+0xdc>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d01a      	beq.n	8012fca <ip4_route+0xc2>
 8012f94:	4b13      	ldr	r3, [pc, #76]	; (8012fe4 <ip4_route+0xdc>)
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f9c:	f003 0301 	and.w	r3, r3, #1
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d012      	beq.n	8012fca <ip4_route+0xc2>
 8012fa4:	4b0f      	ldr	r3, [pc, #60]	; (8012fe4 <ip4_route+0xdc>)
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012fac:	f003 0304 	and.w	r3, r3, #4
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d00a      	beq.n	8012fca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012fb4:	4b0b      	ldr	r3, [pc, #44]	; (8012fe4 <ip4_route+0xdc>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	3304      	adds	r3, #4
 8012fba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d004      	beq.n	8012fca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	b2db      	uxtb	r3, r3
 8012fc6:	2b7f      	cmp	r3, #127	; 0x7f
 8012fc8:	d101      	bne.n	8012fce <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	e001      	b.n	8012fd2 <ip4_route+0xca>
  }

  return netif_default;
 8012fce:	4b05      	ldr	r3, [pc, #20]	; (8012fe4 <ip4_route+0xdc>)
 8012fd0:	681b      	ldr	r3, [r3, #0]
}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	3714      	adds	r7, #20
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fdc:	4770      	bx	lr
 8012fde:	bf00      	nop
 8012fe0:	200075c0 	.word	0x200075c0
 8012fe4:	200075c4 	.word	0x200075c4

08012fe8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b082      	sub	sp, #8
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ff6:	f003 0301 	and.w	r3, r3, #1
 8012ffa:	b2db      	uxtb	r3, r3
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d016      	beq.n	801302e <ip4_input_accept+0x46>
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	3304      	adds	r3, #4
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d011      	beq.n	801302e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801300a:	4b0b      	ldr	r3, [pc, #44]	; (8013038 <ip4_input_accept+0x50>)
 801300c:	695a      	ldr	r2, [r3, #20]
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	3304      	adds	r3, #4
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	429a      	cmp	r2, r3
 8013016:	d008      	beq.n	801302a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013018:	4b07      	ldr	r3, [pc, #28]	; (8013038 <ip4_input_accept+0x50>)
 801301a:	695b      	ldr	r3, [r3, #20]
 801301c:	6879      	ldr	r1, [r7, #4]
 801301e:	4618      	mov	r0, r3
 8013020:	f000 fa08 	bl	8013434 <ip4_addr_isbroadcast_u32>
 8013024:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013026:	2b00      	cmp	r3, #0
 8013028:	d001      	beq.n	801302e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801302a:	2301      	movs	r3, #1
 801302c:	e000      	b.n	8013030 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801302e:	2300      	movs	r3, #0
}
 8013030:	4618      	mov	r0, r3
 8013032:	3708      	adds	r7, #8
 8013034:	46bd      	mov	sp, r7
 8013036:	bd80      	pop	{r7, pc}
 8013038:	2000407c 	.word	0x2000407c

0801303c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b086      	sub	sp, #24
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
 8013044:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	685b      	ldr	r3, [r3, #4]
 801304a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	781b      	ldrb	r3, [r3, #0]
 8013050:	091b      	lsrs	r3, r3, #4
 8013052:	b2db      	uxtb	r3, r3
 8013054:	2b04      	cmp	r3, #4
 8013056:	d004      	beq.n	8013062 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013058:	6878      	ldr	r0, [r7, #4]
 801305a:	f7f7 fb5f 	bl	800a71c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801305e:	2300      	movs	r3, #0
 8013060:	e107      	b.n	8013272 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013062:	697b      	ldr	r3, [r7, #20]
 8013064:	781b      	ldrb	r3, [r3, #0]
 8013066:	f003 030f 	and.w	r3, r3, #15
 801306a:	b2db      	uxtb	r3, r3
 801306c:	009b      	lsls	r3, r3, #2
 801306e:	b2db      	uxtb	r3, r3
 8013070:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	885b      	ldrh	r3, [r3, #2]
 8013076:	b29b      	uxth	r3, r3
 8013078:	4618      	mov	r0, r3
 801307a:	f7f5 fdd1 	bl	8008c20 <lwip_htons>
 801307e:	4603      	mov	r3, r0
 8013080:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	891b      	ldrh	r3, [r3, #8]
 8013086:	89ba      	ldrh	r2, [r7, #12]
 8013088:	429a      	cmp	r2, r3
 801308a:	d204      	bcs.n	8013096 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801308c:	89bb      	ldrh	r3, [r7, #12]
 801308e:	4619      	mov	r1, r3
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	f7f7 f9bd 	bl	800a410 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	895b      	ldrh	r3, [r3, #10]
 801309a:	89fa      	ldrh	r2, [r7, #14]
 801309c:	429a      	cmp	r2, r3
 801309e:	d807      	bhi.n	80130b0 <ip4_input+0x74>
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	891b      	ldrh	r3, [r3, #8]
 80130a4:	89ba      	ldrh	r2, [r7, #12]
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d802      	bhi.n	80130b0 <ip4_input+0x74>
 80130aa:	89fb      	ldrh	r3, [r7, #14]
 80130ac:	2b13      	cmp	r3, #19
 80130ae:	d804      	bhi.n	80130ba <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f7f7 fb33 	bl	800a71c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80130b6:	2300      	movs	r3, #0
 80130b8:	e0db      	b.n	8013272 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	691b      	ldr	r3, [r3, #16]
 80130be:	4a6f      	ldr	r2, [pc, #444]	; (801327c <ip4_input+0x240>)
 80130c0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	68db      	ldr	r3, [r3, #12]
 80130c6:	4a6d      	ldr	r2, [pc, #436]	; (801327c <ip4_input+0x240>)
 80130c8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80130ca:	4b6c      	ldr	r3, [pc, #432]	; (801327c <ip4_input+0x240>)
 80130cc:	695b      	ldr	r3, [r3, #20]
 80130ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80130d2:	2be0      	cmp	r3, #224	; 0xe0
 80130d4:	d112      	bne.n	80130fc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80130dc:	f003 0301 	and.w	r3, r3, #1
 80130e0:	b2db      	uxtb	r3, r3
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d007      	beq.n	80130f6 <ip4_input+0xba>
 80130e6:	683b      	ldr	r3, [r7, #0]
 80130e8:	3304      	adds	r3, #4
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d002      	beq.n	80130f6 <ip4_input+0xba>
      netif = inp;
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	613b      	str	r3, [r7, #16]
 80130f4:	e02a      	b.n	801314c <ip4_input+0x110>
    } else {
      netif = NULL;
 80130f6:	2300      	movs	r3, #0
 80130f8:	613b      	str	r3, [r7, #16]
 80130fa:	e027      	b.n	801314c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80130fc:	6838      	ldr	r0, [r7, #0]
 80130fe:	f7ff ff73 	bl	8012fe8 <ip4_input_accept>
 8013102:	4603      	mov	r3, r0
 8013104:	2b00      	cmp	r3, #0
 8013106:	d002      	beq.n	801310e <ip4_input+0xd2>
      netif = inp;
 8013108:	683b      	ldr	r3, [r7, #0]
 801310a:	613b      	str	r3, [r7, #16]
 801310c:	e01e      	b.n	801314c <ip4_input+0x110>
    } else {
      netif = NULL;
 801310e:	2300      	movs	r3, #0
 8013110:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013112:	4b5a      	ldr	r3, [pc, #360]	; (801327c <ip4_input+0x240>)
 8013114:	695b      	ldr	r3, [r3, #20]
 8013116:	b2db      	uxtb	r3, r3
 8013118:	2b7f      	cmp	r3, #127	; 0x7f
 801311a:	d017      	beq.n	801314c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801311c:	4b58      	ldr	r3, [pc, #352]	; (8013280 <ip4_input+0x244>)
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	613b      	str	r3, [r7, #16]
 8013122:	e00e      	b.n	8013142 <ip4_input+0x106>
          if (netif == inp) {
 8013124:	693a      	ldr	r2, [r7, #16]
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	429a      	cmp	r2, r3
 801312a:	d006      	beq.n	801313a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801312c:	6938      	ldr	r0, [r7, #16]
 801312e:	f7ff ff5b 	bl	8012fe8 <ip4_input_accept>
 8013132:	4603      	mov	r3, r0
 8013134:	2b00      	cmp	r3, #0
 8013136:	d108      	bne.n	801314a <ip4_input+0x10e>
 8013138:	e000      	b.n	801313c <ip4_input+0x100>
            continue;
 801313a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801313c:	693b      	ldr	r3, [r7, #16]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	613b      	str	r3, [r7, #16]
 8013142:	693b      	ldr	r3, [r7, #16]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d1ed      	bne.n	8013124 <ip4_input+0xe8>
 8013148:	e000      	b.n	801314c <ip4_input+0x110>
            break;
 801314a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801314c:	4b4b      	ldr	r3, [pc, #300]	; (801327c <ip4_input+0x240>)
 801314e:	691b      	ldr	r3, [r3, #16]
 8013150:	6839      	ldr	r1, [r7, #0]
 8013152:	4618      	mov	r0, r3
 8013154:	f000 f96e 	bl	8013434 <ip4_addr_isbroadcast_u32>
 8013158:	4603      	mov	r3, r0
 801315a:	2b00      	cmp	r3, #0
 801315c:	d105      	bne.n	801316a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801315e:	4b47      	ldr	r3, [pc, #284]	; (801327c <ip4_input+0x240>)
 8013160:	691b      	ldr	r3, [r3, #16]
 8013162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013166:	2be0      	cmp	r3, #224	; 0xe0
 8013168:	d104      	bne.n	8013174 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801316a:	6878      	ldr	r0, [r7, #4]
 801316c:	f7f7 fad6 	bl	800a71c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013170:	2300      	movs	r3, #0
 8013172:	e07e      	b.n	8013272 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d104      	bne.n	8013184 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801317a:	6878      	ldr	r0, [r7, #4]
 801317c:	f7f7 face 	bl	800a71c <pbuf_free>
    return ERR_OK;
 8013180:	2300      	movs	r3, #0
 8013182:	e076      	b.n	8013272 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	88db      	ldrh	r3, [r3, #6]
 8013188:	b29b      	uxth	r3, r3
 801318a:	461a      	mov	r2, r3
 801318c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013190:	4013      	ands	r3, r2
 8013192:	2b00      	cmp	r3, #0
 8013194:	d00b      	beq.n	80131ae <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	f000 fc92 	bl	8013ac0 <ip4_reass>
 801319c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d101      	bne.n	80131a8 <ip4_input+0x16c>
      return ERR_OK;
 80131a4:	2300      	movs	r3, #0
 80131a6:	e064      	b.n	8013272 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	685b      	ldr	r3, [r3, #4]
 80131ac:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80131ae:	4a33      	ldr	r2, [pc, #204]	; (801327c <ip4_input+0x240>)
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80131b4:	4a31      	ldr	r2, [pc, #196]	; (801327c <ip4_input+0x240>)
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80131ba:	4a30      	ldr	r2, [pc, #192]	; (801327c <ip4_input+0x240>)
 80131bc:	697b      	ldr	r3, [r7, #20]
 80131be:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80131c0:	697b      	ldr	r3, [r7, #20]
 80131c2:	781b      	ldrb	r3, [r3, #0]
 80131c4:	f003 030f 	and.w	r3, r3, #15
 80131c8:	b2db      	uxtb	r3, r3
 80131ca:	009b      	lsls	r3, r3, #2
 80131cc:	b2db      	uxtb	r3, r3
 80131ce:	b29a      	uxth	r2, r3
 80131d0:	4b2a      	ldr	r3, [pc, #168]	; (801327c <ip4_input+0x240>)
 80131d2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80131d4:	89fb      	ldrh	r3, [r7, #14]
 80131d6:	4619      	mov	r1, r3
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f7f7 fa19 	bl	800a610 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80131de:	697b      	ldr	r3, [r7, #20]
 80131e0:	7a5b      	ldrb	r3, [r3, #9]
 80131e2:	2b11      	cmp	r3, #17
 80131e4:	d006      	beq.n	80131f4 <ip4_input+0x1b8>
 80131e6:	2b11      	cmp	r3, #17
 80131e8:	dc13      	bgt.n	8013212 <ip4_input+0x1d6>
 80131ea:	2b01      	cmp	r3, #1
 80131ec:	d00c      	beq.n	8013208 <ip4_input+0x1cc>
 80131ee:	2b06      	cmp	r3, #6
 80131f0:	d005      	beq.n	80131fe <ip4_input+0x1c2>
 80131f2:	e00e      	b.n	8013212 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80131f4:	6839      	ldr	r1, [r7, #0]
 80131f6:	6878      	ldr	r0, [r7, #4]
 80131f8:	f7fe f9e8 	bl	80115cc <udp_input>
        break;
 80131fc:	e026      	b.n	801324c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80131fe:	6839      	ldr	r1, [r7, #0]
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	f7f9 fdd5 	bl	800cdb0 <tcp_input>
        break;
 8013206:	e021      	b.n	801324c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013208:	6839      	ldr	r1, [r7, #0]
 801320a:	6878      	ldr	r0, [r7, #4]
 801320c:	f7ff fcee 	bl	8012bec <icmp_input>
        break;
 8013210:	e01c      	b.n	801324c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013212:	4b1a      	ldr	r3, [pc, #104]	; (801327c <ip4_input+0x240>)
 8013214:	695b      	ldr	r3, [r3, #20]
 8013216:	6939      	ldr	r1, [r7, #16]
 8013218:	4618      	mov	r0, r3
 801321a:	f000 f90b 	bl	8013434 <ip4_addr_isbroadcast_u32>
 801321e:	4603      	mov	r3, r0
 8013220:	2b00      	cmp	r3, #0
 8013222:	d10f      	bne.n	8013244 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013224:	4b15      	ldr	r3, [pc, #84]	; (801327c <ip4_input+0x240>)
 8013226:	695b      	ldr	r3, [r3, #20]
 8013228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801322c:	2be0      	cmp	r3, #224	; 0xe0
 801322e:	d009      	beq.n	8013244 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013230:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013234:	4619      	mov	r1, r3
 8013236:	6878      	ldr	r0, [r7, #4]
 8013238:	f7f7 fa5d 	bl	800a6f6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801323c:	2102      	movs	r1, #2
 801323e:	6878      	ldr	r0, [r7, #4]
 8013240:	f7ff fdd8 	bl	8012df4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f7f7 fa69 	bl	800a71c <pbuf_free>
        break;
 801324a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801324c:	4b0b      	ldr	r3, [pc, #44]	; (801327c <ip4_input+0x240>)
 801324e:	2200      	movs	r2, #0
 8013250:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013252:	4b0a      	ldr	r3, [pc, #40]	; (801327c <ip4_input+0x240>)
 8013254:	2200      	movs	r2, #0
 8013256:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013258:	4b08      	ldr	r3, [pc, #32]	; (801327c <ip4_input+0x240>)
 801325a:	2200      	movs	r2, #0
 801325c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801325e:	4b07      	ldr	r3, [pc, #28]	; (801327c <ip4_input+0x240>)
 8013260:	2200      	movs	r2, #0
 8013262:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013264:	4b05      	ldr	r3, [pc, #20]	; (801327c <ip4_input+0x240>)
 8013266:	2200      	movs	r2, #0
 8013268:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801326a:	4b04      	ldr	r3, [pc, #16]	; (801327c <ip4_input+0x240>)
 801326c:	2200      	movs	r2, #0
 801326e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013270:	2300      	movs	r3, #0
}
 8013272:	4618      	mov	r0, r3
 8013274:	3718      	adds	r7, #24
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
 801327a:	bf00      	nop
 801327c:	2000407c 	.word	0x2000407c
 8013280:	200075c0 	.word	0x200075c0

08013284 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b08a      	sub	sp, #40	; 0x28
 8013288:	af04      	add	r7, sp, #16
 801328a:	60f8      	str	r0, [r7, #12]
 801328c:	60b9      	str	r1, [r7, #8]
 801328e:	607a      	str	r2, [r7, #4]
 8013290:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d009      	beq.n	80132b0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d003      	beq.n	80132aa <ip4_output_if+0x26>
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d102      	bne.n	80132b0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80132aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ac:	3304      	adds	r3, #4
 80132ae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80132b0:	78fa      	ldrb	r2, [r7, #3]
 80132b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132b4:	9302      	str	r3, [sp, #8]
 80132b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80132ba:	9301      	str	r3, [sp, #4]
 80132bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80132c0:	9300      	str	r3, [sp, #0]
 80132c2:	4613      	mov	r3, r2
 80132c4:	687a      	ldr	r2, [r7, #4]
 80132c6:	6979      	ldr	r1, [r7, #20]
 80132c8:	68f8      	ldr	r0, [r7, #12]
 80132ca:	f000 f805 	bl	80132d8 <ip4_output_if_src>
 80132ce:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	3718      	adds	r7, #24
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}

080132d8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b088      	sub	sp, #32
 80132dc:	af00      	add	r7, sp, #0
 80132de:	60f8      	str	r0, [r7, #12]
 80132e0:	60b9      	str	r1, [r7, #8]
 80132e2:	607a      	str	r2, [r7, #4]
 80132e4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	7b9b      	ldrb	r3, [r3, #14]
 80132ea:	2b01      	cmp	r3, #1
 80132ec:	d006      	beq.n	80132fc <ip4_output_if_src+0x24>
 80132ee:	4b4b      	ldr	r3, [pc, #300]	; (801341c <ip4_output_if_src+0x144>)
 80132f0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80132f4:	494a      	ldr	r1, [pc, #296]	; (8013420 <ip4_output_if_src+0x148>)
 80132f6:	484b      	ldr	r0, [pc, #300]	; (8013424 <ip4_output_if_src+0x14c>)
 80132f8:	f001 f84e 	bl	8014398 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d060      	beq.n	80133c4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013302:	2314      	movs	r3, #20
 8013304:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013306:	2114      	movs	r1, #20
 8013308:	68f8      	ldr	r0, [r7, #12]
 801330a:	f7f7 f971 	bl	800a5f0 <pbuf_add_header>
 801330e:	4603      	mov	r3, r0
 8013310:	2b00      	cmp	r3, #0
 8013312:	d002      	beq.n	801331a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013314:	f06f 0301 	mvn.w	r3, #1
 8013318:	e07c      	b.n	8013414 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	685b      	ldr	r3, [r3, #4]
 801331e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	895b      	ldrh	r3, [r3, #10]
 8013324:	2b13      	cmp	r3, #19
 8013326:	d806      	bhi.n	8013336 <ip4_output_if_src+0x5e>
 8013328:	4b3c      	ldr	r3, [pc, #240]	; (801341c <ip4_output_if_src+0x144>)
 801332a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801332e:	493e      	ldr	r1, [pc, #248]	; (8013428 <ip4_output_if_src+0x150>)
 8013330:	483c      	ldr	r0, [pc, #240]	; (8013424 <ip4_output_if_src+0x14c>)
 8013332:	f001 f831 	bl	8014398 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013336:	69fb      	ldr	r3, [r7, #28]
 8013338:	78fa      	ldrb	r2, [r7, #3]
 801333a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801333c:	69fb      	ldr	r3, [r7, #28]
 801333e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013342:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	681a      	ldr	r2, [r3, #0]
 8013348:	69fb      	ldr	r3, [r7, #28]
 801334a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801334c:	8b7b      	ldrh	r3, [r7, #26]
 801334e:	089b      	lsrs	r3, r3, #2
 8013350:	b29b      	uxth	r3, r3
 8013352:	b2db      	uxtb	r3, r3
 8013354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013358:	b2da      	uxtb	r2, r3
 801335a:	69fb      	ldr	r3, [r7, #28]
 801335c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801335e:	69fb      	ldr	r3, [r7, #28]
 8013360:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013364:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	891b      	ldrh	r3, [r3, #8]
 801336a:	4618      	mov	r0, r3
 801336c:	f7f5 fc58 	bl	8008c20 <lwip_htons>
 8013370:	4603      	mov	r3, r0
 8013372:	461a      	mov	r2, r3
 8013374:	69fb      	ldr	r3, [r7, #28]
 8013376:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013378:	69fb      	ldr	r3, [r7, #28]
 801337a:	2200      	movs	r2, #0
 801337c:	719a      	strb	r2, [r3, #6]
 801337e:	2200      	movs	r2, #0
 8013380:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013382:	4b2a      	ldr	r3, [pc, #168]	; (801342c <ip4_output_if_src+0x154>)
 8013384:	881b      	ldrh	r3, [r3, #0]
 8013386:	4618      	mov	r0, r3
 8013388:	f7f5 fc4a 	bl	8008c20 <lwip_htons>
 801338c:	4603      	mov	r3, r0
 801338e:	461a      	mov	r2, r3
 8013390:	69fb      	ldr	r3, [r7, #28]
 8013392:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013394:	4b25      	ldr	r3, [pc, #148]	; (801342c <ip4_output_if_src+0x154>)
 8013396:	881b      	ldrh	r3, [r3, #0]
 8013398:	3301      	adds	r3, #1
 801339a:	b29a      	uxth	r2, r3
 801339c:	4b23      	ldr	r3, [pc, #140]	; (801342c <ip4_output_if_src+0x154>)
 801339e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80133a0:	68bb      	ldr	r3, [r7, #8]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d104      	bne.n	80133b0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80133a6:	4b22      	ldr	r3, [pc, #136]	; (8013430 <ip4_output_if_src+0x158>)
 80133a8:	681a      	ldr	r2, [r3, #0]
 80133aa:	69fb      	ldr	r3, [r7, #28]
 80133ac:	60da      	str	r2, [r3, #12]
 80133ae:	e003      	b.n	80133b8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	681a      	ldr	r2, [r3, #0]
 80133b4:	69fb      	ldr	r3, [r7, #28]
 80133b6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80133b8:	69fb      	ldr	r3, [r7, #28]
 80133ba:	2200      	movs	r2, #0
 80133bc:	729a      	strb	r2, [r3, #10]
 80133be:	2200      	movs	r2, #0
 80133c0:	72da      	strb	r2, [r3, #11]
 80133c2:	e00f      	b.n	80133e4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	895b      	ldrh	r3, [r3, #10]
 80133c8:	2b13      	cmp	r3, #19
 80133ca:	d802      	bhi.n	80133d2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80133cc:	f06f 0301 	mvn.w	r3, #1
 80133d0:	e020      	b.n	8013414 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	685b      	ldr	r3, [r3, #4]
 80133d6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80133d8:	69fb      	ldr	r3, [r7, #28]
 80133da:	691b      	ldr	r3, [r3, #16]
 80133dc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80133de:	f107 0314 	add.w	r3, r7, #20
 80133e2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80133e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d00c      	beq.n	8013406 <ip4_output_if_src+0x12e>
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	891a      	ldrh	r2, [r3, #8]
 80133f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80133f4:	429a      	cmp	r2, r3
 80133f6:	d906      	bls.n	8013406 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80133f8:	687a      	ldr	r2, [r7, #4]
 80133fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80133fc:	68f8      	ldr	r0, [r7, #12]
 80133fe:	f000 fd4d 	bl	8013e9c <ip4_frag>
 8013402:	4603      	mov	r3, r0
 8013404:	e006      	b.n	8013414 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013408:	695b      	ldr	r3, [r3, #20]
 801340a:	687a      	ldr	r2, [r7, #4]
 801340c:	68f9      	ldr	r1, [r7, #12]
 801340e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013410:	4798      	blx	r3
 8013412:	4603      	mov	r3, r0
}
 8013414:	4618      	mov	r0, r3
 8013416:	3720      	adds	r7, #32
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}
 801341c:	0801806c 	.word	0x0801806c
 8013420:	080180a0 	.word	0x080180a0
 8013424:	080180ac 	.word	0x080180ac
 8013428:	080180d4 	.word	0x080180d4
 801342c:	200008b6 	.word	0x200008b6
 8013430:	08059b70 	.word	0x08059b70

08013434 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013434:	b480      	push	{r7}
 8013436:	b085      	sub	sp, #20
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
 801343c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013448:	d002      	beq.n	8013450 <ip4_addr_isbroadcast_u32+0x1c>
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d101      	bne.n	8013454 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013450:	2301      	movs	r3, #1
 8013452:	e02a      	b.n	80134aa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801345a:	f003 0302 	and.w	r3, r3, #2
 801345e:	2b00      	cmp	r3, #0
 8013460:	d101      	bne.n	8013466 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013462:	2300      	movs	r3, #0
 8013464:	e021      	b.n	80134aa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	3304      	adds	r3, #4
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	687a      	ldr	r2, [r7, #4]
 801346e:	429a      	cmp	r2, r3
 8013470:	d101      	bne.n	8013476 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013472:	2300      	movs	r3, #0
 8013474:	e019      	b.n	80134aa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013476:	68fa      	ldr	r2, [r7, #12]
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	3304      	adds	r3, #4
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	405a      	eors	r2, r3
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	3308      	adds	r3, #8
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	4013      	ands	r3, r2
 8013488:	2b00      	cmp	r3, #0
 801348a:	d10d      	bne.n	80134a8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801348c:	683b      	ldr	r3, [r7, #0]
 801348e:	3308      	adds	r3, #8
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	43da      	mvns	r2, r3
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	3308      	adds	r3, #8
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d101      	bne.n	80134a8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80134a4:	2301      	movs	r3, #1
 80134a6:	e000      	b.n	80134aa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80134a8:	2300      	movs	r3, #0
  }
}
 80134aa:	4618      	mov	r0, r3
 80134ac:	3714      	adds	r7, #20
 80134ae:	46bd      	mov	sp, r7
 80134b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b4:	4770      	bx	lr
	...

080134b8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b084      	sub	sp, #16
 80134bc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80134be:	2300      	movs	r3, #0
 80134c0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80134c2:	4b12      	ldr	r3, [pc, #72]	; (801350c <ip_reass_tmr+0x54>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80134c8:	e018      	b.n	80134fc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	7fdb      	ldrb	r3, [r3, #31]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d00b      	beq.n	80134ea <ip_reass_tmr+0x32>
      r->timer--;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	7fdb      	ldrb	r3, [r3, #31]
 80134d6:	3b01      	subs	r3, #1
 80134d8:	b2da      	uxtb	r2, r3
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	60fb      	str	r3, [r7, #12]
 80134e8:	e008      	b.n	80134fc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80134f4:	68b9      	ldr	r1, [r7, #8]
 80134f6:	6878      	ldr	r0, [r7, #4]
 80134f8:	f000 f80a 	bl	8013510 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d1e3      	bne.n	80134ca <ip_reass_tmr+0x12>
    }
  }
}
 8013502:	bf00      	nop
 8013504:	bf00      	nop
 8013506:	3710      	adds	r7, #16
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}
 801350c:	200008b8 	.word	0x200008b8

08013510 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b088      	sub	sp, #32
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
 8013518:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801351a:	2300      	movs	r3, #0
 801351c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801351e:	683a      	ldr	r2, [r7, #0]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	429a      	cmp	r2, r3
 8013524:	d105      	bne.n	8013532 <ip_reass_free_complete_datagram+0x22>
 8013526:	4b45      	ldr	r3, [pc, #276]	; (801363c <ip_reass_free_complete_datagram+0x12c>)
 8013528:	22ab      	movs	r2, #171	; 0xab
 801352a:	4945      	ldr	r1, [pc, #276]	; (8013640 <ip_reass_free_complete_datagram+0x130>)
 801352c:	4845      	ldr	r0, [pc, #276]	; (8013644 <ip_reass_free_complete_datagram+0x134>)
 801352e:	f000 ff33 	bl	8014398 <iprintf>
  if (prev != NULL) {
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d00a      	beq.n	801354e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013538:	683b      	ldr	r3, [r7, #0]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	687a      	ldr	r2, [r7, #4]
 801353e:	429a      	cmp	r2, r3
 8013540:	d005      	beq.n	801354e <ip_reass_free_complete_datagram+0x3e>
 8013542:	4b3e      	ldr	r3, [pc, #248]	; (801363c <ip_reass_free_complete_datagram+0x12c>)
 8013544:	22ad      	movs	r2, #173	; 0xad
 8013546:	4940      	ldr	r1, [pc, #256]	; (8013648 <ip_reass_free_complete_datagram+0x138>)
 8013548:	483e      	ldr	r0, [pc, #248]	; (8013644 <ip_reass_free_complete_datagram+0x134>)
 801354a:	f000 ff25 	bl	8014398 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	685b      	ldr	r3, [r3, #4]
 8013552:	685b      	ldr	r3, [r3, #4]
 8013554:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013556:	697b      	ldr	r3, [r7, #20]
 8013558:	889b      	ldrh	r3, [r3, #4]
 801355a:	b29b      	uxth	r3, r3
 801355c:	2b00      	cmp	r3, #0
 801355e:	d12a      	bne.n	80135b6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	685b      	ldr	r3, [r3, #4]
 8013564:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	681a      	ldr	r2, [r3, #0]
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801356e:	69bb      	ldr	r3, [r7, #24]
 8013570:	6858      	ldr	r0, [r3, #4]
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	3308      	adds	r3, #8
 8013576:	2214      	movs	r2, #20
 8013578:	4619      	mov	r1, r3
 801357a:	f000 fedd 	bl	8014338 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801357e:	2101      	movs	r1, #1
 8013580:	69b8      	ldr	r0, [r7, #24]
 8013582:	f7ff fc47 	bl	8012e14 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013586:	69b8      	ldr	r0, [r7, #24]
 8013588:	f7f7 f950 	bl	800a82c <pbuf_clen>
 801358c:	4603      	mov	r3, r0
 801358e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013590:	8bfa      	ldrh	r2, [r7, #30]
 8013592:	8a7b      	ldrh	r3, [r7, #18]
 8013594:	4413      	add	r3, r2
 8013596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801359a:	db05      	blt.n	80135a8 <ip_reass_free_complete_datagram+0x98>
 801359c:	4b27      	ldr	r3, [pc, #156]	; (801363c <ip_reass_free_complete_datagram+0x12c>)
 801359e:	22bc      	movs	r2, #188	; 0xbc
 80135a0:	492a      	ldr	r1, [pc, #168]	; (801364c <ip_reass_free_complete_datagram+0x13c>)
 80135a2:	4828      	ldr	r0, [pc, #160]	; (8013644 <ip_reass_free_complete_datagram+0x134>)
 80135a4:	f000 fef8 	bl	8014398 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80135a8:	8bfa      	ldrh	r2, [r7, #30]
 80135aa:	8a7b      	ldrh	r3, [r7, #18]
 80135ac:	4413      	add	r3, r2
 80135ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80135b0:	69b8      	ldr	r0, [r7, #24]
 80135b2:	f7f7 f8b3 	bl	800a71c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	685b      	ldr	r3, [r3, #4]
 80135ba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80135bc:	e01f      	b.n	80135fe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80135be:	69bb      	ldr	r3, [r7, #24]
 80135c0:	685b      	ldr	r3, [r3, #4]
 80135c2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80135c4:	69bb      	ldr	r3, [r7, #24]
 80135c6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80135c8:	697b      	ldr	r3, [r7, #20]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80135ce:	68f8      	ldr	r0, [r7, #12]
 80135d0:	f7f7 f92c 	bl	800a82c <pbuf_clen>
 80135d4:	4603      	mov	r3, r0
 80135d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80135d8:	8bfa      	ldrh	r2, [r7, #30]
 80135da:	8a7b      	ldrh	r3, [r7, #18]
 80135dc:	4413      	add	r3, r2
 80135de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80135e2:	db05      	blt.n	80135f0 <ip_reass_free_complete_datagram+0xe0>
 80135e4:	4b15      	ldr	r3, [pc, #84]	; (801363c <ip_reass_free_complete_datagram+0x12c>)
 80135e6:	22cc      	movs	r2, #204	; 0xcc
 80135e8:	4918      	ldr	r1, [pc, #96]	; (801364c <ip_reass_free_complete_datagram+0x13c>)
 80135ea:	4816      	ldr	r0, [pc, #88]	; (8013644 <ip_reass_free_complete_datagram+0x134>)
 80135ec:	f000 fed4 	bl	8014398 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80135f0:	8bfa      	ldrh	r2, [r7, #30]
 80135f2:	8a7b      	ldrh	r3, [r7, #18]
 80135f4:	4413      	add	r3, r2
 80135f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80135f8:	68f8      	ldr	r0, [r7, #12]
 80135fa:	f7f7 f88f 	bl	800a71c <pbuf_free>
  while (p != NULL) {
 80135fe:	69bb      	ldr	r3, [r7, #24]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d1dc      	bne.n	80135be <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013604:	6839      	ldr	r1, [r7, #0]
 8013606:	6878      	ldr	r0, [r7, #4]
 8013608:	f000 f8c2 	bl	8013790 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801360c:	4b10      	ldr	r3, [pc, #64]	; (8013650 <ip_reass_free_complete_datagram+0x140>)
 801360e:	881b      	ldrh	r3, [r3, #0]
 8013610:	8bfa      	ldrh	r2, [r7, #30]
 8013612:	429a      	cmp	r2, r3
 8013614:	d905      	bls.n	8013622 <ip_reass_free_complete_datagram+0x112>
 8013616:	4b09      	ldr	r3, [pc, #36]	; (801363c <ip_reass_free_complete_datagram+0x12c>)
 8013618:	22d2      	movs	r2, #210	; 0xd2
 801361a:	490e      	ldr	r1, [pc, #56]	; (8013654 <ip_reass_free_complete_datagram+0x144>)
 801361c:	4809      	ldr	r0, [pc, #36]	; (8013644 <ip_reass_free_complete_datagram+0x134>)
 801361e:	f000 febb 	bl	8014398 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013622:	4b0b      	ldr	r3, [pc, #44]	; (8013650 <ip_reass_free_complete_datagram+0x140>)
 8013624:	881a      	ldrh	r2, [r3, #0]
 8013626:	8bfb      	ldrh	r3, [r7, #30]
 8013628:	1ad3      	subs	r3, r2, r3
 801362a:	b29a      	uxth	r2, r3
 801362c:	4b08      	ldr	r3, [pc, #32]	; (8013650 <ip_reass_free_complete_datagram+0x140>)
 801362e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013630:	8bfb      	ldrh	r3, [r7, #30]
}
 8013632:	4618      	mov	r0, r3
 8013634:	3720      	adds	r7, #32
 8013636:	46bd      	mov	sp, r7
 8013638:	bd80      	pop	{r7, pc}
 801363a:	bf00      	nop
 801363c:	08018104 	.word	0x08018104
 8013640:	08018140 	.word	0x08018140
 8013644:	0801814c 	.word	0x0801814c
 8013648:	08018174 	.word	0x08018174
 801364c:	08018188 	.word	0x08018188
 8013650:	200008bc 	.word	0x200008bc
 8013654:	080181a8 	.word	0x080181a8

08013658 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b08a      	sub	sp, #40	; 0x28
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
 8013660:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013662:	2300      	movs	r3, #0
 8013664:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013666:	2300      	movs	r3, #0
 8013668:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801366a:	2300      	movs	r3, #0
 801366c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801366e:	2300      	movs	r3, #0
 8013670:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013672:	2300      	movs	r3, #0
 8013674:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013676:	4b28      	ldr	r3, [pc, #160]	; (8013718 <ip_reass_remove_oldest_datagram+0xc0>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801367c:	e030      	b.n	80136e0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013680:	695a      	ldr	r2, [r3, #20]
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	68db      	ldr	r3, [r3, #12]
 8013686:	429a      	cmp	r2, r3
 8013688:	d10c      	bne.n	80136a4 <ip_reass_remove_oldest_datagram+0x4c>
 801368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801368c:	699a      	ldr	r2, [r3, #24]
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	691b      	ldr	r3, [r3, #16]
 8013692:	429a      	cmp	r2, r3
 8013694:	d106      	bne.n	80136a4 <ip_reass_remove_oldest_datagram+0x4c>
 8013696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013698:	899a      	ldrh	r2, [r3, #12]
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	889b      	ldrh	r3, [r3, #4]
 801369e:	b29b      	uxth	r3, r3
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d014      	beq.n	80136ce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80136a4:	693b      	ldr	r3, [r7, #16]
 80136a6:	3301      	adds	r3, #1
 80136a8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80136aa:	6a3b      	ldr	r3, [r7, #32]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d104      	bne.n	80136ba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80136b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136b2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80136b4:	69fb      	ldr	r3, [r7, #28]
 80136b6:	61bb      	str	r3, [r7, #24]
 80136b8:	e009      	b.n	80136ce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80136ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136bc:	7fda      	ldrb	r2, [r3, #31]
 80136be:	6a3b      	ldr	r3, [r7, #32]
 80136c0:	7fdb      	ldrb	r3, [r3, #31]
 80136c2:	429a      	cmp	r2, r3
 80136c4:	d803      	bhi.n	80136ce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80136c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136c8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80136ca:	69fb      	ldr	r3, [r7, #28]
 80136cc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80136ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d001      	beq.n	80136da <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80136d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136d8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80136da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80136e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d1cb      	bne.n	801367e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80136e6:	6a3b      	ldr	r3, [r7, #32]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d008      	beq.n	80136fe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80136ec:	69b9      	ldr	r1, [r7, #24]
 80136ee:	6a38      	ldr	r0, [r7, #32]
 80136f0:	f7ff ff0e 	bl	8013510 <ip_reass_free_complete_datagram>
 80136f4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80136f6:	697a      	ldr	r2, [r7, #20]
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	4413      	add	r3, r2
 80136fc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80136fe:	697a      	ldr	r2, [r7, #20]
 8013700:	683b      	ldr	r3, [r7, #0]
 8013702:	429a      	cmp	r2, r3
 8013704:	da02      	bge.n	801370c <ip_reass_remove_oldest_datagram+0xb4>
 8013706:	693b      	ldr	r3, [r7, #16]
 8013708:	2b01      	cmp	r3, #1
 801370a:	dcac      	bgt.n	8013666 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801370c:	697b      	ldr	r3, [r7, #20]
}
 801370e:	4618      	mov	r0, r3
 8013710:	3728      	adds	r7, #40	; 0x28
 8013712:	46bd      	mov	sp, r7
 8013714:	bd80      	pop	{r7, pc}
 8013716:	bf00      	nop
 8013718:	200008b8 	.word	0x200008b8

0801371c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b084      	sub	sp, #16
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
 8013724:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013726:	2004      	movs	r0, #4
 8013728:	f7f6 f99a 	bl	8009a60 <memp_malloc>
 801372c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d110      	bne.n	8013756 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013734:	6839      	ldr	r1, [r7, #0]
 8013736:	6878      	ldr	r0, [r7, #4]
 8013738:	f7ff ff8e 	bl	8013658 <ip_reass_remove_oldest_datagram>
 801373c:	4602      	mov	r2, r0
 801373e:	683b      	ldr	r3, [r7, #0]
 8013740:	4293      	cmp	r3, r2
 8013742:	dc03      	bgt.n	801374c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013744:	2004      	movs	r0, #4
 8013746:	f7f6 f98b 	bl	8009a60 <memp_malloc>
 801374a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d101      	bne.n	8013756 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013752:	2300      	movs	r3, #0
 8013754:	e016      	b.n	8013784 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013756:	2220      	movs	r2, #32
 8013758:	2100      	movs	r1, #0
 801375a:	68f8      	ldr	r0, [r7, #12]
 801375c:	f000 fe14 	bl	8014388 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	220f      	movs	r2, #15
 8013764:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013766:	4b09      	ldr	r3, [pc, #36]	; (801378c <ip_reass_enqueue_new_datagram+0x70>)
 8013768:	681a      	ldr	r2, [r3, #0]
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801376e:	4a07      	ldr	r2, [pc, #28]	; (801378c <ip_reass_enqueue_new_datagram+0x70>)
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	3308      	adds	r3, #8
 8013778:	2214      	movs	r2, #20
 801377a:	6879      	ldr	r1, [r7, #4]
 801377c:	4618      	mov	r0, r3
 801377e:	f000 fddb 	bl	8014338 <memcpy>
  return ipr;
 8013782:	68fb      	ldr	r3, [r7, #12]
}
 8013784:	4618      	mov	r0, r3
 8013786:	3710      	adds	r7, #16
 8013788:	46bd      	mov	sp, r7
 801378a:	bd80      	pop	{r7, pc}
 801378c:	200008b8 	.word	0x200008b8

08013790 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b082      	sub	sp, #8
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
 8013798:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801379a:	4b10      	ldr	r3, [pc, #64]	; (80137dc <ip_reass_dequeue_datagram+0x4c>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	687a      	ldr	r2, [r7, #4]
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d104      	bne.n	80137ae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	4a0c      	ldr	r2, [pc, #48]	; (80137dc <ip_reass_dequeue_datagram+0x4c>)
 80137aa:	6013      	str	r3, [r2, #0]
 80137ac:	e00d      	b.n	80137ca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d106      	bne.n	80137c2 <ip_reass_dequeue_datagram+0x32>
 80137b4:	4b0a      	ldr	r3, [pc, #40]	; (80137e0 <ip_reass_dequeue_datagram+0x50>)
 80137b6:	f240 1245 	movw	r2, #325	; 0x145
 80137ba:	490a      	ldr	r1, [pc, #40]	; (80137e4 <ip_reass_dequeue_datagram+0x54>)
 80137bc:	480a      	ldr	r0, [pc, #40]	; (80137e8 <ip_reass_dequeue_datagram+0x58>)
 80137be:	f000 fdeb 	bl	8014398 <iprintf>
    prev->next = ipr->next;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	681a      	ldr	r2, [r3, #0]
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80137ca:	6879      	ldr	r1, [r7, #4]
 80137cc:	2004      	movs	r0, #4
 80137ce:	f7f6 f993 	bl	8009af8 <memp_free>
}
 80137d2:	bf00      	nop
 80137d4:	3708      	adds	r7, #8
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd80      	pop	{r7, pc}
 80137da:	bf00      	nop
 80137dc:	200008b8 	.word	0x200008b8
 80137e0:	08018104 	.word	0x08018104
 80137e4:	080181cc 	.word	0x080181cc
 80137e8:	0801814c 	.word	0x0801814c

080137ec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b08c      	sub	sp, #48	; 0x30
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	60f8      	str	r0, [r7, #12]
 80137f4:	60b9      	str	r1, [r7, #8]
 80137f6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80137f8:	2300      	movs	r3, #0
 80137fa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80137fc:	2301      	movs	r3, #1
 80137fe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013800:	68bb      	ldr	r3, [r7, #8]
 8013802:	685b      	ldr	r3, [r3, #4]
 8013804:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013806:	69fb      	ldr	r3, [r7, #28]
 8013808:	885b      	ldrh	r3, [r3, #2]
 801380a:	b29b      	uxth	r3, r3
 801380c:	4618      	mov	r0, r3
 801380e:	f7f5 fa07 	bl	8008c20 <lwip_htons>
 8013812:	4603      	mov	r3, r0
 8013814:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013816:	69fb      	ldr	r3, [r7, #28]
 8013818:	781b      	ldrb	r3, [r3, #0]
 801381a:	f003 030f 	and.w	r3, r3, #15
 801381e:	b2db      	uxtb	r3, r3
 8013820:	009b      	lsls	r3, r3, #2
 8013822:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013824:	7e7b      	ldrb	r3, [r7, #25]
 8013826:	b29b      	uxth	r3, r3
 8013828:	8b7a      	ldrh	r2, [r7, #26]
 801382a:	429a      	cmp	r2, r3
 801382c:	d202      	bcs.n	8013834 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801382e:	f04f 33ff 	mov.w	r3, #4294967295
 8013832:	e135      	b.n	8013aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013834:	7e7b      	ldrb	r3, [r7, #25]
 8013836:	b29b      	uxth	r3, r3
 8013838:	8b7a      	ldrh	r2, [r7, #26]
 801383a:	1ad3      	subs	r3, r2, r3
 801383c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801383e:	69fb      	ldr	r3, [r7, #28]
 8013840:	88db      	ldrh	r3, [r3, #6]
 8013842:	b29b      	uxth	r3, r3
 8013844:	4618      	mov	r0, r3
 8013846:	f7f5 f9eb 	bl	8008c20 <lwip_htons>
 801384a:	4603      	mov	r3, r0
 801384c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013850:	b29b      	uxth	r3, r3
 8013852:	00db      	lsls	r3, r3, #3
 8013854:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013856:	68bb      	ldr	r3, [r7, #8]
 8013858:	685b      	ldr	r3, [r3, #4]
 801385a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801385e:	2200      	movs	r2, #0
 8013860:	701a      	strb	r2, [r3, #0]
 8013862:	2200      	movs	r2, #0
 8013864:	705a      	strb	r2, [r3, #1]
 8013866:	2200      	movs	r2, #0
 8013868:	709a      	strb	r2, [r3, #2]
 801386a:	2200      	movs	r2, #0
 801386c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013870:	8afa      	ldrh	r2, [r7, #22]
 8013872:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013874:	8afa      	ldrh	r2, [r7, #22]
 8013876:	8b7b      	ldrh	r3, [r7, #26]
 8013878:	4413      	add	r3, r2
 801387a:	b29a      	uxth	r2, r3
 801387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801387e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013882:	88db      	ldrh	r3, [r3, #6]
 8013884:	b29b      	uxth	r3, r3
 8013886:	8afa      	ldrh	r2, [r7, #22]
 8013888:	429a      	cmp	r2, r3
 801388a:	d902      	bls.n	8013892 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801388c:	f04f 33ff 	mov.w	r3, #4294967295
 8013890:	e106      	b.n	8013aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	685b      	ldr	r3, [r3, #4]
 8013896:	627b      	str	r3, [r7, #36]	; 0x24
 8013898:	e068      	b.n	801396c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389c:	685b      	ldr	r3, [r3, #4]
 801389e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80138a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138a2:	889b      	ldrh	r3, [r3, #4]
 80138a4:	b29a      	uxth	r2, r3
 80138a6:	693b      	ldr	r3, [r7, #16]
 80138a8:	889b      	ldrh	r3, [r3, #4]
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	429a      	cmp	r2, r3
 80138ae:	d235      	bcs.n	801391c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80138b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80138b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d020      	beq.n	80138fe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80138bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138be:	889b      	ldrh	r3, [r3, #4]
 80138c0:	b29a      	uxth	r2, r3
 80138c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138c4:	88db      	ldrh	r3, [r3, #6]
 80138c6:	b29b      	uxth	r3, r3
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d307      	bcc.n	80138dc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80138cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ce:	88db      	ldrh	r3, [r3, #6]
 80138d0:	b29a      	uxth	r2, r3
 80138d2:	693b      	ldr	r3, [r7, #16]
 80138d4:	889b      	ldrh	r3, [r3, #4]
 80138d6:	b29b      	uxth	r3, r3
 80138d8:	429a      	cmp	r2, r3
 80138da:	d902      	bls.n	80138e2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80138dc:	f04f 33ff 	mov.w	r3, #4294967295
 80138e0:	e0de      	b.n	8013aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80138e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138e4:	68ba      	ldr	r2, [r7, #8]
 80138e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80138e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ea:	88db      	ldrh	r3, [r3, #6]
 80138ec:	b29a      	uxth	r2, r3
 80138ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f0:	889b      	ldrh	r3, [r3, #4]
 80138f2:	b29b      	uxth	r3, r3
 80138f4:	429a      	cmp	r2, r3
 80138f6:	d03d      	beq.n	8013974 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80138f8:	2300      	movs	r3, #0
 80138fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80138fc:	e03a      	b.n	8013974 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80138fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013900:	88db      	ldrh	r3, [r3, #6]
 8013902:	b29a      	uxth	r2, r3
 8013904:	693b      	ldr	r3, [r7, #16]
 8013906:	889b      	ldrh	r3, [r3, #4]
 8013908:	b29b      	uxth	r3, r3
 801390a:	429a      	cmp	r2, r3
 801390c:	d902      	bls.n	8013914 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801390e:	f04f 33ff 	mov.w	r3, #4294967295
 8013912:	e0c5      	b.n	8013aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	68ba      	ldr	r2, [r7, #8]
 8013918:	605a      	str	r2, [r3, #4]
      break;
 801391a:	e02b      	b.n	8013974 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801391c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801391e:	889b      	ldrh	r3, [r3, #4]
 8013920:	b29a      	uxth	r2, r3
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	889b      	ldrh	r3, [r3, #4]
 8013926:	b29b      	uxth	r3, r3
 8013928:	429a      	cmp	r2, r3
 801392a:	d102      	bne.n	8013932 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801392c:	f04f 33ff 	mov.w	r3, #4294967295
 8013930:	e0b6      	b.n	8013aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013934:	889b      	ldrh	r3, [r3, #4]
 8013936:	b29a      	uxth	r2, r3
 8013938:	693b      	ldr	r3, [r7, #16]
 801393a:	88db      	ldrh	r3, [r3, #6]
 801393c:	b29b      	uxth	r3, r3
 801393e:	429a      	cmp	r2, r3
 8013940:	d202      	bcs.n	8013948 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013942:	f04f 33ff 	mov.w	r3, #4294967295
 8013946:	e0ab      	b.n	8013aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801394a:	2b00      	cmp	r3, #0
 801394c:	d009      	beq.n	8013962 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013950:	88db      	ldrh	r3, [r3, #6]
 8013952:	b29a      	uxth	r2, r3
 8013954:	693b      	ldr	r3, [r7, #16]
 8013956:	889b      	ldrh	r3, [r3, #4]
 8013958:	b29b      	uxth	r3, r3
 801395a:	429a      	cmp	r2, r3
 801395c:	d001      	beq.n	8013962 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801395e:	2300      	movs	r3, #0
 8013960:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013962:	693b      	ldr	r3, [r7, #16]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801396e:	2b00      	cmp	r3, #0
 8013970:	d193      	bne.n	801389a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013972:	e000      	b.n	8013976 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013974:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013978:	2b00      	cmp	r3, #0
 801397a:	d12d      	bne.n	80139d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801397e:	2b00      	cmp	r3, #0
 8013980:	d01c      	beq.n	80139bc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013984:	88db      	ldrh	r3, [r3, #6]
 8013986:	b29a      	uxth	r2, r3
 8013988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801398a:	889b      	ldrh	r3, [r3, #4]
 801398c:	b29b      	uxth	r3, r3
 801398e:	429a      	cmp	r2, r3
 8013990:	d906      	bls.n	80139a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013992:	4b45      	ldr	r3, [pc, #276]	; (8013aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013994:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013998:	4944      	ldr	r1, [pc, #272]	; (8013aac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801399a:	4845      	ldr	r0, [pc, #276]	; (8013ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801399c:	f000 fcfc 	bl	8014398 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80139a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a2:	68ba      	ldr	r2, [r7, #8]
 80139a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80139a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a8:	88db      	ldrh	r3, [r3, #6]
 80139aa:	b29a      	uxth	r2, r3
 80139ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ae:	889b      	ldrh	r3, [r3, #4]
 80139b0:	b29b      	uxth	r3, r3
 80139b2:	429a      	cmp	r2, r3
 80139b4:	d010      	beq.n	80139d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80139b6:	2300      	movs	r3, #0
 80139b8:	623b      	str	r3, [r7, #32]
 80139ba:	e00d      	b.n	80139d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	685b      	ldr	r3, [r3, #4]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d006      	beq.n	80139d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80139c4:	4b38      	ldr	r3, [pc, #224]	; (8013aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80139c6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80139ca:	493a      	ldr	r1, [pc, #232]	; (8013ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80139cc:	4838      	ldr	r0, [pc, #224]	; (8013ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80139ce:	f000 fce3 	bl	8014398 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	68ba      	ldr	r2, [r7, #8]
 80139d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d105      	bne.n	80139ea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	7f9b      	ldrb	r3, [r3, #30]
 80139e2:	f003 0301 	and.w	r3, r3, #1
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d059      	beq.n	8013a9e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80139ea:	6a3b      	ldr	r3, [r7, #32]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d04f      	beq.n	8013a90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	685b      	ldr	r3, [r3, #4]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d006      	beq.n	8013a06 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	685b      	ldr	r3, [r3, #4]
 80139fc:	685b      	ldr	r3, [r3, #4]
 80139fe:	889b      	ldrh	r3, [r3, #4]
 8013a00:	b29b      	uxth	r3, r3
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d002      	beq.n	8013a0c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013a06:	2300      	movs	r3, #0
 8013a08:	623b      	str	r3, [r7, #32]
 8013a0a:	e041      	b.n	8013a90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a0e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013a16:	e012      	b.n	8013a3e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1a:	685b      	ldr	r3, [r3, #4]
 8013a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a20:	88db      	ldrh	r3, [r3, #6]
 8013a22:	b29a      	uxth	r2, r3
 8013a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a26:	889b      	ldrh	r3, [r3, #4]
 8013a28:	b29b      	uxth	r3, r3
 8013a2a:	429a      	cmp	r2, r3
 8013a2c:	d002      	beq.n	8013a34 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013a2e:	2300      	movs	r3, #0
 8013a30:	623b      	str	r3, [r7, #32]
            break;
 8013a32:	e007      	b.n	8013a44 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a36:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d1e9      	bne.n	8013a18 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013a44:	6a3b      	ldr	r3, [r7, #32]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d022      	beq.n	8013a90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	685b      	ldr	r3, [r3, #4]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d106      	bne.n	8013a60 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013a52:	4b15      	ldr	r3, [pc, #84]	; (8013aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013a54:	f240 12df 	movw	r2, #479	; 0x1df
 8013a58:	4917      	ldr	r1, [pc, #92]	; (8013ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013a5a:	4815      	ldr	r0, [pc, #84]	; (8013ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013a5c:	f000 fc9c 	bl	8014398 <iprintf>
          LWIP_ASSERT("sanity check",
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	685b      	ldr	r3, [r3, #4]
 8013a64:	685b      	ldr	r3, [r3, #4]
 8013a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	d106      	bne.n	8013a7a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013a6c:	4b0e      	ldr	r3, [pc, #56]	; (8013aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013a6e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013a72:	4911      	ldr	r1, [pc, #68]	; (8013ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013a74:	480e      	ldr	r0, [pc, #56]	; (8013ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013a76:	f000 fc8f 	bl	8014398 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d006      	beq.n	8013a90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013a82:	4b09      	ldr	r3, [pc, #36]	; (8013aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013a84:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013a88:	490c      	ldr	r1, [pc, #48]	; (8013abc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013a8a:	4809      	ldr	r0, [pc, #36]	; (8013ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013a8c:	f000 fc84 	bl	8014398 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013a90:	6a3b      	ldr	r3, [r7, #32]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	bf14      	ite	ne
 8013a96:	2301      	movne	r3, #1
 8013a98:	2300      	moveq	r3, #0
 8013a9a:	b2db      	uxtb	r3, r3
 8013a9c:	e000      	b.n	8013aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013a9e:	2300      	movs	r3, #0
}
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	3730      	adds	r7, #48	; 0x30
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	bd80      	pop	{r7, pc}
 8013aa8:	08018104 	.word	0x08018104
 8013aac:	080181e8 	.word	0x080181e8
 8013ab0:	0801814c 	.word	0x0801814c
 8013ab4:	08018208 	.word	0x08018208
 8013ab8:	08018240 	.word	0x08018240
 8013abc:	08018250 	.word	0x08018250

08013ac0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b08e      	sub	sp, #56	; 0x38
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	685b      	ldr	r3, [r3, #4]
 8013acc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad0:	781b      	ldrb	r3, [r3, #0]
 8013ad2:	f003 030f 	and.w	r3, r3, #15
 8013ad6:	b2db      	uxtb	r3, r3
 8013ad8:	009b      	lsls	r3, r3, #2
 8013ada:	b2db      	uxtb	r3, r3
 8013adc:	2b14      	cmp	r3, #20
 8013ade:	f040 8167 	bne.w	8013db0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae4:	88db      	ldrh	r3, [r3, #6]
 8013ae6:	b29b      	uxth	r3, r3
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f7f5 f899 	bl	8008c20 <lwip_htons>
 8013aee:	4603      	mov	r3, r0
 8013af0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013af4:	b29b      	uxth	r3, r3
 8013af6:	00db      	lsls	r3, r3, #3
 8013af8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013afc:	885b      	ldrh	r3, [r3, #2]
 8013afe:	b29b      	uxth	r3, r3
 8013b00:	4618      	mov	r0, r3
 8013b02:	f7f5 f88d 	bl	8008c20 <lwip_htons>
 8013b06:	4603      	mov	r3, r0
 8013b08:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b0c:	781b      	ldrb	r3, [r3, #0]
 8013b0e:	f003 030f 	and.w	r3, r3, #15
 8013b12:	b2db      	uxtb	r3, r3
 8013b14:	009b      	lsls	r3, r3, #2
 8013b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013b1e:	b29b      	uxth	r3, r3
 8013b20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013b22:	429a      	cmp	r2, r3
 8013b24:	f0c0 8146 	bcc.w	8013db4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013b28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013b2c:	b29b      	uxth	r3, r3
 8013b2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013b30:	1ad3      	subs	r3, r2, r3
 8013b32:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f7f6 fe79 	bl	800a82c <pbuf_clen>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013b3e:	4b9f      	ldr	r3, [pc, #636]	; (8013dbc <ip4_reass+0x2fc>)
 8013b40:	881b      	ldrh	r3, [r3, #0]
 8013b42:	461a      	mov	r2, r3
 8013b44:	8c3b      	ldrh	r3, [r7, #32]
 8013b46:	4413      	add	r3, r2
 8013b48:	2b0a      	cmp	r3, #10
 8013b4a:	dd10      	ble.n	8013b6e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013b4c:	8c3b      	ldrh	r3, [r7, #32]
 8013b4e:	4619      	mov	r1, r3
 8013b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b52:	f7ff fd81 	bl	8013658 <ip_reass_remove_oldest_datagram>
 8013b56:	4603      	mov	r3, r0
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	f000 812d 	beq.w	8013db8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013b5e:	4b97      	ldr	r3, [pc, #604]	; (8013dbc <ip4_reass+0x2fc>)
 8013b60:	881b      	ldrh	r3, [r3, #0]
 8013b62:	461a      	mov	r2, r3
 8013b64:	8c3b      	ldrh	r3, [r7, #32]
 8013b66:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013b68:	2b0a      	cmp	r3, #10
 8013b6a:	f300 8125 	bgt.w	8013db8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013b6e:	4b94      	ldr	r3, [pc, #592]	; (8013dc0 <ip4_reass+0x300>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	633b      	str	r3, [r7, #48]	; 0x30
 8013b74:	e015      	b.n	8013ba2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b78:	695a      	ldr	r2, [r3, #20]
 8013b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b7c:	68db      	ldr	r3, [r3, #12]
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d10c      	bne.n	8013b9c <ip4_reass+0xdc>
 8013b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b84:	699a      	ldr	r2, [r3, #24]
 8013b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b88:	691b      	ldr	r3, [r3, #16]
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	d106      	bne.n	8013b9c <ip4_reass+0xdc>
 8013b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b90:	899a      	ldrh	r2, [r3, #12]
 8013b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b94:	889b      	ldrh	r3, [r3, #4]
 8013b96:	b29b      	uxth	r3, r3
 8013b98:	429a      	cmp	r2, r3
 8013b9a:	d006      	beq.n	8013baa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8013ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d1e6      	bne.n	8013b76 <ip4_reass+0xb6>
 8013ba8:	e000      	b.n	8013bac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013baa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d109      	bne.n	8013bc6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013bb2:	8c3b      	ldrh	r3, [r7, #32]
 8013bb4:	4619      	mov	r1, r3
 8013bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013bb8:	f7ff fdb0 	bl	801371c <ip_reass_enqueue_new_datagram>
 8013bbc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d11c      	bne.n	8013bfe <ip4_reass+0x13e>
      goto nullreturn;
 8013bc4:	e109      	b.n	8013dda <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bc8:	88db      	ldrh	r3, [r3, #6]
 8013bca:	b29b      	uxth	r3, r3
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f7f5 f827 	bl	8008c20 <lwip_htons>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d110      	bne.n	8013bfe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bde:	89db      	ldrh	r3, [r3, #14]
 8013be0:	4618      	mov	r0, r3
 8013be2:	f7f5 f81d 	bl	8008c20 <lwip_htons>
 8013be6:	4603      	mov	r3, r0
 8013be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d006      	beq.n	8013bfe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf2:	3308      	adds	r3, #8
 8013bf4:	2214      	movs	r2, #20
 8013bf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f000 fb9d 	bl	8014338 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c00:	88db      	ldrh	r3, [r3, #6]
 8013c02:	b29b      	uxth	r3, r3
 8013c04:	f003 0320 	and.w	r3, r3, #32
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	bf0c      	ite	eq
 8013c0c:	2301      	moveq	r3, #1
 8013c0e:	2300      	movne	r3, #0
 8013c10:	b2db      	uxtb	r3, r3
 8013c12:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013c14:	69fb      	ldr	r3, [r7, #28]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d00e      	beq.n	8013c38 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013c1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013c1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013c1e:	4413      	add	r3, r2
 8013c20:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013c22:	8b7a      	ldrh	r2, [r7, #26]
 8013c24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013c26:	429a      	cmp	r2, r3
 8013c28:	f0c0 80a0 	bcc.w	8013d6c <ip4_reass+0x2ac>
 8013c2c:	8b7b      	ldrh	r3, [r7, #26]
 8013c2e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013c32:	4293      	cmp	r3, r2
 8013c34:	f200 809a 	bhi.w	8013d6c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013c38:	69fa      	ldr	r2, [r7, #28]
 8013c3a:	6879      	ldr	r1, [r7, #4]
 8013c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c3e:	f7ff fdd5 	bl	80137ec <ip_reass_chain_frag_into_datagram_and_validate>
 8013c42:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013c44:	697b      	ldr	r3, [r7, #20]
 8013c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c4a:	f000 8091 	beq.w	8013d70 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013c4e:	4b5b      	ldr	r3, [pc, #364]	; (8013dbc <ip4_reass+0x2fc>)
 8013c50:	881a      	ldrh	r2, [r3, #0]
 8013c52:	8c3b      	ldrh	r3, [r7, #32]
 8013c54:	4413      	add	r3, r2
 8013c56:	b29a      	uxth	r2, r3
 8013c58:	4b58      	ldr	r3, [pc, #352]	; (8013dbc <ip4_reass+0x2fc>)
 8013c5a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013c5c:	69fb      	ldr	r3, [r7, #28]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d00d      	beq.n	8013c7e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013c62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013c64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013c66:	4413      	add	r3, r2
 8013c68:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c6c:	8a7a      	ldrh	r2, [r7, #18]
 8013c6e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c72:	7f9b      	ldrb	r3, [r3, #30]
 8013c74:	f043 0301 	orr.w	r3, r3, #1
 8013c78:	b2da      	uxtb	r2, r3
 8013c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c7c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013c7e:	697b      	ldr	r3, [r7, #20]
 8013c80:	2b01      	cmp	r3, #1
 8013c82:	d171      	bne.n	8013d68 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c86:	8b9b      	ldrh	r3, [r3, #28]
 8013c88:	3314      	adds	r3, #20
 8013c8a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c8e:	685b      	ldr	r3, [r3, #4]
 8013c90:	685b      	ldr	r3, [r3, #4]
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c98:	685b      	ldr	r3, [r3, #4]
 8013c9a:	685b      	ldr	r3, [r3, #4]
 8013c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca0:	3308      	adds	r3, #8
 8013ca2:	2214      	movs	r2, #20
 8013ca4:	4619      	mov	r1, r3
 8013ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ca8:	f000 fb46 	bl	8014338 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013cac:	8a3b      	ldrh	r3, [r7, #16]
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f7f4 ffb6 	bl	8008c20 <lwip_htons>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	461a      	mov	r2, r3
 8013cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	719a      	strb	r2, [r3, #6]
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cc8:	2200      	movs	r2, #0
 8013cca:	729a      	strb	r2, [r3, #10]
 8013ccc:	2200      	movs	r2, #0
 8013cce:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd2:	685b      	ldr	r3, [r3, #4]
 8013cd4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013cd6:	e00d      	b.n	8013cf4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cda:	685b      	ldr	r3, [r3, #4]
 8013cdc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013cde:	2114      	movs	r1, #20
 8013ce0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013ce2:	f7f6 fc95 	bl	800a610 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013ce6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f7f6 fdd9 	bl	800a8a0 <pbuf_cat>
      r = iprh->next_pbuf;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d1ee      	bne.n	8013cd8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013cfa:	4b31      	ldr	r3, [pc, #196]	; (8013dc0 <ip4_reass+0x300>)
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d00:	429a      	cmp	r2, r3
 8013d02:	d102      	bne.n	8013d0a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013d04:	2300      	movs	r3, #0
 8013d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013d08:	e010      	b.n	8013d2c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013d0a:	4b2d      	ldr	r3, [pc, #180]	; (8013dc0 <ip4_reass+0x300>)
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013d10:	e007      	b.n	8013d22 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d18:	429a      	cmp	r2, r3
 8013d1a:	d006      	beq.n	8013d2a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d1f4      	bne.n	8013d12 <ip4_reass+0x252>
 8013d28:	e000      	b.n	8013d2c <ip4_reass+0x26c>
          break;
 8013d2a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013d2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013d2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d30:	f7ff fd2e 	bl	8013790 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013d34:	6878      	ldr	r0, [r7, #4]
 8013d36:	f7f6 fd79 	bl	800a82c <pbuf_clen>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013d3e:	4b1f      	ldr	r3, [pc, #124]	; (8013dbc <ip4_reass+0x2fc>)
 8013d40:	881b      	ldrh	r3, [r3, #0]
 8013d42:	8c3a      	ldrh	r2, [r7, #32]
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d906      	bls.n	8013d56 <ip4_reass+0x296>
 8013d48:	4b1e      	ldr	r3, [pc, #120]	; (8013dc4 <ip4_reass+0x304>)
 8013d4a:	f240 229b 	movw	r2, #667	; 0x29b
 8013d4e:	491e      	ldr	r1, [pc, #120]	; (8013dc8 <ip4_reass+0x308>)
 8013d50:	481e      	ldr	r0, [pc, #120]	; (8013dcc <ip4_reass+0x30c>)
 8013d52:	f000 fb21 	bl	8014398 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013d56:	4b19      	ldr	r3, [pc, #100]	; (8013dbc <ip4_reass+0x2fc>)
 8013d58:	881a      	ldrh	r2, [r3, #0]
 8013d5a:	8c3b      	ldrh	r3, [r7, #32]
 8013d5c:	1ad3      	subs	r3, r2, r3
 8013d5e:	b29a      	uxth	r2, r3
 8013d60:	4b16      	ldr	r3, [pc, #88]	; (8013dbc <ip4_reass+0x2fc>)
 8013d62:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	e03c      	b.n	8013de2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013d68:	2300      	movs	r3, #0
 8013d6a:	e03a      	b.n	8013de2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8013d6c:	bf00      	nop
 8013d6e:	e000      	b.n	8013d72 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8013d70:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d106      	bne.n	8013d86 <ip4_reass+0x2c6>
 8013d78:	4b12      	ldr	r3, [pc, #72]	; (8013dc4 <ip4_reass+0x304>)
 8013d7a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013d7e:	4914      	ldr	r1, [pc, #80]	; (8013dd0 <ip4_reass+0x310>)
 8013d80:	4812      	ldr	r0, [pc, #72]	; (8013dcc <ip4_reass+0x30c>)
 8013d82:	f000 fb09 	bl	8014398 <iprintf>
  if (ipr->p == NULL) {
 8013d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d88:	685b      	ldr	r3, [r3, #4]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d124      	bne.n	8013dd8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013d8e:	4b0c      	ldr	r3, [pc, #48]	; (8013dc0 <ip4_reass+0x300>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d94:	429a      	cmp	r2, r3
 8013d96:	d006      	beq.n	8013da6 <ip4_reass+0x2e6>
 8013d98:	4b0a      	ldr	r3, [pc, #40]	; (8013dc4 <ip4_reass+0x304>)
 8013d9a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013d9e:	490d      	ldr	r1, [pc, #52]	; (8013dd4 <ip4_reass+0x314>)
 8013da0:	480a      	ldr	r0, [pc, #40]	; (8013dcc <ip4_reass+0x30c>)
 8013da2:	f000 faf9 	bl	8014398 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013da6:	2100      	movs	r1, #0
 8013da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013daa:	f7ff fcf1 	bl	8013790 <ip_reass_dequeue_datagram>
 8013dae:	e014      	b.n	8013dda <ip4_reass+0x31a>
    goto nullreturn;
 8013db0:	bf00      	nop
 8013db2:	e012      	b.n	8013dda <ip4_reass+0x31a>
    goto nullreturn;
 8013db4:	bf00      	nop
 8013db6:	e010      	b.n	8013dda <ip4_reass+0x31a>
      goto nullreturn;
 8013db8:	bf00      	nop
 8013dba:	e00e      	b.n	8013dda <ip4_reass+0x31a>
 8013dbc:	200008bc 	.word	0x200008bc
 8013dc0:	200008b8 	.word	0x200008b8
 8013dc4:	08018104 	.word	0x08018104
 8013dc8:	08018274 	.word	0x08018274
 8013dcc:	0801814c 	.word	0x0801814c
 8013dd0:	08018290 	.word	0x08018290
 8013dd4:	0801829c 	.word	0x0801829c
  }

nullreturn:
 8013dd8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013dda:	6878      	ldr	r0, [r7, #4]
 8013ddc:	f7f6 fc9e 	bl	800a71c <pbuf_free>
  return NULL;
 8013de0:	2300      	movs	r3, #0
}
 8013de2:	4618      	mov	r0, r3
 8013de4:	3738      	adds	r7, #56	; 0x38
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}
 8013dea:	bf00      	nop

08013dec <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013df0:	2005      	movs	r0, #5
 8013df2:	f7f5 fe35 	bl	8009a60 <memp_malloc>
 8013df6:	4603      	mov	r3, r0
}
 8013df8:	4618      	mov	r0, r3
 8013dfa:	bd80      	pop	{r7, pc}

08013dfc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d106      	bne.n	8013e18 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013e0a:	4b07      	ldr	r3, [pc, #28]	; (8013e28 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013e0c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013e10:	4906      	ldr	r1, [pc, #24]	; (8013e2c <ip_frag_free_pbuf_custom_ref+0x30>)
 8013e12:	4807      	ldr	r0, [pc, #28]	; (8013e30 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013e14:	f000 fac0 	bl	8014398 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013e18:	6879      	ldr	r1, [r7, #4]
 8013e1a:	2005      	movs	r0, #5
 8013e1c:	f7f5 fe6c 	bl	8009af8 <memp_free>
}
 8013e20:	bf00      	nop
 8013e22:	3708      	adds	r7, #8
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bd80      	pop	{r7, pc}
 8013e28:	08018104 	.word	0x08018104
 8013e2c:	080182bc 	.word	0x080182bc
 8013e30:	0801814c 	.word	0x0801814c

08013e34 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b084      	sub	sp, #16
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d106      	bne.n	8013e54 <ipfrag_free_pbuf_custom+0x20>
 8013e46:	4b11      	ldr	r3, [pc, #68]	; (8013e8c <ipfrag_free_pbuf_custom+0x58>)
 8013e48:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013e4c:	4910      	ldr	r1, [pc, #64]	; (8013e90 <ipfrag_free_pbuf_custom+0x5c>)
 8013e4e:	4811      	ldr	r0, [pc, #68]	; (8013e94 <ipfrag_free_pbuf_custom+0x60>)
 8013e50:	f000 faa2 	bl	8014398 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013e54:	68fa      	ldr	r2, [r7, #12]
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d006      	beq.n	8013e6a <ipfrag_free_pbuf_custom+0x36>
 8013e5c:	4b0b      	ldr	r3, [pc, #44]	; (8013e8c <ipfrag_free_pbuf_custom+0x58>)
 8013e5e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013e62:	490d      	ldr	r1, [pc, #52]	; (8013e98 <ipfrag_free_pbuf_custom+0x64>)
 8013e64:	480b      	ldr	r0, [pc, #44]	; (8013e94 <ipfrag_free_pbuf_custom+0x60>)
 8013e66:	f000 fa97 	bl	8014398 <iprintf>
  if (pcr->original != NULL) {
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	695b      	ldr	r3, [r3, #20]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d004      	beq.n	8013e7c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	695b      	ldr	r3, [r3, #20]
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7f6 fc50 	bl	800a71c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013e7c:	68f8      	ldr	r0, [r7, #12]
 8013e7e:	f7ff ffbd 	bl	8013dfc <ip_frag_free_pbuf_custom_ref>
}
 8013e82:	bf00      	nop
 8013e84:	3710      	adds	r7, #16
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	08018104 	.word	0x08018104
 8013e90:	080182c8 	.word	0x080182c8
 8013e94:	0801814c 	.word	0x0801814c
 8013e98:	080182d4 	.word	0x080182d4

08013e9c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b094      	sub	sp, #80	; 0x50
 8013ea0:	af02      	add	r7, sp, #8
 8013ea2:	60f8      	str	r0, [r7, #12]
 8013ea4:	60b9      	str	r1, [r7, #8]
 8013ea6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013eb2:	3b14      	subs	r3, #20
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	da00      	bge.n	8013eba <ip4_frag+0x1e>
 8013eb8:	3307      	adds	r3, #7
 8013eba:	10db      	asrs	r3, r3, #3
 8013ebc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013ebe:	2314      	movs	r3, #20
 8013ec0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	685b      	ldr	r3, [r3, #4]
 8013ec6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eca:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ece:	781b      	ldrb	r3, [r3, #0]
 8013ed0:	f003 030f 	and.w	r3, r3, #15
 8013ed4:	b2db      	uxtb	r3, r3
 8013ed6:	009b      	lsls	r3, r3, #2
 8013ed8:	b2db      	uxtb	r3, r3
 8013eda:	2b14      	cmp	r3, #20
 8013edc:	d002      	beq.n	8013ee4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013ede:	f06f 0305 	mvn.w	r3, #5
 8013ee2:	e110      	b.n	8014106 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	895b      	ldrh	r3, [r3, #10]
 8013ee8:	2b13      	cmp	r3, #19
 8013eea:	d809      	bhi.n	8013f00 <ip4_frag+0x64>
 8013eec:	4b88      	ldr	r3, [pc, #544]	; (8014110 <ip4_frag+0x274>)
 8013eee:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013ef2:	4988      	ldr	r1, [pc, #544]	; (8014114 <ip4_frag+0x278>)
 8013ef4:	4888      	ldr	r0, [pc, #544]	; (8014118 <ip4_frag+0x27c>)
 8013ef6:	f000 fa4f 	bl	8014398 <iprintf>
 8013efa:	f06f 0305 	mvn.w	r3, #5
 8013efe:	e102      	b.n	8014106 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f02:	88db      	ldrh	r3, [r3, #6]
 8013f04:	b29b      	uxth	r3, r3
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7f4 fe8a 	bl	8008c20 <lwip_htons>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013f10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013f12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013f16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013f1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013f20:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	891b      	ldrh	r3, [r3, #8]
 8013f26:	3b14      	subs	r3, #20
 8013f28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013f2c:	e0e1      	b.n	80140f2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013f2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f30:	00db      	lsls	r3, r3, #3
 8013f32:	b29b      	uxth	r3, r3
 8013f34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013f38:	4293      	cmp	r3, r2
 8013f3a:	bf28      	it	cs
 8013f3c:	4613      	movcs	r3, r2
 8013f3e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013f40:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f44:	2114      	movs	r1, #20
 8013f46:	200e      	movs	r0, #14
 8013f48:	f7f6 f904 	bl	800a154 <pbuf_alloc>
 8013f4c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	f000 80d5 	beq.w	8014100 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f58:	895b      	ldrh	r3, [r3, #10]
 8013f5a:	2b13      	cmp	r3, #19
 8013f5c:	d806      	bhi.n	8013f6c <ip4_frag+0xd0>
 8013f5e:	4b6c      	ldr	r3, [pc, #432]	; (8014110 <ip4_frag+0x274>)
 8013f60:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013f64:	496d      	ldr	r1, [pc, #436]	; (801411c <ip4_frag+0x280>)
 8013f66:	486c      	ldr	r0, [pc, #432]	; (8014118 <ip4_frag+0x27c>)
 8013f68:	f000 fa16 	bl	8014398 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	2214      	movs	r2, #20
 8013f72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013f74:	4618      	mov	r0, r3
 8013f76:	f000 f9df 	bl	8014338 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f7c:	685b      	ldr	r3, [r3, #4]
 8013f7e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013f80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013f82:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013f86:	e064      	b.n	8014052 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	895a      	ldrh	r2, [r3, #10]
 8013f8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013f8e:	1ad3      	subs	r3, r2, r3
 8013f90:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	895b      	ldrh	r3, [r3, #10]
 8013f96:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	d906      	bls.n	8013faa <ip4_frag+0x10e>
 8013f9c:	4b5c      	ldr	r3, [pc, #368]	; (8014110 <ip4_frag+0x274>)
 8013f9e:	f240 322d 	movw	r2, #813	; 0x32d
 8013fa2:	495f      	ldr	r1, [pc, #380]	; (8014120 <ip4_frag+0x284>)
 8013fa4:	485c      	ldr	r0, [pc, #368]	; (8014118 <ip4_frag+0x27c>)
 8013fa6:	f000 f9f7 	bl	8014398 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013faa:	8bfa      	ldrh	r2, [r7, #30]
 8013fac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013fb0:	4293      	cmp	r3, r2
 8013fb2:	bf28      	it	cs
 8013fb4:	4613      	movcs	r3, r2
 8013fb6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013fba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d105      	bne.n	8013fce <ip4_frag+0x132>
        poff = 0;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	60fb      	str	r3, [r7, #12]
        continue;
 8013fcc:	e041      	b.n	8014052 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013fce:	f7ff ff0d 	bl	8013dec <ip_frag_alloc_pbuf_custom_ref>
 8013fd2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013fd4:	69bb      	ldr	r3, [r7, #24]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d103      	bne.n	8013fe2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013fda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013fdc:	f7f6 fb9e 	bl	800a71c <pbuf_free>
        goto memerr;
 8013fe0:	e08f      	b.n	8014102 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013fe2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013fe8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013fea:	4413      	add	r3, r2
 8013fec:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013ff0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013ff4:	9201      	str	r2, [sp, #4]
 8013ff6:	9300      	str	r3, [sp, #0]
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	2241      	movs	r2, #65	; 0x41
 8013ffc:	2000      	movs	r0, #0
 8013ffe:	f7f6 f9d3 	bl	800a3a8 <pbuf_alloced_custom>
 8014002:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014004:	697b      	ldr	r3, [r7, #20]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d106      	bne.n	8014018 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801400a:	69b8      	ldr	r0, [r7, #24]
 801400c:	f7ff fef6 	bl	8013dfc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014012:	f7f6 fb83 	bl	800a71c <pbuf_free>
        goto memerr;
 8014016:	e074      	b.n	8014102 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014018:	68f8      	ldr	r0, [r7, #12]
 801401a:	f7f6 fc1f 	bl	800a85c <pbuf_ref>
      pcr->original = p;
 801401e:	69bb      	ldr	r3, [r7, #24]
 8014020:	68fa      	ldr	r2, [r7, #12]
 8014022:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014024:	69bb      	ldr	r3, [r7, #24]
 8014026:	4a3f      	ldr	r2, [pc, #252]	; (8014124 <ip4_frag+0x288>)
 8014028:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801402a:	6979      	ldr	r1, [r7, #20]
 801402c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801402e:	f7f6 fc37 	bl	800a8a0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014032:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014036:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801403a:	1ad3      	subs	r3, r2, r3
 801403c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014040:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014044:	2b00      	cmp	r3, #0
 8014046:	d004      	beq.n	8014052 <ip4_frag+0x1b6>
        poff = 0;
 8014048:	2300      	movs	r3, #0
 801404a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014052:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014056:	2b00      	cmp	r3, #0
 8014058:	d196      	bne.n	8013f88 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801405a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801405c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014060:	4413      	add	r3, r2
 8014062:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014064:	68bb      	ldr	r3, [r7, #8]
 8014066:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014068:	f1a3 0213 	sub.w	r2, r3, #19
 801406c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014070:	429a      	cmp	r2, r3
 8014072:	bfcc      	ite	gt
 8014074:	2301      	movgt	r3, #1
 8014076:	2300      	movle	r3, #0
 8014078:	b2db      	uxtb	r3, r3
 801407a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801407c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014084:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014086:	6a3b      	ldr	r3, [r7, #32]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d002      	beq.n	8014092 <ip4_frag+0x1f6>
 801408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801408e:	2b00      	cmp	r3, #0
 8014090:	d003      	beq.n	801409a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014092:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014094:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014098:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801409a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801409c:	4618      	mov	r0, r3
 801409e:	f7f4 fdbf 	bl	8008c20 <lwip_htons>
 80140a2:	4603      	mov	r3, r0
 80140a4:	461a      	mov	r2, r3
 80140a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140a8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80140aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80140ac:	3314      	adds	r3, #20
 80140ae:	b29b      	uxth	r3, r3
 80140b0:	4618      	mov	r0, r3
 80140b2:	f7f4 fdb5 	bl	8008c20 <lwip_htons>
 80140b6:	4603      	mov	r3, r0
 80140b8:	461a      	mov	r2, r3
 80140ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140bc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80140be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140c0:	2200      	movs	r2, #0
 80140c2:	729a      	strb	r2, [r3, #10]
 80140c4:	2200      	movs	r2, #0
 80140c6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80140c8:	68bb      	ldr	r3, [r7, #8]
 80140ca:	695b      	ldr	r3, [r3, #20]
 80140cc:	687a      	ldr	r2, [r7, #4]
 80140ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80140d0:	68b8      	ldr	r0, [r7, #8]
 80140d2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80140d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80140d6:	f7f6 fb21 	bl	800a71c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80140da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80140de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80140e0:	1ad3      	subs	r3, r2, r3
 80140e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80140e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80140ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80140ec:	4413      	add	r3, r2
 80140ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80140f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	f47f af19 	bne.w	8013f2e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80140fc:	2300      	movs	r3, #0
 80140fe:	e002      	b.n	8014106 <ip4_frag+0x26a>
      goto memerr;
 8014100:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014106:	4618      	mov	r0, r3
 8014108:	3748      	adds	r7, #72	; 0x48
 801410a:	46bd      	mov	sp, r7
 801410c:	bd80      	pop	{r7, pc}
 801410e:	bf00      	nop
 8014110:	08018104 	.word	0x08018104
 8014114:	080182e0 	.word	0x080182e0
 8014118:	0801814c 	.word	0x0801814c
 801411c:	080182fc 	.word	0x080182fc
 8014120:	0801831c 	.word	0x0801831c
 8014124:	08013e35 	.word	0x08013e35

08014128 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b086      	sub	sp, #24
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
 8014130:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014132:	230e      	movs	r3, #14
 8014134:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	895b      	ldrh	r3, [r3, #10]
 801413a:	2b0e      	cmp	r3, #14
 801413c:	d96e      	bls.n	801421c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	7bdb      	ldrb	r3, [r3, #15]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d106      	bne.n	8014154 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014146:	683b      	ldr	r3, [r7, #0]
 8014148:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801414c:	3301      	adds	r3, #1
 801414e:	b2da      	uxtb	r2, r3
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	685b      	ldr	r3, [r3, #4]
 8014158:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801415a:	693b      	ldr	r3, [r7, #16]
 801415c:	7b1a      	ldrb	r2, [r3, #12]
 801415e:	7b5b      	ldrb	r3, [r3, #13]
 8014160:	021b      	lsls	r3, r3, #8
 8014162:	4313      	orrs	r3, r2
 8014164:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014166:	693b      	ldr	r3, [r7, #16]
 8014168:	781b      	ldrb	r3, [r3, #0]
 801416a:	f003 0301 	and.w	r3, r3, #1
 801416e:	2b00      	cmp	r3, #0
 8014170:	d023      	beq.n	80141ba <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014172:	693b      	ldr	r3, [r7, #16]
 8014174:	781b      	ldrb	r3, [r3, #0]
 8014176:	2b01      	cmp	r3, #1
 8014178:	d10f      	bne.n	801419a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801417a:	693b      	ldr	r3, [r7, #16]
 801417c:	785b      	ldrb	r3, [r3, #1]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d11b      	bne.n	80141ba <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014182:	693b      	ldr	r3, [r7, #16]
 8014184:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014186:	2b5e      	cmp	r3, #94	; 0x5e
 8014188:	d117      	bne.n	80141ba <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	7b5b      	ldrb	r3, [r3, #13]
 801418e:	f043 0310 	orr.w	r3, r3, #16
 8014192:	b2da      	uxtb	r2, r3
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	735a      	strb	r2, [r3, #13]
 8014198:	e00f      	b.n	80141ba <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801419a:	693b      	ldr	r3, [r7, #16]
 801419c:	2206      	movs	r2, #6
 801419e:	4928      	ldr	r1, [pc, #160]	; (8014240 <ethernet_input+0x118>)
 80141a0:	4618      	mov	r0, r3
 80141a2:	f000 f8bb 	bl	801431c <memcmp>
 80141a6:	4603      	mov	r3, r0
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d106      	bne.n	80141ba <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	7b5b      	ldrb	r3, [r3, #13]
 80141b0:	f043 0308 	orr.w	r3, r3, #8
 80141b4:	b2da      	uxtb	r2, r3
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80141ba:	89fb      	ldrh	r3, [r7, #14]
 80141bc:	2b08      	cmp	r3, #8
 80141be:	d003      	beq.n	80141c8 <ethernet_input+0xa0>
 80141c0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80141c4:	d014      	beq.n	80141f0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80141c6:	e032      	b.n	801422e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80141ce:	f003 0308 	and.w	r3, r3, #8
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d024      	beq.n	8014220 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80141d6:	8afb      	ldrh	r3, [r7, #22]
 80141d8:	4619      	mov	r1, r3
 80141da:	6878      	ldr	r0, [r7, #4]
 80141dc:	f7f6 fa18 	bl	800a610 <pbuf_remove_header>
 80141e0:	4603      	mov	r3, r0
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d11e      	bne.n	8014224 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80141e6:	6839      	ldr	r1, [r7, #0]
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f7fe ff27 	bl	801303c <ip4_input>
      break;
 80141ee:	e013      	b.n	8014218 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80141f6:	f003 0308 	and.w	r3, r3, #8
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d014      	beq.n	8014228 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80141fe:	8afb      	ldrh	r3, [r7, #22]
 8014200:	4619      	mov	r1, r3
 8014202:	6878      	ldr	r0, [r7, #4]
 8014204:	f7f6 fa04 	bl	800a610 <pbuf_remove_header>
 8014208:	4603      	mov	r3, r0
 801420a:	2b00      	cmp	r3, #0
 801420c:	d10e      	bne.n	801422c <ethernet_input+0x104>
        etharp_input(p, netif);
 801420e:	6839      	ldr	r1, [r7, #0]
 8014210:	6878      	ldr	r0, [r7, #4]
 8014212:	f7fe f8c7 	bl	80123a4 <etharp_input>
      break;
 8014216:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014218:	2300      	movs	r3, #0
 801421a:	e00c      	b.n	8014236 <ethernet_input+0x10e>
    goto free_and_return;
 801421c:	bf00      	nop
 801421e:	e006      	b.n	801422e <ethernet_input+0x106>
        goto free_and_return;
 8014220:	bf00      	nop
 8014222:	e004      	b.n	801422e <ethernet_input+0x106>
        goto free_and_return;
 8014224:	bf00      	nop
 8014226:	e002      	b.n	801422e <ethernet_input+0x106>
        goto free_and_return;
 8014228:	bf00      	nop
 801422a:	e000      	b.n	801422e <ethernet_input+0x106>
        goto free_and_return;
 801422c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f7f6 fa74 	bl	800a71c <pbuf_free>
  return ERR_OK;
 8014234:	2300      	movs	r3, #0
}
 8014236:	4618      	mov	r0, r3
 8014238:	3718      	adds	r7, #24
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}
 801423e:	bf00      	nop
 8014240:	08059b74 	.word	0x08059b74

08014244 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014244:	b580      	push	{r7, lr}
 8014246:	b086      	sub	sp, #24
 8014248:	af00      	add	r7, sp, #0
 801424a:	60f8      	str	r0, [r7, #12]
 801424c:	60b9      	str	r1, [r7, #8]
 801424e:	607a      	str	r2, [r7, #4]
 8014250:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014252:	8c3b      	ldrh	r3, [r7, #32]
 8014254:	4618      	mov	r0, r3
 8014256:	f7f4 fce3 	bl	8008c20 <lwip_htons>
 801425a:	4603      	mov	r3, r0
 801425c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801425e:	210e      	movs	r1, #14
 8014260:	68b8      	ldr	r0, [r7, #8]
 8014262:	f7f6 f9c5 	bl	800a5f0 <pbuf_add_header>
 8014266:	4603      	mov	r3, r0
 8014268:	2b00      	cmp	r3, #0
 801426a:	d125      	bne.n	80142b8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801426c:	68bb      	ldr	r3, [r7, #8]
 801426e:	685b      	ldr	r3, [r3, #4]
 8014270:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014272:	693b      	ldr	r3, [r7, #16]
 8014274:	8afa      	ldrh	r2, [r7, #22]
 8014276:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014278:	693b      	ldr	r3, [r7, #16]
 801427a:	2206      	movs	r2, #6
 801427c:	6839      	ldr	r1, [r7, #0]
 801427e:	4618      	mov	r0, r3
 8014280:	f000 f85a 	bl	8014338 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014284:	693b      	ldr	r3, [r7, #16]
 8014286:	3306      	adds	r3, #6
 8014288:	2206      	movs	r2, #6
 801428a:	6879      	ldr	r1, [r7, #4]
 801428c:	4618      	mov	r0, r3
 801428e:	f000 f853 	bl	8014338 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014298:	2b06      	cmp	r3, #6
 801429a:	d006      	beq.n	80142aa <ethernet_output+0x66>
 801429c:	4b0a      	ldr	r3, [pc, #40]	; (80142c8 <ethernet_output+0x84>)
 801429e:	f44f 7299 	mov.w	r2, #306	; 0x132
 80142a2:	490a      	ldr	r1, [pc, #40]	; (80142cc <ethernet_output+0x88>)
 80142a4:	480a      	ldr	r0, [pc, #40]	; (80142d0 <ethernet_output+0x8c>)
 80142a6:	f000 f877 	bl	8014398 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	699b      	ldr	r3, [r3, #24]
 80142ae:	68b9      	ldr	r1, [r7, #8]
 80142b0:	68f8      	ldr	r0, [r7, #12]
 80142b2:	4798      	blx	r3
 80142b4:	4603      	mov	r3, r0
 80142b6:	e002      	b.n	80142be <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80142b8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80142ba:	f06f 0301 	mvn.w	r3, #1
}
 80142be:	4618      	mov	r0, r3
 80142c0:	3718      	adds	r7, #24
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd80      	pop	{r7, pc}
 80142c6:	bf00      	nop
 80142c8:	0801832c 	.word	0x0801832c
 80142cc:	08018364 	.word	0x08018364
 80142d0:	08018398 	.word	0x08018398

080142d4 <__libc_init_array>:
 80142d4:	b570      	push	{r4, r5, r6, lr}
 80142d6:	4d0d      	ldr	r5, [pc, #52]	; (801430c <__libc_init_array+0x38>)
 80142d8:	4c0d      	ldr	r4, [pc, #52]	; (8014310 <__libc_init_array+0x3c>)
 80142da:	1b64      	subs	r4, r4, r5
 80142dc:	10a4      	asrs	r4, r4, #2
 80142de:	2600      	movs	r6, #0
 80142e0:	42a6      	cmp	r6, r4
 80142e2:	d109      	bne.n	80142f8 <__libc_init_array+0x24>
 80142e4:	4d0b      	ldr	r5, [pc, #44]	; (8014314 <__libc_init_array+0x40>)
 80142e6:	4c0c      	ldr	r4, [pc, #48]	; (8014318 <__libc_init_array+0x44>)
 80142e8:	f001 fa90 	bl	801580c <_init>
 80142ec:	1b64      	subs	r4, r4, r5
 80142ee:	10a4      	asrs	r4, r4, #2
 80142f0:	2600      	movs	r6, #0
 80142f2:	42a6      	cmp	r6, r4
 80142f4:	d105      	bne.n	8014302 <__libc_init_array+0x2e>
 80142f6:	bd70      	pop	{r4, r5, r6, pc}
 80142f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80142fc:	4798      	blx	r3
 80142fe:	3601      	adds	r6, #1
 8014300:	e7ee      	b.n	80142e0 <__libc_init_array+0xc>
 8014302:	f855 3b04 	ldr.w	r3, [r5], #4
 8014306:	4798      	blx	r3
 8014308:	3601      	adds	r6, #1
 801430a:	e7f2      	b.n	80142f2 <__libc_init_array+0x1e>
 801430c:	08059cd8 	.word	0x08059cd8
 8014310:	08059cd8 	.word	0x08059cd8
 8014314:	08059cd8 	.word	0x08059cd8
 8014318:	08059cdc 	.word	0x08059cdc

0801431c <memcmp>:
 801431c:	b530      	push	{r4, r5, lr}
 801431e:	3901      	subs	r1, #1
 8014320:	2400      	movs	r4, #0
 8014322:	42a2      	cmp	r2, r4
 8014324:	d101      	bne.n	801432a <memcmp+0xe>
 8014326:	2000      	movs	r0, #0
 8014328:	e005      	b.n	8014336 <memcmp+0x1a>
 801432a:	5d03      	ldrb	r3, [r0, r4]
 801432c:	3401      	adds	r4, #1
 801432e:	5d0d      	ldrb	r5, [r1, r4]
 8014330:	42ab      	cmp	r3, r5
 8014332:	d0f6      	beq.n	8014322 <memcmp+0x6>
 8014334:	1b58      	subs	r0, r3, r5
 8014336:	bd30      	pop	{r4, r5, pc}

08014338 <memcpy>:
 8014338:	440a      	add	r2, r1
 801433a:	4291      	cmp	r1, r2
 801433c:	f100 33ff 	add.w	r3, r0, #4294967295
 8014340:	d100      	bne.n	8014344 <memcpy+0xc>
 8014342:	4770      	bx	lr
 8014344:	b510      	push	{r4, lr}
 8014346:	f811 4b01 	ldrb.w	r4, [r1], #1
 801434a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801434e:	4291      	cmp	r1, r2
 8014350:	d1f9      	bne.n	8014346 <memcpy+0xe>
 8014352:	bd10      	pop	{r4, pc}

08014354 <memmove>:
 8014354:	4288      	cmp	r0, r1
 8014356:	b510      	push	{r4, lr}
 8014358:	eb01 0402 	add.w	r4, r1, r2
 801435c:	d902      	bls.n	8014364 <memmove+0x10>
 801435e:	4284      	cmp	r4, r0
 8014360:	4623      	mov	r3, r4
 8014362:	d807      	bhi.n	8014374 <memmove+0x20>
 8014364:	1e43      	subs	r3, r0, #1
 8014366:	42a1      	cmp	r1, r4
 8014368:	d008      	beq.n	801437c <memmove+0x28>
 801436a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801436e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014372:	e7f8      	b.n	8014366 <memmove+0x12>
 8014374:	4402      	add	r2, r0
 8014376:	4601      	mov	r1, r0
 8014378:	428a      	cmp	r2, r1
 801437a:	d100      	bne.n	801437e <memmove+0x2a>
 801437c:	bd10      	pop	{r4, pc}
 801437e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014386:	e7f7      	b.n	8014378 <memmove+0x24>

08014388 <memset>:
 8014388:	4402      	add	r2, r0
 801438a:	4603      	mov	r3, r0
 801438c:	4293      	cmp	r3, r2
 801438e:	d100      	bne.n	8014392 <memset+0xa>
 8014390:	4770      	bx	lr
 8014392:	f803 1b01 	strb.w	r1, [r3], #1
 8014396:	e7f9      	b.n	801438c <memset+0x4>

08014398 <iprintf>:
 8014398:	b40f      	push	{r0, r1, r2, r3}
 801439a:	4b0a      	ldr	r3, [pc, #40]	; (80143c4 <iprintf+0x2c>)
 801439c:	b513      	push	{r0, r1, r4, lr}
 801439e:	681c      	ldr	r4, [r3, #0]
 80143a0:	b124      	cbz	r4, 80143ac <iprintf+0x14>
 80143a2:	69a3      	ldr	r3, [r4, #24]
 80143a4:	b913      	cbnz	r3, 80143ac <iprintf+0x14>
 80143a6:	4620      	mov	r0, r4
 80143a8:	f000 fadc 	bl	8014964 <__sinit>
 80143ac:	ab05      	add	r3, sp, #20
 80143ae:	9a04      	ldr	r2, [sp, #16]
 80143b0:	68a1      	ldr	r1, [r4, #8]
 80143b2:	9301      	str	r3, [sp, #4]
 80143b4:	4620      	mov	r0, r4
 80143b6:	f000 fe23 	bl	8015000 <_vfiprintf_r>
 80143ba:	b002      	add	sp, #8
 80143bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143c0:	b004      	add	sp, #16
 80143c2:	4770      	bx	lr
 80143c4:	20000048 	.word	0x20000048

080143c8 <_puts_r>:
 80143c8:	b570      	push	{r4, r5, r6, lr}
 80143ca:	460e      	mov	r6, r1
 80143cc:	4605      	mov	r5, r0
 80143ce:	b118      	cbz	r0, 80143d8 <_puts_r+0x10>
 80143d0:	6983      	ldr	r3, [r0, #24]
 80143d2:	b90b      	cbnz	r3, 80143d8 <_puts_r+0x10>
 80143d4:	f000 fac6 	bl	8014964 <__sinit>
 80143d8:	69ab      	ldr	r3, [r5, #24]
 80143da:	68ac      	ldr	r4, [r5, #8]
 80143dc:	b913      	cbnz	r3, 80143e4 <_puts_r+0x1c>
 80143de:	4628      	mov	r0, r5
 80143e0:	f000 fac0 	bl	8014964 <__sinit>
 80143e4:	4b2c      	ldr	r3, [pc, #176]	; (8014498 <_puts_r+0xd0>)
 80143e6:	429c      	cmp	r4, r3
 80143e8:	d120      	bne.n	801442c <_puts_r+0x64>
 80143ea:	686c      	ldr	r4, [r5, #4]
 80143ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80143ee:	07db      	lsls	r3, r3, #31
 80143f0:	d405      	bmi.n	80143fe <_puts_r+0x36>
 80143f2:	89a3      	ldrh	r3, [r4, #12]
 80143f4:	0598      	lsls	r0, r3, #22
 80143f6:	d402      	bmi.n	80143fe <_puts_r+0x36>
 80143f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80143fa:	f000 fb63 	bl	8014ac4 <__retarget_lock_acquire_recursive>
 80143fe:	89a3      	ldrh	r3, [r4, #12]
 8014400:	0719      	lsls	r1, r3, #28
 8014402:	d51d      	bpl.n	8014440 <_puts_r+0x78>
 8014404:	6923      	ldr	r3, [r4, #16]
 8014406:	b1db      	cbz	r3, 8014440 <_puts_r+0x78>
 8014408:	3e01      	subs	r6, #1
 801440a:	68a3      	ldr	r3, [r4, #8]
 801440c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014410:	3b01      	subs	r3, #1
 8014412:	60a3      	str	r3, [r4, #8]
 8014414:	bb39      	cbnz	r1, 8014466 <_puts_r+0x9e>
 8014416:	2b00      	cmp	r3, #0
 8014418:	da38      	bge.n	801448c <_puts_r+0xc4>
 801441a:	4622      	mov	r2, r4
 801441c:	210a      	movs	r1, #10
 801441e:	4628      	mov	r0, r5
 8014420:	f000 f8a8 	bl	8014574 <__swbuf_r>
 8014424:	3001      	adds	r0, #1
 8014426:	d011      	beq.n	801444c <_puts_r+0x84>
 8014428:	250a      	movs	r5, #10
 801442a:	e011      	b.n	8014450 <_puts_r+0x88>
 801442c:	4b1b      	ldr	r3, [pc, #108]	; (801449c <_puts_r+0xd4>)
 801442e:	429c      	cmp	r4, r3
 8014430:	d101      	bne.n	8014436 <_puts_r+0x6e>
 8014432:	68ac      	ldr	r4, [r5, #8]
 8014434:	e7da      	b.n	80143ec <_puts_r+0x24>
 8014436:	4b1a      	ldr	r3, [pc, #104]	; (80144a0 <_puts_r+0xd8>)
 8014438:	429c      	cmp	r4, r3
 801443a:	bf08      	it	eq
 801443c:	68ec      	ldreq	r4, [r5, #12]
 801443e:	e7d5      	b.n	80143ec <_puts_r+0x24>
 8014440:	4621      	mov	r1, r4
 8014442:	4628      	mov	r0, r5
 8014444:	f000 f8e8 	bl	8014618 <__swsetup_r>
 8014448:	2800      	cmp	r0, #0
 801444a:	d0dd      	beq.n	8014408 <_puts_r+0x40>
 801444c:	f04f 35ff 	mov.w	r5, #4294967295
 8014450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014452:	07da      	lsls	r2, r3, #31
 8014454:	d405      	bmi.n	8014462 <_puts_r+0x9a>
 8014456:	89a3      	ldrh	r3, [r4, #12]
 8014458:	059b      	lsls	r3, r3, #22
 801445a:	d402      	bmi.n	8014462 <_puts_r+0x9a>
 801445c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801445e:	f000 fb32 	bl	8014ac6 <__retarget_lock_release_recursive>
 8014462:	4628      	mov	r0, r5
 8014464:	bd70      	pop	{r4, r5, r6, pc}
 8014466:	2b00      	cmp	r3, #0
 8014468:	da04      	bge.n	8014474 <_puts_r+0xac>
 801446a:	69a2      	ldr	r2, [r4, #24]
 801446c:	429a      	cmp	r2, r3
 801446e:	dc06      	bgt.n	801447e <_puts_r+0xb6>
 8014470:	290a      	cmp	r1, #10
 8014472:	d004      	beq.n	801447e <_puts_r+0xb6>
 8014474:	6823      	ldr	r3, [r4, #0]
 8014476:	1c5a      	adds	r2, r3, #1
 8014478:	6022      	str	r2, [r4, #0]
 801447a:	7019      	strb	r1, [r3, #0]
 801447c:	e7c5      	b.n	801440a <_puts_r+0x42>
 801447e:	4622      	mov	r2, r4
 8014480:	4628      	mov	r0, r5
 8014482:	f000 f877 	bl	8014574 <__swbuf_r>
 8014486:	3001      	adds	r0, #1
 8014488:	d1bf      	bne.n	801440a <_puts_r+0x42>
 801448a:	e7df      	b.n	801444c <_puts_r+0x84>
 801448c:	6823      	ldr	r3, [r4, #0]
 801448e:	250a      	movs	r5, #10
 8014490:	1c5a      	adds	r2, r3, #1
 8014492:	6022      	str	r2, [r4, #0]
 8014494:	701d      	strb	r5, [r3, #0]
 8014496:	e7db      	b.n	8014450 <_puts_r+0x88>
 8014498:	08059c5c 	.word	0x08059c5c
 801449c:	08059c7c 	.word	0x08059c7c
 80144a0:	08059c3c 	.word	0x08059c3c

080144a4 <puts>:
 80144a4:	4b02      	ldr	r3, [pc, #8]	; (80144b0 <puts+0xc>)
 80144a6:	4601      	mov	r1, r0
 80144a8:	6818      	ldr	r0, [r3, #0]
 80144aa:	f7ff bf8d 	b.w	80143c8 <_puts_r>
 80144ae:	bf00      	nop
 80144b0:	20000048 	.word	0x20000048

080144b4 <rand>:
 80144b4:	4b17      	ldr	r3, [pc, #92]	; (8014514 <rand+0x60>)
 80144b6:	b510      	push	{r4, lr}
 80144b8:	681c      	ldr	r4, [r3, #0]
 80144ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80144bc:	b9b3      	cbnz	r3, 80144ec <rand+0x38>
 80144be:	2018      	movs	r0, #24
 80144c0:	f000 fb66 	bl	8014b90 <malloc>
 80144c4:	63a0      	str	r0, [r4, #56]	; 0x38
 80144c6:	b928      	cbnz	r0, 80144d4 <rand+0x20>
 80144c8:	4602      	mov	r2, r0
 80144ca:	4b13      	ldr	r3, [pc, #76]	; (8014518 <rand+0x64>)
 80144cc:	4813      	ldr	r0, [pc, #76]	; (801451c <rand+0x68>)
 80144ce:	214e      	movs	r1, #78	; 0x4e
 80144d0:	f000 f910 	bl	80146f4 <__assert_func>
 80144d4:	4a12      	ldr	r2, [pc, #72]	; (8014520 <rand+0x6c>)
 80144d6:	4b13      	ldr	r3, [pc, #76]	; (8014524 <rand+0x70>)
 80144d8:	e9c0 2300 	strd	r2, r3, [r0]
 80144dc:	4b12      	ldr	r3, [pc, #72]	; (8014528 <rand+0x74>)
 80144de:	6083      	str	r3, [r0, #8]
 80144e0:	230b      	movs	r3, #11
 80144e2:	8183      	strh	r3, [r0, #12]
 80144e4:	2201      	movs	r2, #1
 80144e6:	2300      	movs	r3, #0
 80144e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80144ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80144ee:	480f      	ldr	r0, [pc, #60]	; (801452c <rand+0x78>)
 80144f0:	690a      	ldr	r2, [r1, #16]
 80144f2:	694b      	ldr	r3, [r1, #20]
 80144f4:	4c0e      	ldr	r4, [pc, #56]	; (8014530 <rand+0x7c>)
 80144f6:	4350      	muls	r0, r2
 80144f8:	fb04 0003 	mla	r0, r4, r3, r0
 80144fc:	fba2 3404 	umull	r3, r4, r2, r4
 8014500:	1c5a      	adds	r2, r3, #1
 8014502:	4404      	add	r4, r0
 8014504:	f144 0000 	adc.w	r0, r4, #0
 8014508:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801450c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014510:	bd10      	pop	{r4, pc}
 8014512:	bf00      	nop
 8014514:	20000048 	.word	0x20000048
 8014518:	08059b88 	.word	0x08059b88
 801451c:	08059b9f 	.word	0x08059b9f
 8014520:	abcd330e 	.word	0xabcd330e
 8014524:	e66d1234 	.word	0xe66d1234
 8014528:	0005deec 	.word	0x0005deec
 801452c:	5851f42d 	.word	0x5851f42d
 8014530:	4c957f2d 	.word	0x4c957f2d

08014534 <siprintf>:
 8014534:	b40e      	push	{r1, r2, r3}
 8014536:	b500      	push	{lr}
 8014538:	b09c      	sub	sp, #112	; 0x70
 801453a:	ab1d      	add	r3, sp, #116	; 0x74
 801453c:	9002      	str	r0, [sp, #8]
 801453e:	9006      	str	r0, [sp, #24]
 8014540:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014544:	4809      	ldr	r0, [pc, #36]	; (801456c <siprintf+0x38>)
 8014546:	9107      	str	r1, [sp, #28]
 8014548:	9104      	str	r1, [sp, #16]
 801454a:	4909      	ldr	r1, [pc, #36]	; (8014570 <siprintf+0x3c>)
 801454c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014550:	9105      	str	r1, [sp, #20]
 8014552:	6800      	ldr	r0, [r0, #0]
 8014554:	9301      	str	r3, [sp, #4]
 8014556:	a902      	add	r1, sp, #8
 8014558:	f000 fc28 	bl	8014dac <_svfiprintf_r>
 801455c:	9b02      	ldr	r3, [sp, #8]
 801455e:	2200      	movs	r2, #0
 8014560:	701a      	strb	r2, [r3, #0]
 8014562:	b01c      	add	sp, #112	; 0x70
 8014564:	f85d eb04 	ldr.w	lr, [sp], #4
 8014568:	b003      	add	sp, #12
 801456a:	4770      	bx	lr
 801456c:	20000048 	.word	0x20000048
 8014570:	ffff0208 	.word	0xffff0208

08014574 <__swbuf_r>:
 8014574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014576:	460e      	mov	r6, r1
 8014578:	4614      	mov	r4, r2
 801457a:	4605      	mov	r5, r0
 801457c:	b118      	cbz	r0, 8014586 <__swbuf_r+0x12>
 801457e:	6983      	ldr	r3, [r0, #24]
 8014580:	b90b      	cbnz	r3, 8014586 <__swbuf_r+0x12>
 8014582:	f000 f9ef 	bl	8014964 <__sinit>
 8014586:	4b21      	ldr	r3, [pc, #132]	; (801460c <__swbuf_r+0x98>)
 8014588:	429c      	cmp	r4, r3
 801458a:	d12b      	bne.n	80145e4 <__swbuf_r+0x70>
 801458c:	686c      	ldr	r4, [r5, #4]
 801458e:	69a3      	ldr	r3, [r4, #24]
 8014590:	60a3      	str	r3, [r4, #8]
 8014592:	89a3      	ldrh	r3, [r4, #12]
 8014594:	071a      	lsls	r2, r3, #28
 8014596:	d52f      	bpl.n	80145f8 <__swbuf_r+0x84>
 8014598:	6923      	ldr	r3, [r4, #16]
 801459a:	b36b      	cbz	r3, 80145f8 <__swbuf_r+0x84>
 801459c:	6923      	ldr	r3, [r4, #16]
 801459e:	6820      	ldr	r0, [r4, #0]
 80145a0:	1ac0      	subs	r0, r0, r3
 80145a2:	6963      	ldr	r3, [r4, #20]
 80145a4:	b2f6      	uxtb	r6, r6
 80145a6:	4283      	cmp	r3, r0
 80145a8:	4637      	mov	r7, r6
 80145aa:	dc04      	bgt.n	80145b6 <__swbuf_r+0x42>
 80145ac:	4621      	mov	r1, r4
 80145ae:	4628      	mov	r0, r5
 80145b0:	f000 f944 	bl	801483c <_fflush_r>
 80145b4:	bb30      	cbnz	r0, 8014604 <__swbuf_r+0x90>
 80145b6:	68a3      	ldr	r3, [r4, #8]
 80145b8:	3b01      	subs	r3, #1
 80145ba:	60a3      	str	r3, [r4, #8]
 80145bc:	6823      	ldr	r3, [r4, #0]
 80145be:	1c5a      	adds	r2, r3, #1
 80145c0:	6022      	str	r2, [r4, #0]
 80145c2:	701e      	strb	r6, [r3, #0]
 80145c4:	6963      	ldr	r3, [r4, #20]
 80145c6:	3001      	adds	r0, #1
 80145c8:	4283      	cmp	r3, r0
 80145ca:	d004      	beq.n	80145d6 <__swbuf_r+0x62>
 80145cc:	89a3      	ldrh	r3, [r4, #12]
 80145ce:	07db      	lsls	r3, r3, #31
 80145d0:	d506      	bpl.n	80145e0 <__swbuf_r+0x6c>
 80145d2:	2e0a      	cmp	r6, #10
 80145d4:	d104      	bne.n	80145e0 <__swbuf_r+0x6c>
 80145d6:	4621      	mov	r1, r4
 80145d8:	4628      	mov	r0, r5
 80145da:	f000 f92f 	bl	801483c <_fflush_r>
 80145de:	b988      	cbnz	r0, 8014604 <__swbuf_r+0x90>
 80145e0:	4638      	mov	r0, r7
 80145e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145e4:	4b0a      	ldr	r3, [pc, #40]	; (8014610 <__swbuf_r+0x9c>)
 80145e6:	429c      	cmp	r4, r3
 80145e8:	d101      	bne.n	80145ee <__swbuf_r+0x7a>
 80145ea:	68ac      	ldr	r4, [r5, #8]
 80145ec:	e7cf      	b.n	801458e <__swbuf_r+0x1a>
 80145ee:	4b09      	ldr	r3, [pc, #36]	; (8014614 <__swbuf_r+0xa0>)
 80145f0:	429c      	cmp	r4, r3
 80145f2:	bf08      	it	eq
 80145f4:	68ec      	ldreq	r4, [r5, #12]
 80145f6:	e7ca      	b.n	801458e <__swbuf_r+0x1a>
 80145f8:	4621      	mov	r1, r4
 80145fa:	4628      	mov	r0, r5
 80145fc:	f000 f80c 	bl	8014618 <__swsetup_r>
 8014600:	2800      	cmp	r0, #0
 8014602:	d0cb      	beq.n	801459c <__swbuf_r+0x28>
 8014604:	f04f 37ff 	mov.w	r7, #4294967295
 8014608:	e7ea      	b.n	80145e0 <__swbuf_r+0x6c>
 801460a:	bf00      	nop
 801460c:	08059c5c 	.word	0x08059c5c
 8014610:	08059c7c 	.word	0x08059c7c
 8014614:	08059c3c 	.word	0x08059c3c

08014618 <__swsetup_r>:
 8014618:	4b32      	ldr	r3, [pc, #200]	; (80146e4 <__swsetup_r+0xcc>)
 801461a:	b570      	push	{r4, r5, r6, lr}
 801461c:	681d      	ldr	r5, [r3, #0]
 801461e:	4606      	mov	r6, r0
 8014620:	460c      	mov	r4, r1
 8014622:	b125      	cbz	r5, 801462e <__swsetup_r+0x16>
 8014624:	69ab      	ldr	r3, [r5, #24]
 8014626:	b913      	cbnz	r3, 801462e <__swsetup_r+0x16>
 8014628:	4628      	mov	r0, r5
 801462a:	f000 f99b 	bl	8014964 <__sinit>
 801462e:	4b2e      	ldr	r3, [pc, #184]	; (80146e8 <__swsetup_r+0xd0>)
 8014630:	429c      	cmp	r4, r3
 8014632:	d10f      	bne.n	8014654 <__swsetup_r+0x3c>
 8014634:	686c      	ldr	r4, [r5, #4]
 8014636:	89a3      	ldrh	r3, [r4, #12]
 8014638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801463c:	0719      	lsls	r1, r3, #28
 801463e:	d42c      	bmi.n	801469a <__swsetup_r+0x82>
 8014640:	06dd      	lsls	r5, r3, #27
 8014642:	d411      	bmi.n	8014668 <__swsetup_r+0x50>
 8014644:	2309      	movs	r3, #9
 8014646:	6033      	str	r3, [r6, #0]
 8014648:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801464c:	81a3      	strh	r3, [r4, #12]
 801464e:	f04f 30ff 	mov.w	r0, #4294967295
 8014652:	e03e      	b.n	80146d2 <__swsetup_r+0xba>
 8014654:	4b25      	ldr	r3, [pc, #148]	; (80146ec <__swsetup_r+0xd4>)
 8014656:	429c      	cmp	r4, r3
 8014658:	d101      	bne.n	801465e <__swsetup_r+0x46>
 801465a:	68ac      	ldr	r4, [r5, #8]
 801465c:	e7eb      	b.n	8014636 <__swsetup_r+0x1e>
 801465e:	4b24      	ldr	r3, [pc, #144]	; (80146f0 <__swsetup_r+0xd8>)
 8014660:	429c      	cmp	r4, r3
 8014662:	bf08      	it	eq
 8014664:	68ec      	ldreq	r4, [r5, #12]
 8014666:	e7e6      	b.n	8014636 <__swsetup_r+0x1e>
 8014668:	0758      	lsls	r0, r3, #29
 801466a:	d512      	bpl.n	8014692 <__swsetup_r+0x7a>
 801466c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801466e:	b141      	cbz	r1, 8014682 <__swsetup_r+0x6a>
 8014670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014674:	4299      	cmp	r1, r3
 8014676:	d002      	beq.n	801467e <__swsetup_r+0x66>
 8014678:	4630      	mov	r0, r6
 801467a:	f000 fa91 	bl	8014ba0 <_free_r>
 801467e:	2300      	movs	r3, #0
 8014680:	6363      	str	r3, [r4, #52]	; 0x34
 8014682:	89a3      	ldrh	r3, [r4, #12]
 8014684:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014688:	81a3      	strh	r3, [r4, #12]
 801468a:	2300      	movs	r3, #0
 801468c:	6063      	str	r3, [r4, #4]
 801468e:	6923      	ldr	r3, [r4, #16]
 8014690:	6023      	str	r3, [r4, #0]
 8014692:	89a3      	ldrh	r3, [r4, #12]
 8014694:	f043 0308 	orr.w	r3, r3, #8
 8014698:	81a3      	strh	r3, [r4, #12]
 801469a:	6923      	ldr	r3, [r4, #16]
 801469c:	b94b      	cbnz	r3, 80146b2 <__swsetup_r+0x9a>
 801469e:	89a3      	ldrh	r3, [r4, #12]
 80146a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80146a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80146a8:	d003      	beq.n	80146b2 <__swsetup_r+0x9a>
 80146aa:	4621      	mov	r1, r4
 80146ac:	4630      	mov	r0, r6
 80146ae:	f000 fa2f 	bl	8014b10 <__smakebuf_r>
 80146b2:	89a0      	ldrh	r0, [r4, #12]
 80146b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80146b8:	f010 0301 	ands.w	r3, r0, #1
 80146bc:	d00a      	beq.n	80146d4 <__swsetup_r+0xbc>
 80146be:	2300      	movs	r3, #0
 80146c0:	60a3      	str	r3, [r4, #8]
 80146c2:	6963      	ldr	r3, [r4, #20]
 80146c4:	425b      	negs	r3, r3
 80146c6:	61a3      	str	r3, [r4, #24]
 80146c8:	6923      	ldr	r3, [r4, #16]
 80146ca:	b943      	cbnz	r3, 80146de <__swsetup_r+0xc6>
 80146cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80146d0:	d1ba      	bne.n	8014648 <__swsetup_r+0x30>
 80146d2:	bd70      	pop	{r4, r5, r6, pc}
 80146d4:	0781      	lsls	r1, r0, #30
 80146d6:	bf58      	it	pl
 80146d8:	6963      	ldrpl	r3, [r4, #20]
 80146da:	60a3      	str	r3, [r4, #8]
 80146dc:	e7f4      	b.n	80146c8 <__swsetup_r+0xb0>
 80146de:	2000      	movs	r0, #0
 80146e0:	e7f7      	b.n	80146d2 <__swsetup_r+0xba>
 80146e2:	bf00      	nop
 80146e4:	20000048 	.word	0x20000048
 80146e8:	08059c5c 	.word	0x08059c5c
 80146ec:	08059c7c 	.word	0x08059c7c
 80146f0:	08059c3c 	.word	0x08059c3c

080146f4 <__assert_func>:
 80146f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80146f6:	4614      	mov	r4, r2
 80146f8:	461a      	mov	r2, r3
 80146fa:	4b09      	ldr	r3, [pc, #36]	; (8014720 <__assert_func+0x2c>)
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	4605      	mov	r5, r0
 8014700:	68d8      	ldr	r0, [r3, #12]
 8014702:	b14c      	cbz	r4, 8014718 <__assert_func+0x24>
 8014704:	4b07      	ldr	r3, [pc, #28]	; (8014724 <__assert_func+0x30>)
 8014706:	9100      	str	r1, [sp, #0]
 8014708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801470c:	4906      	ldr	r1, [pc, #24]	; (8014728 <__assert_func+0x34>)
 801470e:	462b      	mov	r3, r5
 8014710:	f000 f9a6 	bl	8014a60 <fiprintf>
 8014714:	f000 ff9e 	bl	8015654 <abort>
 8014718:	4b04      	ldr	r3, [pc, #16]	; (801472c <__assert_func+0x38>)
 801471a:	461c      	mov	r4, r3
 801471c:	e7f3      	b.n	8014706 <__assert_func+0x12>
 801471e:	bf00      	nop
 8014720:	20000048 	.word	0x20000048
 8014724:	08059bfe 	.word	0x08059bfe
 8014728:	08059c0b 	.word	0x08059c0b
 801472c:	08059c39 	.word	0x08059c39

08014730 <__sflush_r>:
 8014730:	898a      	ldrh	r2, [r1, #12]
 8014732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014736:	4605      	mov	r5, r0
 8014738:	0710      	lsls	r0, r2, #28
 801473a:	460c      	mov	r4, r1
 801473c:	d458      	bmi.n	80147f0 <__sflush_r+0xc0>
 801473e:	684b      	ldr	r3, [r1, #4]
 8014740:	2b00      	cmp	r3, #0
 8014742:	dc05      	bgt.n	8014750 <__sflush_r+0x20>
 8014744:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014746:	2b00      	cmp	r3, #0
 8014748:	dc02      	bgt.n	8014750 <__sflush_r+0x20>
 801474a:	2000      	movs	r0, #0
 801474c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014752:	2e00      	cmp	r6, #0
 8014754:	d0f9      	beq.n	801474a <__sflush_r+0x1a>
 8014756:	2300      	movs	r3, #0
 8014758:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801475c:	682f      	ldr	r7, [r5, #0]
 801475e:	602b      	str	r3, [r5, #0]
 8014760:	d032      	beq.n	80147c8 <__sflush_r+0x98>
 8014762:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014764:	89a3      	ldrh	r3, [r4, #12]
 8014766:	075a      	lsls	r2, r3, #29
 8014768:	d505      	bpl.n	8014776 <__sflush_r+0x46>
 801476a:	6863      	ldr	r3, [r4, #4]
 801476c:	1ac0      	subs	r0, r0, r3
 801476e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014770:	b10b      	cbz	r3, 8014776 <__sflush_r+0x46>
 8014772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014774:	1ac0      	subs	r0, r0, r3
 8014776:	2300      	movs	r3, #0
 8014778:	4602      	mov	r2, r0
 801477a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801477c:	6a21      	ldr	r1, [r4, #32]
 801477e:	4628      	mov	r0, r5
 8014780:	47b0      	blx	r6
 8014782:	1c43      	adds	r3, r0, #1
 8014784:	89a3      	ldrh	r3, [r4, #12]
 8014786:	d106      	bne.n	8014796 <__sflush_r+0x66>
 8014788:	6829      	ldr	r1, [r5, #0]
 801478a:	291d      	cmp	r1, #29
 801478c:	d82c      	bhi.n	80147e8 <__sflush_r+0xb8>
 801478e:	4a2a      	ldr	r2, [pc, #168]	; (8014838 <__sflush_r+0x108>)
 8014790:	40ca      	lsrs	r2, r1
 8014792:	07d6      	lsls	r6, r2, #31
 8014794:	d528      	bpl.n	80147e8 <__sflush_r+0xb8>
 8014796:	2200      	movs	r2, #0
 8014798:	6062      	str	r2, [r4, #4]
 801479a:	04d9      	lsls	r1, r3, #19
 801479c:	6922      	ldr	r2, [r4, #16]
 801479e:	6022      	str	r2, [r4, #0]
 80147a0:	d504      	bpl.n	80147ac <__sflush_r+0x7c>
 80147a2:	1c42      	adds	r2, r0, #1
 80147a4:	d101      	bne.n	80147aa <__sflush_r+0x7a>
 80147a6:	682b      	ldr	r3, [r5, #0]
 80147a8:	b903      	cbnz	r3, 80147ac <__sflush_r+0x7c>
 80147aa:	6560      	str	r0, [r4, #84]	; 0x54
 80147ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80147ae:	602f      	str	r7, [r5, #0]
 80147b0:	2900      	cmp	r1, #0
 80147b2:	d0ca      	beq.n	801474a <__sflush_r+0x1a>
 80147b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80147b8:	4299      	cmp	r1, r3
 80147ba:	d002      	beq.n	80147c2 <__sflush_r+0x92>
 80147bc:	4628      	mov	r0, r5
 80147be:	f000 f9ef 	bl	8014ba0 <_free_r>
 80147c2:	2000      	movs	r0, #0
 80147c4:	6360      	str	r0, [r4, #52]	; 0x34
 80147c6:	e7c1      	b.n	801474c <__sflush_r+0x1c>
 80147c8:	6a21      	ldr	r1, [r4, #32]
 80147ca:	2301      	movs	r3, #1
 80147cc:	4628      	mov	r0, r5
 80147ce:	47b0      	blx	r6
 80147d0:	1c41      	adds	r1, r0, #1
 80147d2:	d1c7      	bne.n	8014764 <__sflush_r+0x34>
 80147d4:	682b      	ldr	r3, [r5, #0]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d0c4      	beq.n	8014764 <__sflush_r+0x34>
 80147da:	2b1d      	cmp	r3, #29
 80147dc:	d001      	beq.n	80147e2 <__sflush_r+0xb2>
 80147de:	2b16      	cmp	r3, #22
 80147e0:	d101      	bne.n	80147e6 <__sflush_r+0xb6>
 80147e2:	602f      	str	r7, [r5, #0]
 80147e4:	e7b1      	b.n	801474a <__sflush_r+0x1a>
 80147e6:	89a3      	ldrh	r3, [r4, #12]
 80147e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147ec:	81a3      	strh	r3, [r4, #12]
 80147ee:	e7ad      	b.n	801474c <__sflush_r+0x1c>
 80147f0:	690f      	ldr	r7, [r1, #16]
 80147f2:	2f00      	cmp	r7, #0
 80147f4:	d0a9      	beq.n	801474a <__sflush_r+0x1a>
 80147f6:	0793      	lsls	r3, r2, #30
 80147f8:	680e      	ldr	r6, [r1, #0]
 80147fa:	bf08      	it	eq
 80147fc:	694b      	ldreq	r3, [r1, #20]
 80147fe:	600f      	str	r7, [r1, #0]
 8014800:	bf18      	it	ne
 8014802:	2300      	movne	r3, #0
 8014804:	eba6 0807 	sub.w	r8, r6, r7
 8014808:	608b      	str	r3, [r1, #8]
 801480a:	f1b8 0f00 	cmp.w	r8, #0
 801480e:	dd9c      	ble.n	801474a <__sflush_r+0x1a>
 8014810:	6a21      	ldr	r1, [r4, #32]
 8014812:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014814:	4643      	mov	r3, r8
 8014816:	463a      	mov	r2, r7
 8014818:	4628      	mov	r0, r5
 801481a:	47b0      	blx	r6
 801481c:	2800      	cmp	r0, #0
 801481e:	dc06      	bgt.n	801482e <__sflush_r+0xfe>
 8014820:	89a3      	ldrh	r3, [r4, #12]
 8014822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014826:	81a3      	strh	r3, [r4, #12]
 8014828:	f04f 30ff 	mov.w	r0, #4294967295
 801482c:	e78e      	b.n	801474c <__sflush_r+0x1c>
 801482e:	4407      	add	r7, r0
 8014830:	eba8 0800 	sub.w	r8, r8, r0
 8014834:	e7e9      	b.n	801480a <__sflush_r+0xda>
 8014836:	bf00      	nop
 8014838:	20400001 	.word	0x20400001

0801483c <_fflush_r>:
 801483c:	b538      	push	{r3, r4, r5, lr}
 801483e:	690b      	ldr	r3, [r1, #16]
 8014840:	4605      	mov	r5, r0
 8014842:	460c      	mov	r4, r1
 8014844:	b913      	cbnz	r3, 801484c <_fflush_r+0x10>
 8014846:	2500      	movs	r5, #0
 8014848:	4628      	mov	r0, r5
 801484a:	bd38      	pop	{r3, r4, r5, pc}
 801484c:	b118      	cbz	r0, 8014856 <_fflush_r+0x1a>
 801484e:	6983      	ldr	r3, [r0, #24]
 8014850:	b90b      	cbnz	r3, 8014856 <_fflush_r+0x1a>
 8014852:	f000 f887 	bl	8014964 <__sinit>
 8014856:	4b14      	ldr	r3, [pc, #80]	; (80148a8 <_fflush_r+0x6c>)
 8014858:	429c      	cmp	r4, r3
 801485a:	d11b      	bne.n	8014894 <_fflush_r+0x58>
 801485c:	686c      	ldr	r4, [r5, #4]
 801485e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d0ef      	beq.n	8014846 <_fflush_r+0xa>
 8014866:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014868:	07d0      	lsls	r0, r2, #31
 801486a:	d404      	bmi.n	8014876 <_fflush_r+0x3a>
 801486c:	0599      	lsls	r1, r3, #22
 801486e:	d402      	bmi.n	8014876 <_fflush_r+0x3a>
 8014870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014872:	f000 f927 	bl	8014ac4 <__retarget_lock_acquire_recursive>
 8014876:	4628      	mov	r0, r5
 8014878:	4621      	mov	r1, r4
 801487a:	f7ff ff59 	bl	8014730 <__sflush_r>
 801487e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014880:	07da      	lsls	r2, r3, #31
 8014882:	4605      	mov	r5, r0
 8014884:	d4e0      	bmi.n	8014848 <_fflush_r+0xc>
 8014886:	89a3      	ldrh	r3, [r4, #12]
 8014888:	059b      	lsls	r3, r3, #22
 801488a:	d4dd      	bmi.n	8014848 <_fflush_r+0xc>
 801488c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801488e:	f000 f91a 	bl	8014ac6 <__retarget_lock_release_recursive>
 8014892:	e7d9      	b.n	8014848 <_fflush_r+0xc>
 8014894:	4b05      	ldr	r3, [pc, #20]	; (80148ac <_fflush_r+0x70>)
 8014896:	429c      	cmp	r4, r3
 8014898:	d101      	bne.n	801489e <_fflush_r+0x62>
 801489a:	68ac      	ldr	r4, [r5, #8]
 801489c:	e7df      	b.n	801485e <_fflush_r+0x22>
 801489e:	4b04      	ldr	r3, [pc, #16]	; (80148b0 <_fflush_r+0x74>)
 80148a0:	429c      	cmp	r4, r3
 80148a2:	bf08      	it	eq
 80148a4:	68ec      	ldreq	r4, [r5, #12]
 80148a6:	e7da      	b.n	801485e <_fflush_r+0x22>
 80148a8:	08059c5c 	.word	0x08059c5c
 80148ac:	08059c7c 	.word	0x08059c7c
 80148b0:	08059c3c 	.word	0x08059c3c

080148b4 <std>:
 80148b4:	2300      	movs	r3, #0
 80148b6:	b510      	push	{r4, lr}
 80148b8:	4604      	mov	r4, r0
 80148ba:	e9c0 3300 	strd	r3, r3, [r0]
 80148be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80148c2:	6083      	str	r3, [r0, #8]
 80148c4:	8181      	strh	r1, [r0, #12]
 80148c6:	6643      	str	r3, [r0, #100]	; 0x64
 80148c8:	81c2      	strh	r2, [r0, #14]
 80148ca:	6183      	str	r3, [r0, #24]
 80148cc:	4619      	mov	r1, r3
 80148ce:	2208      	movs	r2, #8
 80148d0:	305c      	adds	r0, #92	; 0x5c
 80148d2:	f7ff fd59 	bl	8014388 <memset>
 80148d6:	4b05      	ldr	r3, [pc, #20]	; (80148ec <std+0x38>)
 80148d8:	6263      	str	r3, [r4, #36]	; 0x24
 80148da:	4b05      	ldr	r3, [pc, #20]	; (80148f0 <std+0x3c>)
 80148dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80148de:	4b05      	ldr	r3, [pc, #20]	; (80148f4 <std+0x40>)
 80148e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80148e2:	4b05      	ldr	r3, [pc, #20]	; (80148f8 <std+0x44>)
 80148e4:	6224      	str	r4, [r4, #32]
 80148e6:	6323      	str	r3, [r4, #48]	; 0x30
 80148e8:	bd10      	pop	{r4, pc}
 80148ea:	bf00      	nop
 80148ec:	080155a9 	.word	0x080155a9
 80148f0:	080155cb 	.word	0x080155cb
 80148f4:	08015603 	.word	0x08015603
 80148f8:	08015627 	.word	0x08015627

080148fc <_cleanup_r>:
 80148fc:	4901      	ldr	r1, [pc, #4]	; (8014904 <_cleanup_r+0x8>)
 80148fe:	f000 b8c1 	b.w	8014a84 <_fwalk_reent>
 8014902:	bf00      	nop
 8014904:	0801483d 	.word	0x0801483d

08014908 <__sfmoreglue>:
 8014908:	b570      	push	{r4, r5, r6, lr}
 801490a:	1e4a      	subs	r2, r1, #1
 801490c:	2568      	movs	r5, #104	; 0x68
 801490e:	4355      	muls	r5, r2
 8014910:	460e      	mov	r6, r1
 8014912:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014916:	f000 f993 	bl	8014c40 <_malloc_r>
 801491a:	4604      	mov	r4, r0
 801491c:	b140      	cbz	r0, 8014930 <__sfmoreglue+0x28>
 801491e:	2100      	movs	r1, #0
 8014920:	e9c0 1600 	strd	r1, r6, [r0]
 8014924:	300c      	adds	r0, #12
 8014926:	60a0      	str	r0, [r4, #8]
 8014928:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801492c:	f7ff fd2c 	bl	8014388 <memset>
 8014930:	4620      	mov	r0, r4
 8014932:	bd70      	pop	{r4, r5, r6, pc}

08014934 <__sfp_lock_acquire>:
 8014934:	4801      	ldr	r0, [pc, #4]	; (801493c <__sfp_lock_acquire+0x8>)
 8014936:	f000 b8c5 	b.w	8014ac4 <__retarget_lock_acquire_recursive>
 801493a:	bf00      	nop
 801493c:	200075f8 	.word	0x200075f8

08014940 <__sfp_lock_release>:
 8014940:	4801      	ldr	r0, [pc, #4]	; (8014948 <__sfp_lock_release+0x8>)
 8014942:	f000 b8c0 	b.w	8014ac6 <__retarget_lock_release_recursive>
 8014946:	bf00      	nop
 8014948:	200075f8 	.word	0x200075f8

0801494c <__sinit_lock_acquire>:
 801494c:	4801      	ldr	r0, [pc, #4]	; (8014954 <__sinit_lock_acquire+0x8>)
 801494e:	f000 b8b9 	b.w	8014ac4 <__retarget_lock_acquire_recursive>
 8014952:	bf00      	nop
 8014954:	200075f3 	.word	0x200075f3

08014958 <__sinit_lock_release>:
 8014958:	4801      	ldr	r0, [pc, #4]	; (8014960 <__sinit_lock_release+0x8>)
 801495a:	f000 b8b4 	b.w	8014ac6 <__retarget_lock_release_recursive>
 801495e:	bf00      	nop
 8014960:	200075f3 	.word	0x200075f3

08014964 <__sinit>:
 8014964:	b510      	push	{r4, lr}
 8014966:	4604      	mov	r4, r0
 8014968:	f7ff fff0 	bl	801494c <__sinit_lock_acquire>
 801496c:	69a3      	ldr	r3, [r4, #24]
 801496e:	b11b      	cbz	r3, 8014978 <__sinit+0x14>
 8014970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014974:	f7ff bff0 	b.w	8014958 <__sinit_lock_release>
 8014978:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801497c:	6523      	str	r3, [r4, #80]	; 0x50
 801497e:	4b13      	ldr	r3, [pc, #76]	; (80149cc <__sinit+0x68>)
 8014980:	4a13      	ldr	r2, [pc, #76]	; (80149d0 <__sinit+0x6c>)
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	62a2      	str	r2, [r4, #40]	; 0x28
 8014986:	42a3      	cmp	r3, r4
 8014988:	bf04      	itt	eq
 801498a:	2301      	moveq	r3, #1
 801498c:	61a3      	streq	r3, [r4, #24]
 801498e:	4620      	mov	r0, r4
 8014990:	f000 f820 	bl	80149d4 <__sfp>
 8014994:	6060      	str	r0, [r4, #4]
 8014996:	4620      	mov	r0, r4
 8014998:	f000 f81c 	bl	80149d4 <__sfp>
 801499c:	60a0      	str	r0, [r4, #8]
 801499e:	4620      	mov	r0, r4
 80149a0:	f000 f818 	bl	80149d4 <__sfp>
 80149a4:	2200      	movs	r2, #0
 80149a6:	60e0      	str	r0, [r4, #12]
 80149a8:	2104      	movs	r1, #4
 80149aa:	6860      	ldr	r0, [r4, #4]
 80149ac:	f7ff ff82 	bl	80148b4 <std>
 80149b0:	68a0      	ldr	r0, [r4, #8]
 80149b2:	2201      	movs	r2, #1
 80149b4:	2109      	movs	r1, #9
 80149b6:	f7ff ff7d 	bl	80148b4 <std>
 80149ba:	68e0      	ldr	r0, [r4, #12]
 80149bc:	2202      	movs	r2, #2
 80149be:	2112      	movs	r1, #18
 80149c0:	f7ff ff78 	bl	80148b4 <std>
 80149c4:	2301      	movs	r3, #1
 80149c6:	61a3      	str	r3, [r4, #24]
 80149c8:	e7d2      	b.n	8014970 <__sinit+0xc>
 80149ca:	bf00      	nop
 80149cc:	08059b84 	.word	0x08059b84
 80149d0:	080148fd 	.word	0x080148fd

080149d4 <__sfp>:
 80149d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149d6:	4607      	mov	r7, r0
 80149d8:	f7ff ffac 	bl	8014934 <__sfp_lock_acquire>
 80149dc:	4b1e      	ldr	r3, [pc, #120]	; (8014a58 <__sfp+0x84>)
 80149de:	681e      	ldr	r6, [r3, #0]
 80149e0:	69b3      	ldr	r3, [r6, #24]
 80149e2:	b913      	cbnz	r3, 80149ea <__sfp+0x16>
 80149e4:	4630      	mov	r0, r6
 80149e6:	f7ff ffbd 	bl	8014964 <__sinit>
 80149ea:	3648      	adds	r6, #72	; 0x48
 80149ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80149f0:	3b01      	subs	r3, #1
 80149f2:	d503      	bpl.n	80149fc <__sfp+0x28>
 80149f4:	6833      	ldr	r3, [r6, #0]
 80149f6:	b30b      	cbz	r3, 8014a3c <__sfp+0x68>
 80149f8:	6836      	ldr	r6, [r6, #0]
 80149fa:	e7f7      	b.n	80149ec <__sfp+0x18>
 80149fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014a00:	b9d5      	cbnz	r5, 8014a38 <__sfp+0x64>
 8014a02:	4b16      	ldr	r3, [pc, #88]	; (8014a5c <__sfp+0x88>)
 8014a04:	60e3      	str	r3, [r4, #12]
 8014a06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014a0a:	6665      	str	r5, [r4, #100]	; 0x64
 8014a0c:	f000 f859 	bl	8014ac2 <__retarget_lock_init_recursive>
 8014a10:	f7ff ff96 	bl	8014940 <__sfp_lock_release>
 8014a14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014a18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014a1c:	6025      	str	r5, [r4, #0]
 8014a1e:	61a5      	str	r5, [r4, #24]
 8014a20:	2208      	movs	r2, #8
 8014a22:	4629      	mov	r1, r5
 8014a24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014a28:	f7ff fcae 	bl	8014388 <memset>
 8014a2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014a30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014a34:	4620      	mov	r0, r4
 8014a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a38:	3468      	adds	r4, #104	; 0x68
 8014a3a:	e7d9      	b.n	80149f0 <__sfp+0x1c>
 8014a3c:	2104      	movs	r1, #4
 8014a3e:	4638      	mov	r0, r7
 8014a40:	f7ff ff62 	bl	8014908 <__sfmoreglue>
 8014a44:	4604      	mov	r4, r0
 8014a46:	6030      	str	r0, [r6, #0]
 8014a48:	2800      	cmp	r0, #0
 8014a4a:	d1d5      	bne.n	80149f8 <__sfp+0x24>
 8014a4c:	f7ff ff78 	bl	8014940 <__sfp_lock_release>
 8014a50:	230c      	movs	r3, #12
 8014a52:	603b      	str	r3, [r7, #0]
 8014a54:	e7ee      	b.n	8014a34 <__sfp+0x60>
 8014a56:	bf00      	nop
 8014a58:	08059b84 	.word	0x08059b84
 8014a5c:	ffff0001 	.word	0xffff0001

08014a60 <fiprintf>:
 8014a60:	b40e      	push	{r1, r2, r3}
 8014a62:	b503      	push	{r0, r1, lr}
 8014a64:	4601      	mov	r1, r0
 8014a66:	ab03      	add	r3, sp, #12
 8014a68:	4805      	ldr	r0, [pc, #20]	; (8014a80 <fiprintf+0x20>)
 8014a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a6e:	6800      	ldr	r0, [r0, #0]
 8014a70:	9301      	str	r3, [sp, #4]
 8014a72:	f000 fac5 	bl	8015000 <_vfiprintf_r>
 8014a76:	b002      	add	sp, #8
 8014a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a7c:	b003      	add	sp, #12
 8014a7e:	4770      	bx	lr
 8014a80:	20000048 	.word	0x20000048

08014a84 <_fwalk_reent>:
 8014a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a88:	4606      	mov	r6, r0
 8014a8a:	4688      	mov	r8, r1
 8014a8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014a90:	2700      	movs	r7, #0
 8014a92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014a96:	f1b9 0901 	subs.w	r9, r9, #1
 8014a9a:	d505      	bpl.n	8014aa8 <_fwalk_reent+0x24>
 8014a9c:	6824      	ldr	r4, [r4, #0]
 8014a9e:	2c00      	cmp	r4, #0
 8014aa0:	d1f7      	bne.n	8014a92 <_fwalk_reent+0xe>
 8014aa2:	4638      	mov	r0, r7
 8014aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014aa8:	89ab      	ldrh	r3, [r5, #12]
 8014aaa:	2b01      	cmp	r3, #1
 8014aac:	d907      	bls.n	8014abe <_fwalk_reent+0x3a>
 8014aae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ab2:	3301      	adds	r3, #1
 8014ab4:	d003      	beq.n	8014abe <_fwalk_reent+0x3a>
 8014ab6:	4629      	mov	r1, r5
 8014ab8:	4630      	mov	r0, r6
 8014aba:	47c0      	blx	r8
 8014abc:	4307      	orrs	r7, r0
 8014abe:	3568      	adds	r5, #104	; 0x68
 8014ac0:	e7e9      	b.n	8014a96 <_fwalk_reent+0x12>

08014ac2 <__retarget_lock_init_recursive>:
 8014ac2:	4770      	bx	lr

08014ac4 <__retarget_lock_acquire_recursive>:
 8014ac4:	4770      	bx	lr

08014ac6 <__retarget_lock_release_recursive>:
 8014ac6:	4770      	bx	lr

08014ac8 <__swhatbuf_r>:
 8014ac8:	b570      	push	{r4, r5, r6, lr}
 8014aca:	460e      	mov	r6, r1
 8014acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ad0:	2900      	cmp	r1, #0
 8014ad2:	b096      	sub	sp, #88	; 0x58
 8014ad4:	4614      	mov	r4, r2
 8014ad6:	461d      	mov	r5, r3
 8014ad8:	da07      	bge.n	8014aea <__swhatbuf_r+0x22>
 8014ada:	2300      	movs	r3, #0
 8014adc:	602b      	str	r3, [r5, #0]
 8014ade:	89b3      	ldrh	r3, [r6, #12]
 8014ae0:	061a      	lsls	r2, r3, #24
 8014ae2:	d410      	bmi.n	8014b06 <__swhatbuf_r+0x3e>
 8014ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014ae8:	e00e      	b.n	8014b08 <__swhatbuf_r+0x40>
 8014aea:	466a      	mov	r2, sp
 8014aec:	f000 fdca 	bl	8015684 <_fstat_r>
 8014af0:	2800      	cmp	r0, #0
 8014af2:	dbf2      	blt.n	8014ada <__swhatbuf_r+0x12>
 8014af4:	9a01      	ldr	r2, [sp, #4]
 8014af6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014afa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014afe:	425a      	negs	r2, r3
 8014b00:	415a      	adcs	r2, r3
 8014b02:	602a      	str	r2, [r5, #0]
 8014b04:	e7ee      	b.n	8014ae4 <__swhatbuf_r+0x1c>
 8014b06:	2340      	movs	r3, #64	; 0x40
 8014b08:	2000      	movs	r0, #0
 8014b0a:	6023      	str	r3, [r4, #0]
 8014b0c:	b016      	add	sp, #88	; 0x58
 8014b0e:	bd70      	pop	{r4, r5, r6, pc}

08014b10 <__smakebuf_r>:
 8014b10:	898b      	ldrh	r3, [r1, #12]
 8014b12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014b14:	079d      	lsls	r5, r3, #30
 8014b16:	4606      	mov	r6, r0
 8014b18:	460c      	mov	r4, r1
 8014b1a:	d507      	bpl.n	8014b2c <__smakebuf_r+0x1c>
 8014b1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014b20:	6023      	str	r3, [r4, #0]
 8014b22:	6123      	str	r3, [r4, #16]
 8014b24:	2301      	movs	r3, #1
 8014b26:	6163      	str	r3, [r4, #20]
 8014b28:	b002      	add	sp, #8
 8014b2a:	bd70      	pop	{r4, r5, r6, pc}
 8014b2c:	ab01      	add	r3, sp, #4
 8014b2e:	466a      	mov	r2, sp
 8014b30:	f7ff ffca 	bl	8014ac8 <__swhatbuf_r>
 8014b34:	9900      	ldr	r1, [sp, #0]
 8014b36:	4605      	mov	r5, r0
 8014b38:	4630      	mov	r0, r6
 8014b3a:	f000 f881 	bl	8014c40 <_malloc_r>
 8014b3e:	b948      	cbnz	r0, 8014b54 <__smakebuf_r+0x44>
 8014b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b44:	059a      	lsls	r2, r3, #22
 8014b46:	d4ef      	bmi.n	8014b28 <__smakebuf_r+0x18>
 8014b48:	f023 0303 	bic.w	r3, r3, #3
 8014b4c:	f043 0302 	orr.w	r3, r3, #2
 8014b50:	81a3      	strh	r3, [r4, #12]
 8014b52:	e7e3      	b.n	8014b1c <__smakebuf_r+0xc>
 8014b54:	4b0d      	ldr	r3, [pc, #52]	; (8014b8c <__smakebuf_r+0x7c>)
 8014b56:	62b3      	str	r3, [r6, #40]	; 0x28
 8014b58:	89a3      	ldrh	r3, [r4, #12]
 8014b5a:	6020      	str	r0, [r4, #0]
 8014b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b60:	81a3      	strh	r3, [r4, #12]
 8014b62:	9b00      	ldr	r3, [sp, #0]
 8014b64:	6163      	str	r3, [r4, #20]
 8014b66:	9b01      	ldr	r3, [sp, #4]
 8014b68:	6120      	str	r0, [r4, #16]
 8014b6a:	b15b      	cbz	r3, 8014b84 <__smakebuf_r+0x74>
 8014b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b70:	4630      	mov	r0, r6
 8014b72:	f000 fd99 	bl	80156a8 <_isatty_r>
 8014b76:	b128      	cbz	r0, 8014b84 <__smakebuf_r+0x74>
 8014b78:	89a3      	ldrh	r3, [r4, #12]
 8014b7a:	f023 0303 	bic.w	r3, r3, #3
 8014b7e:	f043 0301 	orr.w	r3, r3, #1
 8014b82:	81a3      	strh	r3, [r4, #12]
 8014b84:	89a0      	ldrh	r0, [r4, #12]
 8014b86:	4305      	orrs	r5, r0
 8014b88:	81a5      	strh	r5, [r4, #12]
 8014b8a:	e7cd      	b.n	8014b28 <__smakebuf_r+0x18>
 8014b8c:	080148fd 	.word	0x080148fd

08014b90 <malloc>:
 8014b90:	4b02      	ldr	r3, [pc, #8]	; (8014b9c <malloc+0xc>)
 8014b92:	4601      	mov	r1, r0
 8014b94:	6818      	ldr	r0, [r3, #0]
 8014b96:	f000 b853 	b.w	8014c40 <_malloc_r>
 8014b9a:	bf00      	nop
 8014b9c:	20000048 	.word	0x20000048

08014ba0 <_free_r>:
 8014ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ba2:	2900      	cmp	r1, #0
 8014ba4:	d048      	beq.n	8014c38 <_free_r+0x98>
 8014ba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014baa:	9001      	str	r0, [sp, #4]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	f1a1 0404 	sub.w	r4, r1, #4
 8014bb2:	bfb8      	it	lt
 8014bb4:	18e4      	addlt	r4, r4, r3
 8014bb6:	f000 fd99 	bl	80156ec <__malloc_lock>
 8014bba:	4a20      	ldr	r2, [pc, #128]	; (8014c3c <_free_r+0x9c>)
 8014bbc:	9801      	ldr	r0, [sp, #4]
 8014bbe:	6813      	ldr	r3, [r2, #0]
 8014bc0:	4615      	mov	r5, r2
 8014bc2:	b933      	cbnz	r3, 8014bd2 <_free_r+0x32>
 8014bc4:	6063      	str	r3, [r4, #4]
 8014bc6:	6014      	str	r4, [r2, #0]
 8014bc8:	b003      	add	sp, #12
 8014bca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014bce:	f000 bd93 	b.w	80156f8 <__malloc_unlock>
 8014bd2:	42a3      	cmp	r3, r4
 8014bd4:	d90b      	bls.n	8014bee <_free_r+0x4e>
 8014bd6:	6821      	ldr	r1, [r4, #0]
 8014bd8:	1862      	adds	r2, r4, r1
 8014bda:	4293      	cmp	r3, r2
 8014bdc:	bf04      	itt	eq
 8014bde:	681a      	ldreq	r2, [r3, #0]
 8014be0:	685b      	ldreq	r3, [r3, #4]
 8014be2:	6063      	str	r3, [r4, #4]
 8014be4:	bf04      	itt	eq
 8014be6:	1852      	addeq	r2, r2, r1
 8014be8:	6022      	streq	r2, [r4, #0]
 8014bea:	602c      	str	r4, [r5, #0]
 8014bec:	e7ec      	b.n	8014bc8 <_free_r+0x28>
 8014bee:	461a      	mov	r2, r3
 8014bf0:	685b      	ldr	r3, [r3, #4]
 8014bf2:	b10b      	cbz	r3, 8014bf8 <_free_r+0x58>
 8014bf4:	42a3      	cmp	r3, r4
 8014bf6:	d9fa      	bls.n	8014bee <_free_r+0x4e>
 8014bf8:	6811      	ldr	r1, [r2, #0]
 8014bfa:	1855      	adds	r5, r2, r1
 8014bfc:	42a5      	cmp	r5, r4
 8014bfe:	d10b      	bne.n	8014c18 <_free_r+0x78>
 8014c00:	6824      	ldr	r4, [r4, #0]
 8014c02:	4421      	add	r1, r4
 8014c04:	1854      	adds	r4, r2, r1
 8014c06:	42a3      	cmp	r3, r4
 8014c08:	6011      	str	r1, [r2, #0]
 8014c0a:	d1dd      	bne.n	8014bc8 <_free_r+0x28>
 8014c0c:	681c      	ldr	r4, [r3, #0]
 8014c0e:	685b      	ldr	r3, [r3, #4]
 8014c10:	6053      	str	r3, [r2, #4]
 8014c12:	4421      	add	r1, r4
 8014c14:	6011      	str	r1, [r2, #0]
 8014c16:	e7d7      	b.n	8014bc8 <_free_r+0x28>
 8014c18:	d902      	bls.n	8014c20 <_free_r+0x80>
 8014c1a:	230c      	movs	r3, #12
 8014c1c:	6003      	str	r3, [r0, #0]
 8014c1e:	e7d3      	b.n	8014bc8 <_free_r+0x28>
 8014c20:	6825      	ldr	r5, [r4, #0]
 8014c22:	1961      	adds	r1, r4, r5
 8014c24:	428b      	cmp	r3, r1
 8014c26:	bf04      	itt	eq
 8014c28:	6819      	ldreq	r1, [r3, #0]
 8014c2a:	685b      	ldreq	r3, [r3, #4]
 8014c2c:	6063      	str	r3, [r4, #4]
 8014c2e:	bf04      	itt	eq
 8014c30:	1949      	addeq	r1, r1, r5
 8014c32:	6021      	streq	r1, [r4, #0]
 8014c34:	6054      	str	r4, [r2, #4]
 8014c36:	e7c7      	b.n	8014bc8 <_free_r+0x28>
 8014c38:	b003      	add	sp, #12
 8014c3a:	bd30      	pop	{r4, r5, pc}
 8014c3c:	200008c0 	.word	0x200008c0

08014c40 <_malloc_r>:
 8014c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c42:	1ccd      	adds	r5, r1, #3
 8014c44:	f025 0503 	bic.w	r5, r5, #3
 8014c48:	3508      	adds	r5, #8
 8014c4a:	2d0c      	cmp	r5, #12
 8014c4c:	bf38      	it	cc
 8014c4e:	250c      	movcc	r5, #12
 8014c50:	2d00      	cmp	r5, #0
 8014c52:	4606      	mov	r6, r0
 8014c54:	db01      	blt.n	8014c5a <_malloc_r+0x1a>
 8014c56:	42a9      	cmp	r1, r5
 8014c58:	d903      	bls.n	8014c62 <_malloc_r+0x22>
 8014c5a:	230c      	movs	r3, #12
 8014c5c:	6033      	str	r3, [r6, #0]
 8014c5e:	2000      	movs	r0, #0
 8014c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c62:	f000 fd43 	bl	80156ec <__malloc_lock>
 8014c66:	4921      	ldr	r1, [pc, #132]	; (8014cec <_malloc_r+0xac>)
 8014c68:	680a      	ldr	r2, [r1, #0]
 8014c6a:	4614      	mov	r4, r2
 8014c6c:	b99c      	cbnz	r4, 8014c96 <_malloc_r+0x56>
 8014c6e:	4f20      	ldr	r7, [pc, #128]	; (8014cf0 <_malloc_r+0xb0>)
 8014c70:	683b      	ldr	r3, [r7, #0]
 8014c72:	b923      	cbnz	r3, 8014c7e <_malloc_r+0x3e>
 8014c74:	4621      	mov	r1, r4
 8014c76:	4630      	mov	r0, r6
 8014c78:	f000 fc86 	bl	8015588 <_sbrk_r>
 8014c7c:	6038      	str	r0, [r7, #0]
 8014c7e:	4629      	mov	r1, r5
 8014c80:	4630      	mov	r0, r6
 8014c82:	f000 fc81 	bl	8015588 <_sbrk_r>
 8014c86:	1c43      	adds	r3, r0, #1
 8014c88:	d123      	bne.n	8014cd2 <_malloc_r+0x92>
 8014c8a:	230c      	movs	r3, #12
 8014c8c:	6033      	str	r3, [r6, #0]
 8014c8e:	4630      	mov	r0, r6
 8014c90:	f000 fd32 	bl	80156f8 <__malloc_unlock>
 8014c94:	e7e3      	b.n	8014c5e <_malloc_r+0x1e>
 8014c96:	6823      	ldr	r3, [r4, #0]
 8014c98:	1b5b      	subs	r3, r3, r5
 8014c9a:	d417      	bmi.n	8014ccc <_malloc_r+0x8c>
 8014c9c:	2b0b      	cmp	r3, #11
 8014c9e:	d903      	bls.n	8014ca8 <_malloc_r+0x68>
 8014ca0:	6023      	str	r3, [r4, #0]
 8014ca2:	441c      	add	r4, r3
 8014ca4:	6025      	str	r5, [r4, #0]
 8014ca6:	e004      	b.n	8014cb2 <_malloc_r+0x72>
 8014ca8:	6863      	ldr	r3, [r4, #4]
 8014caa:	42a2      	cmp	r2, r4
 8014cac:	bf0c      	ite	eq
 8014cae:	600b      	streq	r3, [r1, #0]
 8014cb0:	6053      	strne	r3, [r2, #4]
 8014cb2:	4630      	mov	r0, r6
 8014cb4:	f000 fd20 	bl	80156f8 <__malloc_unlock>
 8014cb8:	f104 000b 	add.w	r0, r4, #11
 8014cbc:	1d23      	adds	r3, r4, #4
 8014cbe:	f020 0007 	bic.w	r0, r0, #7
 8014cc2:	1ac2      	subs	r2, r0, r3
 8014cc4:	d0cc      	beq.n	8014c60 <_malloc_r+0x20>
 8014cc6:	1a1b      	subs	r3, r3, r0
 8014cc8:	50a3      	str	r3, [r4, r2]
 8014cca:	e7c9      	b.n	8014c60 <_malloc_r+0x20>
 8014ccc:	4622      	mov	r2, r4
 8014cce:	6864      	ldr	r4, [r4, #4]
 8014cd0:	e7cc      	b.n	8014c6c <_malloc_r+0x2c>
 8014cd2:	1cc4      	adds	r4, r0, #3
 8014cd4:	f024 0403 	bic.w	r4, r4, #3
 8014cd8:	42a0      	cmp	r0, r4
 8014cda:	d0e3      	beq.n	8014ca4 <_malloc_r+0x64>
 8014cdc:	1a21      	subs	r1, r4, r0
 8014cde:	4630      	mov	r0, r6
 8014ce0:	f000 fc52 	bl	8015588 <_sbrk_r>
 8014ce4:	3001      	adds	r0, #1
 8014ce6:	d1dd      	bne.n	8014ca4 <_malloc_r+0x64>
 8014ce8:	e7cf      	b.n	8014c8a <_malloc_r+0x4a>
 8014cea:	bf00      	nop
 8014cec:	200008c0 	.word	0x200008c0
 8014cf0:	200008c4 	.word	0x200008c4

08014cf4 <__ssputs_r>:
 8014cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cf8:	688e      	ldr	r6, [r1, #8]
 8014cfa:	429e      	cmp	r6, r3
 8014cfc:	4682      	mov	sl, r0
 8014cfe:	460c      	mov	r4, r1
 8014d00:	4690      	mov	r8, r2
 8014d02:	461f      	mov	r7, r3
 8014d04:	d838      	bhi.n	8014d78 <__ssputs_r+0x84>
 8014d06:	898a      	ldrh	r2, [r1, #12]
 8014d08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014d0c:	d032      	beq.n	8014d74 <__ssputs_r+0x80>
 8014d0e:	6825      	ldr	r5, [r4, #0]
 8014d10:	6909      	ldr	r1, [r1, #16]
 8014d12:	eba5 0901 	sub.w	r9, r5, r1
 8014d16:	6965      	ldr	r5, [r4, #20]
 8014d18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014d1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014d20:	3301      	adds	r3, #1
 8014d22:	444b      	add	r3, r9
 8014d24:	106d      	asrs	r5, r5, #1
 8014d26:	429d      	cmp	r5, r3
 8014d28:	bf38      	it	cc
 8014d2a:	461d      	movcc	r5, r3
 8014d2c:	0553      	lsls	r3, r2, #21
 8014d2e:	d531      	bpl.n	8014d94 <__ssputs_r+0xa0>
 8014d30:	4629      	mov	r1, r5
 8014d32:	f7ff ff85 	bl	8014c40 <_malloc_r>
 8014d36:	4606      	mov	r6, r0
 8014d38:	b950      	cbnz	r0, 8014d50 <__ssputs_r+0x5c>
 8014d3a:	230c      	movs	r3, #12
 8014d3c:	f8ca 3000 	str.w	r3, [sl]
 8014d40:	89a3      	ldrh	r3, [r4, #12]
 8014d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d46:	81a3      	strh	r3, [r4, #12]
 8014d48:	f04f 30ff 	mov.w	r0, #4294967295
 8014d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d50:	6921      	ldr	r1, [r4, #16]
 8014d52:	464a      	mov	r2, r9
 8014d54:	f7ff faf0 	bl	8014338 <memcpy>
 8014d58:	89a3      	ldrh	r3, [r4, #12]
 8014d5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d62:	81a3      	strh	r3, [r4, #12]
 8014d64:	6126      	str	r6, [r4, #16]
 8014d66:	6165      	str	r5, [r4, #20]
 8014d68:	444e      	add	r6, r9
 8014d6a:	eba5 0509 	sub.w	r5, r5, r9
 8014d6e:	6026      	str	r6, [r4, #0]
 8014d70:	60a5      	str	r5, [r4, #8]
 8014d72:	463e      	mov	r6, r7
 8014d74:	42be      	cmp	r6, r7
 8014d76:	d900      	bls.n	8014d7a <__ssputs_r+0x86>
 8014d78:	463e      	mov	r6, r7
 8014d7a:	4632      	mov	r2, r6
 8014d7c:	6820      	ldr	r0, [r4, #0]
 8014d7e:	4641      	mov	r1, r8
 8014d80:	f7ff fae8 	bl	8014354 <memmove>
 8014d84:	68a3      	ldr	r3, [r4, #8]
 8014d86:	6822      	ldr	r2, [r4, #0]
 8014d88:	1b9b      	subs	r3, r3, r6
 8014d8a:	4432      	add	r2, r6
 8014d8c:	60a3      	str	r3, [r4, #8]
 8014d8e:	6022      	str	r2, [r4, #0]
 8014d90:	2000      	movs	r0, #0
 8014d92:	e7db      	b.n	8014d4c <__ssputs_r+0x58>
 8014d94:	462a      	mov	r2, r5
 8014d96:	f000 fcb5 	bl	8015704 <_realloc_r>
 8014d9a:	4606      	mov	r6, r0
 8014d9c:	2800      	cmp	r0, #0
 8014d9e:	d1e1      	bne.n	8014d64 <__ssputs_r+0x70>
 8014da0:	6921      	ldr	r1, [r4, #16]
 8014da2:	4650      	mov	r0, sl
 8014da4:	f7ff fefc 	bl	8014ba0 <_free_r>
 8014da8:	e7c7      	b.n	8014d3a <__ssputs_r+0x46>
	...

08014dac <_svfiprintf_r>:
 8014dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014db0:	4698      	mov	r8, r3
 8014db2:	898b      	ldrh	r3, [r1, #12]
 8014db4:	061b      	lsls	r3, r3, #24
 8014db6:	b09d      	sub	sp, #116	; 0x74
 8014db8:	4607      	mov	r7, r0
 8014dba:	460d      	mov	r5, r1
 8014dbc:	4614      	mov	r4, r2
 8014dbe:	d50e      	bpl.n	8014dde <_svfiprintf_r+0x32>
 8014dc0:	690b      	ldr	r3, [r1, #16]
 8014dc2:	b963      	cbnz	r3, 8014dde <_svfiprintf_r+0x32>
 8014dc4:	2140      	movs	r1, #64	; 0x40
 8014dc6:	f7ff ff3b 	bl	8014c40 <_malloc_r>
 8014dca:	6028      	str	r0, [r5, #0]
 8014dcc:	6128      	str	r0, [r5, #16]
 8014dce:	b920      	cbnz	r0, 8014dda <_svfiprintf_r+0x2e>
 8014dd0:	230c      	movs	r3, #12
 8014dd2:	603b      	str	r3, [r7, #0]
 8014dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8014dd8:	e0d1      	b.n	8014f7e <_svfiprintf_r+0x1d2>
 8014dda:	2340      	movs	r3, #64	; 0x40
 8014ddc:	616b      	str	r3, [r5, #20]
 8014dde:	2300      	movs	r3, #0
 8014de0:	9309      	str	r3, [sp, #36]	; 0x24
 8014de2:	2320      	movs	r3, #32
 8014de4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014de8:	f8cd 800c 	str.w	r8, [sp, #12]
 8014dec:	2330      	movs	r3, #48	; 0x30
 8014dee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014f98 <_svfiprintf_r+0x1ec>
 8014df2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014df6:	f04f 0901 	mov.w	r9, #1
 8014dfa:	4623      	mov	r3, r4
 8014dfc:	469a      	mov	sl, r3
 8014dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e02:	b10a      	cbz	r2, 8014e08 <_svfiprintf_r+0x5c>
 8014e04:	2a25      	cmp	r2, #37	; 0x25
 8014e06:	d1f9      	bne.n	8014dfc <_svfiprintf_r+0x50>
 8014e08:	ebba 0b04 	subs.w	fp, sl, r4
 8014e0c:	d00b      	beq.n	8014e26 <_svfiprintf_r+0x7a>
 8014e0e:	465b      	mov	r3, fp
 8014e10:	4622      	mov	r2, r4
 8014e12:	4629      	mov	r1, r5
 8014e14:	4638      	mov	r0, r7
 8014e16:	f7ff ff6d 	bl	8014cf4 <__ssputs_r>
 8014e1a:	3001      	adds	r0, #1
 8014e1c:	f000 80aa 	beq.w	8014f74 <_svfiprintf_r+0x1c8>
 8014e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e22:	445a      	add	r2, fp
 8014e24:	9209      	str	r2, [sp, #36]	; 0x24
 8014e26:	f89a 3000 	ldrb.w	r3, [sl]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	f000 80a2 	beq.w	8014f74 <_svfiprintf_r+0x1c8>
 8014e30:	2300      	movs	r3, #0
 8014e32:	f04f 32ff 	mov.w	r2, #4294967295
 8014e36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e3a:	f10a 0a01 	add.w	sl, sl, #1
 8014e3e:	9304      	str	r3, [sp, #16]
 8014e40:	9307      	str	r3, [sp, #28]
 8014e42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e46:	931a      	str	r3, [sp, #104]	; 0x68
 8014e48:	4654      	mov	r4, sl
 8014e4a:	2205      	movs	r2, #5
 8014e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e50:	4851      	ldr	r0, [pc, #324]	; (8014f98 <_svfiprintf_r+0x1ec>)
 8014e52:	f7eb f9e5 	bl	8000220 <memchr>
 8014e56:	9a04      	ldr	r2, [sp, #16]
 8014e58:	b9d8      	cbnz	r0, 8014e92 <_svfiprintf_r+0xe6>
 8014e5a:	06d0      	lsls	r0, r2, #27
 8014e5c:	bf44      	itt	mi
 8014e5e:	2320      	movmi	r3, #32
 8014e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e64:	0711      	lsls	r1, r2, #28
 8014e66:	bf44      	itt	mi
 8014e68:	232b      	movmi	r3, #43	; 0x2b
 8014e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8014e72:	2b2a      	cmp	r3, #42	; 0x2a
 8014e74:	d015      	beq.n	8014ea2 <_svfiprintf_r+0xf6>
 8014e76:	9a07      	ldr	r2, [sp, #28]
 8014e78:	4654      	mov	r4, sl
 8014e7a:	2000      	movs	r0, #0
 8014e7c:	f04f 0c0a 	mov.w	ip, #10
 8014e80:	4621      	mov	r1, r4
 8014e82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e86:	3b30      	subs	r3, #48	; 0x30
 8014e88:	2b09      	cmp	r3, #9
 8014e8a:	d94e      	bls.n	8014f2a <_svfiprintf_r+0x17e>
 8014e8c:	b1b0      	cbz	r0, 8014ebc <_svfiprintf_r+0x110>
 8014e8e:	9207      	str	r2, [sp, #28]
 8014e90:	e014      	b.n	8014ebc <_svfiprintf_r+0x110>
 8014e92:	eba0 0308 	sub.w	r3, r0, r8
 8014e96:	fa09 f303 	lsl.w	r3, r9, r3
 8014e9a:	4313      	orrs	r3, r2
 8014e9c:	9304      	str	r3, [sp, #16]
 8014e9e:	46a2      	mov	sl, r4
 8014ea0:	e7d2      	b.n	8014e48 <_svfiprintf_r+0x9c>
 8014ea2:	9b03      	ldr	r3, [sp, #12]
 8014ea4:	1d19      	adds	r1, r3, #4
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	9103      	str	r1, [sp, #12]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	bfbb      	ittet	lt
 8014eae:	425b      	neglt	r3, r3
 8014eb0:	f042 0202 	orrlt.w	r2, r2, #2
 8014eb4:	9307      	strge	r3, [sp, #28]
 8014eb6:	9307      	strlt	r3, [sp, #28]
 8014eb8:	bfb8      	it	lt
 8014eba:	9204      	strlt	r2, [sp, #16]
 8014ebc:	7823      	ldrb	r3, [r4, #0]
 8014ebe:	2b2e      	cmp	r3, #46	; 0x2e
 8014ec0:	d10c      	bne.n	8014edc <_svfiprintf_r+0x130>
 8014ec2:	7863      	ldrb	r3, [r4, #1]
 8014ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8014ec6:	d135      	bne.n	8014f34 <_svfiprintf_r+0x188>
 8014ec8:	9b03      	ldr	r3, [sp, #12]
 8014eca:	1d1a      	adds	r2, r3, #4
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	9203      	str	r2, [sp, #12]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	bfb8      	it	lt
 8014ed4:	f04f 33ff 	movlt.w	r3, #4294967295
 8014ed8:	3402      	adds	r4, #2
 8014eda:	9305      	str	r3, [sp, #20]
 8014edc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014fa8 <_svfiprintf_r+0x1fc>
 8014ee0:	7821      	ldrb	r1, [r4, #0]
 8014ee2:	2203      	movs	r2, #3
 8014ee4:	4650      	mov	r0, sl
 8014ee6:	f7eb f99b 	bl	8000220 <memchr>
 8014eea:	b140      	cbz	r0, 8014efe <_svfiprintf_r+0x152>
 8014eec:	2340      	movs	r3, #64	; 0x40
 8014eee:	eba0 000a 	sub.w	r0, r0, sl
 8014ef2:	fa03 f000 	lsl.w	r0, r3, r0
 8014ef6:	9b04      	ldr	r3, [sp, #16]
 8014ef8:	4303      	orrs	r3, r0
 8014efa:	3401      	adds	r4, #1
 8014efc:	9304      	str	r3, [sp, #16]
 8014efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f02:	4826      	ldr	r0, [pc, #152]	; (8014f9c <_svfiprintf_r+0x1f0>)
 8014f04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f08:	2206      	movs	r2, #6
 8014f0a:	f7eb f989 	bl	8000220 <memchr>
 8014f0e:	2800      	cmp	r0, #0
 8014f10:	d038      	beq.n	8014f84 <_svfiprintf_r+0x1d8>
 8014f12:	4b23      	ldr	r3, [pc, #140]	; (8014fa0 <_svfiprintf_r+0x1f4>)
 8014f14:	bb1b      	cbnz	r3, 8014f5e <_svfiprintf_r+0x1b2>
 8014f16:	9b03      	ldr	r3, [sp, #12]
 8014f18:	3307      	adds	r3, #7
 8014f1a:	f023 0307 	bic.w	r3, r3, #7
 8014f1e:	3308      	adds	r3, #8
 8014f20:	9303      	str	r3, [sp, #12]
 8014f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f24:	4433      	add	r3, r6
 8014f26:	9309      	str	r3, [sp, #36]	; 0x24
 8014f28:	e767      	b.n	8014dfa <_svfiprintf_r+0x4e>
 8014f2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f2e:	460c      	mov	r4, r1
 8014f30:	2001      	movs	r0, #1
 8014f32:	e7a5      	b.n	8014e80 <_svfiprintf_r+0xd4>
 8014f34:	2300      	movs	r3, #0
 8014f36:	3401      	adds	r4, #1
 8014f38:	9305      	str	r3, [sp, #20]
 8014f3a:	4619      	mov	r1, r3
 8014f3c:	f04f 0c0a 	mov.w	ip, #10
 8014f40:	4620      	mov	r0, r4
 8014f42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f46:	3a30      	subs	r2, #48	; 0x30
 8014f48:	2a09      	cmp	r2, #9
 8014f4a:	d903      	bls.n	8014f54 <_svfiprintf_r+0x1a8>
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d0c5      	beq.n	8014edc <_svfiprintf_r+0x130>
 8014f50:	9105      	str	r1, [sp, #20]
 8014f52:	e7c3      	b.n	8014edc <_svfiprintf_r+0x130>
 8014f54:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f58:	4604      	mov	r4, r0
 8014f5a:	2301      	movs	r3, #1
 8014f5c:	e7f0      	b.n	8014f40 <_svfiprintf_r+0x194>
 8014f5e:	ab03      	add	r3, sp, #12
 8014f60:	9300      	str	r3, [sp, #0]
 8014f62:	462a      	mov	r2, r5
 8014f64:	4b0f      	ldr	r3, [pc, #60]	; (8014fa4 <_svfiprintf_r+0x1f8>)
 8014f66:	a904      	add	r1, sp, #16
 8014f68:	4638      	mov	r0, r7
 8014f6a:	f3af 8000 	nop.w
 8014f6e:	1c42      	adds	r2, r0, #1
 8014f70:	4606      	mov	r6, r0
 8014f72:	d1d6      	bne.n	8014f22 <_svfiprintf_r+0x176>
 8014f74:	89ab      	ldrh	r3, [r5, #12]
 8014f76:	065b      	lsls	r3, r3, #25
 8014f78:	f53f af2c 	bmi.w	8014dd4 <_svfiprintf_r+0x28>
 8014f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f7e:	b01d      	add	sp, #116	; 0x74
 8014f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f84:	ab03      	add	r3, sp, #12
 8014f86:	9300      	str	r3, [sp, #0]
 8014f88:	462a      	mov	r2, r5
 8014f8a:	4b06      	ldr	r3, [pc, #24]	; (8014fa4 <_svfiprintf_r+0x1f8>)
 8014f8c:	a904      	add	r1, sp, #16
 8014f8e:	4638      	mov	r0, r7
 8014f90:	f000 f9d4 	bl	801533c <_printf_i>
 8014f94:	e7eb      	b.n	8014f6e <_svfiprintf_r+0x1c2>
 8014f96:	bf00      	nop
 8014f98:	08059c9c 	.word	0x08059c9c
 8014f9c:	08059ca6 	.word	0x08059ca6
 8014fa0:	00000000 	.word	0x00000000
 8014fa4:	08014cf5 	.word	0x08014cf5
 8014fa8:	08059ca2 	.word	0x08059ca2

08014fac <__sfputc_r>:
 8014fac:	6893      	ldr	r3, [r2, #8]
 8014fae:	3b01      	subs	r3, #1
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	b410      	push	{r4}
 8014fb4:	6093      	str	r3, [r2, #8]
 8014fb6:	da08      	bge.n	8014fca <__sfputc_r+0x1e>
 8014fb8:	6994      	ldr	r4, [r2, #24]
 8014fba:	42a3      	cmp	r3, r4
 8014fbc:	db01      	blt.n	8014fc2 <__sfputc_r+0x16>
 8014fbe:	290a      	cmp	r1, #10
 8014fc0:	d103      	bne.n	8014fca <__sfputc_r+0x1e>
 8014fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014fc6:	f7ff bad5 	b.w	8014574 <__swbuf_r>
 8014fca:	6813      	ldr	r3, [r2, #0]
 8014fcc:	1c58      	adds	r0, r3, #1
 8014fce:	6010      	str	r0, [r2, #0]
 8014fd0:	7019      	strb	r1, [r3, #0]
 8014fd2:	4608      	mov	r0, r1
 8014fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014fd8:	4770      	bx	lr

08014fda <__sfputs_r>:
 8014fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fdc:	4606      	mov	r6, r0
 8014fde:	460f      	mov	r7, r1
 8014fe0:	4614      	mov	r4, r2
 8014fe2:	18d5      	adds	r5, r2, r3
 8014fe4:	42ac      	cmp	r4, r5
 8014fe6:	d101      	bne.n	8014fec <__sfputs_r+0x12>
 8014fe8:	2000      	movs	r0, #0
 8014fea:	e007      	b.n	8014ffc <__sfputs_r+0x22>
 8014fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ff0:	463a      	mov	r2, r7
 8014ff2:	4630      	mov	r0, r6
 8014ff4:	f7ff ffda 	bl	8014fac <__sfputc_r>
 8014ff8:	1c43      	adds	r3, r0, #1
 8014ffa:	d1f3      	bne.n	8014fe4 <__sfputs_r+0xa>
 8014ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015000 <_vfiprintf_r>:
 8015000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015004:	460d      	mov	r5, r1
 8015006:	b09d      	sub	sp, #116	; 0x74
 8015008:	4614      	mov	r4, r2
 801500a:	4698      	mov	r8, r3
 801500c:	4606      	mov	r6, r0
 801500e:	b118      	cbz	r0, 8015018 <_vfiprintf_r+0x18>
 8015010:	6983      	ldr	r3, [r0, #24]
 8015012:	b90b      	cbnz	r3, 8015018 <_vfiprintf_r+0x18>
 8015014:	f7ff fca6 	bl	8014964 <__sinit>
 8015018:	4b89      	ldr	r3, [pc, #548]	; (8015240 <_vfiprintf_r+0x240>)
 801501a:	429d      	cmp	r5, r3
 801501c:	d11b      	bne.n	8015056 <_vfiprintf_r+0x56>
 801501e:	6875      	ldr	r5, [r6, #4]
 8015020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015022:	07d9      	lsls	r1, r3, #31
 8015024:	d405      	bmi.n	8015032 <_vfiprintf_r+0x32>
 8015026:	89ab      	ldrh	r3, [r5, #12]
 8015028:	059a      	lsls	r2, r3, #22
 801502a:	d402      	bmi.n	8015032 <_vfiprintf_r+0x32>
 801502c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801502e:	f7ff fd49 	bl	8014ac4 <__retarget_lock_acquire_recursive>
 8015032:	89ab      	ldrh	r3, [r5, #12]
 8015034:	071b      	lsls	r3, r3, #28
 8015036:	d501      	bpl.n	801503c <_vfiprintf_r+0x3c>
 8015038:	692b      	ldr	r3, [r5, #16]
 801503a:	b9eb      	cbnz	r3, 8015078 <_vfiprintf_r+0x78>
 801503c:	4629      	mov	r1, r5
 801503e:	4630      	mov	r0, r6
 8015040:	f7ff faea 	bl	8014618 <__swsetup_r>
 8015044:	b1c0      	cbz	r0, 8015078 <_vfiprintf_r+0x78>
 8015046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015048:	07dc      	lsls	r4, r3, #31
 801504a:	d50e      	bpl.n	801506a <_vfiprintf_r+0x6a>
 801504c:	f04f 30ff 	mov.w	r0, #4294967295
 8015050:	b01d      	add	sp, #116	; 0x74
 8015052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015056:	4b7b      	ldr	r3, [pc, #492]	; (8015244 <_vfiprintf_r+0x244>)
 8015058:	429d      	cmp	r5, r3
 801505a:	d101      	bne.n	8015060 <_vfiprintf_r+0x60>
 801505c:	68b5      	ldr	r5, [r6, #8]
 801505e:	e7df      	b.n	8015020 <_vfiprintf_r+0x20>
 8015060:	4b79      	ldr	r3, [pc, #484]	; (8015248 <_vfiprintf_r+0x248>)
 8015062:	429d      	cmp	r5, r3
 8015064:	bf08      	it	eq
 8015066:	68f5      	ldreq	r5, [r6, #12]
 8015068:	e7da      	b.n	8015020 <_vfiprintf_r+0x20>
 801506a:	89ab      	ldrh	r3, [r5, #12]
 801506c:	0598      	lsls	r0, r3, #22
 801506e:	d4ed      	bmi.n	801504c <_vfiprintf_r+0x4c>
 8015070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015072:	f7ff fd28 	bl	8014ac6 <__retarget_lock_release_recursive>
 8015076:	e7e9      	b.n	801504c <_vfiprintf_r+0x4c>
 8015078:	2300      	movs	r3, #0
 801507a:	9309      	str	r3, [sp, #36]	; 0x24
 801507c:	2320      	movs	r3, #32
 801507e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015082:	f8cd 800c 	str.w	r8, [sp, #12]
 8015086:	2330      	movs	r3, #48	; 0x30
 8015088:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801524c <_vfiprintf_r+0x24c>
 801508c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015090:	f04f 0901 	mov.w	r9, #1
 8015094:	4623      	mov	r3, r4
 8015096:	469a      	mov	sl, r3
 8015098:	f813 2b01 	ldrb.w	r2, [r3], #1
 801509c:	b10a      	cbz	r2, 80150a2 <_vfiprintf_r+0xa2>
 801509e:	2a25      	cmp	r2, #37	; 0x25
 80150a0:	d1f9      	bne.n	8015096 <_vfiprintf_r+0x96>
 80150a2:	ebba 0b04 	subs.w	fp, sl, r4
 80150a6:	d00b      	beq.n	80150c0 <_vfiprintf_r+0xc0>
 80150a8:	465b      	mov	r3, fp
 80150aa:	4622      	mov	r2, r4
 80150ac:	4629      	mov	r1, r5
 80150ae:	4630      	mov	r0, r6
 80150b0:	f7ff ff93 	bl	8014fda <__sfputs_r>
 80150b4:	3001      	adds	r0, #1
 80150b6:	f000 80aa 	beq.w	801520e <_vfiprintf_r+0x20e>
 80150ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80150bc:	445a      	add	r2, fp
 80150be:	9209      	str	r2, [sp, #36]	; 0x24
 80150c0:	f89a 3000 	ldrb.w	r3, [sl]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	f000 80a2 	beq.w	801520e <_vfiprintf_r+0x20e>
 80150ca:	2300      	movs	r3, #0
 80150cc:	f04f 32ff 	mov.w	r2, #4294967295
 80150d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80150d4:	f10a 0a01 	add.w	sl, sl, #1
 80150d8:	9304      	str	r3, [sp, #16]
 80150da:	9307      	str	r3, [sp, #28]
 80150dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80150e0:	931a      	str	r3, [sp, #104]	; 0x68
 80150e2:	4654      	mov	r4, sl
 80150e4:	2205      	movs	r2, #5
 80150e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150ea:	4858      	ldr	r0, [pc, #352]	; (801524c <_vfiprintf_r+0x24c>)
 80150ec:	f7eb f898 	bl	8000220 <memchr>
 80150f0:	9a04      	ldr	r2, [sp, #16]
 80150f2:	b9d8      	cbnz	r0, 801512c <_vfiprintf_r+0x12c>
 80150f4:	06d1      	lsls	r1, r2, #27
 80150f6:	bf44      	itt	mi
 80150f8:	2320      	movmi	r3, #32
 80150fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80150fe:	0713      	lsls	r3, r2, #28
 8015100:	bf44      	itt	mi
 8015102:	232b      	movmi	r3, #43	; 0x2b
 8015104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015108:	f89a 3000 	ldrb.w	r3, [sl]
 801510c:	2b2a      	cmp	r3, #42	; 0x2a
 801510e:	d015      	beq.n	801513c <_vfiprintf_r+0x13c>
 8015110:	9a07      	ldr	r2, [sp, #28]
 8015112:	4654      	mov	r4, sl
 8015114:	2000      	movs	r0, #0
 8015116:	f04f 0c0a 	mov.w	ip, #10
 801511a:	4621      	mov	r1, r4
 801511c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015120:	3b30      	subs	r3, #48	; 0x30
 8015122:	2b09      	cmp	r3, #9
 8015124:	d94e      	bls.n	80151c4 <_vfiprintf_r+0x1c4>
 8015126:	b1b0      	cbz	r0, 8015156 <_vfiprintf_r+0x156>
 8015128:	9207      	str	r2, [sp, #28]
 801512a:	e014      	b.n	8015156 <_vfiprintf_r+0x156>
 801512c:	eba0 0308 	sub.w	r3, r0, r8
 8015130:	fa09 f303 	lsl.w	r3, r9, r3
 8015134:	4313      	orrs	r3, r2
 8015136:	9304      	str	r3, [sp, #16]
 8015138:	46a2      	mov	sl, r4
 801513a:	e7d2      	b.n	80150e2 <_vfiprintf_r+0xe2>
 801513c:	9b03      	ldr	r3, [sp, #12]
 801513e:	1d19      	adds	r1, r3, #4
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	9103      	str	r1, [sp, #12]
 8015144:	2b00      	cmp	r3, #0
 8015146:	bfbb      	ittet	lt
 8015148:	425b      	neglt	r3, r3
 801514a:	f042 0202 	orrlt.w	r2, r2, #2
 801514e:	9307      	strge	r3, [sp, #28]
 8015150:	9307      	strlt	r3, [sp, #28]
 8015152:	bfb8      	it	lt
 8015154:	9204      	strlt	r2, [sp, #16]
 8015156:	7823      	ldrb	r3, [r4, #0]
 8015158:	2b2e      	cmp	r3, #46	; 0x2e
 801515a:	d10c      	bne.n	8015176 <_vfiprintf_r+0x176>
 801515c:	7863      	ldrb	r3, [r4, #1]
 801515e:	2b2a      	cmp	r3, #42	; 0x2a
 8015160:	d135      	bne.n	80151ce <_vfiprintf_r+0x1ce>
 8015162:	9b03      	ldr	r3, [sp, #12]
 8015164:	1d1a      	adds	r2, r3, #4
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	9203      	str	r2, [sp, #12]
 801516a:	2b00      	cmp	r3, #0
 801516c:	bfb8      	it	lt
 801516e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015172:	3402      	adds	r4, #2
 8015174:	9305      	str	r3, [sp, #20]
 8015176:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801525c <_vfiprintf_r+0x25c>
 801517a:	7821      	ldrb	r1, [r4, #0]
 801517c:	2203      	movs	r2, #3
 801517e:	4650      	mov	r0, sl
 8015180:	f7eb f84e 	bl	8000220 <memchr>
 8015184:	b140      	cbz	r0, 8015198 <_vfiprintf_r+0x198>
 8015186:	2340      	movs	r3, #64	; 0x40
 8015188:	eba0 000a 	sub.w	r0, r0, sl
 801518c:	fa03 f000 	lsl.w	r0, r3, r0
 8015190:	9b04      	ldr	r3, [sp, #16]
 8015192:	4303      	orrs	r3, r0
 8015194:	3401      	adds	r4, #1
 8015196:	9304      	str	r3, [sp, #16]
 8015198:	f814 1b01 	ldrb.w	r1, [r4], #1
 801519c:	482c      	ldr	r0, [pc, #176]	; (8015250 <_vfiprintf_r+0x250>)
 801519e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80151a2:	2206      	movs	r2, #6
 80151a4:	f7eb f83c 	bl	8000220 <memchr>
 80151a8:	2800      	cmp	r0, #0
 80151aa:	d03f      	beq.n	801522c <_vfiprintf_r+0x22c>
 80151ac:	4b29      	ldr	r3, [pc, #164]	; (8015254 <_vfiprintf_r+0x254>)
 80151ae:	bb1b      	cbnz	r3, 80151f8 <_vfiprintf_r+0x1f8>
 80151b0:	9b03      	ldr	r3, [sp, #12]
 80151b2:	3307      	adds	r3, #7
 80151b4:	f023 0307 	bic.w	r3, r3, #7
 80151b8:	3308      	adds	r3, #8
 80151ba:	9303      	str	r3, [sp, #12]
 80151bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151be:	443b      	add	r3, r7
 80151c0:	9309      	str	r3, [sp, #36]	; 0x24
 80151c2:	e767      	b.n	8015094 <_vfiprintf_r+0x94>
 80151c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80151c8:	460c      	mov	r4, r1
 80151ca:	2001      	movs	r0, #1
 80151cc:	e7a5      	b.n	801511a <_vfiprintf_r+0x11a>
 80151ce:	2300      	movs	r3, #0
 80151d0:	3401      	adds	r4, #1
 80151d2:	9305      	str	r3, [sp, #20]
 80151d4:	4619      	mov	r1, r3
 80151d6:	f04f 0c0a 	mov.w	ip, #10
 80151da:	4620      	mov	r0, r4
 80151dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80151e0:	3a30      	subs	r2, #48	; 0x30
 80151e2:	2a09      	cmp	r2, #9
 80151e4:	d903      	bls.n	80151ee <_vfiprintf_r+0x1ee>
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d0c5      	beq.n	8015176 <_vfiprintf_r+0x176>
 80151ea:	9105      	str	r1, [sp, #20]
 80151ec:	e7c3      	b.n	8015176 <_vfiprintf_r+0x176>
 80151ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80151f2:	4604      	mov	r4, r0
 80151f4:	2301      	movs	r3, #1
 80151f6:	e7f0      	b.n	80151da <_vfiprintf_r+0x1da>
 80151f8:	ab03      	add	r3, sp, #12
 80151fa:	9300      	str	r3, [sp, #0]
 80151fc:	462a      	mov	r2, r5
 80151fe:	4b16      	ldr	r3, [pc, #88]	; (8015258 <_vfiprintf_r+0x258>)
 8015200:	a904      	add	r1, sp, #16
 8015202:	4630      	mov	r0, r6
 8015204:	f3af 8000 	nop.w
 8015208:	4607      	mov	r7, r0
 801520a:	1c78      	adds	r0, r7, #1
 801520c:	d1d6      	bne.n	80151bc <_vfiprintf_r+0x1bc>
 801520e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015210:	07d9      	lsls	r1, r3, #31
 8015212:	d405      	bmi.n	8015220 <_vfiprintf_r+0x220>
 8015214:	89ab      	ldrh	r3, [r5, #12]
 8015216:	059a      	lsls	r2, r3, #22
 8015218:	d402      	bmi.n	8015220 <_vfiprintf_r+0x220>
 801521a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801521c:	f7ff fc53 	bl	8014ac6 <__retarget_lock_release_recursive>
 8015220:	89ab      	ldrh	r3, [r5, #12]
 8015222:	065b      	lsls	r3, r3, #25
 8015224:	f53f af12 	bmi.w	801504c <_vfiprintf_r+0x4c>
 8015228:	9809      	ldr	r0, [sp, #36]	; 0x24
 801522a:	e711      	b.n	8015050 <_vfiprintf_r+0x50>
 801522c:	ab03      	add	r3, sp, #12
 801522e:	9300      	str	r3, [sp, #0]
 8015230:	462a      	mov	r2, r5
 8015232:	4b09      	ldr	r3, [pc, #36]	; (8015258 <_vfiprintf_r+0x258>)
 8015234:	a904      	add	r1, sp, #16
 8015236:	4630      	mov	r0, r6
 8015238:	f000 f880 	bl	801533c <_printf_i>
 801523c:	e7e4      	b.n	8015208 <_vfiprintf_r+0x208>
 801523e:	bf00      	nop
 8015240:	08059c5c 	.word	0x08059c5c
 8015244:	08059c7c 	.word	0x08059c7c
 8015248:	08059c3c 	.word	0x08059c3c
 801524c:	08059c9c 	.word	0x08059c9c
 8015250:	08059ca6 	.word	0x08059ca6
 8015254:	00000000 	.word	0x00000000
 8015258:	08014fdb 	.word	0x08014fdb
 801525c:	08059ca2 	.word	0x08059ca2

08015260 <_printf_common>:
 8015260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015264:	4616      	mov	r6, r2
 8015266:	4699      	mov	r9, r3
 8015268:	688a      	ldr	r2, [r1, #8]
 801526a:	690b      	ldr	r3, [r1, #16]
 801526c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015270:	4293      	cmp	r3, r2
 8015272:	bfb8      	it	lt
 8015274:	4613      	movlt	r3, r2
 8015276:	6033      	str	r3, [r6, #0]
 8015278:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801527c:	4607      	mov	r7, r0
 801527e:	460c      	mov	r4, r1
 8015280:	b10a      	cbz	r2, 8015286 <_printf_common+0x26>
 8015282:	3301      	adds	r3, #1
 8015284:	6033      	str	r3, [r6, #0]
 8015286:	6823      	ldr	r3, [r4, #0]
 8015288:	0699      	lsls	r1, r3, #26
 801528a:	bf42      	ittt	mi
 801528c:	6833      	ldrmi	r3, [r6, #0]
 801528e:	3302      	addmi	r3, #2
 8015290:	6033      	strmi	r3, [r6, #0]
 8015292:	6825      	ldr	r5, [r4, #0]
 8015294:	f015 0506 	ands.w	r5, r5, #6
 8015298:	d106      	bne.n	80152a8 <_printf_common+0x48>
 801529a:	f104 0a19 	add.w	sl, r4, #25
 801529e:	68e3      	ldr	r3, [r4, #12]
 80152a0:	6832      	ldr	r2, [r6, #0]
 80152a2:	1a9b      	subs	r3, r3, r2
 80152a4:	42ab      	cmp	r3, r5
 80152a6:	dc26      	bgt.n	80152f6 <_printf_common+0x96>
 80152a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80152ac:	1e13      	subs	r3, r2, #0
 80152ae:	6822      	ldr	r2, [r4, #0]
 80152b0:	bf18      	it	ne
 80152b2:	2301      	movne	r3, #1
 80152b4:	0692      	lsls	r2, r2, #26
 80152b6:	d42b      	bmi.n	8015310 <_printf_common+0xb0>
 80152b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80152bc:	4649      	mov	r1, r9
 80152be:	4638      	mov	r0, r7
 80152c0:	47c0      	blx	r8
 80152c2:	3001      	adds	r0, #1
 80152c4:	d01e      	beq.n	8015304 <_printf_common+0xa4>
 80152c6:	6823      	ldr	r3, [r4, #0]
 80152c8:	68e5      	ldr	r5, [r4, #12]
 80152ca:	6832      	ldr	r2, [r6, #0]
 80152cc:	f003 0306 	and.w	r3, r3, #6
 80152d0:	2b04      	cmp	r3, #4
 80152d2:	bf08      	it	eq
 80152d4:	1aad      	subeq	r5, r5, r2
 80152d6:	68a3      	ldr	r3, [r4, #8]
 80152d8:	6922      	ldr	r2, [r4, #16]
 80152da:	bf0c      	ite	eq
 80152dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80152e0:	2500      	movne	r5, #0
 80152e2:	4293      	cmp	r3, r2
 80152e4:	bfc4      	itt	gt
 80152e6:	1a9b      	subgt	r3, r3, r2
 80152e8:	18ed      	addgt	r5, r5, r3
 80152ea:	2600      	movs	r6, #0
 80152ec:	341a      	adds	r4, #26
 80152ee:	42b5      	cmp	r5, r6
 80152f0:	d11a      	bne.n	8015328 <_printf_common+0xc8>
 80152f2:	2000      	movs	r0, #0
 80152f4:	e008      	b.n	8015308 <_printf_common+0xa8>
 80152f6:	2301      	movs	r3, #1
 80152f8:	4652      	mov	r2, sl
 80152fa:	4649      	mov	r1, r9
 80152fc:	4638      	mov	r0, r7
 80152fe:	47c0      	blx	r8
 8015300:	3001      	adds	r0, #1
 8015302:	d103      	bne.n	801530c <_printf_common+0xac>
 8015304:	f04f 30ff 	mov.w	r0, #4294967295
 8015308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801530c:	3501      	adds	r5, #1
 801530e:	e7c6      	b.n	801529e <_printf_common+0x3e>
 8015310:	18e1      	adds	r1, r4, r3
 8015312:	1c5a      	adds	r2, r3, #1
 8015314:	2030      	movs	r0, #48	; 0x30
 8015316:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801531a:	4422      	add	r2, r4
 801531c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015320:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015324:	3302      	adds	r3, #2
 8015326:	e7c7      	b.n	80152b8 <_printf_common+0x58>
 8015328:	2301      	movs	r3, #1
 801532a:	4622      	mov	r2, r4
 801532c:	4649      	mov	r1, r9
 801532e:	4638      	mov	r0, r7
 8015330:	47c0      	blx	r8
 8015332:	3001      	adds	r0, #1
 8015334:	d0e6      	beq.n	8015304 <_printf_common+0xa4>
 8015336:	3601      	adds	r6, #1
 8015338:	e7d9      	b.n	80152ee <_printf_common+0x8e>
	...

0801533c <_printf_i>:
 801533c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015340:	460c      	mov	r4, r1
 8015342:	4691      	mov	r9, r2
 8015344:	7e27      	ldrb	r7, [r4, #24]
 8015346:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015348:	2f78      	cmp	r7, #120	; 0x78
 801534a:	4680      	mov	r8, r0
 801534c:	469a      	mov	sl, r3
 801534e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015352:	d807      	bhi.n	8015364 <_printf_i+0x28>
 8015354:	2f62      	cmp	r7, #98	; 0x62
 8015356:	d80a      	bhi.n	801536e <_printf_i+0x32>
 8015358:	2f00      	cmp	r7, #0
 801535a:	f000 80d8 	beq.w	801550e <_printf_i+0x1d2>
 801535e:	2f58      	cmp	r7, #88	; 0x58
 8015360:	f000 80a3 	beq.w	80154aa <_printf_i+0x16e>
 8015364:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801536c:	e03a      	b.n	80153e4 <_printf_i+0xa8>
 801536e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015372:	2b15      	cmp	r3, #21
 8015374:	d8f6      	bhi.n	8015364 <_printf_i+0x28>
 8015376:	a001      	add	r0, pc, #4	; (adr r0, 801537c <_printf_i+0x40>)
 8015378:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801537c:	080153d5 	.word	0x080153d5
 8015380:	080153e9 	.word	0x080153e9
 8015384:	08015365 	.word	0x08015365
 8015388:	08015365 	.word	0x08015365
 801538c:	08015365 	.word	0x08015365
 8015390:	08015365 	.word	0x08015365
 8015394:	080153e9 	.word	0x080153e9
 8015398:	08015365 	.word	0x08015365
 801539c:	08015365 	.word	0x08015365
 80153a0:	08015365 	.word	0x08015365
 80153a4:	08015365 	.word	0x08015365
 80153a8:	080154f5 	.word	0x080154f5
 80153ac:	08015419 	.word	0x08015419
 80153b0:	080154d7 	.word	0x080154d7
 80153b4:	08015365 	.word	0x08015365
 80153b8:	08015365 	.word	0x08015365
 80153bc:	08015517 	.word	0x08015517
 80153c0:	08015365 	.word	0x08015365
 80153c4:	08015419 	.word	0x08015419
 80153c8:	08015365 	.word	0x08015365
 80153cc:	08015365 	.word	0x08015365
 80153d0:	080154df 	.word	0x080154df
 80153d4:	680b      	ldr	r3, [r1, #0]
 80153d6:	1d1a      	adds	r2, r3, #4
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	600a      	str	r2, [r1, #0]
 80153dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80153e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80153e4:	2301      	movs	r3, #1
 80153e6:	e0a3      	b.n	8015530 <_printf_i+0x1f4>
 80153e8:	6825      	ldr	r5, [r4, #0]
 80153ea:	6808      	ldr	r0, [r1, #0]
 80153ec:	062e      	lsls	r6, r5, #24
 80153ee:	f100 0304 	add.w	r3, r0, #4
 80153f2:	d50a      	bpl.n	801540a <_printf_i+0xce>
 80153f4:	6805      	ldr	r5, [r0, #0]
 80153f6:	600b      	str	r3, [r1, #0]
 80153f8:	2d00      	cmp	r5, #0
 80153fa:	da03      	bge.n	8015404 <_printf_i+0xc8>
 80153fc:	232d      	movs	r3, #45	; 0x2d
 80153fe:	426d      	negs	r5, r5
 8015400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015404:	485e      	ldr	r0, [pc, #376]	; (8015580 <_printf_i+0x244>)
 8015406:	230a      	movs	r3, #10
 8015408:	e019      	b.n	801543e <_printf_i+0x102>
 801540a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801540e:	6805      	ldr	r5, [r0, #0]
 8015410:	600b      	str	r3, [r1, #0]
 8015412:	bf18      	it	ne
 8015414:	b22d      	sxthne	r5, r5
 8015416:	e7ef      	b.n	80153f8 <_printf_i+0xbc>
 8015418:	680b      	ldr	r3, [r1, #0]
 801541a:	6825      	ldr	r5, [r4, #0]
 801541c:	1d18      	adds	r0, r3, #4
 801541e:	6008      	str	r0, [r1, #0]
 8015420:	0628      	lsls	r0, r5, #24
 8015422:	d501      	bpl.n	8015428 <_printf_i+0xec>
 8015424:	681d      	ldr	r5, [r3, #0]
 8015426:	e002      	b.n	801542e <_printf_i+0xf2>
 8015428:	0669      	lsls	r1, r5, #25
 801542a:	d5fb      	bpl.n	8015424 <_printf_i+0xe8>
 801542c:	881d      	ldrh	r5, [r3, #0]
 801542e:	4854      	ldr	r0, [pc, #336]	; (8015580 <_printf_i+0x244>)
 8015430:	2f6f      	cmp	r7, #111	; 0x6f
 8015432:	bf0c      	ite	eq
 8015434:	2308      	moveq	r3, #8
 8015436:	230a      	movne	r3, #10
 8015438:	2100      	movs	r1, #0
 801543a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801543e:	6866      	ldr	r6, [r4, #4]
 8015440:	60a6      	str	r6, [r4, #8]
 8015442:	2e00      	cmp	r6, #0
 8015444:	bfa2      	ittt	ge
 8015446:	6821      	ldrge	r1, [r4, #0]
 8015448:	f021 0104 	bicge.w	r1, r1, #4
 801544c:	6021      	strge	r1, [r4, #0]
 801544e:	b90d      	cbnz	r5, 8015454 <_printf_i+0x118>
 8015450:	2e00      	cmp	r6, #0
 8015452:	d04d      	beq.n	80154f0 <_printf_i+0x1b4>
 8015454:	4616      	mov	r6, r2
 8015456:	fbb5 f1f3 	udiv	r1, r5, r3
 801545a:	fb03 5711 	mls	r7, r3, r1, r5
 801545e:	5dc7      	ldrb	r7, [r0, r7]
 8015460:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015464:	462f      	mov	r7, r5
 8015466:	42bb      	cmp	r3, r7
 8015468:	460d      	mov	r5, r1
 801546a:	d9f4      	bls.n	8015456 <_printf_i+0x11a>
 801546c:	2b08      	cmp	r3, #8
 801546e:	d10b      	bne.n	8015488 <_printf_i+0x14c>
 8015470:	6823      	ldr	r3, [r4, #0]
 8015472:	07df      	lsls	r7, r3, #31
 8015474:	d508      	bpl.n	8015488 <_printf_i+0x14c>
 8015476:	6923      	ldr	r3, [r4, #16]
 8015478:	6861      	ldr	r1, [r4, #4]
 801547a:	4299      	cmp	r1, r3
 801547c:	bfde      	ittt	le
 801547e:	2330      	movle	r3, #48	; 0x30
 8015480:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015484:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015488:	1b92      	subs	r2, r2, r6
 801548a:	6122      	str	r2, [r4, #16]
 801548c:	f8cd a000 	str.w	sl, [sp]
 8015490:	464b      	mov	r3, r9
 8015492:	aa03      	add	r2, sp, #12
 8015494:	4621      	mov	r1, r4
 8015496:	4640      	mov	r0, r8
 8015498:	f7ff fee2 	bl	8015260 <_printf_common>
 801549c:	3001      	adds	r0, #1
 801549e:	d14c      	bne.n	801553a <_printf_i+0x1fe>
 80154a0:	f04f 30ff 	mov.w	r0, #4294967295
 80154a4:	b004      	add	sp, #16
 80154a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154aa:	4835      	ldr	r0, [pc, #212]	; (8015580 <_printf_i+0x244>)
 80154ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80154b0:	6823      	ldr	r3, [r4, #0]
 80154b2:	680e      	ldr	r6, [r1, #0]
 80154b4:	061f      	lsls	r7, r3, #24
 80154b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80154ba:	600e      	str	r6, [r1, #0]
 80154bc:	d514      	bpl.n	80154e8 <_printf_i+0x1ac>
 80154be:	07d9      	lsls	r1, r3, #31
 80154c0:	bf44      	itt	mi
 80154c2:	f043 0320 	orrmi.w	r3, r3, #32
 80154c6:	6023      	strmi	r3, [r4, #0]
 80154c8:	b91d      	cbnz	r5, 80154d2 <_printf_i+0x196>
 80154ca:	6823      	ldr	r3, [r4, #0]
 80154cc:	f023 0320 	bic.w	r3, r3, #32
 80154d0:	6023      	str	r3, [r4, #0]
 80154d2:	2310      	movs	r3, #16
 80154d4:	e7b0      	b.n	8015438 <_printf_i+0xfc>
 80154d6:	6823      	ldr	r3, [r4, #0]
 80154d8:	f043 0320 	orr.w	r3, r3, #32
 80154dc:	6023      	str	r3, [r4, #0]
 80154de:	2378      	movs	r3, #120	; 0x78
 80154e0:	4828      	ldr	r0, [pc, #160]	; (8015584 <_printf_i+0x248>)
 80154e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80154e6:	e7e3      	b.n	80154b0 <_printf_i+0x174>
 80154e8:	065e      	lsls	r6, r3, #25
 80154ea:	bf48      	it	mi
 80154ec:	b2ad      	uxthmi	r5, r5
 80154ee:	e7e6      	b.n	80154be <_printf_i+0x182>
 80154f0:	4616      	mov	r6, r2
 80154f2:	e7bb      	b.n	801546c <_printf_i+0x130>
 80154f4:	680b      	ldr	r3, [r1, #0]
 80154f6:	6826      	ldr	r6, [r4, #0]
 80154f8:	6960      	ldr	r0, [r4, #20]
 80154fa:	1d1d      	adds	r5, r3, #4
 80154fc:	600d      	str	r5, [r1, #0]
 80154fe:	0635      	lsls	r5, r6, #24
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	d501      	bpl.n	8015508 <_printf_i+0x1cc>
 8015504:	6018      	str	r0, [r3, #0]
 8015506:	e002      	b.n	801550e <_printf_i+0x1d2>
 8015508:	0671      	lsls	r1, r6, #25
 801550a:	d5fb      	bpl.n	8015504 <_printf_i+0x1c8>
 801550c:	8018      	strh	r0, [r3, #0]
 801550e:	2300      	movs	r3, #0
 8015510:	6123      	str	r3, [r4, #16]
 8015512:	4616      	mov	r6, r2
 8015514:	e7ba      	b.n	801548c <_printf_i+0x150>
 8015516:	680b      	ldr	r3, [r1, #0]
 8015518:	1d1a      	adds	r2, r3, #4
 801551a:	600a      	str	r2, [r1, #0]
 801551c:	681e      	ldr	r6, [r3, #0]
 801551e:	6862      	ldr	r2, [r4, #4]
 8015520:	2100      	movs	r1, #0
 8015522:	4630      	mov	r0, r6
 8015524:	f7ea fe7c 	bl	8000220 <memchr>
 8015528:	b108      	cbz	r0, 801552e <_printf_i+0x1f2>
 801552a:	1b80      	subs	r0, r0, r6
 801552c:	6060      	str	r0, [r4, #4]
 801552e:	6863      	ldr	r3, [r4, #4]
 8015530:	6123      	str	r3, [r4, #16]
 8015532:	2300      	movs	r3, #0
 8015534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015538:	e7a8      	b.n	801548c <_printf_i+0x150>
 801553a:	6923      	ldr	r3, [r4, #16]
 801553c:	4632      	mov	r2, r6
 801553e:	4649      	mov	r1, r9
 8015540:	4640      	mov	r0, r8
 8015542:	47d0      	blx	sl
 8015544:	3001      	adds	r0, #1
 8015546:	d0ab      	beq.n	80154a0 <_printf_i+0x164>
 8015548:	6823      	ldr	r3, [r4, #0]
 801554a:	079b      	lsls	r3, r3, #30
 801554c:	d413      	bmi.n	8015576 <_printf_i+0x23a>
 801554e:	68e0      	ldr	r0, [r4, #12]
 8015550:	9b03      	ldr	r3, [sp, #12]
 8015552:	4298      	cmp	r0, r3
 8015554:	bfb8      	it	lt
 8015556:	4618      	movlt	r0, r3
 8015558:	e7a4      	b.n	80154a4 <_printf_i+0x168>
 801555a:	2301      	movs	r3, #1
 801555c:	4632      	mov	r2, r6
 801555e:	4649      	mov	r1, r9
 8015560:	4640      	mov	r0, r8
 8015562:	47d0      	blx	sl
 8015564:	3001      	adds	r0, #1
 8015566:	d09b      	beq.n	80154a0 <_printf_i+0x164>
 8015568:	3501      	adds	r5, #1
 801556a:	68e3      	ldr	r3, [r4, #12]
 801556c:	9903      	ldr	r1, [sp, #12]
 801556e:	1a5b      	subs	r3, r3, r1
 8015570:	42ab      	cmp	r3, r5
 8015572:	dcf2      	bgt.n	801555a <_printf_i+0x21e>
 8015574:	e7eb      	b.n	801554e <_printf_i+0x212>
 8015576:	2500      	movs	r5, #0
 8015578:	f104 0619 	add.w	r6, r4, #25
 801557c:	e7f5      	b.n	801556a <_printf_i+0x22e>
 801557e:	bf00      	nop
 8015580:	08059cad 	.word	0x08059cad
 8015584:	08059cbe 	.word	0x08059cbe

08015588 <_sbrk_r>:
 8015588:	b538      	push	{r3, r4, r5, lr}
 801558a:	4d06      	ldr	r5, [pc, #24]	; (80155a4 <_sbrk_r+0x1c>)
 801558c:	2300      	movs	r3, #0
 801558e:	4604      	mov	r4, r0
 8015590:	4608      	mov	r0, r1
 8015592:	602b      	str	r3, [r5, #0]
 8015594:	f7ec fb4e 	bl	8001c34 <_sbrk>
 8015598:	1c43      	adds	r3, r0, #1
 801559a:	d102      	bne.n	80155a2 <_sbrk_r+0x1a>
 801559c:	682b      	ldr	r3, [r5, #0]
 801559e:	b103      	cbz	r3, 80155a2 <_sbrk_r+0x1a>
 80155a0:	6023      	str	r3, [r4, #0]
 80155a2:	bd38      	pop	{r3, r4, r5, pc}
 80155a4:	200075ec 	.word	0x200075ec

080155a8 <__sread>:
 80155a8:	b510      	push	{r4, lr}
 80155aa:	460c      	mov	r4, r1
 80155ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155b0:	f000 f8ce 	bl	8015750 <_read_r>
 80155b4:	2800      	cmp	r0, #0
 80155b6:	bfab      	itete	ge
 80155b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80155ba:	89a3      	ldrhlt	r3, [r4, #12]
 80155bc:	181b      	addge	r3, r3, r0
 80155be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80155c2:	bfac      	ite	ge
 80155c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80155c6:	81a3      	strhlt	r3, [r4, #12]
 80155c8:	bd10      	pop	{r4, pc}

080155ca <__swrite>:
 80155ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155ce:	461f      	mov	r7, r3
 80155d0:	898b      	ldrh	r3, [r1, #12]
 80155d2:	05db      	lsls	r3, r3, #23
 80155d4:	4605      	mov	r5, r0
 80155d6:	460c      	mov	r4, r1
 80155d8:	4616      	mov	r6, r2
 80155da:	d505      	bpl.n	80155e8 <__swrite+0x1e>
 80155dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155e0:	2302      	movs	r3, #2
 80155e2:	2200      	movs	r2, #0
 80155e4:	f000 f870 	bl	80156c8 <_lseek_r>
 80155e8:	89a3      	ldrh	r3, [r4, #12]
 80155ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80155ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80155f2:	81a3      	strh	r3, [r4, #12]
 80155f4:	4632      	mov	r2, r6
 80155f6:	463b      	mov	r3, r7
 80155f8:	4628      	mov	r0, r5
 80155fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80155fe:	f000 b817 	b.w	8015630 <_write_r>

08015602 <__sseek>:
 8015602:	b510      	push	{r4, lr}
 8015604:	460c      	mov	r4, r1
 8015606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801560a:	f000 f85d 	bl	80156c8 <_lseek_r>
 801560e:	1c43      	adds	r3, r0, #1
 8015610:	89a3      	ldrh	r3, [r4, #12]
 8015612:	bf15      	itete	ne
 8015614:	6560      	strne	r0, [r4, #84]	; 0x54
 8015616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801561a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801561e:	81a3      	strheq	r3, [r4, #12]
 8015620:	bf18      	it	ne
 8015622:	81a3      	strhne	r3, [r4, #12]
 8015624:	bd10      	pop	{r4, pc}

08015626 <__sclose>:
 8015626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801562a:	f000 b81b 	b.w	8015664 <_close_r>
	...

08015630 <_write_r>:
 8015630:	b538      	push	{r3, r4, r5, lr}
 8015632:	4d07      	ldr	r5, [pc, #28]	; (8015650 <_write_r+0x20>)
 8015634:	4604      	mov	r4, r0
 8015636:	4608      	mov	r0, r1
 8015638:	4611      	mov	r1, r2
 801563a:	2200      	movs	r2, #0
 801563c:	602a      	str	r2, [r5, #0]
 801563e:	461a      	mov	r2, r3
 8015640:	f7eb f87c 	bl	800073c <_write>
 8015644:	1c43      	adds	r3, r0, #1
 8015646:	d102      	bne.n	801564e <_write_r+0x1e>
 8015648:	682b      	ldr	r3, [r5, #0]
 801564a:	b103      	cbz	r3, 801564e <_write_r+0x1e>
 801564c:	6023      	str	r3, [r4, #0]
 801564e:	bd38      	pop	{r3, r4, r5, pc}
 8015650:	200075ec 	.word	0x200075ec

08015654 <abort>:
 8015654:	b508      	push	{r3, lr}
 8015656:	2006      	movs	r0, #6
 8015658:	f000 f8b4 	bl	80157c4 <raise>
 801565c:	2001      	movs	r0, #1
 801565e:	f7ec fa8d 	bl	8001b7c <_exit>
	...

08015664 <_close_r>:
 8015664:	b538      	push	{r3, r4, r5, lr}
 8015666:	4d06      	ldr	r5, [pc, #24]	; (8015680 <_close_r+0x1c>)
 8015668:	2300      	movs	r3, #0
 801566a:	4604      	mov	r4, r0
 801566c:	4608      	mov	r0, r1
 801566e:	602b      	str	r3, [r5, #0]
 8015670:	f7ec faab 	bl	8001bca <_close>
 8015674:	1c43      	adds	r3, r0, #1
 8015676:	d102      	bne.n	801567e <_close_r+0x1a>
 8015678:	682b      	ldr	r3, [r5, #0]
 801567a:	b103      	cbz	r3, 801567e <_close_r+0x1a>
 801567c:	6023      	str	r3, [r4, #0]
 801567e:	bd38      	pop	{r3, r4, r5, pc}
 8015680:	200075ec 	.word	0x200075ec

08015684 <_fstat_r>:
 8015684:	b538      	push	{r3, r4, r5, lr}
 8015686:	4d07      	ldr	r5, [pc, #28]	; (80156a4 <_fstat_r+0x20>)
 8015688:	2300      	movs	r3, #0
 801568a:	4604      	mov	r4, r0
 801568c:	4608      	mov	r0, r1
 801568e:	4611      	mov	r1, r2
 8015690:	602b      	str	r3, [r5, #0]
 8015692:	f7ec faa6 	bl	8001be2 <_fstat>
 8015696:	1c43      	adds	r3, r0, #1
 8015698:	d102      	bne.n	80156a0 <_fstat_r+0x1c>
 801569a:	682b      	ldr	r3, [r5, #0]
 801569c:	b103      	cbz	r3, 80156a0 <_fstat_r+0x1c>
 801569e:	6023      	str	r3, [r4, #0]
 80156a0:	bd38      	pop	{r3, r4, r5, pc}
 80156a2:	bf00      	nop
 80156a4:	200075ec 	.word	0x200075ec

080156a8 <_isatty_r>:
 80156a8:	b538      	push	{r3, r4, r5, lr}
 80156aa:	4d06      	ldr	r5, [pc, #24]	; (80156c4 <_isatty_r+0x1c>)
 80156ac:	2300      	movs	r3, #0
 80156ae:	4604      	mov	r4, r0
 80156b0:	4608      	mov	r0, r1
 80156b2:	602b      	str	r3, [r5, #0]
 80156b4:	f7ec faa5 	bl	8001c02 <_isatty>
 80156b8:	1c43      	adds	r3, r0, #1
 80156ba:	d102      	bne.n	80156c2 <_isatty_r+0x1a>
 80156bc:	682b      	ldr	r3, [r5, #0]
 80156be:	b103      	cbz	r3, 80156c2 <_isatty_r+0x1a>
 80156c0:	6023      	str	r3, [r4, #0]
 80156c2:	bd38      	pop	{r3, r4, r5, pc}
 80156c4:	200075ec 	.word	0x200075ec

080156c8 <_lseek_r>:
 80156c8:	b538      	push	{r3, r4, r5, lr}
 80156ca:	4d07      	ldr	r5, [pc, #28]	; (80156e8 <_lseek_r+0x20>)
 80156cc:	4604      	mov	r4, r0
 80156ce:	4608      	mov	r0, r1
 80156d0:	4611      	mov	r1, r2
 80156d2:	2200      	movs	r2, #0
 80156d4:	602a      	str	r2, [r5, #0]
 80156d6:	461a      	mov	r2, r3
 80156d8:	f7ec fa9e 	bl	8001c18 <_lseek>
 80156dc:	1c43      	adds	r3, r0, #1
 80156de:	d102      	bne.n	80156e6 <_lseek_r+0x1e>
 80156e0:	682b      	ldr	r3, [r5, #0]
 80156e2:	b103      	cbz	r3, 80156e6 <_lseek_r+0x1e>
 80156e4:	6023      	str	r3, [r4, #0]
 80156e6:	bd38      	pop	{r3, r4, r5, pc}
 80156e8:	200075ec 	.word	0x200075ec

080156ec <__malloc_lock>:
 80156ec:	4801      	ldr	r0, [pc, #4]	; (80156f4 <__malloc_lock+0x8>)
 80156ee:	f7ff b9e9 	b.w	8014ac4 <__retarget_lock_acquire_recursive>
 80156f2:	bf00      	nop
 80156f4:	200075f4 	.word	0x200075f4

080156f8 <__malloc_unlock>:
 80156f8:	4801      	ldr	r0, [pc, #4]	; (8015700 <__malloc_unlock+0x8>)
 80156fa:	f7ff b9e4 	b.w	8014ac6 <__retarget_lock_release_recursive>
 80156fe:	bf00      	nop
 8015700:	200075f4 	.word	0x200075f4

08015704 <_realloc_r>:
 8015704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015706:	4607      	mov	r7, r0
 8015708:	4614      	mov	r4, r2
 801570a:	460e      	mov	r6, r1
 801570c:	b921      	cbnz	r1, 8015718 <_realloc_r+0x14>
 801570e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015712:	4611      	mov	r1, r2
 8015714:	f7ff ba94 	b.w	8014c40 <_malloc_r>
 8015718:	b922      	cbnz	r2, 8015724 <_realloc_r+0x20>
 801571a:	f7ff fa41 	bl	8014ba0 <_free_r>
 801571e:	4625      	mov	r5, r4
 8015720:	4628      	mov	r0, r5
 8015722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015724:	f000 f86a 	bl	80157fc <_malloc_usable_size_r>
 8015728:	42a0      	cmp	r0, r4
 801572a:	d20f      	bcs.n	801574c <_realloc_r+0x48>
 801572c:	4621      	mov	r1, r4
 801572e:	4638      	mov	r0, r7
 8015730:	f7ff fa86 	bl	8014c40 <_malloc_r>
 8015734:	4605      	mov	r5, r0
 8015736:	2800      	cmp	r0, #0
 8015738:	d0f2      	beq.n	8015720 <_realloc_r+0x1c>
 801573a:	4631      	mov	r1, r6
 801573c:	4622      	mov	r2, r4
 801573e:	f7fe fdfb 	bl	8014338 <memcpy>
 8015742:	4631      	mov	r1, r6
 8015744:	4638      	mov	r0, r7
 8015746:	f7ff fa2b 	bl	8014ba0 <_free_r>
 801574a:	e7e9      	b.n	8015720 <_realloc_r+0x1c>
 801574c:	4635      	mov	r5, r6
 801574e:	e7e7      	b.n	8015720 <_realloc_r+0x1c>

08015750 <_read_r>:
 8015750:	b538      	push	{r3, r4, r5, lr}
 8015752:	4d07      	ldr	r5, [pc, #28]	; (8015770 <_read_r+0x20>)
 8015754:	4604      	mov	r4, r0
 8015756:	4608      	mov	r0, r1
 8015758:	4611      	mov	r1, r2
 801575a:	2200      	movs	r2, #0
 801575c:	602a      	str	r2, [r5, #0]
 801575e:	461a      	mov	r2, r3
 8015760:	f7ec fa16 	bl	8001b90 <_read>
 8015764:	1c43      	adds	r3, r0, #1
 8015766:	d102      	bne.n	801576e <_read_r+0x1e>
 8015768:	682b      	ldr	r3, [r5, #0]
 801576a:	b103      	cbz	r3, 801576e <_read_r+0x1e>
 801576c:	6023      	str	r3, [r4, #0]
 801576e:	bd38      	pop	{r3, r4, r5, pc}
 8015770:	200075ec 	.word	0x200075ec

08015774 <_raise_r>:
 8015774:	291f      	cmp	r1, #31
 8015776:	b538      	push	{r3, r4, r5, lr}
 8015778:	4604      	mov	r4, r0
 801577a:	460d      	mov	r5, r1
 801577c:	d904      	bls.n	8015788 <_raise_r+0x14>
 801577e:	2316      	movs	r3, #22
 8015780:	6003      	str	r3, [r0, #0]
 8015782:	f04f 30ff 	mov.w	r0, #4294967295
 8015786:	bd38      	pop	{r3, r4, r5, pc}
 8015788:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801578a:	b112      	cbz	r2, 8015792 <_raise_r+0x1e>
 801578c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015790:	b94b      	cbnz	r3, 80157a6 <_raise_r+0x32>
 8015792:	4620      	mov	r0, r4
 8015794:	f000 f830 	bl	80157f8 <_getpid_r>
 8015798:	462a      	mov	r2, r5
 801579a:	4601      	mov	r1, r0
 801579c:	4620      	mov	r0, r4
 801579e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80157a2:	f000 b817 	b.w	80157d4 <_kill_r>
 80157a6:	2b01      	cmp	r3, #1
 80157a8:	d00a      	beq.n	80157c0 <_raise_r+0x4c>
 80157aa:	1c59      	adds	r1, r3, #1
 80157ac:	d103      	bne.n	80157b6 <_raise_r+0x42>
 80157ae:	2316      	movs	r3, #22
 80157b0:	6003      	str	r3, [r0, #0]
 80157b2:	2001      	movs	r0, #1
 80157b4:	e7e7      	b.n	8015786 <_raise_r+0x12>
 80157b6:	2400      	movs	r4, #0
 80157b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80157bc:	4628      	mov	r0, r5
 80157be:	4798      	blx	r3
 80157c0:	2000      	movs	r0, #0
 80157c2:	e7e0      	b.n	8015786 <_raise_r+0x12>

080157c4 <raise>:
 80157c4:	4b02      	ldr	r3, [pc, #8]	; (80157d0 <raise+0xc>)
 80157c6:	4601      	mov	r1, r0
 80157c8:	6818      	ldr	r0, [r3, #0]
 80157ca:	f7ff bfd3 	b.w	8015774 <_raise_r>
 80157ce:	bf00      	nop
 80157d0:	20000048 	.word	0x20000048

080157d4 <_kill_r>:
 80157d4:	b538      	push	{r3, r4, r5, lr}
 80157d6:	4d07      	ldr	r5, [pc, #28]	; (80157f4 <_kill_r+0x20>)
 80157d8:	2300      	movs	r3, #0
 80157da:	4604      	mov	r4, r0
 80157dc:	4608      	mov	r0, r1
 80157de:	4611      	mov	r1, r2
 80157e0:	602b      	str	r3, [r5, #0]
 80157e2:	f7ec f9b9 	bl	8001b58 <_kill>
 80157e6:	1c43      	adds	r3, r0, #1
 80157e8:	d102      	bne.n	80157f0 <_kill_r+0x1c>
 80157ea:	682b      	ldr	r3, [r5, #0]
 80157ec:	b103      	cbz	r3, 80157f0 <_kill_r+0x1c>
 80157ee:	6023      	str	r3, [r4, #0]
 80157f0:	bd38      	pop	{r3, r4, r5, pc}
 80157f2:	bf00      	nop
 80157f4:	200075ec 	.word	0x200075ec

080157f8 <_getpid_r>:
 80157f8:	f7ec b9a6 	b.w	8001b48 <_getpid>

080157fc <_malloc_usable_size_r>:
 80157fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015800:	1f18      	subs	r0, r3, #4
 8015802:	2b00      	cmp	r3, #0
 8015804:	bfbc      	itt	lt
 8015806:	580b      	ldrlt	r3, [r1, r0]
 8015808:	18c0      	addlt	r0, r0, r3
 801580a:	4770      	bx	lr

0801580c <_init>:
 801580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801580e:	bf00      	nop
 8015810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015812:	bc08      	pop	{r3}
 8015814:	469e      	mov	lr, r3
 8015816:	4770      	bx	lr

08015818 <_fini>:
 8015818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801581a:	bf00      	nop
 801581c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801581e:	bc08      	pop	{r3}
 8015820:	469e      	mov	lr, r3
 8015822:	4770      	bx	lr
